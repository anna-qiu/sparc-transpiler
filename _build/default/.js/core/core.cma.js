(function(globalThis)
   {"use strict";
    var
     runtime=globalThis.jsoo_runtime,
     caml_ba_get_1=runtime.caml_ba_get_1,
     caml_ba_set_1=runtime.caml_ba_set_1,
     caml_bytes_unsafe_set=runtime.caml_bytes_unsafe_set,
     caml_check_bound=runtime.caml_check_bound,
     caml_compare=runtime.caml_compare,
     caml_div=runtime.caml_div,
     caml_equal=runtime.caml_equal,
     caml_fresh_oo_id=runtime.caml_fresh_oo_id,
     caml_greaterequal=runtime.caml_greaterequal,
     caml_greaterthan=runtime.caml_greaterthan,
     caml_int_compare=runtime.caml_int_compare,
     caml_lessequal=runtime.caml_lessequal,
     caml_lessthan=runtime.caml_lessthan,
     caml_list_of_js_array=runtime.caml_list_of_js_array,
     caml_log10_float=runtime.caml_log10_float,
     caml_ml_bytes_length=runtime.caml_ml_bytes_length,
     caml_ml_string_length=runtime.caml_ml_string_length,
     caml_mul=runtime.caml_mul,
     caml_notequal=runtime.caml_notequal,
     caml_obj_tag=runtime.caml_obj_tag,
     caml_register_global=runtime.caml_register_global,
     caml_string_compare=runtime.caml_string_compare,
     caml_string_get=runtime.caml_string_get,
     caml_string_notequal=runtime.caml_string_notequal,
     caml_string_of_jsbytes=runtime.caml_string_of_jsbytes,
     caml_string_unsafe_get=runtime.caml_string_unsafe_get,
     caml_sys_argv=runtime.caml_sys_argv,
     caml_trampoline=runtime.caml_trampoline,
     caml_trampoline_return=runtime.caml_trampoline_return,
     caml_update_dummy=runtime.caml_update_dummy,
     caml_wrap_exception=runtime.caml_wrap_exception;
    function caml_call1(f,a0)
     {return f.length == 1?f(a0):runtime.caml_call_gen(f,[a0])}
    function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):runtime.caml_call_gen(f,[a0,a1])}
    function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):runtime.caml_call_gen(f,[a0,a1,a2])}
    function caml_call4(f,a0,a1,a2,a3)
     {return f.length == 4
              ?f(a0,a1,a2,a3)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3])}
    function caml_call5(f,a0,a1,a2,a3,a4)
     {return f.length == 5
              ?f(a0,a1,a2,a3,a4)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4])}
    function caml_call6(f,a0,a1,a2,a3,a4,a5)
     {return f.length == 6
              ?f(a0,a1,a2,a3,a4,a5)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5])}
    function caml_call7(f,a0,a1,a2,a3,a4,a5,a6)
     {return f.length == 7
              ?f(a0,a1,a2,a3,a4,a5,a6)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6])}
    function caml_call8(f,a0,a1,a2,a3,a4,a5,a6,a7)
     {return f.length == 8
              ?f(a0,a1,a2,a3,a4,a5,a6,a7)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7])}
    function caml_call9(f,a0,a1,a2,a3,a4,a5,a6,a7,a8)
     {return f.length == 9
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8)
              :runtime.caml_call_gen(f,[a0,a1,a2,a3,a4,a5,a6,a7,a8])}
    function caml_call17
     (f,a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)
     {return f.length == 17
              ?f(a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16)
              :runtime.caml_call_gen
                (f,
                 [a0,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15,a16])}
    var
     global_data=runtime.caml_get_global_data(),
     cst_sexp_opaque$0=caml_string_of_jsbytes("sexp_opaque"),
     cst_Core_Import=caml_string_of_jsbytes("Core__Import"),
     cst_core=caml_string_of_jsbytes("core"),
     cst_core_src_import_ml=caml_string_of_jsbytes("core/src/import.ml"),
     cst=caml_string_of_jsbytes(""),
     cst_core$0=caml_string_of_jsbytes("core"),
     cst_a=caml_string_of_jsbytes("a"),
     cst_core_src_import_ml_75_24=
      caml_string_of_jsbytes("core/src/import.ml:75:24"),
     cst_a$0=caml_string_of_jsbytes("a"),
     cst_sexp_opaque=caml_string_of_jsbytes("sexp_opaque"),
     cst_core_src_import_ml_75_2=
      caml_string_of_jsbytes("core/src/import.ml:75:2"),
     name=caml_string_of_jsbytes("core/src/import.ml.sexp_opaque"),
     cst_TESTING_FRAMEWORK=caml_string_of_jsbytes("TESTING_FRAMEWORK"),
     cst_core$1=caml_string_of_jsbytes("core"),
     cst_Core_Import$0=caml_string_of_jsbytes("Core__Import"),
     cst_Sexpable_Of_stringable_t_o=
      caml_string_of_jsbytes
       ("Sexpable.Of_stringable.t_of_sexp expected an atom, but got a list"),
     cst_Core_Sexpable=caml_string_of_jsbytes("Core__Sexpable"),
     cst_core$2=caml_string_of_jsbytes("core"),
     cst_core_src_sexpable_ml=caml_string_of_jsbytes("core/src/sexpable.ml"),
     cst$0=caml_string_of_jsbytes(""),
     cst_core$3=caml_string_of_jsbytes("core"),
     cst_core$4=caml_string_of_jsbytes("core"),
     cst_Core_Sexpable$0=caml_string_of_jsbytes("Core__Sexpable"),
     cst_Core_Binable_intf=caml_string_of_jsbytes("Core__Binable_intf"),
     cst_core$5=caml_string_of_jsbytes("core"),
     cst_core_src_binable_intf_ml=
      caml_string_of_jsbytes("core/src/binable_intf.ml"),
     cst$1=caml_string_of_jsbytes(""),
     cst_core$6=caml_string_of_jsbytes("core"),
     cst_core$7=caml_string_of_jsbytes("core"),
     cst_Core_Binable_intf$0=caml_string_of_jsbytes("Core__Binable_intf"),
     cst_bin_read_t_did_not_consume=
      caml_string_of_jsbytes("bin_read_t did not consume the entire buffer"),
     cst_t$7=caml_string_of_jsbytes("t"),
     cst_core_src_binable0_ml_136_1=
      caml_string_of_jsbytes("core/src/binable0.ml:136:10"),
     cst_t$8=caml_string_of_jsbytes("t"),
     cst_Of_binable$0=caml_string_of_jsbytes("Of_binable"),
     cst_t$5=caml_string_of_jsbytes("t"),
     cst_core_src_binable0_ml_117_1=
      caml_string_of_jsbytes("core/src/binable0.ml:117:10"),
     cst_t$6=caml_string_of_jsbytes("t"),
     cst_Of_binable=caml_string_of_jsbytes("Of_binable"),
     cst_core_src_binable0_ml_Stabl$0=
      caml_string_of_jsbytes("core/src/binable0.ml.Stable.Of_sexpable.V2.t"),
     cst_t$2=caml_string_of_jsbytes("t"),
     cst_List$0=caml_string_of_jsbytes("List"),
     cst_Atom$0=caml_string_of_jsbytes("Atom"),
     cst_t$3=caml_string_of_jsbytes("t"),
     cst_core_src_binable0_ml_100_1=
      caml_string_of_jsbytes("core/src/binable0.ml:100:10"),
     cst_t$4=caml_string_of_jsbytes("t"),
     cst_core_src_binable0_ml_Stabl=
      caml_string_of_jsbytes("core/src/binable0.ml.Stable.Of_sexpable.V1.t"),
     cst_t=caml_string_of_jsbytes("t"),
     cst_List=caml_string_of_jsbytes("List"),
     cst_Atom=caml_string_of_jsbytes("Atom"),
     cst_t$0=caml_string_of_jsbytes("t"),
     cst_core_src_binable0_ml_85_10=
      caml_string_of_jsbytes("core/src/binable0.ml:85:10"),
     cst_t$1=caml_string_of_jsbytes("t"),
     cst_Core_Binable0=caml_string_of_jsbytes("Core__Binable0"),
     cst_core$8=caml_string_of_jsbytes("core"),
     cst_core_src_binable0_ml=caml_string_of_jsbytes("core/src/binable0.ml"),
     cst$2=caml_string_of_jsbytes(""),
     cst_core$9=caml_string_of_jsbytes("core"),
     cst_core_src_binable0_ml$0=caml_string_of_jsbytes("core/src/binable0.ml"),
     cst$3=caml_string_of_jsbytes(""),
     cst_core$10=caml_string_of_jsbytes("core"),
     cst_Core_Binable0$0=caml_string_of_jsbytes("Core__Binable0"),
     cst_printf_used_after_collect_=
      caml_string_of_jsbytes
       ("[printf] used after [collect_to_string] returned"),
     cst_Core_Printf=caml_string_of_jsbytes("Core__Printf"),
     cst_core$11=caml_string_of_jsbytes("core"),
     cst_core_src_printf_ml=caml_string_of_jsbytes("core/src/printf.ml"),
     cst$4=caml_string_of_jsbytes(""),
     cst_core$12=caml_string_of_jsbytes("core"),
     cst_core$13=caml_string_of_jsbytes("core"),
     cst_Core_Printf$0=caml_string_of_jsbytes("Core__Printf"),
     cst_perms$0=caml_string_of_jsbytes("perms"),
     cst_t$30=caml_string_of_jsbytes("t"),
     cst_t$27=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_110_2=
      caml_string_of_jsbytes("core/src/perms.ml:110:2"),
     cst_t$28=caml_string_of_jsbytes("t"),
     cst_t$26=caml_string_of_jsbytes("t"),
     cst_a$3=caml_string_of_jsbytes("a"),
     cst_core_src_perms_ml_86_20=
      caml_string_of_jsbytes("core/src/perms.ml:86:20"),
     cst_a$4=caml_string_of_jsbytes("a"),
     cst_t$25=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_86_8=
      caml_string_of_jsbytes("core/src/perms.ml:86:8"),
     cst_Who_can_write$6=caml_string_of_jsbytes("Who_can_write"),
     cst_Who_can_write$7=caml_string_of_jsbytes("Who_can_write"),
     err$3=[2,caml_string_of_jsbytes("core/src/perms.ml.Types.Upper_bound.t")],
     cst_t$24=caml_string_of_jsbytes("t"),
     err$2=[2,caml_string_of_jsbytes("core/src/perms.ml.Types.Read_write.t")],
     cst_Who_can_write$3=caml_string_of_jsbytes("Who_can_write"),
     cst_Who_can_write$4=caml_string_of_jsbytes("Who_can_write"),
     err$1=[2,caml_string_of_jsbytes("core/src/perms.ml.Types.Immutable.t")],
     cst_Who_can_write$0=caml_string_of_jsbytes("Who_can_write"),
     cst_Who_can_write$1=caml_string_of_jsbytes("Who_can_write"),
     err$0=[2,caml_string_of_jsbytes("core/src/perms.ml.Types.Write.t")],
     cst_Read$0=caml_string_of_jsbytes("Read"),
     cst_Read$1=caml_string_of_jsbytes("Read"),
     err=[2,caml_string_of_jsbytes("core/src/perms.ml.Types.Read.t")],
     cst_hash_called_on_the_type_t_$0=
      caml_string_of_jsbytes
       ("hash called on the type t, which is abstract in an implementation."),
     cst_t$14=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_Types_Me$1=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Me.t"),
     cst_core_src_perms_ml_Types_Me$0=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Me.t"),
     cst_core_src_perms_ml_Types_Me=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Me.t"),
     cst_hash_called_on_the_type_t_=
      caml_string_of_jsbytes
       ("hash called on the type t, which is abstract in an implementation."),
     cst_t$11=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_Types_No$1=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Nobody.t"),
     cst_core_src_perms_ml_Types_No$0=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Nobody.t"),
     cst_core_src_perms_ml_Types_No=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Nobody.t"),
     cst_Core_Perms=caml_string_of_jsbytes("Core__Perms"),
     cst_core$14=caml_string_of_jsbytes("core"),
     cst_core_src_perms_ml=caml_string_of_jsbytes("core/src/perms.ml"),
     cst$5=caml_string_of_jsbytes(""),
     cst_core$15=caml_string_of_jsbytes("core"),
     cst_t$9=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_9_4=caml_string_of_jsbytes("core/src/perms.ml:9:4"),
     cst_t$10=caml_string_of_jsbytes("t"),
     error_source_004=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Nobody.t"),
     name$0=caml_string_of_jsbytes("Nobody"),
     cst_t$12=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_15_4=
      caml_string_of_jsbytes("core/src/perms.ml:15:4"),
     cst_t$13=caml_string_of_jsbytes("t"),
     error_source_009=caml_string_of_jsbytes("core/src/perms.ml.Types.Me.t"),
     name$1=caml_string_of_jsbytes("Me"),
     cst_Read=caml_string_of_jsbytes("Read"),
     cst_core_src_perms_ml_21_13=
      caml_string_of_jsbytes("core/src/perms.ml:21:13"),
     cst_t$15=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_21_4=
      caml_string_of_jsbytes("core/src/perms.ml:21:4"),
     cst_t$16=caml_string_of_jsbytes("t"),
     error_source_018=caml_string_of_jsbytes("core/src/perms.ml.Types.Read.t"),
     error_source_020=caml_string_of_jsbytes("core/src/perms.ml.Types.Read.t"),
     name$2=caml_string_of_jsbytes("Read"),
     cst_Who_can_write=caml_string_of_jsbytes("Who_can_write"),
     cst_core_src_perms_ml_27_13=
      caml_string_of_jsbytes("core/src/perms.ml:27:13"),
     cst_t$17=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_27_4=
      caml_string_of_jsbytes("core/src/perms.ml:27:4"),
     cst_t$18=caml_string_of_jsbytes("t"),
     error_source_033=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Write.t"),
     error_source_035=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Write.t"),
     name$3=caml_string_of_jsbytes("Write"),
     cst_Who_can_write$2=caml_string_of_jsbytes("Who_can_write"),
     cst_core_src_perms_ml_34_8=
      caml_string_of_jsbytes("core/src/perms.ml:34:8"),
     cst_core_src_perms_ml_34_6=
      caml_string_of_jsbytes("core/src/perms.ml:34:6"),
     cst_t$19=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_33_4=
      caml_string_of_jsbytes("core/src/perms.ml:33:4"),
     cst_t$20=caml_string_of_jsbytes("t"),
     error_source_051=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Immutable.t"),
     error_source_053=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Immutable.t"),
     name$4=caml_string_of_jsbytes("Immutable"),
     cst_core_src_perms_ml_45_8=
      caml_string_of_jsbytes("core/src/perms.ml:45:8"),
     cst_core_src_perms_ml_44_8=
      caml_string_of_jsbytes("core/src/perms.ml:44:8"),
     cst_core_src_perms_ml_44_6=
      caml_string_of_jsbytes("core/src/perms.ml:44:6"),
     cst_t$21=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_43_4=
      caml_string_of_jsbytes("core/src/perms.ml:43:4"),
     cst_t$22=caml_string_of_jsbytes("t"),
     error_source_064=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Read_write.t"),
     name$5=caml_string_of_jsbytes("Read_write"),
     cst_a$1=caml_string_of_jsbytes("a"),
     cst_core_src_perms_ml_55_26=
      caml_string_of_jsbytes("core/src/perms.ml:55:26"),
     cst_Who_can_write$5=caml_string_of_jsbytes("Who_can_write"),
     cst_core_src_perms_ml_54_8=
      caml_string_of_jsbytes("core/src/perms.ml:54:8"),
     cst_core_src_perms_ml_54_6=
      caml_string_of_jsbytes("core/src/perms.ml:54:6"),
     cst_a$2=caml_string_of_jsbytes("a"),
     cst_t$23=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_53_4=
      caml_string_of_jsbytes("core/src/perms.ml:53:4"),
     error_source_082=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Upper_bound.t"),
     error_source_084=
      caml_string_of_jsbytes("core/src/perms.ml.Types.Upper_bound.t"),
     name$6=caml_string_of_jsbytes("Upper_bound"),
     cst_nobody=caml_string_of_jsbytes("nobody"),
     cst_core_src_perms_ml_124_4=
      caml_string_of_jsbytes("core/src/perms.ml:124:4"),
     cst_nobody$0=caml_string_of_jsbytes("nobody"),
     cst_me=caml_string_of_jsbytes("me"),
     cst_core_src_perms_ml_125_4=
      caml_string_of_jsbytes("core/src/perms.ml:125:4"),
     cst_me$0=caml_string_of_jsbytes("me"),
     cst_a$5=caml_string_of_jsbytes("a"),
     cst_core_src_perms_ml_130_18=
      caml_string_of_jsbytes("core/src/perms.ml:130:18"),
     cst_a$6=caml_string_of_jsbytes("a"),
     cst_t$29=caml_string_of_jsbytes("t"),
     cst_core_src_perms_ml_130_6=
      caml_string_of_jsbytes("core/src/perms.ml:130:6"),
     cst_read=caml_string_of_jsbytes("read"),
     cst_core_src_perms_ml_137_4=
      caml_string_of_jsbytes("core/src/perms.ml:137:4"),
     cst_read$0=caml_string_of_jsbytes("read"),
     cst_immutable=caml_string_of_jsbytes("immutable"),
     cst_core_src_perms_ml_139_4=
      caml_string_of_jsbytes("core/src/perms.ml:139:4"),
     cst_immutable$0=caml_string_of_jsbytes("immutable"),
     cst_read_write=caml_string_of_jsbytes("read_write"),
     cst_core_src_perms_ml_140_4=
      caml_string_of_jsbytes("core/src/perms.ml:140:4"),
     cst_read_write$0=caml_string_of_jsbytes("read_write"),
     cst_a$7=caml_string_of_jsbytes("a"),
     cst_core_src_perms_ml_141_20=
      caml_string_of_jsbytes("core/src/perms.ml:141:20"),
     cst_a$8=caml_string_of_jsbytes("a"),
     cst_perms=caml_string_of_jsbytes("perms"),
     cst_core_src_perms_ml_141_4=
      caml_string_of_jsbytes("core/src/perms.ml:141:4"),
     cst_core$16=caml_string_of_jsbytes("core"),
     cst_Core_Perms$0=caml_string_of_jsbytes("Core__Perms"),
     cst_Core_Binary_searchable_int=
      caml_string_of_jsbytes("Core__Binary_searchable_intf"),
     cst_core$17=caml_string_of_jsbytes("core"),
     cst_core_src_binary_searchable=
      caml_string_of_jsbytes("core/src/binary_searchable_intf.ml"),
     cst$6=caml_string_of_jsbytes(""),
     cst_core$18=caml_string_of_jsbytes("core"),
     cst_core$19=caml_string_of_jsbytes("core"),
     cst_Core_Binary_searchable_int$0=
      caml_string_of_jsbytes("Core__Binary_searchable_intf"),
     cst_Core_Binary_searchable=
      caml_string_of_jsbytes("Core__Binary_searchable"),
     cst_core$20=caml_string_of_jsbytes("core"),
     cst_core_src_binary_searchable$0=
      caml_string_of_jsbytes("core/src/binary_searchable.ml"),
     cst$7=caml_string_of_jsbytes(""),
     cst_core$21=caml_string_of_jsbytes("core"),
     cst_core$22=caml_string_of_jsbytes("core"),
     cst_Core_Binary_searchable$0=
      caml_string_of_jsbytes("Core__Binary_searchable"),
     cst_Core_Blit_intf=caml_string_of_jsbytes("Core__Blit_intf"),
     cst_core$23=caml_string_of_jsbytes("core"),
     cst_core_src_blit_intf_ml=caml_string_of_jsbytes("core/src/blit_intf.ml"),
     cst$8=caml_string_of_jsbytes(""),
     cst_core$24=caml_string_of_jsbytes("core"),
     cst_core$25=caml_string_of_jsbytes("core"),
     cst_Core_Blit_intf$0=caml_string_of_jsbytes("Core__Blit_intf"),
     cst_Core_Blit=caml_string_of_jsbytes("Core__Blit"),
     cst_core$26=caml_string_of_jsbytes("core"),
     cst_core_src_blit_ml=caml_string_of_jsbytes("core/src/blit.ml"),
     cst$9=caml_string_of_jsbytes(""),
     cst_core$27=caml_string_of_jsbytes("core"),
     cst_core$28=caml_string_of_jsbytes("core"),
     cst_Core_Blit$0=caml_string_of_jsbytes("Core__Blit"),
     cst_Core_Comparator=caml_string_of_jsbytes("Core__Comparator"),
     cst_core$29=caml_string_of_jsbytes("core"),
     cst_core_src_comparator_ml=
      caml_string_of_jsbytes("core/src/comparator.ml"),
     cst$10=caml_string_of_jsbytes(""),
     cst_core$30=caml_string_of_jsbytes("core"),
     cst_core$31=caml_string_of_jsbytes("core"),
     cst_Core_Comparator$0=caml_string_of_jsbytes("Core__Comparator"),
     cst_Error$0=caml_string_of_jsbytes("Error"),
     cst_Ok$0=caml_string_of_jsbytes("Ok"),
     cst_error=caml_string_of_jsbytes("error"),
     cst_ok=caml_string_of_jsbytes("ok"),
     cst_Error$1=caml_string_of_jsbytes("Error"),
     cst_Ok$1=caml_string_of_jsbytes("Ok"),
     cst_error$0=caml_string_of_jsbytes("error"),
     cst_ok$0=caml_string_of_jsbytes("ok"),
     cst_core_src_result_ml_Stable_=
      caml_string_of_jsbytes("core/src/result.ml.Stable.V1.t"),
     cst_t$32=caml_string_of_jsbytes("t"),
     cst_Core_Result=caml_string_of_jsbytes("Core__Result"),
     cst_core$32=caml_string_of_jsbytes("core"),
     cst_core_src_result_ml=caml_string_of_jsbytes("core/src/result.ml"),
     cst$11=caml_string_of_jsbytes(""),
     cst_core$33=caml_string_of_jsbytes("core"),
     cst_b=caml_string_of_jsbytes("b"),
     cst_core_src_result_ml_8_17=
      caml_string_of_jsbytes("core/src/result.ml:8:17"),
     cst_Error=caml_string_of_jsbytes("Error"),
     cst_a$9=caml_string_of_jsbytes("a"),
     cst_core_src_result_ml_7_14=
      caml_string_of_jsbytes("core/src/result.ml:7:14"),
     cst_Ok=caml_string_of_jsbytes("Ok"),
     cst_b$0=caml_string_of_jsbytes("b"),
     cst_a$10=caml_string_of_jsbytes("a"),
     cst_t$31=caml_string_of_jsbytes("t"),
     cst_core_src_result_ml_6_4=
      caml_string_of_jsbytes("core/src/result.ml:6:4"),
     error_source_011=caml_string_of_jsbytes("core/src/result.ml.Stable.V1.t"),
     cst_t$33=caml_string_of_jsbytes("t"),
     cst_core_src_result_ml_19_4=
      caml_string_of_jsbytes("core/src/result.ml:19:4"),
     cst_t$34=caml_string_of_jsbytes("t"),
     tests=
      [0,
       [0,
        [0,caml_string_of_jsbytes("foo")],
        caml_string_of_jsbytes("(Ok foo)"),
        caml_string_of_jsbytes("\0\x03foo")],
       [0,
        [0,
         [1,7],
         caml_string_of_jsbytes("(Error 7)"),
         caml_string_of_jsbytes("\x01\x07")],
        0]],
     cst_core$34=caml_string_of_jsbytes("core"),
     cst_Core_Result$0=caml_string_of_jsbytes("Core__Result"),
     cst_Core_Stable_module_types=
      caml_string_of_jsbytes("Core__Stable_module_types"),
     cst_core$35=caml_string_of_jsbytes("core"),
     cst_core_src_stable_module_typ=
      caml_string_of_jsbytes("core/src/stable_module_types.ml"),
     cst$12=caml_string_of_jsbytes(""),
     cst_core$36=caml_string_of_jsbytes("core"),
     cst_core$37=caml_string_of_jsbytes("core"),
     cst_Core_Stable_module_types$0=
      caml_string_of_jsbytes("Core__Stable_module_types"),
     cst_Core_Stable_unit_test_intf=
      caml_string_of_jsbytes("Core__Stable_unit_test_intf"),
     cst_core$38=caml_string_of_jsbytes("core"),
     cst_core_src_stable_unit_test_=
      caml_string_of_jsbytes("core/src/stable_unit_test_intf.ml"),
     cst$13=caml_string_of_jsbytes(""),
     cst_core$39=caml_string_of_jsbytes("core"),
     cst_core$40=caml_string_of_jsbytes("core"),
     cst_Core_Stable_unit_test_intf$0=
      caml_string_of_jsbytes("Core__Stable_unit_test_intf"),
     cst_Core_Container_intf=caml_string_of_jsbytes("Core__Container_intf"),
     cst_core$41=caml_string_of_jsbytes("core"),
     cst_core_src_container_intf_ml=
      caml_string_of_jsbytes("core/src/container_intf.ml"),
     cst$14=caml_string_of_jsbytes(""),
     cst_core$42=caml_string_of_jsbytes("core"),
     cst_core$43=caml_string_of_jsbytes("core"),
     cst_Core_Container_intf$0=caml_string_of_jsbytes("Core__Container_intf"),
     cst_Core_Container=caml_string_of_jsbytes("Core__Container"),
     cst_core$44=caml_string_of_jsbytes("core"),
     cst_core_src_container_ml=caml_string_of_jsbytes("core/src/container.ml"),
     cst$15=caml_string_of_jsbytes(""),
     cst_core$45=caml_string_of_jsbytes("core"),
     cst_core$46=caml_string_of_jsbytes("core"),
     cst_Core_Container$0=caml_string_of_jsbytes("Core__Container"),
     cst_Core_Deprecate_pipe_bang=
      caml_string_of_jsbytes("Core__Deprecate_pipe_bang"),
     cst_core$47=caml_string_of_jsbytes("core"),
     cst_core_src_deprecate_pipe_ba=
      caml_string_of_jsbytes("core/src/deprecate_pipe_bang.ml"),
     cst$16=caml_string_of_jsbytes(""),
     cst_core$48=caml_string_of_jsbytes("core"),
     cst_core$49=caml_string_of_jsbytes("core"),
     cst_Core_Deprecate_pipe_bang$0=
      caml_string_of_jsbytes("Core__Deprecate_pipe_bang"),
     cst_Core_Fn=caml_string_of_jsbytes("Core__Fn"),
     cst_core$50=caml_string_of_jsbytes("core"),
     cst_core_src_fn_ml=caml_string_of_jsbytes("core/src/fn.ml"),
     cst$17=caml_string_of_jsbytes(""),
     cst_core$51=caml_string_of_jsbytes("core"),
     cst_core$52=caml_string_of_jsbytes("core"),
     cst_Core_Fn$0=caml_string_of_jsbytes("Core__Fn"),
     cst_Core_Ordered_collection_co=
      caml_string_of_jsbytes("Core__Ordered_collection_common"),
     cst_core$53=caml_string_of_jsbytes("core"),
     cst_core_src_ordered_collectio=
      caml_string_of_jsbytes("core/src/ordered_collection_common.ml"),
     cst$18=caml_string_of_jsbytes(""),
     cst_core$54=caml_string_of_jsbytes("core"),
     cst_core$55=caml_string_of_jsbytes("core"),
     cst_Core_Ordered_collection_co$0=
      caml_string_of_jsbytes("Core__Ordered_collection_common"),
     cst_core_src_sequence_ml_Merge=
      caml_string_of_jsbytes
       ("core/src/sequence.ml.Merge_with_duplicates_element.t"),
     cst_t$40=caml_string_of_jsbytes("t"),
     cst_core_src_sequence_ml_Step_=
      caml_string_of_jsbytes("core/src/sequence.ml.Step.t"),
     cst_t$38=caml_string_of_jsbytes("t"),
     cst_t$36=caml_string_of_jsbytes("t"),
     cst_Core_Sequence=caml_string_of_jsbytes("Core__Sequence"),
     cst_core$56=caml_string_of_jsbytes("core"),
     cst_core_src_sequence_ml=caml_string_of_jsbytes("core/src/sequence.ml"),
     cst$19=caml_string_of_jsbytes(""),
     cst_core$57=caml_string_of_jsbytes("core"),
     cst_a$11=caml_string_of_jsbytes("a"),
     cst_core_src_sequence_ml_6_18=
      caml_string_of_jsbytes("core/src/sequence.ml:6:18"),
     cst_a$12=caml_string_of_jsbytes("a"),
     cst_t$35=caml_string_of_jsbytes("t"),
     cst_core_src_sequence_ml_6_6=
      caml_string_of_jsbytes("core/src/sequence.ml:6:6"),
     cst_s=caml_string_of_jsbytes("s"),
     cst_core_src_sequence_ml_21_20=
      caml_string_of_jsbytes("core/src/sequence.ml:21:20"),
     cst_a$13=caml_string_of_jsbytes("a"),
     cst_core_src_sequence_ml_21_15=
      caml_string_of_jsbytes("core/src/sequence.ml:21:15"),
     cst_Yield=caml_string_of_jsbytes("Yield"),
     cst_s$0=caml_string_of_jsbytes("s"),
     cst_core_src_sequence_ml_20_14=
      caml_string_of_jsbytes("core/src/sequence.ml:20:14"),
     cst_Skip=caml_string_of_jsbytes("Skip"),
     cst_s$1=caml_string_of_jsbytes("s"),
     cst_a$14=caml_string_of_jsbytes("a"),
     cst_t$37=caml_string_of_jsbytes("t"),
     cst_core_src_sequence_ml_18_2=
      caml_string_of_jsbytes("core/src/sequence.ml:18:2"),
     cst_b$1=caml_string_of_jsbytes("b"),
     cst_core_src_sequence_ml_31_19=
      caml_string_of_jsbytes("core/src/sequence.ml:31:19"),
     cst_a$15=caml_string_of_jsbytes("a"),
     cst_core_src_sequence_ml_31_14=
      caml_string_of_jsbytes("core/src/sequence.ml:31:14"),
     cst_Both=caml_string_of_jsbytes("Both"),
     cst_b$2=caml_string_of_jsbytes("b"),
     cst_core_src_sequence_ml_30_15=
      caml_string_of_jsbytes("core/src/sequence.ml:30:15"),
     cst_Right=caml_string_of_jsbytes("Right"),
     cst_a$16=caml_string_of_jsbytes("a"),
     cst_core_src_sequence_ml_29_14=
      caml_string_of_jsbytes("core/src/sequence.ml:29:14"),
     cst_Left=caml_string_of_jsbytes("Left"),
     cst_b$3=caml_string_of_jsbytes("b"),
     cst_a$17=caml_string_of_jsbytes("a"),
     cst_t$39=caml_string_of_jsbytes("t"),
     cst_core_src_sequence_ml_28_2=
      caml_string_of_jsbytes("core/src/sequence.ml:28:2"),
     cst_core$58=caml_string_of_jsbytes("core"),
     cst_Core_Sequence$0=caml_string_of_jsbytes("Core__Sequence"),
     cst_t$52=caml_string_of_jsbytes("t"),
     cst_t$50=caml_string_of_jsbytes("t"),
     cst_t$48=caml_string_of_jsbytes("t"),
     cst_t$42=caml_string_of_jsbytes("t"),
     cst_Core_Array=caml_string_of_jsbytes("Core__Array"),
     cst_core$59=caml_string_of_jsbytes("core"),
     cst_core_src_array_ml=caml_string_of_jsbytes("core/src/array.ml"),
     cst$20=caml_string_of_jsbytes(""),
     cst_core$60=caml_string_of_jsbytes("core"),
     cst_a$18=caml_string_of_jsbytes("a"),
     cst_core_src_array_ml_13_12=
      caml_string_of_jsbytes("core/src/array.ml:13:12"),
     cst_a$19=caml_string_of_jsbytes("a"),
     cst_t$41=caml_string_of_jsbytes("t"),
     cst_core_src_array_ml_13_0=
      caml_string_of_jsbytes("core/src/array.ml:13:0"),
     name$7=caml_string_of_jsbytes("core/src/array.ml.t"),
     cst_t$43=caml_string_of_jsbytes("t_"),
     cst_core_src_array_ml_41_4=
      caml_string_of_jsbytes("core/src/array.ml:41:4"),
     cst_t$44=caml_string_of_jsbytes("t_"),
     cst_t$45=caml_string_of_jsbytes("t_"),
     cst_core_src_array_ml_77_4=
      caml_string_of_jsbytes("core/src/array.ml:77:4"),
     cst_t$46=caml_string_of_jsbytes("t_"),
     cst_a$20=caml_string_of_jsbytes("a"),
     cst_core_src_array_ml_345_25=
      caml_string_of_jsbytes("core/src/array.ml:345:25"),
     cst_perms$1=caml_string_of_jsbytes("perms"),
     cst_a$21=caml_string_of_jsbytes("a"),
     cst_t$47=caml_string_of_jsbytes("t"),
     cst_core_src_array_ml_345_2=
      caml_string_of_jsbytes("core/src/array.ml:345:2"),
     name$8=caml_string_of_jsbytes("core/src/array.ml.Permissioned.t"),
     cst_perms$2=caml_string_of_jsbytes("perms"),
     cst_t$49=caml_string_of_jsbytes("t"),
     cst_core_src_array_ml_350_4=
      caml_string_of_jsbytes("core/src/array.ml:350:4"),
     cst_perms$3=caml_string_of_jsbytes("perms"),
     cst_t$51=caml_string_of_jsbytes("t"),
     cst_core_src_array_ml_356_4=
      caml_string_of_jsbytes("core/src/array.ml:356:4"),
     cst_t$53=caml_string_of_jsbytes("t"),
     cst_core_src_array_ml_469_2=
      caml_string_of_jsbytes("core/src/array.ml:469:2"),
     cst_t$54=caml_string_of_jsbytes("t"),
     cst_t$55=caml_string_of_jsbytes("t"),
     cst_core_src_array_ml_475_2=
      caml_string_of_jsbytes("core/src/array.ml:475:2"),
     cst_t$56=caml_string_of_jsbytes("t"),
     cst_core$61=caml_string_of_jsbytes("core"),
     cst_Core_Array$0=caml_string_of_jsbytes("Core__Array"),
     cst_First$2=caml_string_of_jsbytes("First"),
     cst_Second$2=caml_string_of_jsbytes("Second"),
     cst_First$0=caml_string_of_jsbytes("First"),
     cst_Second$0=caml_string_of_jsbytes("Second"),
     cst_first=caml_string_of_jsbytes("first"),
     cst_second=caml_string_of_jsbytes("second"),
     cst_First$1=caml_string_of_jsbytes("First"),
     cst_Second$1=caml_string_of_jsbytes("Second"),
     cst_first$0=caml_string_of_jsbytes("first"),
     cst_second$0=caml_string_of_jsbytes("second"),
     cst_core_src_either_ml_Stable_=
      caml_string_of_jsbytes("core/src/either.ml.Stable.V1.t"),
     cst_t$58=caml_string_of_jsbytes("t"),
     cst_Core_Either=caml_string_of_jsbytes("Core__Either"),
     cst_core$62=caml_string_of_jsbytes("core"),
     cst_core_src_either_ml=caml_string_of_jsbytes("core/src/either.ml"),
     cst$21=caml_string_of_jsbytes(""),
     cst_core$63=caml_string_of_jsbytes("core"),
     cst_s$2=caml_string_of_jsbytes("s"),
     cst_core_src_either_ml_5_18=
      caml_string_of_jsbytes("core/src/either.ml:5:18"),
     cst_Second=caml_string_of_jsbytes("Second"),
     cst_f=caml_string_of_jsbytes("f"),
     cst_core_src_either_ml_4_17=
      caml_string_of_jsbytes("core/src/either.ml:4:17"),
     cst_First=caml_string_of_jsbytes("First"),
     cst_s$3=caml_string_of_jsbytes("s"),
     cst_f$0=caml_string_of_jsbytes("f"),
     cst_t$57=caml_string_of_jsbytes("t"),
     cst_core_src_either_ml_3_4=
      caml_string_of_jsbytes("core/src/either.ml:3:4"),
     error_source_011$0=
      caml_string_of_jsbytes("core/src/either.ml.Stable.V1.t"),
     name$9=caml_string_of_jsbytes("core/src/either.ml.Stable.V1.t"),
     cst_core$64=caml_string_of_jsbytes("core"),
     cst_Core_Either$0=caml_string_of_jsbytes("Core__Either"),
     cst_Core_Info_intf=caml_string_of_jsbytes("Core__Info_intf"),
     cst_core$65=caml_string_of_jsbytes("core"),
     cst_core_src_info_intf_ml=caml_string_of_jsbytes("core/src/info_intf.ml"),
     cst$22=caml_string_of_jsbytes(""),
     cst_core$66=caml_string_of_jsbytes("core"),
     cst_core$67=caml_string_of_jsbytes("core"),
     cst_Core_Info_intf$0=caml_string_of_jsbytes("Core__Info_intf"),
     cst_pos_bol$1=caml_string_of_jsbytes("pos_bol"),
     cst_pos_cnum$1=caml_string_of_jsbytes("pos_cnum"),
     cst_pos_fname$1=caml_string_of_jsbytes("pos_fname"),
     cst_pos_lnum$1=caml_string_of_jsbytes("pos_lnum"),
     cst_pos_cnum$2=caml_string_of_jsbytes("pos_cnum"),
     cst_pos_bol$2=caml_string_of_jsbytes("pos_bol"),
     cst_pos_lnum$2=caml_string_of_jsbytes("pos_lnum"),
     cst_pos_fname$2=caml_string_of_jsbytes("pos_fname"),
     cst_core_src_source_code_posit$1=
      caml_string_of_jsbytes("core/src/source_code_position0.ml.Stable.V1.t"),
     cst_Core_Source_code_position0=
      caml_string_of_jsbytes("Core__Source_code_position0"),
     cst_core$68=caml_string_of_jsbytes("core"),
     cst_core_src_source_code_posit=
      caml_string_of_jsbytes("core/src/source_code_position0.ml"),
     cst$23=caml_string_of_jsbytes(""),
     cst_core$69=caml_string_of_jsbytes("core"),
     cst_pos_cnum=caml_string_of_jsbytes("pos_cnum"),
     cst_pos_bol=caml_string_of_jsbytes("pos_bol"),
     cst_pos_lnum=caml_string_of_jsbytes("pos_lnum"),
     cst_pos_fname=caml_string_of_jsbytes("pos_fname"),
     cst_t$59=caml_string_of_jsbytes("t"),
     cst_core_src_source_code_posit$0=
      caml_string_of_jsbytes("core/src/source_code_position0.ml:7:4"),
     cst_t$60=caml_string_of_jsbytes("t"),
     names=
      [0,
       caml_string_of_jsbytes("pos_fname"),
       [0,
        caml_string_of_jsbytes("pos_lnum"),
        [0,
         caml_string_of_jsbytes("pos_bol"),
         [0,caml_string_of_jsbytes("pos_cnum"),0]]]],
     cst_pos_cnum$0=caml_string_of_jsbytes("pos_cnum"),
     cst_pos_bol$0=caml_string_of_jsbytes("pos_bol"),
     cst_pos_lnum$0=caml_string_of_jsbytes("pos_lnum"),
     cst_pos_fname$0=caml_string_of_jsbytes("pos_fname"),
     error_source_023=
      caml_string_of_jsbytes("core/src/source_code_position0.ml.Stable.V1.t"),
     cst_core$70=caml_string_of_jsbytes("core"),
     cst_Core_Source_code_position0$0=
      caml_string_of_jsbytes("Core__Source_code_position0"),
     cst_core_src_info_ml_Extend_In=
      caml_string_of_jsbytes
       ("core/src/info.ml.Extend.Internal_repr.Stable.V2.t"),
     cst_t$64=caml_string_of_jsbytes("t"),
     cst_core_src_info_ml_60_10=
      caml_string_of_jsbytes("core/src/info.ml:60:10"),
     cst_t$65=caml_string_of_jsbytes("t"),
     cst_t$66=caml_string_of_jsbytes("t"),
     cst_With_backtrace=caml_string_of_jsbytes("With_backtrace"),
     cst_t$67=caml_string_of_jsbytes("t"),
     cst_Of_list=caml_string_of_jsbytes("Of_list"),
     cst_t$68=caml_string_of_jsbytes("t"),
     cst_Tag_arg=caml_string_of_jsbytes("Tag_arg"),
     cst_t$69=caml_string_of_jsbytes("t"),
     cst_Tag_t=caml_string_of_jsbytes("Tag_t"),
     cst_Tag_sexp=caml_string_of_jsbytes("Tag_sexp"),
     cst_Sexp=caml_string_of_jsbytes("Sexp"),
     cst_Exn=caml_string_of_jsbytes("Exn"),
     cst_String=caml_string_of_jsbytes("String"),
     cst_Could_not_construct=caml_string_of_jsbytes("Could_not_construct"),
     cst_t$70=caml_string_of_jsbytes("t"),
     cst_core_src_info_ml_70_8=caml_string_of_jsbytes("core/src/info.ml:70:8"),
     cst_t$71=caml_string_of_jsbytes("t"),
     cst_t$72=caml_string_of_jsbytes("t"),
     cst_core_src_info_ml_142_2=
      caml_string_of_jsbytes("core/src/info.ml:142:2"),
     cst_t$73=caml_string_of_jsbytes("t"),
     cst_core_src_info_ml_Sexp_t=
      caml_string_of_jsbytes("core/src/info.ml.Sexp.t"),
     cst_Core_Info=caml_string_of_jsbytes("Core__Info"),
     cst_core$71=caml_string_of_jsbytes("core"),
     cst_core_src_info_ml=caml_string_of_jsbytes("core/src/info.ml"),
     cst$24=caml_string_of_jsbytes(""),
     cst_core$72=caml_string_of_jsbytes("core"),
     cst_t$61=caml_string_of_jsbytes("t"),
     cst_List$1=caml_string_of_jsbytes("List"),
     cst_Atom$1=caml_string_of_jsbytes("Atom"),
     cst_t$62=caml_string_of_jsbytes("t"),
     cst_core_src_info_ml_18_4=caml_string_of_jsbytes("core/src/info.ml:18:4"),
     cst_t$63=caml_string_of_jsbytes("t"),
     cst_core$73=caml_string_of_jsbytes("core"),
     cst_Core_Info$0=caml_string_of_jsbytes("Core__Info"),
     cst_Core_Error=caml_string_of_jsbytes("Core__Error"),
     cst_core$74=caml_string_of_jsbytes("core"),
     cst_core_src_error_ml=caml_string_of_jsbytes("core/src/error.ml"),
     cst$25=caml_string_of_jsbytes(""),
     cst_core$75=caml_string_of_jsbytes("core"),
     cst_core$76=caml_string_of_jsbytes("core"),
     cst_Core_Error$0=caml_string_of_jsbytes("Core__Error"),
     cst_t$79=caml_string_of_jsbytes("t"),
     cst_t$77=caml_string_of_jsbytes("t"),
     cst_t$75=caml_string_of_jsbytes("t"),
     cst_Core_Or_error=caml_string_of_jsbytes("Core__Or_error"),
     cst_core$77=caml_string_of_jsbytes("core"),
     cst_core_src_or_error_ml=caml_string_of_jsbytes("core/src/or_error.ml"),
     cst$26=caml_string_of_jsbytes(""),
     cst_core$78=caml_string_of_jsbytes("core"),
     cst_a$22=caml_string_of_jsbytes("a"),
     cst_core_src_or_error_ml_4_13=
      caml_string_of_jsbytes("core/src/or_error.ml:4:13"),
     cst_a$23=caml_string_of_jsbytes("a"),
     cst_t$74=caml_string_of_jsbytes("t"),
     cst_core_src_or_error_ml_4_0=
      caml_string_of_jsbytes("core/src/or_error.ml:4:0"),
     cst_a$24=caml_string_of_jsbytes("a"),
     cst_core_src_or_error_ml_39_17=
      caml_string_of_jsbytes("core/src/or_error.ml:39:17"),
     cst_a$25=caml_string_of_jsbytes("a"),
     cst_t$76=caml_string_of_jsbytes("t"),
     cst_core_src_or_error_ml_39_4=
      caml_string_of_jsbytes("core/src/or_error.ml:39:4"),
     cst_a$26=caml_string_of_jsbytes("a"),
     cst_core_src_or_error_ml_46_17=
      caml_string_of_jsbytes("core/src/or_error.ml:46:17"),
     cst_a$27=caml_string_of_jsbytes("a"),
     cst_t$78=caml_string_of_jsbytes("t"),
     cst_core_src_or_error_ml_46_4=
      caml_string_of_jsbytes("core/src/or_error.ml:46:4"),
     cst_core$79=caml_string_of_jsbytes("core"),
     cst_Core_Or_error$0=caml_string_of_jsbytes("Core__Or_error"),
     cst_Core_Quickcheck_intf=caml_string_of_jsbytes("Core__Quickcheck_intf"),
     cst_core$80=caml_string_of_jsbytes("core"),
     cst_core_src_quickcheck_intf_m=
      caml_string_of_jsbytes("core/src/quickcheck_intf.ml"),
     cst$27=caml_string_of_jsbytes(""),
     cst_core$81=caml_string_of_jsbytes("core"),
     cst_core$82=caml_string_of_jsbytes("core"),
     cst_Core_Quickcheck_intf$0=
      caml_string_of_jsbytes("Core__Quickcheck_intf"),
     cst_cannot_generate=caml_string_of_jsbytes("cannot generate"),
     cst_cannot_generate$0=caml_string_of_jsbytes("cannot generate"),
     cst_insufficient_distinct_valu=
      caml_string_of_jsbytes("insufficient distinct values"),
     cst_Generator_of_sequence_ran_=
      caml_string_of_jsbytes("Generator.of_sequence: ran out of values"),
     cst_Quickcheck_Observer_of_lis=
      caml_string_of_jsbytes("Quickcheck.Observer.of_list: value not found"),
     cst_Core_Quickcheck=caml_string_of_jsbytes("Core__Quickcheck"),
     cst_core$83=caml_string_of_jsbytes("core"),
     cst_core_src_quickcheck_ml=
      caml_string_of_jsbytes("core/src/quickcheck.ml"),
     cst$28=caml_string_of_jsbytes(""),
     cst_core$84=caml_string_of_jsbytes("core"),
     default_seed=
      [0,
       -825553486,
       caml_string_of_jsbytes("an arbitrary but deterministic string")],
     default_shrink_attempts=[0,137269019,1000],
     cst_core$85=caml_string_of_jsbytes("core"),
     cst_Core_Quickcheck$0=caml_string_of_jsbytes("Core__Quickcheck"),
     cst_Core_T=caml_string_of_jsbytes("Core__T"),
     cst_core$86=caml_string_of_jsbytes("core"),
     cst_core_src_t_ml=caml_string_of_jsbytes("core/src/t.ml"),
     cst$29=caml_string_of_jsbytes(""),
     cst_core$87=caml_string_of_jsbytes("core"),
     cst_core$88=caml_string_of_jsbytes("core"),
     cst_Core_T$0=caml_string_of_jsbytes("Core__T"),
     cst_Core_Hashtbl_intf=caml_string_of_jsbytes("Core__Hashtbl_intf"),
     cst_core$89=caml_string_of_jsbytes("core"),
     cst_core_src_hashtbl_intf_ml=
      caml_string_of_jsbytes("core/src/hashtbl_intf.ml"),
     cst$30=caml_string_of_jsbytes(""),
     cst_core$90=caml_string_of_jsbytes("core"),
     cst_core$91=caml_string_of_jsbytes("core"),
     cst_Core_Hashtbl_intf$0=caml_string_of_jsbytes("Core__Hashtbl_intf"),
     cst_t$83=caml_string_of_jsbytes("t"),
     cst_t$81=caml_string_of_jsbytes("t"),
     cst_Core_List0=caml_string_of_jsbytes("Core__List0"),
     cst_core$92=caml_string_of_jsbytes("core"),
     cst_core_src_list0_ml=caml_string_of_jsbytes("core/src/list0.ml"),
     cst$31=caml_string_of_jsbytes(""),
     cst_core$93=caml_string_of_jsbytes("core"),
     cst_a$28=caml_string_of_jsbytes("a"),
     cst_core_src_list0_ml_5_12=
      caml_string_of_jsbytes("core/src/list0.ml:5:12"),
     cst_a$29=caml_string_of_jsbytes("a"),
     cst_t$80=caml_string_of_jsbytes("t"),
     cst_core_src_list0_ml_5_0=caml_string_of_jsbytes("core/src/list0.ml:5:0"),
     name$10=caml_string_of_jsbytes("core/src/list0.ml.t"),
     cst_b$4=caml_string_of_jsbytes("b"),
     cst_core_src_list0_ml_10_26=
      caml_string_of_jsbytes("core/src/list0.ml:10:26"),
     cst_a$30=caml_string_of_jsbytes("a"),
     cst_core_src_list0_ml_10_21=
      caml_string_of_jsbytes("core/src/list0.ml:10:21"),
     cst_b$5=caml_string_of_jsbytes("b"),
     cst_a$31=caml_string_of_jsbytes("a"),
     cst_t$82=caml_string_of_jsbytes("t"),
     cst_core_src_list0_ml_10_2=
      caml_string_of_jsbytes("core/src/list0.ml:10:2"),
     cst_core$94=caml_string_of_jsbytes("core"),
     cst_Core_List0$0=caml_string_of_jsbytes("Core__List0"),
     cst_Core_Quickcheckable_intf=
      caml_string_of_jsbytes("Core__Quickcheckable_intf"),
     cst_core$95=caml_string_of_jsbytes("core"),
     cst_core_src_quickcheckable_in=
      caml_string_of_jsbytes("core/src/quickcheckable_intf.ml"),
     cst$32=caml_string_of_jsbytes(""),
     cst_core$96=caml_string_of_jsbytes("core"),
     cst_core$97=caml_string_of_jsbytes("core"),
     cst_Core_Quickcheckable_intf$0=
      caml_string_of_jsbytes("Core__Quickcheckable_intf"),
     cst_Core_Quickcheckable=caml_string_of_jsbytes("Core__Quickcheckable"),
     cst_core$98=caml_string_of_jsbytes("core"),
     cst_core_src_quickcheckable_ml=
      caml_string_of_jsbytes("core/src/quickcheckable.ml"),
     cst$33=caml_string_of_jsbytes(""),
     cst_core$99=caml_string_of_jsbytes("core"),
     cst_core$100=caml_string_of_jsbytes("core"),
     cst_Core_Quickcheckable$0=caml_string_of_jsbytes("Core__Quickcheckable"),
     cst_Hashtbl_bin_read_t_duplica=
      caml_string_of_jsbytes("Hashtbl.bin_read_t: duplicate key"),
     cst_el$2=caml_string_of_jsbytes("el"),
     cst_a$34=caml_string_of_jsbytes("a"),
     cst_core_src_hashtbl_ml_183_27=
      caml_string_of_jsbytes("core/src/hashtbl.ml:183:27"),
     cst_a$35=caml_string_of_jsbytes("a"),
     cst_el$1=caml_string_of_jsbytes("el"),
     cst_core_src_hashtbl_ml_183_6=
      caml_string_of_jsbytes("core/src/hashtbl.ml:183:6"),
     cst_8fabab0a_4992_11e6_8cca_9b=
      caml_string_of_jsbytes("8fabab0a-4992-11e6-8cca-9ba2c4686d9e"),
     module_name$0=[0,caml_string_of_jsbytes("Core.Hashtbl")],
     cst_Core_hashtbl_bin_read_t_du=
      caml_string_of_jsbytes("Core_hashtbl.bin_read_t_: duplicate key"),
     cst_el$0=caml_string_of_jsbytes("el"),
     cst_Core_Hashtbl=caml_string_of_jsbytes("Core__Hashtbl"),
     cst_core$101=caml_string_of_jsbytes("core"),
     cst_core_src_hashtbl_ml=caml_string_of_jsbytes("core/src/hashtbl.ml"),
     cst$34=caml_string_of_jsbytes(""),
     cst_core$102=caml_string_of_jsbytes("core"),
     cst_b$6=caml_string_of_jsbytes("b"),
     cst_core_src_hashtbl_ml_101_30=
      caml_string_of_jsbytes("core/src/hashtbl.ml:101:30"),
     cst_a$32=caml_string_of_jsbytes("a"),
     cst_core_src_hashtbl_ml_101_25=
      caml_string_of_jsbytes("core/src/hashtbl.ml:101:25"),
     cst_b$7=caml_string_of_jsbytes("b"),
     cst_a$33=caml_string_of_jsbytes("a"),
     cst_el=caml_string_of_jsbytes("el"),
     cst_core_src_hashtbl_ml_101_6=
      caml_string_of_jsbytes("core/src/hashtbl.ml:101:6"),
     cst_8f3e445c_4992_11e6_a279_37=
      caml_string_of_jsbytes("8f3e445c-4992-11e6-a279-3703be311e7b"),
     module_name=[0,caml_string_of_jsbytes("Core.Hashtbl")],
     cst_core$103=caml_string_of_jsbytes("core"),
     cst_Core_Hashtbl$0=caml_string_of_jsbytes("Core__Hashtbl"),
     cst_Core_Hash_set_intf=caml_string_of_jsbytes("Core__Hash_set_intf"),
     cst_core$104=caml_string_of_jsbytes("core"),
     cst_core_src_hash_set_intf_ml=
      caml_string_of_jsbytes("core/src/hash_set_intf.ml"),
     cst$35=caml_string_of_jsbytes(""),
     cst_core$105=caml_string_of_jsbytes("core"),
     cst_core$106=caml_string_of_jsbytes("core"),
     cst_Core_Hash_set_intf$0=caml_string_of_jsbytes("Core__Hash_set_intf"),
     cst_el$3=caml_string_of_jsbytes("el"),
     cst_core_src_hash_set_ml_52_6=
      caml_string_of_jsbytes("core/src/hash_set.ml:52:6"),
     cst_el$4=caml_string_of_jsbytes("el"),
     cst_ad381672_4992_11e6_9e36_b7=
      caml_string_of_jsbytes("ad381672-4992-11e6-9e36-b76dc8cd466f"),
     module_name$1=[0,caml_string_of_jsbytes("Core.Hash_set")],
     cst_Core_Hash_set=caml_string_of_jsbytes("Core__Hash_set"),
     cst_core$107=caml_string_of_jsbytes("core"),
     cst_core_src_hash_set_ml=caml_string_of_jsbytes("core/src/hash_set.ml"),
     cst$36=caml_string_of_jsbytes(""),
     cst_core$108=caml_string_of_jsbytes("core"),
     cst_core$109=caml_string_of_jsbytes("core"),
     cst_Core_Hash_set$0=caml_string_of_jsbytes("Core__Hash_set"),
     cst_Core_Map_intf=caml_string_of_jsbytes("Core__Map_intf"),
     cst_core$110=caml_string_of_jsbytes("core"),
     cst_core_src_map_intf_ml=caml_string_of_jsbytes("core/src/map_intf.ml"),
     cst$37=caml_string_of_jsbytes(""),
     cst_core$111=caml_string_of_jsbytes("core"),
     cst_core$112=caml_string_of_jsbytes("core"),
     cst_Core_Map_intf$0=caml_string_of_jsbytes("Core__Map_intf"),
     cst_el$8=caml_string_of_jsbytes("el"),
     cst_v$4=caml_string_of_jsbytes("v"),
     cst_core_src_map_ml_519_25=
      caml_string_of_jsbytes("core/src/map.ml:519:25"),
     cst_v$5=caml_string_of_jsbytes("v"),
     cst_el$7=caml_string_of_jsbytes("el"),
     cst_core_src_map_ml_519_4=caml_string_of_jsbytes("core/src/map.ml:519:4"),
     cst_dfb300f8_4992_11e6_9c15_73=
      caml_string_of_jsbytes("dfb300f8-4992-11e6-9c15-73a2ac6b815c"),
     module_name$3=[0,caml_string_of_jsbytes("Core.Map")],
     cst_el$6=caml_string_of_jsbytes("el"),
     cst_Map_bin_read_t_duplicate_e=
      caml_string_of_jsbytes("Map.bin_read_t: duplicate element in map"),
     cst_key_not_found=caml_string_of_jsbytes("key not found"),
     cst_Map_of_hashtbl_exn_duplica=
      caml_string_of_jsbytes("Map.of_hashtbl_exn: duplicate key"),
     cst_core_src_map_ml$0=caml_string_of_jsbytes("core/src/map.ml"),
     cst_Left$1=caml_string_of_jsbytes("Left"),
     cst_Right$1=caml_string_of_jsbytes("Right"),
     cst_Unequal$0=caml_string_of_jsbytes("Unequal"),
     cst_Left$2=caml_string_of_jsbytes("Left"),
     cst_Right$2=caml_string_of_jsbytes("Right"),
     cst_Unequal$1=caml_string_of_jsbytes("Unequal"),
     cst_core_src_map_ml_Symmetric_$0=
      caml_string_of_jsbytes
       ("core/src/map.ml.Symmetric_diff_element.Stable.V1.t"),
     cst_core_src_map_ml_Symmetric_=
      caml_string_of_jsbytes
       ("core/src/map.ml.Symmetric_diff_element.Stable.V1.t"),
     cst_t$85=caml_string_of_jsbytes("t"),
     cst_Core_Map=caml_string_of_jsbytes("Core__Map"),
     cst_core$113=caml_string_of_jsbytes("core"),
     cst_core_src_map_ml=caml_string_of_jsbytes("core/src/map.ml"),
     cst$38=caml_string_of_jsbytes(""),
     cst_core$114=caml_string_of_jsbytes("core"),
     cst_v=caml_string_of_jsbytes("v"),
     cst_core_src_map_ml_8_77=caml_string_of_jsbytes("core/src/map.ml:8:77"),
     cst_v$0=caml_string_of_jsbytes("v"),
     cst_core_src_map_ml_8_72=caml_string_of_jsbytes("core/src/map.ml:8:72"),
     cst_Unequal=caml_string_of_jsbytes("Unequal"),
     cst_v$1=caml_string_of_jsbytes("v"),
     cst_core_src_map_ml_8_55=caml_string_of_jsbytes("core/src/map.ml:8:55"),
     cst_Right$0=caml_string_of_jsbytes("Right"),
     cst_v$2=caml_string_of_jsbytes("v"),
     cst_core_src_map_ml_8_40=caml_string_of_jsbytes("core/src/map.ml:8:40"),
     cst_Left$0=caml_string_of_jsbytes("Left"),
     cst_core_src_map_ml_8_29=caml_string_of_jsbytes("core/src/map.ml:8:29"),
     cst_k=caml_string_of_jsbytes("k"),
     cst_core_src_map_ml_8_24=caml_string_of_jsbytes("core/src/map.ml:8:24"),
     cst_v$3=caml_string_of_jsbytes("v"),
     cst_k$0=caml_string_of_jsbytes("k"),
     cst_t$84=caml_string_of_jsbytes("t"),
     cst_core_src_map_ml_8_6=caml_string_of_jsbytes("core/src/map.ml:8:6"),
     error_source_031=
      caml_string_of_jsbytes
       ("core/src/map.ml.Symmetric_diff_element.Stable.V1.t"),
     cst_core_src_map_ml$1=caml_string_of_jsbytes("core/src/map.ml"),
     cst_core_src_map_ml$2=caml_string_of_jsbytes("core/src/map.ml"),
     cst_core_src_map_ml$3=caml_string_of_jsbytes("core/src/map.ml"),
     cst_core_src_map_ml$4=caml_string_of_jsbytes("core/src/map.ml"),
     cst_e4dcb9b11591631796da652c14=
      caml_string_of_jsbytes("e4dcb9b11591631796da652c1404b8e8"),
     cst_b$8=caml_string_of_jsbytes("b"),
     cst_core_src_map_ml_473_30=
      caml_string_of_jsbytes("core/src/map.ml:473:30"),
     cst_a$36=caml_string_of_jsbytes("a"),
     cst_core_src_map_ml_473_25=
      caml_string_of_jsbytes("core/src/map.ml:473:25"),
     cst_b$9=caml_string_of_jsbytes("b"),
     cst_a$37=caml_string_of_jsbytes("a"),
     cst_el$5=caml_string_of_jsbytes("el"),
     cst_core_src_map_ml_473_6=caml_string_of_jsbytes("core/src/map.ml:473:6"),
     cst_b7d7b1a0_4992_11e6_8a32_bb=
      caml_string_of_jsbytes("b7d7b1a0-4992-11e6-8a32-bbb221fa025c"),
     module_name$2=[0,caml_string_of_jsbytes("Core.Map")],
     cst_core$115=caml_string_of_jsbytes("core"),
     cst_Core_Map$0=caml_string_of_jsbytes("Core__Map"),
     cst_Excl$3=caml_string_of_jsbytes("Excl"),
     cst_Incl$3=caml_string_of_jsbytes("Incl"),
     cst_Unbounded$1=caml_string_of_jsbytes("Unbounded"),
     cst_excl$1=caml_string_of_jsbytes("excl"),
     cst_incl$1=caml_string_of_jsbytes("incl"),
     cst_unbounded$1=caml_string_of_jsbytes("unbounded"),
     cst_Excl$4=caml_string_of_jsbytes("Excl"),
     cst_Incl$4=caml_string_of_jsbytes("Incl"),
     cst_Unbounded$2=caml_string_of_jsbytes("Unbounded"),
     cst_excl$2=caml_string_of_jsbytes("excl"),
     cst_incl$2=caml_string_of_jsbytes("incl"),
     cst_unbounded$2=caml_string_of_jsbytes("unbounded"),
     cst_core_src_maybe_bound_ml_t=
      caml_string_of_jsbytes("core/src/maybe_bound.ml.t"),
     cst_t$89=caml_string_of_jsbytes("t"),
     cst_Excl$0=caml_string_of_jsbytes("Excl"),
     cst_Incl$0=caml_string_of_jsbytes("Incl"),
     cst_Unbounded=caml_string_of_jsbytes("Unbounded"),
     cst_excl=caml_string_of_jsbytes("excl"),
     cst_incl=caml_string_of_jsbytes("incl"),
     cst_unbounded=caml_string_of_jsbytes("unbounded"),
     cst_Excl$1=caml_string_of_jsbytes("Excl"),
     cst_Incl$1=caml_string_of_jsbytes("Incl"),
     cst_Unbounded$0=caml_string_of_jsbytes("Unbounded"),
     cst_excl$0=caml_string_of_jsbytes("excl"),
     cst_incl$0=caml_string_of_jsbytes("incl"),
     cst_unbounded$0=caml_string_of_jsbytes("unbounded"),
     cst_core_src_maybe_bound_ml_St=
      caml_string_of_jsbytes("core/src/maybe_bound.ml.Stable.V1.t"),
     cst_t$87=caml_string_of_jsbytes("t"),
     cst_Core_Maybe_bound=caml_string_of_jsbytes("Core__Maybe_bound"),
     cst_core$116=caml_string_of_jsbytes("core"),
     cst_core_src_maybe_bound_ml=
      caml_string_of_jsbytes("core/src/maybe_bound.ml"),
     cst$39=caml_string_of_jsbytes(""),
     cst_core$117=caml_string_of_jsbytes("core"),
     cst_a$38=caml_string_of_jsbytes("a"),
     cst_core_src_maybe_bound_ml_7_=
      caml_string_of_jsbytes("core/src/maybe_bound.ml:7:16"),
     cst_Excl=caml_string_of_jsbytes("Excl"),
     cst_a$39=caml_string_of_jsbytes("a"),
     cst_core_src_maybe_bound_ml_6_=
      caml_string_of_jsbytes("core/src/maybe_bound.ml:6:16"),
     cst_Incl=caml_string_of_jsbytes("Incl"),
     cst_a$40=caml_string_of_jsbytes("a"),
     cst_t$86=caml_string_of_jsbytes("t"),
     cst_core_src_maybe_bound_ml_5_=
      caml_string_of_jsbytes("core/src/maybe_bound.ml:5:4"),
     error_source_010=
      caml_string_of_jsbytes("core/src/maybe_bound.ml.Stable.V1.t"),
     cst_a$41=caml_string_of_jsbytes("a"),
     cst_core_src_maybe_bound_ml_24=
      caml_string_of_jsbytes("core/src/maybe_bound.ml:24:12"),
     cst_Excl$2=caml_string_of_jsbytes("Excl"),
     cst_a$42=caml_string_of_jsbytes("a"),
     cst_core_src_maybe_bound_ml_23=
      caml_string_of_jsbytes("core/src/maybe_bound.ml:23:12"),
     cst_Incl$2=caml_string_of_jsbytes("Incl"),
     cst_a$43=caml_string_of_jsbytes("a"),
     cst_t$88=caml_string_of_jsbytes("t"),
     cst_core_src_maybe_bound_ml_22=
      caml_string_of_jsbytes("core/src/maybe_bound.ml:22:0"),
     error_source_054=caml_string_of_jsbytes("core/src/maybe_bound.ml.t"),
     cst_core$118=caml_string_of_jsbytes("core"),
     cst_Core_Maybe_bound$0=caml_string_of_jsbytes("Core__Maybe_bound"),
     cst_Core_Set_intf=caml_string_of_jsbytes("Core__Set_intf"),
     cst_core$119=caml_string_of_jsbytes("core"),
     cst_core_src_set_intf_ml=caml_string_of_jsbytes("core/src/set_intf.ml"),
     cst$40=caml_string_of_jsbytes(""),
     cst_core$120=caml_string_of_jsbytes("core"),
     cst_core$121=caml_string_of_jsbytes("core"),
     cst_Core_Set_intf$0=caml_string_of_jsbytes("Core__Set_intf"),
     cst_el$11=caml_string_of_jsbytes("el"),
     cst_core_src_set_ml_405_4=caml_string_of_jsbytes("core/src/set.ml:405:4"),
     cst_el$12=caml_string_of_jsbytes("el"),
     cst_8989278e_4992_11e6_8f4a_6b=
      caml_string_of_jsbytes("8989278e-4992-11e6-8f4a-6b89776b1e53"),
     module_name$5=[0,caml_string_of_jsbytes("Core.Set")],
     cst_el$10=caml_string_of_jsbytes("el"),
     cst_Set_bin_read_t_duplicate_e=
      caml_string_of_jsbytes("Set.bin_read_t: duplicate element in map"),
     cst_Core_Set=caml_string_of_jsbytes("Core__Set"),
     cst_core$122=caml_string_of_jsbytes("core"),
     cst_core_src_set_ml=caml_string_of_jsbytes("core/src/set.ml"),
     cst$41=caml_string_of_jsbytes(""),
     cst_core$123=caml_string_of_jsbytes("core"),
     cst_a$44=caml_string_of_jsbytes("a"),
     cst_core_src_set_ml_364_19=
      caml_string_of_jsbytes("core/src/set.ml:364:19"),
     cst_a$45=caml_string_of_jsbytes("a"),
     cst_el$9=caml_string_of_jsbytes("el"),
     cst_core_src_set_ml_364_6=caml_string_of_jsbytes("core/src/set.ml:364:6"),
     cst_88bcc478_4992_11e6_a95d_ff=
      caml_string_of_jsbytes("88bcc478-4992-11e6-a95d-ff4831acf410"),
     module_name$4=[0,caml_string_of_jsbytes("Core.Set")],
     cst_core$124=caml_string_of_jsbytes("core"),
     cst_Core_Set$0=caml_string_of_jsbytes("Core__Set"),
     cst_Core_Comparable_intf=caml_string_of_jsbytes("Core__Comparable_intf"),
     cst_core$125=caml_string_of_jsbytes("core"),
     cst_core_src_comparable_intf_m=
      caml_string_of_jsbytes("core/src/comparable_intf.ml"),
     cst$42=caml_string_of_jsbytes(""),
     cst_core$126=caml_string_of_jsbytes("core"),
     cst_core$127=caml_string_of_jsbytes("core"),
     cst_Core_Comparable_intf$0=
      caml_string_of_jsbytes("Core__Comparable_intf"),
     cst_Core_Comparable=caml_string_of_jsbytes("Core__Comparable"),
     cst_core$128=caml_string_of_jsbytes("core"),
     cst_core_src_comparable_ml=
      caml_string_of_jsbytes("core/src/comparable.ml"),
     cst$43=caml_string_of_jsbytes(""),
     cst_core$129=caml_string_of_jsbytes("core"),
     cst_core$130=caml_string_of_jsbytes("core"),
     cst_Core_Comparable$0=caml_string_of_jsbytes("Core__Comparable"),
     cst_Core_Doubly_linked_intf=
      caml_string_of_jsbytes("Core__Doubly_linked_intf"),
     cst_core$131=caml_string_of_jsbytes("core"),
     cst_core_src_doubly_linked_int=
      caml_string_of_jsbytes("core/src/doubly_linked_intf.ml"),
     cst$44=caml_string_of_jsbytes(""),
     cst_core$132=caml_string_of_jsbytes("core"),
     cst_core$133=caml_string_of_jsbytes("core"),
     cst_Core_Doubly_linked_intf$0=
      caml_string_of_jsbytes("Core__Doubly_linked_intf"),
     cst_t$91=caml_string_of_jsbytes("t"),
     cst_exn_if_dup=caml_string_of_jsbytes("exn_if_dup"),
     cst_Core_List=caml_string_of_jsbytes("Core__List"),
     cst_core$134=caml_string_of_jsbytes("core"),
     cst_core_src_list_ml=caml_string_of_jsbytes("core/src/list.ml"),
     cst$45=caml_string_of_jsbytes(""),
     cst_core$135=caml_string_of_jsbytes("core"),
     cst_Core_List_Duplicate_found=
      caml_string_of_jsbytes("Core__List.Duplicate_found"),
     cst_a$46=caml_string_of_jsbytes("a"),
     cst_core_src_list_ml_56_23=
      caml_string_of_jsbytes("core/src/list.ml:56:23"),
     cst_a$47=caml_string_of_jsbytes("a"),
     cst_t$90=caml_string_of_jsbytes("t"),
     cst_core_src_list_ml_56_4=caml_string_of_jsbytes("core/src/list.ml:56:4"),
     cst_core$136=caml_string_of_jsbytes("core"),
     cst_Core_List$0=caml_string_of_jsbytes("Core__List"),
     cst_t$95=caml_string_of_jsbytes("t"),
     cst_some=caml_string_of_jsbytes("some"),
     cst_none=caml_string_of_jsbytes("none"),
     cst_t$93=caml_string_of_jsbytes("t"),
     cst_Core_Option=caml_string_of_jsbytes("Core__Option"),
     cst_core$137=caml_string_of_jsbytes("core"),
     cst_core_src_option_ml=caml_string_of_jsbytes("core/src/option.ml"),
     cst$46=caml_string_of_jsbytes(""),
     cst_core$138=caml_string_of_jsbytes("core"),
     cst_a$48=caml_string_of_jsbytes("a"),
     cst_core_src_option_ml_4_12=
      caml_string_of_jsbytes("core/src/option.ml:4:12"),
     cst_a$49=caml_string_of_jsbytes("a"),
     cst_t$92=caml_string_of_jsbytes("t"),
     cst_core_src_option_ml_4_0=
      caml_string_of_jsbytes("core/src/option.ml:4:0"),
     name$11=caml_string_of_jsbytes("core/src/option.ml.t"),
     cst_a$50=caml_string_of_jsbytes("a"),
     cst_core_src_option_ml_23_23=
      caml_string_of_jsbytes("core/src/option.ml:23:23"),
     cst_a$51=caml_string_of_jsbytes("a"),
     cst_t$94=caml_string_of_jsbytes("t"),
     cst_core_src_option_ml_23_4=
      caml_string_of_jsbytes("core/src/option.ml:23:4"),
     cst_core$139=caml_string_of_jsbytes("core"),
     cst_Core_Option$0=caml_string_of_jsbytes("Core__Option"),
     cst_Core_Optional_syntax_intf=
      caml_string_of_jsbytes("Core__Optional_syntax_intf"),
     cst_core$140=caml_string_of_jsbytes("core"),
     cst_core_src_optional_syntax_i=
      caml_string_of_jsbytes("core/src/optional_syntax_intf.ml"),
     cst$47=caml_string_of_jsbytes(""),
     cst_core$141=caml_string_of_jsbytes("core"),
     cst_core$142=caml_string_of_jsbytes("core"),
     cst_Core_Optional_syntax_intf$0=
      caml_string_of_jsbytes("Core__Optional_syntax_intf"),
     cst_Core_Optional_syntax=caml_string_of_jsbytes("Core__Optional_syntax"),
     cst_core$143=caml_string_of_jsbytes("core"),
     cst_core_src_optional_syntax_m=
      caml_string_of_jsbytes("core/src/optional_syntax.ml"),
     cst$48=caml_string_of_jsbytes(""),
     cst_core$144=caml_string_of_jsbytes("core"),
     cst_core$145=caml_string_of_jsbytes("core"),
     cst_Core_Optional_syntax$0=
      caml_string_of_jsbytes("Core__Optional_syntax"),
     cst_Core_Union_find=caml_string_of_jsbytes("Core__Union_find"),
     cst_core$146=caml_string_of_jsbytes("core"),
     cst_core_src_union_find_ml=
      caml_string_of_jsbytes("core/src/union_find.ml"),
     cst$49=caml_string_of_jsbytes(""),
     cst_core$147=caml_string_of_jsbytes("core"),
     cst_core$148=caml_string_of_jsbytes("core"),
     cst_Core_Union_find$0=caml_string_of_jsbytes("Core__Union_find"),
     cst_Core_Doubly_linked=caml_string_of_jsbytes("Core__Doubly_linked"),
     cst_core$149=caml_string_of_jsbytes("core"),
     cst_core_src_doubly_linked_ml=
      caml_string_of_jsbytes("core/src/doubly_linked.ml"),
     cst$50=caml_string_of_jsbytes(""),
     cst_core$150=caml_string_of_jsbytes("core"),
     cst_Core_Doubly_linked_Attempt=
      caml_string_of_jsbytes
       ("Core__Doubly_linked.Attempt_to_mutate_list_during_iteration"),
     cst_Core_Doubly_linked_Transfe=
      caml_string_of_jsbytes
       ("Core__Doubly_linked.Transfer_src_and_dst_are_same_list"),
     cst_Core_Doubly_linked_Elt_doe=
      caml_string_of_jsbytes
       ("Core__Doubly_linked.Elt_does_not_belong_to_list"),
     cst_Core_Doubly_linked_Invalid=
      caml_string_of_jsbytes
       ("Core__Doubly_linked.Invalid_move__elt_equals_anchor"),
     cst_core$151=caml_string_of_jsbytes("core"),
     cst_Core_Doubly_linked$0=caml_string_of_jsbytes("Core__Doubly_linked"),
     cst_Core_Hash_queue_intf=caml_string_of_jsbytes("Core__Hash_queue_intf"),
     cst_core$152=caml_string_of_jsbytes("core"),
     cst_core_src_hash_queue_intf_m=
      caml_string_of_jsbytes("core/src/hash_queue_intf.ml"),
     cst$51=caml_string_of_jsbytes(""),
     cst_core$153=caml_string_of_jsbytes("core"),
     cst_core$154=caml_string_of_jsbytes("core"),
     cst_Core_Hash_queue_intf$0=
      caml_string_of_jsbytes("Core__Hash_queue_intf"),
     cst_no_raise$0=caml_string_of_jsbytes("no_raise"),
     cst_With_text_t_should_be_stor=
      caml_string_of_jsbytes
       ("With_text.t should be stored as an atom, but instead a list was found."),
     cst$53=caml_string_of_jsbytes(""),
     cst_core_src_sexp_ml_With_text=
      caml_string_of_jsbytes("core/src/sexp.ml.With_text.t"),
     cst_t$102=caml_string_of_jsbytes("t"),
     cst_sexp_parse_error=caml_string_of_jsbytes("sexp_parse_error"),
     cst_t$100=caml_string_of_jsbytes("t"),
     cst_core_src_sexp_ml_Stable_V1=
      caml_string_of_jsbytes("core/src/sexp.ml.Stable.V1.t"),
     cst_Core_Sexp=caml_string_of_jsbytes("Core__Sexp"),
     cst_core$155=caml_string_of_jsbytes("core"),
     cst_core_src_sexp_ml=caml_string_of_jsbytes("core/src/sexp.ml"),
     cst$52=caml_string_of_jsbytes(""),
     cst_core$156=caml_string_of_jsbytes("core"),
     cst_t$96=caml_string_of_jsbytes("t"),
     cst_List$2=caml_string_of_jsbytes("List"),
     cst_Atom$2=caml_string_of_jsbytes("Atom"),
     cst_t$97=caml_string_of_jsbytes("t"),
     cst_core_src_sexp_ml_5_4=caml_string_of_jsbytes("core/src/sexp.ml:5:4"),
     cst_t$98=caml_string_of_jsbytes("t"),
     cst_a$52=caml_string_of_jsbytes("a"),
     cst_core_src_sexp_ml_38_22=
      caml_string_of_jsbytes("core/src/sexp.ml:38:22"),
     cst_a$53=caml_string_of_jsbytes("a"),
     cst_t$99=caml_string_of_jsbytes("t"),
     cst_core_src_sexp_ml_38_2=caml_string_of_jsbytes("core/src/sexp.ml:38:2"),
     cst_text=caml_string_of_jsbytes("text"),
     cst_a$54=caml_string_of_jsbytes("a"),
     cst_core_src_sexp_ml_63_14=
      caml_string_of_jsbytes("core/src/sexp.ml:63:14"),
     cst_value=caml_string_of_jsbytes("value"),
     cst_a$55=caml_string_of_jsbytes("a"),
     cst_t$101=caml_string_of_jsbytes("t"),
     cst_core_src_sexp_ml_62_2=caml_string_of_jsbytes("core/src/sexp.ml:62:2"),
     cst_a$56=caml_string_of_jsbytes("a"),
     cst_core_src_sexp_ml_97_19=
      caml_string_of_jsbytes("core/src/sexp.ml:97:19"),
     cst_a$57=caml_string_of_jsbytes("a"),
     cst_no_raise=caml_string_of_jsbytes("no_raise"),
     cst_core_src_sexp_ml_97_0=caml_string_of_jsbytes("core/src/sexp.ml:97:0"),
     cst_core$157=caml_string_of_jsbytes("core"),
     cst_Core_Sexp$0=caml_string_of_jsbytes("Core__Sexp"),
     cst_Hash_queue_replace_exn_unk=
      caml_string_of_jsbytes("Hash_queue.replace_exn: unknown key"),
     cst_Hash_queue_remove_exn_unkn=
      caml_string_of_jsbytes("Hash_queue.remove_exn: unknown key"),
     cst_Hash_queue_dequeue_exn_emp=
      caml_string_of_jsbytes("Hash_queue.dequeue_exn: empty queue"),
     cst_Hash_queue_dequeue_with_ke=
      caml_string_of_jsbytes("Hash_queue.dequeue_with_key: empty queue"),
     cst_Hash_queue_enqueue_exn_dup=
      caml_string_of_jsbytes("Hash_queue.enqueue_exn: duplicate key"),
     cst_It_is_an_error_to_modify_a=
      caml_string_of_jsbytes
       ("It is an error to modify a Hash_queue.t while iterating over it."),
     cst_Core_Hash_queue=caml_string_of_jsbytes("Core__Hash_queue"),
     cst_core$158=caml_string_of_jsbytes("core"),
     cst_core_src_hash_queue_ml=
      caml_string_of_jsbytes("core/src/hash_queue.ml"),
     cst$54=caml_string_of_jsbytes(""),
     cst_core$159=caml_string_of_jsbytes("core"),
     cst_core$160=caml_string_of_jsbytes("core"),
     cst_Core_Hash_queue$0=caml_string_of_jsbytes("Core__Hash_queue"),
     cst_Core_Hashable_intf=caml_string_of_jsbytes("Core__Hashable_intf"),
     cst_core$161=caml_string_of_jsbytes("core"),
     cst_core_src_hashable_intf_ml=
      caml_string_of_jsbytes("core/src/hashable_intf.ml"),
     cst$55=caml_string_of_jsbytes(""),
     cst_core$162=caml_string_of_jsbytes("core"),
     cst_core$163=caml_string_of_jsbytes("core"),
     cst_Core_Hashable_intf$0=caml_string_of_jsbytes("Core__Hashable_intf"),
     cst_Core_Hashable=caml_string_of_jsbytes("Core__Hashable"),
     cst_core$164=caml_string_of_jsbytes("core"),
     cst_core_src_hashable_ml=caml_string_of_jsbytes("core/src/hashable.ml"),
     cst$56=caml_string_of_jsbytes(""),
     cst_core$165=caml_string_of_jsbytes("core"),
     cst_core$166=caml_string_of_jsbytes("core"),
     cst_Core_Hashable$0=caml_string_of_jsbytes("Core__Hashable"),
     cst_Core_Hexdump_intf=caml_string_of_jsbytes("Core__Hexdump_intf"),
     cst_core$167=caml_string_of_jsbytes("core"),
     cst_core_src_hexdump_intf_ml=
      caml_string_of_jsbytes("core/src/hexdump_intf.ml"),
     cst$57=caml_string_of_jsbytes(""),
     cst_core$168=caml_string_of_jsbytes("core"),
     cst_core$169=caml_string_of_jsbytes("core"),
     cst_Core_Hexdump_intf$0=caml_string_of_jsbytes("Core__Hexdump_intf"),
     cst$60=caml_string_of_jsbytes("..."),
     partial=
      [12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,0]]]]]]]]]],
     partial$0=
      [2,
       0,
       [12,
        32,
        [2,
         0,
         [12,
          32,
          [2,
           0,
           [11,
            caml_string_of_jsbytes("  "),
            [2,0,[12,32,[2,0,[12,32,[2,0,partial]]]]]]]]]]],
     cst$59=caml_string_of_jsbytes("  "),
     cst_Core_Hexdump=caml_string_of_jsbytes("Core__Hexdump"),
     cst_core$170=caml_string_of_jsbytes("core"),
     cst_core_src_hexdump_ml=caml_string_of_jsbytes("core/src/hexdump.ml"),
     cst$58=caml_string_of_jsbytes(""),
     cst_core$171=caml_string_of_jsbytes("core"),
     cst_core$172=caml_string_of_jsbytes("core"),
     cst_Core_Hexdump$0=caml_string_of_jsbytes("Core__Hexdump"),
     cst_Core_Identifiable_intf=
      caml_string_of_jsbytes("Core__Identifiable_intf"),
     cst_core$173=caml_string_of_jsbytes("core"),
     cst_core_src_identifiable_intf=
      caml_string_of_jsbytes("core/src/identifiable_intf.ml"),
     cst$61=caml_string_of_jsbytes(""),
     cst_core$174=caml_string_of_jsbytes("core"),
     cst_core$175=caml_string_of_jsbytes("core"),
     cst_Core_Identifiable_intf$0=
      caml_string_of_jsbytes("Core__Identifiable_intf"),
     cst_Core_Identifiable=caml_string_of_jsbytes("Core__Identifiable"),
     cst_core$176=caml_string_of_jsbytes("core"),
     cst_core_src_identifiable_ml=
      caml_string_of_jsbytes("core/src/identifiable.ml"),
     cst$62=caml_string_of_jsbytes(""),
     cst_core$177=caml_string_of_jsbytes("core"),
     cst_core$178=caml_string_of_jsbytes("core"),
     cst_Core_Identifiable$0=caml_string_of_jsbytes("Core__Identifiable"),
     cst_Core_Stable_comparable=
      caml_string_of_jsbytes("Core__Stable_comparable"),
     cst_core$179=caml_string_of_jsbytes("core"),
     cst_core_src_stable_comparable=
      caml_string_of_jsbytes("core/src/stable_comparable.ml"),
     cst$63=caml_string_of_jsbytes(""),
     cst_core$180=caml_string_of_jsbytes("core"),
     cst_core$181=caml_string_of_jsbytes("core"),
     cst_Core_Stable_comparable$0=
      caml_string_of_jsbytes("Core__Stable_comparable"),
     cst_Core_String=caml_string_of_jsbytes("Core__String"),
     cst_core$182=caml_string_of_jsbytes("core"),
     cst_core_src_string_ml=caml_string_of_jsbytes("core/src/string.ml"),
     cst$64=caml_string_of_jsbytes(""),
     cst_core$183=caml_string_of_jsbytes("core"),
     cst_t$103=caml_string_of_jsbytes("t"),
     cst_core_src_string_ml_12_6=
      caml_string_of_jsbytes("core/src/string.ml:12:6"),
     cst_t$104=caml_string_of_jsbytes("t"),
     cst_t$105=caml_string_of_jsbytes("t"),
     cst_core_src_string_ml_29_4=
      caml_string_of_jsbytes("core/src/string.ml:29:4"),
     cst_t$106=caml_string_of_jsbytes("t"),
     name$12=caml_string_of_jsbytes("core/src/string.ml.t"),
     cst_t$107=caml_string_of_jsbytes("t"),
     cst_core_src_string_ml_47_6=
      caml_string_of_jsbytes("core/src/string.ml:47:6"),
     cst_t$108=caml_string_of_jsbytes("t"),
     cst_core$184=caml_string_of_jsbytes("core"),
     cst_Core_String$0=caml_string_of_jsbytes("Core__String"),
     cst_Bool_of_string_hum_invalid=
      caml_string_of_jsbytes("Bool.of_string_hum: invalid input"),
     cst_Core_Bool=caml_string_of_jsbytes("Core__Bool"),
     cst_core$185=caml_string_of_jsbytes("core"),
     cst_core_src_bool_ml=caml_string_of_jsbytes("core/src/bool.ml"),
     cst$65=caml_string_of_jsbytes(""),
     cst_core$186=caml_string_of_jsbytes("core"),
     cst_t$109=caml_string_of_jsbytes("t"),
     cst_core_src_bool_ml_3_0=caml_string_of_jsbytes("core/src/bool.ml:3:0"),
     cst_t$110=caml_string_of_jsbytes("t"),
     name$13=caml_string_of_jsbytes("core/src/bool.ml.t"),
     cst_t$111=caml_string_of_jsbytes("t"),
     cst_core_src_bool_ml_9_6=caml_string_of_jsbytes("core/src/bool.ml:9:6"),
     cst_t$112=caml_string_of_jsbytes("t"),
     cst_t$113=caml_string_of_jsbytes("t"),
     cst_core_src_bool_ml_52_4=caml_string_of_jsbytes("core/src/bool.ml:52:4"),
     cst_t$114=caml_string_of_jsbytes("t"),
     cst_core$187=caml_string_of_jsbytes("core"),
     cst_Core_Bool$0=caml_string_of_jsbytes("Core__Bool"),
     cst_Core_Bytes=caml_string_of_jsbytes("Core__Bytes"),
     cst_core$188=caml_string_of_jsbytes("core"),
     cst_core_src_bytes_ml=caml_string_of_jsbytes("core/src/bytes.ml"),
     cst$66=caml_string_of_jsbytes(""),
     cst_core$189=caml_string_of_jsbytes("core"),
     cst_t$115=caml_string_of_jsbytes("t"),
     cst_core_src_bytes_ml_8_4=caml_string_of_jsbytes("core/src/bytes.ml:8:4"),
     cst_t$116=caml_string_of_jsbytes("t"),
     name$14=caml_string_of_jsbytes("core/src/bytes.ml.Stable.V1.t"),
     cst_core$190=caml_string_of_jsbytes("core"),
     cst_Core_Bytes$0=caml_string_of_jsbytes("Core__Bytes"),
     cst_Core_Char=caml_string_of_jsbytes("Core__Char"),
     cst_core$191=caml_string_of_jsbytes("core"),
     cst_core_src_char_ml=caml_string_of_jsbytes("core/src/char.ml"),
     cst$67=caml_string_of_jsbytes(""),
     cst_core$192=caml_string_of_jsbytes("core"),
     name$15=caml_string_of_jsbytes("core/src/char.ml.t"),
     cst_t$117=caml_string_of_jsbytes("t"),
     cst_core_src_char_ml_9_6=caml_string_of_jsbytes("core/src/char.ml:9:6"),
     cst_t$118=caml_string_of_jsbytes("t"),
     cst_t$119=caml_string_of_jsbytes("t"),
     cst_core_src_char_ml_25_4=caml_string_of_jsbytes("core/src/char.ml:25:4"),
     cst_t$120=caml_string_of_jsbytes("t"),
     cst_core$193=caml_string_of_jsbytes("core"),
     cst_Core_Char$0=caml_string_of_jsbytes("Core__Char"),
     cst_Core_Core_pervasives=caml_string_of_jsbytes("Core__Core_pervasives"),
     cst_core$194=caml_string_of_jsbytes("core"),
     cst_core_src_core_pervasives_m=
      caml_string_of_jsbytes("core/src/core_pervasives.ml"),
     cst$68=caml_string_of_jsbytes(""),
     cst_core$195=caml_string_of_jsbytes("core"),
     cst_core$196=caml_string_of_jsbytes("core"),
     cst_Core_Core_pervasives$0=
      caml_string_of_jsbytes("Core__Core_pervasives"),
     cst_Core_Robustly_comparable=
      caml_string_of_jsbytes("Core__Robustly_comparable"),
     cst_core$197=caml_string_of_jsbytes("core"),
     cst_core_src_robustly_comparab=
      caml_string_of_jsbytes("core/src/robustly_comparable.ml"),
     cst$69=caml_string_of_jsbytes(""),
     cst_core$198=caml_string_of_jsbytes("core"),
     cst_core$199=caml_string_of_jsbytes("core"),
     cst_Core_Robustly_comparable$0=
      caml_string_of_jsbytes("Core__Robustly_comparable"),
     cst_Neg$1=caml_string_of_jsbytes("Neg"),
     cst_Zero$1=caml_string_of_jsbytes("Zero"),
     cst_Pos$1=caml_string_of_jsbytes("Pos"),
     cst_core_src_sign_ml_Stable_V1=
      caml_string_of_jsbytes("core/src/sign.ml.Stable.V1.t"),
     cst_Neg=caml_string_of_jsbytes("Neg"),
     cst_Pos=caml_string_of_jsbytes("Pos"),
     cst_Zero=caml_string_of_jsbytes("Zero"),
     cst_neg=caml_string_of_jsbytes("neg"),
     cst_pos=caml_string_of_jsbytes("pos"),
     cst_zero=caml_string_of_jsbytes("zero"),
     cst_Neg$0=caml_string_of_jsbytes("Neg"),
     cst_Pos$0=caml_string_of_jsbytes("Pos"),
     cst_Zero$0=caml_string_of_jsbytes("Zero"),
     cst_neg$0=caml_string_of_jsbytes("neg"),
     cst_pos$0=caml_string_of_jsbytes("pos"),
     cst_zero$0=caml_string_of_jsbytes("zero"),
     cst_Core_Sign=caml_string_of_jsbytes("Core__Sign"),
     cst_core$200=caml_string_of_jsbytes("core"),
     cst_core_src_sign_ml=caml_string_of_jsbytes("core/src/sign.ml"),
     cst$70=caml_string_of_jsbytes(""),
     cst_core$201=caml_string_of_jsbytes("core"),
     error_source_003=caml_string_of_jsbytes("core/src/sign.ml.Stable.V1.t"),
     cst_t$121=caml_string_of_jsbytes("t"),
     cst_core_src_sign_ml_6_4=caml_string_of_jsbytes("core/src/sign.ml:6:4"),
     cst_t$122=caml_string_of_jsbytes("t"),
     name$16=caml_string_of_jsbytes("core/src/sign.ml.Stable.V1.t"),
     cst_core$202=caml_string_of_jsbytes("core"),
     cst_Core_Sign$0=caml_string_of_jsbytes("Core__Sign"),
     cst_12g=caml_string_of_jsbytes("%.12g"),
     cst$72=caml_string_of_jsbytes("."),
     cst_Core_Float=caml_string_of_jsbytes("Core__Float"),
     cst_core$203=caml_string_of_jsbytes("core"),
     cst_core_src_float_ml=caml_string_of_jsbytes("core/src/float.ml"),
     cst$71=caml_string_of_jsbytes(""),
     cst_core$204=caml_string_of_jsbytes("core"),
     cst_t$123=caml_string_of_jsbytes("t"),
     cst_core_src_float_ml_25_2=
      caml_string_of_jsbytes("core/src/float.ml:25:2"),
     cst_t$124=caml_string_of_jsbytes("t"),
     name$17=caml_string_of_jsbytes("core/src/float.ml.T.t"),
     cst_t$125=caml_string_of_jsbytes("t"),
     cst_core_src_float_ml_111_2=
      caml_string_of_jsbytes("core/src/float.ml:111:2"),
     cst_t$126=caml_string_of_jsbytes("t"),
     cst_core$205=caml_string_of_jsbytes("core"),
     cst_Core_Float$0=caml_string_of_jsbytes("Core__Float"),
     cst_Core_Int=caml_string_of_jsbytes("Core__Int"),
     cst_core$206=caml_string_of_jsbytes("core"),
     cst_core_src_int_ml=caml_string_of_jsbytes("core/src/int.ml"),
     cst$73=caml_string_of_jsbytes(""),
     cst_core$207=caml_string_of_jsbytes("core"),
     cst_t$127=caml_string_of_jsbytes("t"),
     cst_core_src_int_ml_8_6=caml_string_of_jsbytes("core/src/int.ml:8:6"),
     cst_t$128=caml_string_of_jsbytes("t"),
     cst_t$129=caml_string_of_jsbytes("t"),
     cst_core_src_int_ml_20_6=caml_string_of_jsbytes("core/src/int.ml:20:6"),
     cst_t$130=caml_string_of_jsbytes("t"),
     name$18=caml_string_of_jsbytes("core/src/int.ml.t"),
     name$19=caml_string_of_jsbytes("core/src/int.ml.Hex.t"),
     cst_t$131=caml_string_of_jsbytes("t"),
     cst_core_src_int_ml_36_2=caml_string_of_jsbytes("core/src/int.ml:36:2"),
     cst_t$132=caml_string_of_jsbytes("t"),
     cst_core$208=caml_string_of_jsbytes("core"),
     cst_Core_Int$0=caml_string_of_jsbytes("Core__Int"),
     cst_Core_Int32=caml_string_of_jsbytes("Core__Int32"),
     cst_core$209=caml_string_of_jsbytes("core"),
     cst_core_src_int32_ml=caml_string_of_jsbytes("core/src/int32.ml"),
     cst$74=caml_string_of_jsbytes(""),
     cst_core$210=caml_string_of_jsbytes("core"),
     cst_t$133=caml_string_of_jsbytes("t"),
     cst_core_src_int32_ml_7_6=caml_string_of_jsbytes("core/src/int32.ml:7:6"),
     cst_t$134=caml_string_of_jsbytes("t"),
     name$20=caml_string_of_jsbytes("core/src/int32.ml.t"),
     name$21=caml_string_of_jsbytes("core/src/int32.ml.Hex.t"),
     cst_t$135=caml_string_of_jsbytes("t"),
     cst_core_src_int32_ml_18_2=
      caml_string_of_jsbytes("core/src/int32.ml:18:2"),
     cst_t$136=caml_string_of_jsbytes("t"),
     cst_core$211=caml_string_of_jsbytes("core"),
     cst_Core_Int32$0=caml_string_of_jsbytes("Core__Int32"),
     cst_Core_Int64=caml_string_of_jsbytes("Core__Int64"),
     cst_core$212=caml_string_of_jsbytes("core"),
     cst_core_src_int64_ml=caml_string_of_jsbytes("core/src/int64.ml"),
     cst$75=caml_string_of_jsbytes(""),
     cst_core$213=caml_string_of_jsbytes("core"),
     cst_t$137=caml_string_of_jsbytes("t"),
     cst_core_src_int64_ml_7_6=caml_string_of_jsbytes("core/src/int64.ml:7:6"),
     cst_t$138=caml_string_of_jsbytes("t"),
     name$22=caml_string_of_jsbytes("core/src/int64.ml.t"),
     name$23=caml_string_of_jsbytes("core/src/int64.ml.Hex.t"),
     cst_t$139=caml_string_of_jsbytes("t"),
     cst_core_src_int64_ml_18_2=
      caml_string_of_jsbytes("core/src/int64.ml:18:2"),
     cst_t$140=caml_string_of_jsbytes("t"),
     cst_core$214=caml_string_of_jsbytes("core"),
     cst_Core_Int64$0=caml_string_of_jsbytes("Core__Int64"),
     cst_Core_Int_intf=caml_string_of_jsbytes("Core__Int_intf"),
     cst_core$215=caml_string_of_jsbytes("core"),
     cst_core_src_int_intf_ml=caml_string_of_jsbytes("core/src/int_intf.ml"),
     cst$76=caml_string_of_jsbytes(""),
     cst_core$216=caml_string_of_jsbytes("core"),
     cst_core$217=caml_string_of_jsbytes("core"),
     cst_Core_Int_intf$0=caml_string_of_jsbytes("Core__Int_intf"),
     cst_Core_Int63=caml_string_of_jsbytes("Core__Int63"),
     cst_core$218=caml_string_of_jsbytes("core"),
     cst_core_src_int63_ml=caml_string_of_jsbytes("core/src/int63.ml"),
     cst$77=caml_string_of_jsbytes(""),
     cst_core$219=caml_string_of_jsbytes("core"),
     name$24=caml_string_of_jsbytes("core/src/int63.ml.Hex.t"),
     cst_t$141=caml_string_of_jsbytes("t"),
     cst_core_src_int63_ml_78_2=
      caml_string_of_jsbytes("core/src/int63.ml:78:2"),
     cst_t$142=caml_string_of_jsbytes("t"),
     cst_core$220=caml_string_of_jsbytes("core"),
     cst_Core_Int63$0=caml_string_of_jsbytes("Core__Int63"),
     cst_Core_Stable_int63able=
      caml_string_of_jsbytes("Core__Stable_int63able"),
     cst_core$221=caml_string_of_jsbytes("core"),
     cst_core_src_stable_int63able_=
      caml_string_of_jsbytes("core/src/stable_int63able.ml"),
     cst$78=caml_string_of_jsbytes(""),
     cst_core$222=caml_string_of_jsbytes("core"),
     cst_core$223=caml_string_of_jsbytes("core"),
     cst_Core_Stable_int63able$0=
      caml_string_of_jsbytes("Core__Stable_int63able"),
     cst_core_src_unit_ml$0=caml_string_of_jsbytes("core/src/unit.ml"),
     cst_Core_Unit=caml_string_of_jsbytes("Core__Unit"),
     cst_core$224=caml_string_of_jsbytes("core"),
     cst_core_src_unit_ml=caml_string_of_jsbytes("core/src/unit.ml"),
     cst$79=caml_string_of_jsbytes(""),
     cst_core$225=caml_string_of_jsbytes("core"),
     cst_t$143=caml_string_of_jsbytes("t"),
     cst_core_src_unit_ml_7_6=caml_string_of_jsbytes("core/src/unit.ml:7:6"),
     cst_t$144=caml_string_of_jsbytes("t"),
     cst_core_src_unit_ml$1=caml_string_of_jsbytes("core/src/unit.ml"),
     cst_core_src_unit_ml$2=caml_string_of_jsbytes("core/src/unit.ml"),
     cst_core_src_unit_ml$3=caml_string_of_jsbytes("core/src/unit.ml"),
     cst_core_src_unit_ml$4=caml_string_of_jsbytes("core/src/unit.ml"),
     cst_48b2027e5c11a1ded1fbe5a2e8=
      caml_string_of_jsbytes("48b2027e5c11a1ded1fbe5a2e84ef7bd"),
     cst_t$145=caml_string_of_jsbytes("t"),
     cst_core_src_unit_ml_26_6=caml_string_of_jsbytes("core/src/unit.ml:26:6"),
     cst_t$146=caml_string_of_jsbytes("t"),
     name$25=caml_string_of_jsbytes("core/src/unit.ml.t"),
     cst_core$226=caml_string_of_jsbytes("core"),
     cst_Core_Unit$0=caml_string_of_jsbytes("Core__Unit"),
     cst_Core_Interfaces=caml_string_of_jsbytes("Core__Interfaces"),
     cst_core$227=caml_string_of_jsbytes("core"),
     cst_core_src_interfaces_ml=
      caml_string_of_jsbytes("core/src/interfaces.ml"),
     cst$80=caml_string_of_jsbytes(""),
     cst_core$228=caml_string_of_jsbytes("core"),
     cst_core$229=caml_string_of_jsbytes("core"),
     cst_Core_Interfaces$0=caml_string_of_jsbytes("Core__Interfaces"),
     cst_t$148=caml_string_of_jsbytes("t"),
     cst_Core_Lazy=caml_string_of_jsbytes("Core__Lazy"),
     cst_core$230=caml_string_of_jsbytes("core"),
     cst_core_src_lazy_ml=caml_string_of_jsbytes("core/src/lazy.ml"),
     cst$81=caml_string_of_jsbytes(""),
     cst_core$231=caml_string_of_jsbytes("core"),
     cst_a$58=caml_string_of_jsbytes("a"),
     cst_core_src_lazy_ml_8_16=caml_string_of_jsbytes("core/src/lazy.ml:8:16"),
     cst_a$59=caml_string_of_jsbytes("a"),
     cst_t$147=caml_string_of_jsbytes("t"),
     cst_core_src_lazy_ml_8_4=caml_string_of_jsbytes("core/src/lazy.ml:8:4"),
     name$26=caml_string_of_jsbytes("core/src/lazy.ml.Stable.V1.t"),
     cst_core$232=caml_string_of_jsbytes("core"),
     cst_Core_Lazy$0=caml_string_of_jsbytes("Core__Lazy"),
     cst_Core_Nativeint=caml_string_of_jsbytes("Core__Nativeint"),
     cst_core$233=caml_string_of_jsbytes("core"),
     cst_core_src_nativeint_ml=caml_string_of_jsbytes("core/src/nativeint.ml"),
     cst$82=caml_string_of_jsbytes(""),
     cst_core$234=caml_string_of_jsbytes("core"),
     cst_t$149=caml_string_of_jsbytes("t"),
     cst_core_src_nativeint_ml_7_6=
      caml_string_of_jsbytes("core/src/nativeint.ml:7:6"),
     cst_t$150=caml_string_of_jsbytes("t"),
     name$27=caml_string_of_jsbytes("core/src/nativeint.ml.t"),
     name$28=caml_string_of_jsbytes("core/src/nativeint.ml.Hex.t"),
     cst_t$151=caml_string_of_jsbytes("t"),
     cst_core_src_nativeint_ml_18_2=
      caml_string_of_jsbytes("core/src/nativeint.ml:18:2"),
     cst_t$152=caml_string_of_jsbytes("t"),
     cst_core$235=caml_string_of_jsbytes("core"),
     cst_Core_Nativeint$0=caml_string_of_jsbytes("Core__Nativeint"),
     cst_Core_Nothing=caml_string_of_jsbytes("Core__Nothing"),
     cst_core$236=caml_string_of_jsbytes("core"),
     cst_core_src_nothing_ml=caml_string_of_jsbytes("core/src/nothing.ml"),
     cst$83=caml_string_of_jsbytes(""),
     cst_core$237=caml_string_of_jsbytes("core"),
     cst_t$153=caml_string_of_jsbytes("t"),
     cst_core_src_nothing_ml_8_6=
      caml_string_of_jsbytes("core/src/nothing.ml:8:6"),
     cst_t$154=caml_string_of_jsbytes("t"),
     cst_Stable_V1_t=caml_string_of_jsbytes(".Stable.V1.t"),
     cst_core$238=caml_string_of_jsbytes("core"),
     cst_Core_Nothing$0=caml_string_of_jsbytes("Core__Nothing"),
     cst_Core_Never_returns=caml_string_of_jsbytes("Core__Never_returns"),
     cst_core$239=caml_string_of_jsbytes("core"),
     cst_core_src_never_returns_ml=
      caml_string_of_jsbytes("core/src/never_returns.ml"),
     cst$84=caml_string_of_jsbytes(""),
     cst_core$240=caml_string_of_jsbytes("core"),
     cst_core$241=caml_string_of_jsbytes("core"),
     cst_Core_Never_returns$0=caml_string_of_jsbytes("Core__Never_returns"),
     cst_core_src_ordering_ml_t=
      caml_string_of_jsbytes("core/src/ordering.ml.t"),
     cst_Core_Ordering=caml_string_of_jsbytes("Core__Ordering"),
     cst_core$242=caml_string_of_jsbytes("core"),
     cst_core_src_ordering_ml=caml_string_of_jsbytes("core/src/ordering.ml"),
     cst$85=caml_string_of_jsbytes(""),
     cst_core$243=caml_string_of_jsbytes("core"),
     cst_t$155=caml_string_of_jsbytes("t"),
     cst_core_src_ordering_ml_3_0=
      caml_string_of_jsbytes("core/src/ordering.ml:3:0"),
     cst_t$156=caml_string_of_jsbytes("t"),
     cst_core$244=caml_string_of_jsbytes("core"),
     cst_Core_Ordering$0=caml_string_of_jsbytes("Core__Ordering"),
     cst_t$160=caml_string_of_jsbytes("t"),
     cst_t$158=caml_string_of_jsbytes("t"),
     cst_Core_Ref=caml_string_of_jsbytes("Core__Ref"),
     cst_core$245=caml_string_of_jsbytes("core"),
     cst_core_src_ref_ml=caml_string_of_jsbytes("core/src/ref.ml"),
     cst$86=caml_string_of_jsbytes(""),
     cst_core$246=caml_string_of_jsbytes("core"),
     cst_a$60=caml_string_of_jsbytes("a"),
     cst_core_src_ref_ml_9_16=caml_string_of_jsbytes("core/src/ref.ml:9:16"),
     cst_a$61=caml_string_of_jsbytes("a"),
     cst_t$157=caml_string_of_jsbytes("t"),
     cst_core_src_ref_ml_9_4=caml_string_of_jsbytes("core/src/ref.ml:9:4"),
     name$29=caml_string_of_jsbytes("core/src/ref.ml.T.t"),
     cst_a$62=caml_string_of_jsbytes("a"),
     cst_core_src_ref_ml_22_25=caml_string_of_jsbytes("core/src/ref.ml:22:25"),
     cst_perms$4=caml_string_of_jsbytes("perms"),
     cst_a$63=caml_string_of_jsbytes("a"),
     cst_t$159=caml_string_of_jsbytes("t"),
     cst_core_src_ref_ml_22_2=caml_string_of_jsbytes("core/src/ref.ml:22:2"),
     cst_core$247=caml_string_of_jsbytes("core"),
     cst_Core_Ref$0=caml_string_of_jsbytes("Core__Ref"),
     cst_Core_Source_code_position=
      caml_string_of_jsbytes("Core__Source_code_position"),
     cst_core$248=caml_string_of_jsbytes("core"),
     cst_core_src_source_code_posit$2=
      caml_string_of_jsbytes("core/src/source_code_position.ml"),
     cst$87=caml_string_of_jsbytes(""),
     cst_core$249=caml_string_of_jsbytes("core"),
     cst_core$250=caml_string_of_jsbytes("core"),
     cst_Core_Source_code_position$0=
      caml_string_of_jsbytes("Core__Source_code_position"),
     cst_ref$0=caml_string_of_jsbytes("ref"),
     cst_option$0=caml_string_of_jsbytes("option"),
     cst_list$0=caml_string_of_jsbytes("list"),
     cst_lazy_t$0=caml_string_of_jsbytes("lazy_t"),
     cst_array$0=caml_string_of_jsbytes("array"),
     cst_Core_Std_internal=caml_string_of_jsbytes("Core__Std_internal"),
     cst_core$251=caml_string_of_jsbytes("core"),
     cst_core_src_std_internal_ml=
      caml_string_of_jsbytes("core/src/std_internal.ml"),
     cst$88=caml_string_of_jsbytes(""),
     cst_core$252=caml_string_of_jsbytes("core"),
     cst_Bug=caml_string_of_jsbytes("Bug"),
     cst_Core_Std_internal_C_malloc=
      caml_string_of_jsbytes("Core__Std_internal.C_malloc_exn"),
     cst_C_malloc_exn=caml_string_of_jsbytes("C_malloc_exn"),
     cst_a$64=caml_string_of_jsbytes("a"),
     cst_core_src_std_internal_ml_1=
      caml_string_of_jsbytes("core/src/std_internal.ml:131:18"),
     cst_a$65=caml_string_of_jsbytes("a"),
     cst_array=caml_string_of_jsbytes("array"),
     cst_core_src_std_internal_ml_1$0=
      caml_string_of_jsbytes("core/src/std_internal.ml:131:2"),
     name$30=caml_string_of_jsbytes("core/src/std_internal.ml.array"),
     cst_bool=caml_string_of_jsbytes("bool"),
     cst_core_src_std_internal_ml_1$1=
      caml_string_of_jsbytes("core/src/std_internal.ml:134:2"),
     cst_bool$0=caml_string_of_jsbytes("bool"),
     name$31=caml_string_of_jsbytes("core/src/std_internal.ml.bool"),
     cst_char=caml_string_of_jsbytes("char"),
     cst_core_src_std_internal_ml_1$2=
      caml_string_of_jsbytes("core/src/std_internal.ml:137:2"),
     cst_char$0=caml_string_of_jsbytes("char"),
     name$32=caml_string_of_jsbytes("core/src/std_internal.ml.char"),
     cst_float=caml_string_of_jsbytes("float"),
     cst_core_src_std_internal_ml_1$3=
      caml_string_of_jsbytes("core/src/std_internal.ml:140:2"),
     cst_float$0=caml_string_of_jsbytes("float"),
     name$33=caml_string_of_jsbytes("core/src/std_internal.ml.float"),
     cst_int=caml_string_of_jsbytes("int"),
     cst_core_src_std_internal_ml_1$4=
      caml_string_of_jsbytes("core/src/std_internal.ml:143:2"),
     cst_int$0=caml_string_of_jsbytes("int"),
     name$34=caml_string_of_jsbytes("core/src/std_internal.ml.int"),
     cst_int32=caml_string_of_jsbytes("int32"),
     cst_core_src_std_internal_ml_1$5=
      caml_string_of_jsbytes("core/src/std_internal.ml:146:2"),
     cst_int32$0=caml_string_of_jsbytes("int32"),
     name$35=caml_string_of_jsbytes("core/src/std_internal.ml.int32"),
     cst_int64=caml_string_of_jsbytes("int64"),
     cst_core_src_std_internal_ml_1$6=
      caml_string_of_jsbytes("core/src/std_internal.ml:149:2"),
     cst_int64$0=caml_string_of_jsbytes("int64"),
     name$36=caml_string_of_jsbytes("core/src/std_internal.ml.int64"),
     cst_a$66=caml_string_of_jsbytes("a"),
     cst_core_src_std_internal_ml_1$7=
      caml_string_of_jsbytes("core/src/std_internal.ml:152:19"),
     cst_a$67=caml_string_of_jsbytes("a"),
     cst_lazy_t=caml_string_of_jsbytes("lazy_t"),
     cst_core_src_std_internal_ml_1$8=
      caml_string_of_jsbytes("core/src/std_internal.ml:152:2"),
     name$37=caml_string_of_jsbytes("core/src/std_internal.ml.lazy_t"),
     cst_a$68=caml_string_of_jsbytes("a"),
     cst_core_src_std_internal_ml_1$9=
      caml_string_of_jsbytes("core/src/std_internal.ml:155:17"),
     cst_a$69=caml_string_of_jsbytes("a"),
     cst_list=caml_string_of_jsbytes("list"),
     cst_core_src_std_internal_ml_1$10=
      caml_string_of_jsbytes("core/src/std_internal.ml:155:2"),
     name$38=caml_string_of_jsbytes("core/src/std_internal.ml.list"),
     cst_nativeint=caml_string_of_jsbytes("nativeint"),
     cst_core_src_std_internal_ml_1$11=
      caml_string_of_jsbytes("core/src/std_internal.ml:158:2"),
     cst_nativeint$0=caml_string_of_jsbytes("nativeint"),
     name$39=caml_string_of_jsbytes("core/src/std_internal.ml.nativeint"),
     cst_a$70=caml_string_of_jsbytes("a"),
     cst_core_src_std_internal_ml_1$12=
      caml_string_of_jsbytes("core/src/std_internal.ml:161:19"),
     cst_a$71=caml_string_of_jsbytes("a"),
     cst_option=caml_string_of_jsbytes("option"),
     cst_core_src_std_internal_ml_1$13=
      caml_string_of_jsbytes("core/src/std_internal.ml:161:2"),
     name$40=caml_string_of_jsbytes("core/src/std_internal.ml.option"),
     cst_string=caml_string_of_jsbytes("string"),
     cst_core_src_std_internal_ml_1$14=
      caml_string_of_jsbytes("core/src/std_internal.ml:164:2"),
     cst_string$0=caml_string_of_jsbytes("string"),
     name$41=caml_string_of_jsbytes("core/src/std_internal.ml.string"),
     cst_bytes=caml_string_of_jsbytes("bytes"),
     cst_core_src_std_internal_ml_1$15=
      caml_string_of_jsbytes("core/src/std_internal.ml:167:2"),
     cst_bytes$0=caml_string_of_jsbytes("bytes"),
     name$42=caml_string_of_jsbytes("core/src/std_internal.ml.bytes"),
     cst_a$72=caml_string_of_jsbytes("a"),
     cst_core_src_std_internal_ml_1$16=
      caml_string_of_jsbytes("core/src/std_internal.ml:169:16"),
     cst_a$73=caml_string_of_jsbytes("a"),
     cst_ref=caml_string_of_jsbytes("ref"),
     cst_core_src_std_internal_ml_1$17=
      caml_string_of_jsbytes("core/src/std_internal.ml:169:2"),
     name$43=caml_string_of_jsbytes("core/src/std_internal.ml.ref"),
     cst_unit=caml_string_of_jsbytes("unit"),
     cst_core_src_std_internal_ml_1$18=
      caml_string_of_jsbytes("core/src/std_internal.ml:172:2"),
     cst_unit$0=caml_string_of_jsbytes("unit"),
     name$44=caml_string_of_jsbytes("core/src/std_internal.ml.unit"),
     cst_float_array=caml_string_of_jsbytes("float_array"),
     cst_core_src_std_internal_ml_1$19=
      caml_string_of_jsbytes("core/src/std_internal.ml:177:4"),
     cst_float_array$0=caml_string_of_jsbytes("float_array"),
     name$45=caml_string_of_jsbytes("core/src/std_internal.ml.float_array"),
     cst_core$253=caml_string_of_jsbytes("core"),
     cst_Core_Std_internal$0=caml_string_of_jsbytes("Core__Std_internal"),
     cst_Core_Byte_units0=caml_string_of_jsbytes("Core__Byte_units0"),
     cst_core$254=caml_string_of_jsbytes("core"),
     cst_core_src_byte_units0_ml=
      caml_string_of_jsbytes("core/src/byte_units0.ml"),
     cst$89=caml_string_of_jsbytes(""),
     cst_core$255=caml_string_of_jsbytes("core"),
     cst_core$256=caml_string_of_jsbytes("core"),
     cst_Core_Byte_units0$0=caml_string_of_jsbytes("Core__Byte_units0"),
     cst_Bigstring_write_bin_prot_n=
      caml_string_of_jsbytes("Bigstring.write_bin_prot: negative pos"),
     cst_Bigstring_write_bin_prot_n$0=
      caml_string_of_jsbytes("Bigstring.write_bin_prot: not enough room"),
     cst_Bigstring_write_bin_prot_b=
      caml_string_of_jsbytes("Bigstring.write_bin_prot bug!"),
     cst_not_enough_data=caml_string_of_jsbytes("not enough data"),
     cst_Invalid_data=caml_string_of_jsbytes("Invalid data"),
     cst_pos_ref_expected_pos=
      caml_string_of_jsbytes("pos_ref <> expected_pos"),
     cst_read_bin_prot_verbose_erro=
      caml_string_of_jsbytes("read_bin_prot_verbose_errors"),
     cst_negative_element_length_d=
      caml_string_of_jsbytes("negative element length %d"),
     cst_Core_Bigstring=caml_string_of_jsbytes("Core__Bigstring"),
     cst_core$257=caml_string_of_jsbytes("core"),
     cst_core_src_bigstring_ml=caml_string_of_jsbytes("core/src/bigstring.ml"),
     cst$90=caml_string_of_jsbytes(""),
     cst_core$258=caml_string_of_jsbytes("core"),
     cst_t$161=caml_string_of_jsbytes("t"),
     cst_core_src_bigstring_ml_12_6=
      caml_string_of_jsbytes("core/src/bigstring.ml:12:6"),
     cst_t$162=caml_string_of_jsbytes("t"),
     cst_t_frozen=caml_string_of_jsbytes("t_frozen"),
     cst_core_src_bigstring_ml_17_4=
      caml_string_of_jsbytes("core/src/bigstring.ml:17:4"),
     cst_t_frozen$0=caml_string_of_jsbytes("t_frozen"),
     cst_core$259=caml_string_of_jsbytes("core"),
     cst_Core_Bigstring$0=caml_string_of_jsbytes("Core__Bigstring"),
     cst_Core_Core_bin_prot=caml_string_of_jsbytes("Core__Core_bin_prot"),
     cst_core$260=caml_string_of_jsbytes("core"),
     cst_core_src_core_bin_prot_ml=
      caml_string_of_jsbytes("core/src/core_bin_prot.ml"),
     cst$91=caml_string_of_jsbytes(""),
     cst_core$261=caml_string_of_jsbytes("core"),
     cst_core$262=caml_string_of_jsbytes("core"),
     cst_Core_Core_bin_prot$0=caml_string_of_jsbytes("Core__Core_bin_prot"),
     cst_Core_Md5=caml_string_of_jsbytes("Core__Md5"),
     cst_core$263=caml_string_of_jsbytes("core"),
     cst_core_src_md5_ml=caml_string_of_jsbytes("core/src/md5.ml"),
     cst$92=caml_string_of_jsbytes(""),
     cst_core$264=caml_string_of_jsbytes("core"),
     cst_core$265=caml_string_of_jsbytes("core"),
     cst_Core_Md5$0=caml_string_of_jsbytes("Core__Md5"),
     cst_Core_Zone_intf=caml_string_of_jsbytes("Core__Zone_intf"),
     cst_core$266=caml_string_of_jsbytes("core"),
     cst_core_src_zone_intf_ml=caml_string_of_jsbytes("core/src/zone_intf.ml"),
     cst$93=caml_string_of_jsbytes(""),
     cst_core$267=caml_string_of_jsbytes("core"),
     cst_core$268=caml_string_of_jsbytes("core"),
     cst_Core_Zone_intf$0=caml_string_of_jsbytes("Core__Zone_intf"),
     cst_Core_Binable=caml_string_of_jsbytes("Core__Binable"),
     cst_core$269=caml_string_of_jsbytes("core"),
     cst_core_src_binable_ml=caml_string_of_jsbytes("core/src/binable.ml"),
     cst$94=caml_string_of_jsbytes(""),
     cst_core$270=caml_string_of_jsbytes("core"),
     cst_core$271=caml_string_of_jsbytes("core"),
     cst_Core_Binable$0=caml_string_of_jsbytes("Core__Binable"),
     cst_UTC=caml_string_of_jsbytes("UTC"),
     cst$96=caml_string_of_jsbytes("-"),
     cst$97=caml_string_of_jsbytes("+"),
     cst_TZif=caml_string_of_jsbytes("TZif"),
     cst_magic_characters_TZif_not_=
      caml_string_of_jsbytes("magic characters TZif not present"),
     cst_expected_version_found_not=
      caml_string_of_jsbytes("expected version, found nothing"),
     cst_missing_terminating_charac=
      caml_string_of_jsbytes
       ("missing \0 terminating character in input_abbreviations"),
     cst_default_local_time_type$0=
      caml_string_of_jsbytes("default_local_time_type"),
     cst_digest$0=caml_string_of_jsbytes("digest"),
     cst_last_regime_index$0=caml_string_of_jsbytes("last_regime_index"),
     cst_leap_seconds$0=caml_string_of_jsbytes("leap_seconds"),
     cst_name$0=caml_string_of_jsbytes("name"),
     cst_original_filename$0=caml_string_of_jsbytes("original_filename"),
     cst_transitions$0=caml_string_of_jsbytes("transitions"),
     cst_leap_seconds$1=caml_string_of_jsbytes("leap_seconds"),
     cst_default_local_time_type$1=
      caml_string_of_jsbytes("default_local_time_type"),
     cst_last_regime_index$1=caml_string_of_jsbytes("last_regime_index"),
     cst_transitions$1=caml_string_of_jsbytes("transitions"),
     cst_digest$1=caml_string_of_jsbytes("digest"),
     cst_original_filename$1=caml_string_of_jsbytes("original_filename"),
     cst_name$1=caml_string_of_jsbytes("name"),
     cst_core_src_zone_ml_Stable_Fu=
      caml_string_of_jsbytes("core/src/zone.ml.Stable.Full_data.V1.t"),
     cst_new_regime$0=caml_string_of_jsbytes("new_regime"),
     cst_start_time_in_seconds_sinc$0=
      caml_string_of_jsbytes("start_time_in_seconds_since_epoch"),
     cst_new_regime$1=caml_string_of_jsbytes("new_regime"),
     cst_start_time_in_seconds_sinc$1=
      caml_string_of_jsbytes("start_time_in_seconds_since_epoch"),
     cst_seconds$0=caml_string_of_jsbytes("seconds"),
     cst_time_in_seconds_since_epoc$0=
      caml_string_of_jsbytes("time_in_seconds_since_epoch"),
     cst_seconds$1=caml_string_of_jsbytes("seconds"),
     cst_time_in_seconds_since_epoc$1=
      caml_string_of_jsbytes("time_in_seconds_since_epoch"),
     cst_abbrv$0=caml_string_of_jsbytes("abbrv"),
     cst_is_dst$0=caml_string_of_jsbytes("is_dst"),
     cst_utc_offset_in_seconds$0=
      caml_string_of_jsbytes("utc_offset_in_seconds"),
     cst_abbrv$1=caml_string_of_jsbytes("abbrv"),
     cst_is_dst$1=caml_string_of_jsbytes("is_dst"),
     cst_utc_offset_in_seconds$1=
      caml_string_of_jsbytes("utc_offset_in_seconds"),
     cst_Core_Zone=caml_string_of_jsbytes("Core__Zone"),
     cst_core$272=caml_string_of_jsbytes("core"),
     cst_core_src_zone_ml=caml_string_of_jsbytes("core/src/zone.ml"),
     cst$95=caml_string_of_jsbytes(""),
     cst_core$273=caml_string_of_jsbytes("core"),
     cst_Core_Zone_Invalid_file_for=
      caml_string_of_jsbytes("Core__Zone.Invalid_file_format"),
     cst_abbrv=caml_string_of_jsbytes("abbrv"),
     cst_is_dst=caml_string_of_jsbytes("is_dst"),
     cst_utc_offset_in_seconds=caml_string_of_jsbytes("utc_offset_in_seconds"),
     cst_t$163=caml_string_of_jsbytes("t"),
     cst_core_src_zone_ml_64_8=caml_string_of_jsbytes("core/src/zone.ml:64:8"),
     cst_t$164=caml_string_of_jsbytes("t"),
     error_source_020$0=
      caml_string_of_jsbytes("core/src/zone.ml.Stable.Full_data.V1.Regime.t"),
     cst_seconds=caml_string_of_jsbytes("seconds"),
     cst_time_in_seconds_since_epoc=
      caml_string_of_jsbytes("time_in_seconds_since_epoch"),
     cst_t$165=caml_string_of_jsbytes("t"),
     cst_core_src_zone_ml_76_8=caml_string_of_jsbytes("core/src/zone.ml:76:8"),
     cst_t$166=caml_string_of_jsbytes("t"),
     error_source_045=
      caml_string_of_jsbytes
       ("core/src/zone.ml.Stable.Full_data.V1.Leap_second.t"),
     cst_new_regime=caml_string_of_jsbytes("new_regime"),
     cst_start_time_in_seconds_sinc=
      caml_string_of_jsbytes("start_time_in_seconds_since_epoch"),
     cst_t$167=caml_string_of_jsbytes("t"),
     cst_core_src_zone_ml_84_8=caml_string_of_jsbytes("core/src/zone.ml:84:8"),
     cst_t$168=caml_string_of_jsbytes("t"),
     error_source_068=
      caml_string_of_jsbytes
       ("core/src/zone.ml.Stable.Full_data.V1.Transition.t"),
     cst_leap_seconds=caml_string_of_jsbytes("leap_seconds"),
     cst_default_local_time_type=
      caml_string_of_jsbytes("default_local_time_type"),
     cst_last_regime_index=caml_string_of_jsbytes("last_regime_index"),
     cst_transitions=caml_string_of_jsbytes("transitions"),
     cst_digest=caml_string_of_jsbytes("digest"),
     cst_original_filename=caml_string_of_jsbytes("original_filename"),
     cst_name=caml_string_of_jsbytes("name"),
     cst_t$169=caml_string_of_jsbytes("t"),
     cst_core_src_zone_ml_91_6=caml_string_of_jsbytes("core/src/zone.ml:91:6"),
     cst_t$170=caml_string_of_jsbytes("t"),
     error_source_106=
      caml_string_of_jsbytes("core/src/zone.ml.Stable.Full_data.V1.t"),
     cst_core$274=caml_string_of_jsbytes("core"),
     cst_Core_Zone$0=caml_string_of_jsbytes("Core__Zone"),
     cst_Core_Validated_intf=caml_string_of_jsbytes("Core__Validated_intf"),
     cst_core$275=caml_string_of_jsbytes("core"),
     cst_core_src_validated_intf_ml=
      caml_string_of_jsbytes("core/src/validated_intf.ml"),
     cst$98=caml_string_of_jsbytes(""),
     cst_core$276=caml_string_of_jsbytes("core"),
     cst_core$277=caml_string_of_jsbytes("core"),
     cst_Core_Validated_intf$0=caml_string_of_jsbytes("Core__Validated_intf"),
     name$47=caml_string_of_jsbytes("core/src/validated.ml.Add_typerep.t"),
     cst_validation_failed=caml_string_of_jsbytes("validation failed"),
     cst_Core_Validated=caml_string_of_jsbytes("Core__Validated"),
     cst_core$278=caml_string_of_jsbytes("core"),
     cst_core_src_validated_ml=caml_string_of_jsbytes("core/src/validated.ml"),
     cst$99=caml_string_of_jsbytes(""),
     cst_core$279=caml_string_of_jsbytes("core"),
     cst_core$280=caml_string_of_jsbytes("core"),
     cst_Core_Validated$0=caml_string_of_jsbytes("Core__Validated"),
     cst_Core_Type_equal=caml_string_of_jsbytes("Core__Type_equal"),
     cst_core$281=caml_string_of_jsbytes("core"),
     cst_core_src_type_equal_ml=
      caml_string_of_jsbytes("core/src/type_equal.ml"),
     cst$100=caml_string_of_jsbytes(""),
     cst_core$282=caml_string_of_jsbytes("core"),
     cst_core$283=caml_string_of_jsbytes("core"),
     cst_Core_Type_equal$0=caml_string_of_jsbytes("Core__Type_equal"),
     cst_Core_Type_equal_intf=caml_string_of_jsbytes("Core__Type_equal_intf"),
     cst_core$284=caml_string_of_jsbytes("core"),
     cst_core_src_type_equal_intf_m=
      caml_string_of_jsbytes("core/src/type_equal_intf.ml"),
     cst$101=caml_string_of_jsbytes(""),
     cst_core$285=caml_string_of_jsbytes("core"),
     cst_core$286=caml_string_of_jsbytes("core"),
     cst_Core_Type_equal_intf$0=
      caml_string_of_jsbytes("Core__Type_equal_intf"),
     cst_Core_Univ_map_intf=caml_string_of_jsbytes("Core__Univ_map_intf"),
     cst_core$287=caml_string_of_jsbytes("core"),
     cst_core_src_univ_map_intf_ml=
      caml_string_of_jsbytes("core/src/univ_map_intf.ml"),
     cst$102=caml_string_of_jsbytes(""),
     cst_core$288=caml_string_of_jsbytes("core"),
     cst_core$289=caml_string_of_jsbytes("core"),
     cst_Core_Univ_map_intf$0=caml_string_of_jsbytes("Core__Univ_map_intf"),
     cst_Key_type_id_must_not_provi=
      caml_string_of_jsbytes
       ("[Key.type_id] must not provide different type ids when called on the same input"),
     cst_Core_Univ_map=caml_string_of_jsbytes("Core__Univ_map"),
     cst_core$290=caml_string_of_jsbytes("core"),
     cst_core_src_univ_map_ml=caml_string_of_jsbytes("core/src/univ_map.ml"),
     cst$103=caml_string_of_jsbytes(""),
     cst_core$291=caml_string_of_jsbytes("core"),
     cst_core$292=caml_string_of_jsbytes("core"),
     cst_Core_Univ_map$0=caml_string_of_jsbytes("Core__Univ_map"),
     cst_day=caml_string_of_jsbytes("day"),
     cst_Day=caml_string_of_jsbytes("Day"),
     cst_Hour=caml_string_of_jsbytes("Hour"),
     cst_Microsecond=caml_string_of_jsbytes("Microsecond"),
     cst_Millisecond=caml_string_of_jsbytes("Millisecond"),
     cst_Minute=caml_string_of_jsbytes("Minute"),
     cst_Nanosecond=caml_string_of_jsbytes("Nanosecond"),
     cst_Second$3=caml_string_of_jsbytes("Second"),
     cst_hour=caml_string_of_jsbytes("hour"),
     cst_microsecond=caml_string_of_jsbytes("microsecond"),
     cst_millisecond=caml_string_of_jsbytes("millisecond"),
     cst_minute=caml_string_of_jsbytes("minute"),
     cst_nanosecond=caml_string_of_jsbytes("nanosecond"),
     cst_second$1=caml_string_of_jsbytes("second"),
     cst_day$0=caml_string_of_jsbytes("day"),
     cst_Day$0=caml_string_of_jsbytes("Day"),
     cst_Hour$0=caml_string_of_jsbytes("Hour"),
     cst_Microsecond$0=caml_string_of_jsbytes("Microsecond"),
     cst_Millisecond$0=caml_string_of_jsbytes("Millisecond"),
     cst_Minute$0=caml_string_of_jsbytes("Minute"),
     cst_Nanosecond$0=caml_string_of_jsbytes("Nanosecond"),
     cst_Second$4=caml_string_of_jsbytes("Second"),
     cst_hour$0=caml_string_of_jsbytes("hour"),
     cst_microsecond$0=caml_string_of_jsbytes("microsecond"),
     cst_millisecond$0=caml_string_of_jsbytes("millisecond"),
     cst_minute$0=caml_string_of_jsbytes("minute"),
     cst_nanosecond$0=caml_string_of_jsbytes("nanosecond"),
     cst_second$2=caml_string_of_jsbytes("second"),
     cst_Core_Unit_of_time=caml_string_of_jsbytes("Core__Unit_of_time"),
     cst_core$293=caml_string_of_jsbytes("core"),
     cst_core_src_unit_of_time_ml=
      caml_string_of_jsbytes("core/src/unit_of_time.ml"),
     cst$104=caml_string_of_jsbytes(""),
     cst_core$294=caml_string_of_jsbytes("core"),
     error_source_003$0=caml_string_of_jsbytes("core/src/unit_of_time.ml.t"),
     unit_of_time_list=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,0]]]]]]],
     cst_core$295=caml_string_of_jsbytes("core"),
     cst_Core_Unit_of_time$0=caml_string_of_jsbytes("Core__Unit_of_time"),
     cst_Core_Unique_id_intf=caml_string_of_jsbytes("Core__Unique_id_intf"),
     cst_core$296=caml_string_of_jsbytes("core"),
     cst_core_src_unique_id_intf_ml=
      caml_string_of_jsbytes("core/src/unique_id_intf.ml"),
     cst$105=caml_string_of_jsbytes(""),
     cst_core$297=caml_string_of_jsbytes("core"),
     cst_core$298=caml_string_of_jsbytes("core"),
     cst_Core_Unique_id_intf$0=caml_string_of_jsbytes("Core__Unique_id_intf"),
     cst_Core_Unique_id=caml_string_of_jsbytes("Core__Unique_id"),
     cst_core$299=caml_string_of_jsbytes("core"),
     cst_core_src_unique_id_ml=caml_string_of_jsbytes("core/src/unique_id.ml"),
     cst$106=caml_string_of_jsbytes(""),
     cst_core$300=caml_string_of_jsbytes("core"),
     cst_core$301=caml_string_of_jsbytes("core"),
     cst_Core_Unique_id$0=caml_string_of_jsbytes("Core__Unique_id"),
     cst_Core_Uniform_array=caml_string_of_jsbytes("Core__Uniform_array"),
     cst_core$302=caml_string_of_jsbytes("core"),
     cst_core_src_uniform_array_ml=
      caml_string_of_jsbytes("core/src/uniform_array.ml"),
     cst$107=caml_string_of_jsbytes(""),
     cst_core$303=caml_string_of_jsbytes("core"),
     cst_core$304=caml_string_of_jsbytes("core"),
     cst_Core_Uniform_array$0=caml_string_of_jsbytes("Core__Uniform_array"),
     cst_lazy_t$1=caml_string_of_jsbytes("lazy_t"),
     cst_Always=caml_string_of_jsbytes("Always"),
     cst_Sometimes=caml_string_of_jsbytes("Sometimes"),
     cst_Never=caml_string_of_jsbytes("Never"),
     cst_Unknown=caml_string_of_jsbytes("Unknown"),
     cst_Core_Type_immediacy=caml_string_of_jsbytes("Core__Type_immediacy"),
     cst_core$305=caml_string_of_jsbytes("core"),
     cst_core_src_type_immediacy_ml=
      caml_string_of_jsbytes("core/src/type_immediacy.ml"),
     cst$108=caml_string_of_jsbytes(""),
     cst_core$306=caml_string_of_jsbytes("core"),
     cst_option$1=caml_string_of_jsbytes("option"),
     cst_list$1=caml_string_of_jsbytes("list"),
     cst_array$1=caml_string_of_jsbytes("array"),
     cst_ref$1=caml_string_of_jsbytes("ref"),
     cst_tuple2=caml_string_of_jsbytes("tuple2"),
     cst_tuple3=caml_string_of_jsbytes("tuple3"),
     cst_tuple4=caml_string_of_jsbytes("tuple4"),
     cst_tuple5=caml_string_of_jsbytes("tuple5"),
     cst_function=caml_string_of_jsbytes("function"),
     name$49=caml_string_of_jsbytes("is_immediate"),
     cst_core$307=caml_string_of_jsbytes("core"),
     cst_Core_Type_immediacy$0=caml_string_of_jsbytes("Core__Type_immediacy"),
     error_source_063=caml_string_of_jsbytes("core/src/tuple.ml.Hasher.T.t"),
     cst_core_src_tuple_ml_Binable_=
      caml_string_of_jsbytes("core/src/tuple.ml.Binable.t"),
     cst_t$171=caml_string_of_jsbytes("t"),
     cst_core_src_tuple_ml_129_2=
      caml_string_of_jsbytes("core/src/tuple.ml:129:2"),
     cst_t$172=caml_string_of_jsbytes("t"),
     error_source_046=caml_string_of_jsbytes("core/src/tuple.ml.Sexpable.t"),
     cst_Core_Tuple=caml_string_of_jsbytes("Core__Tuple"),
     cst_core$308=caml_string_of_jsbytes("core"),
     cst_core_src_tuple_ml=caml_string_of_jsbytes("core/src/tuple.ml"),
     cst$109=caml_string_of_jsbytes(""),
     cst_core$309=caml_string_of_jsbytes("core"),
     error_source_009$0=caml_string_of_jsbytes("core/src/tuple.ml.T2.t"),
     name$50=caml_string_of_jsbytes("core/src/tuple.ml.T2.t"),
     error_source_030=caml_string_of_jsbytes("core/src/tuple.ml.T3.t"),
     name$51=caml_string_of_jsbytes("core/src/tuple.ml.T3.t"),
     cst_core$310=caml_string_of_jsbytes("core"),
     cst_Core_Tuple$0=caml_string_of_jsbytes("Core__Tuple"),
     cst_SUNDAY=caml_string_of_jsbytes("SUNDAY"),
     cst_FRI$0=caml_string_of_jsbytes("FRI"),
     cst_FRIDAY=caml_string_of_jsbytes("FRIDAY"),
     cst_MON$0=caml_string_of_jsbytes("MON"),
     cst_MONDAY=caml_string_of_jsbytes("MONDAY"),
     cst_SAT$0=caml_string_of_jsbytes("SAT"),
     cst_SATURDAY=caml_string_of_jsbytes("SATURDAY"),
     cst_SUN$0=caml_string_of_jsbytes("SUN"),
     cst_THU$0=caml_string_of_jsbytes("THU"),
     cst_THURSDAY=caml_string_of_jsbytes("THURSDAY"),
     cst_TUE$0=caml_string_of_jsbytes("TUE"),
     cst_TUESDAY=caml_string_of_jsbytes("TUESDAY"),
     cst_WED$0=caml_string_of_jsbytes("WED"),
     cst_WEDNESDAY=caml_string_of_jsbytes("WEDNESDAY"),
     cst_Sunday=caml_string_of_jsbytes("Sunday"),
     cst_Monday=caml_string_of_jsbytes("Monday"),
     cst_Tuesday=caml_string_of_jsbytes("Tuesday"),
     cst_Wednesday=caml_string_of_jsbytes("Wednesday"),
     cst_Thursday=caml_string_of_jsbytes("Thursday"),
     cst_Friday=caml_string_of_jsbytes("Friday"),
     cst_Saturday=caml_string_of_jsbytes("Saturday"),
     cst_SUN=caml_string_of_jsbytes("SUN"),
     cst_MON=caml_string_of_jsbytes("MON"),
     cst_TUE=caml_string_of_jsbytes("TUE"),
     cst_WED=caml_string_of_jsbytes("WED"),
     cst_THU=caml_string_of_jsbytes("THU"),
     cst_FRI=caml_string_of_jsbytes("FRI"),
     cst_SAT=caml_string_of_jsbytes("SAT"),
     cst_core_src_day_of_week_ml_St=
      caml_string_of_jsbytes("core/src/day_of_week.ml.Stable.V1.T.t"),
     cst_Core_Day_of_week=caml_string_of_jsbytes("Core__Day_of_week"),
     cst_core$311=caml_string_of_jsbytes("core"),
     cst_core_src_day_of_week_ml=
      caml_string_of_jsbytes("core/src/day_of_week.ml"),
     cst$110=caml_string_of_jsbytes(""),
     cst_core$312=caml_string_of_jsbytes("core"),
     cst_t$173=caml_string_of_jsbytes("t"),
     cst_core_src_day_of_week_ml_8_=
      caml_string_of_jsbytes("core/src/day_of_week.ml:8:6"),
     cst_t$174=caml_string_of_jsbytes("t"),
     weekdays=[0,1,[0,2,[0,3,[0,4,[0,5,0]]]]],
     weekends=[0,6,[0,0,0]],
     all$3=[0,0,[0,1,[0,2,[0,3,[0,4,[0,5,[0,6,0]]]]]]],
     cst_core$313=caml_string_of_jsbytes("core"),
     cst_Core_Day_of_week$0=caml_string_of_jsbytes("Core__Day_of_week"),
     cst_Core_Day_of_week_intf=
      caml_string_of_jsbytes("Core__Day_of_week_intf"),
     cst_core$314=caml_string_of_jsbytes("core"),
     cst_core_src_day_of_week_intf_=
      caml_string_of_jsbytes("core/src/day_of_week_intf.ml"),
     cst$111=caml_string_of_jsbytes(""),
     cst_core$315=caml_string_of_jsbytes("core"),
     cst_core$316=caml_string_of_jsbytes("core"),
     cst_Core_Day_of_week_intf$0=
      caml_string_of_jsbytes("Core__Day_of_week_intf"),
     name$55=caml_string_of_jsbytes("read_int63_decimal"),
     name$54=caml_string_of_jsbytes("read_int63"),
     cst_read_9_digit_int=caml_string_of_jsbytes("read_9_digit_int"),
     cst_read_8_digit_int=caml_string_of_jsbytes("read_8_digit_int"),
     cst_read_7_digit_int=caml_string_of_jsbytes("read_7_digit_int"),
     cst_read_6_digit_int=caml_string_of_jsbytes("read_6_digit_int"),
     cst_read_5_digit_int=caml_string_of_jsbytes("read_5_digit_int"),
     cst_read_4_digit_int=caml_string_of_jsbytes("read_4_digit_int"),
     cst_read_3_digit_int=caml_string_of_jsbytes("read_3_digit_int"),
     cst_read_2_digit_int=caml_string_of_jsbytes("read_2_digit_int"),
     cst_read_1_digit_int=caml_string_of_jsbytes("read_1_digit_int"),
     name$53=caml_string_of_jsbytes("write_int63"),
     cst_write_9_digit_int=caml_string_of_jsbytes("write_9_digit_int"),
     cst_write_8_digit_int=caml_string_of_jsbytes("write_8_digit_int"),
     cst_write_7_digit_int=caml_string_of_jsbytes("write_7_digit_int"),
     cst_write_6_digit_int=caml_string_of_jsbytes("write_6_digit_int"),
     cst_write_5_digit_int=caml_string_of_jsbytes("write_5_digit_int"),
     cst_write_4_digit_int=caml_string_of_jsbytes("write_4_digit_int"),
     cst_write_3_digit_int=caml_string_of_jsbytes("write_3_digit_int"),
     cst_write_2_digit_int=caml_string_of_jsbytes("write_2_digit_int"),
     cst_write_1_digit_int=caml_string_of_jsbytes("write_1_digit_int"),
     cst_s_s_Int63_out_of_range_0_I=
      caml_string_of_jsbytes("%s.%s: %{Int63} out of range [0, %{Int63}]"),
     cst_out_of_range_0=caml_string_of_jsbytes(" out of range [0, "),
     cst$113=caml_string_of_jsbytes(": "),
     cst_read_int63=caml_string_of_jsbytes("read_int63"),
     cst_read_int63$0=caml_string_of_jsbytes("read_int63"),
     name$52=caml_string_of_jsbytes("read_int63_decimal"),
     cst_Core_Digit_string_helpers=
      caml_string_of_jsbytes("Core__Digit_string_helpers"),
     cst_core$317=caml_string_of_jsbytes("core"),
     cst_core_src_digit_string_help=
      caml_string_of_jsbytes("core/src/digit_string_helpers.ml"),
     cst$112=caml_string_of_jsbytes(""),
     cst_core$318=caml_string_of_jsbytes("core"),
     module_name$6=caml_string_of_jsbytes("Digit_string_helpers"),
     cst_core$319=caml_string_of_jsbytes("core"),
     cst_Core_Digit_string_helpers$0=
      caml_string_of_jsbytes("Core__Digit_string_helpers"),
     cst_Jan$2=caml_string_of_jsbytes("Jan"),
     cst_Feb$2=caml_string_of_jsbytes("Feb"),
     cst_Mar$2=caml_string_of_jsbytes("Mar"),
     cst_Apr$2=caml_string_of_jsbytes("Apr"),
     cst_May$2=caml_string_of_jsbytes("May"),
     cst_Jun$2=caml_string_of_jsbytes("Jun"),
     cst_Jul$2=caml_string_of_jsbytes("Jul"),
     cst_Aug$2=caml_string_of_jsbytes("Aug"),
     cst_Sep$2=caml_string_of_jsbytes("Sep"),
     cst_Oct$2=caml_string_of_jsbytes("Oct"),
     cst_Nov$2=caml_string_of_jsbytes("Nov"),
     cst_Dec$2=caml_string_of_jsbytes("Dec"),
     cst_apr=caml_string_of_jsbytes("apr"),
     cst_Jun=caml_string_of_jsbytes("Jun"),
     cst_Apr=caml_string_of_jsbytes("Apr"),
     cst_Aug=caml_string_of_jsbytes("Aug"),
     cst_Dec=caml_string_of_jsbytes("Dec"),
     cst_Feb=caml_string_of_jsbytes("Feb"),
     cst_Jan=caml_string_of_jsbytes("Jan"),
     cst_Jul=caml_string_of_jsbytes("Jul"),
     cst_Mar=caml_string_of_jsbytes("Mar"),
     cst_May=caml_string_of_jsbytes("May"),
     cst_Nov=caml_string_of_jsbytes("Nov"),
     cst_Oct=caml_string_of_jsbytes("Oct"),
     cst_Sep=caml_string_of_jsbytes("Sep"),
     cst_jun=caml_string_of_jsbytes("jun"),
     cst_aug=caml_string_of_jsbytes("aug"),
     cst_dec=caml_string_of_jsbytes("dec"),
     cst_feb=caml_string_of_jsbytes("feb"),
     cst_jan=caml_string_of_jsbytes("jan"),
     cst_jul=caml_string_of_jsbytes("jul"),
     cst_mar=caml_string_of_jsbytes("mar"),
     cst_may=caml_string_of_jsbytes("may"),
     cst_nov=caml_string_of_jsbytes("nov"),
     cst_oct=caml_string_of_jsbytes("oct"),
     cst_sep=caml_string_of_jsbytes("sep"),
     cst_apr$0=caml_string_of_jsbytes("apr"),
     cst_Jun$0=caml_string_of_jsbytes("Jun"),
     cst_Apr$0=caml_string_of_jsbytes("Apr"),
     cst_Aug$0=caml_string_of_jsbytes("Aug"),
     cst_Dec$0=caml_string_of_jsbytes("Dec"),
     cst_Feb$0=caml_string_of_jsbytes("Feb"),
     cst_Jan$0=caml_string_of_jsbytes("Jan"),
     cst_Jul$0=caml_string_of_jsbytes("Jul"),
     cst_Mar$0=caml_string_of_jsbytes("Mar"),
     cst_May$0=caml_string_of_jsbytes("May"),
     cst_Nov$0=caml_string_of_jsbytes("Nov"),
     cst_Oct$0=caml_string_of_jsbytes("Oct"),
     cst_Sep$0=caml_string_of_jsbytes("Sep"),
     cst_jun$0=caml_string_of_jsbytes("jun"),
     cst_aug$0=caml_string_of_jsbytes("aug"),
     cst_dec$0=caml_string_of_jsbytes("dec"),
     cst_feb$0=caml_string_of_jsbytes("feb"),
     cst_jan$0=caml_string_of_jsbytes("jan"),
     cst_jul$0=caml_string_of_jsbytes("jul"),
     cst_mar$0=caml_string_of_jsbytes("mar"),
     cst_may$0=caml_string_of_jsbytes("may"),
     cst_nov$0=caml_string_of_jsbytes("nov"),
     cst_oct$0=caml_string_of_jsbytes("oct"),
     cst_sep$0=caml_string_of_jsbytes("sep"),
     cst_Core_Month=caml_string_of_jsbytes("Core__Month"),
     cst_core$320=caml_string_of_jsbytes("core"),
     cst_core_src_month_ml=caml_string_of_jsbytes("core/src/month.ml"),
     cst$114=caml_string_of_jsbytes(""),
     cst_core$321=caml_string_of_jsbytes("core"),
     error_source_003$1=
      caml_string_of_jsbytes("core/src/month.ml.Stable.V1.t"),
     cst_Jan$1=caml_string_of_jsbytes("Jan"),
     cst_Feb$1=caml_string_of_jsbytes("Feb"),
     cst_Mar$1=caml_string_of_jsbytes("Mar"),
     cst_Apr$1=caml_string_of_jsbytes("Apr"),
     cst_May$1=caml_string_of_jsbytes("May"),
     cst_Jun$1=caml_string_of_jsbytes("Jun"),
     cst_Jul$1=caml_string_of_jsbytes("Jul"),
     cst_Aug$1=caml_string_of_jsbytes("Aug"),
     cst_Sep$1=caml_string_of_jsbytes("Sep"),
     cst_Oct$1=caml_string_of_jsbytes("Oct"),
     cst_Nov$1=caml_string_of_jsbytes("Nov"),
     cst_Dec$1=caml_string_of_jsbytes("Dec"),
     descriptions=
      caml_list_of_js_array
       ([[0,caml_string_of_jsbytes("Jan"),0],
         [0,caml_string_of_jsbytes("Feb"),0],
         [0,caml_string_of_jsbytes("Mar"),0],
         [0,caml_string_of_jsbytes("Apr"),0],
         [0,caml_string_of_jsbytes("May"),0],
         [0,caml_string_of_jsbytes("Jun"),0],
         [0,caml_string_of_jsbytes("Jul"),0],
         [0,caml_string_of_jsbytes("Aug"),0],
         [0,caml_string_of_jsbytes("Sep"),0],
         [0,caml_string_of_jsbytes("Oct"),0],
         [0,caml_string_of_jsbytes("Nov"),0],
         [0,caml_string_of_jsbytes("Dec"),0]]),
     all$4=caml_list_of_js_array([0,1,2,3,4,5,6,7,8,9,10,11]),
     cst_core$322=caml_string_of_jsbytes("core"),
     cst_Core_Month$0=caml_string_of_jsbytes("Core__Month"),
     cst_Core_Month_intf=caml_string_of_jsbytes("Core__Month_intf"),
     cst_core$323=caml_string_of_jsbytes("core"),
     cst_core_src_month_intf_ml=
      caml_string_of_jsbytes("core/src/month_intf.ml"),
     cst$115=caml_string_of_jsbytes(""),
     cst_core$324=caml_string_of_jsbytes("core"),
     cst_core$325=caml_string_of_jsbytes("core"),
     cst_Core_Month_intf$0=caml_string_of_jsbytes("Core__Month_intf"),
     cst_Date_gen_uniform_incl_boun=
      caml_string_of_jsbytes("Date.gen_uniform_incl: bounds are crossed"),
     cst_Date_Option_value_exn_none=
      caml_string_of_jsbytes("Date.Option.value_exn none"),
     cst_core_src_date0_ml_308_31=
      caml_string_of_jsbytes("core/src/date0.ml:308:31"),
     cst_d=caml_string_of_jsbytes("d"),
     cst_m$0=caml_string_of_jsbytes("m"),
     cst_y=caml_string_of_jsbytes("y"),
     cst_d$0=caml_string_of_jsbytes("d"),
     cst_m$1=caml_string_of_jsbytes("m"),
     cst_y$0=caml_string_of_jsbytes("y"),
     cst_invalid_date=caml_string_of_jsbytes("invalid date: "),
     cst_Date_of_string_iso8601_bas=
      caml_string_of_jsbytes
       ("Date.of_string_iso8601_basic: pos + 8 > string length"),
     cst_Date_t=caml_string_of_jsbytes("Date.t"),
     cst_Date_create_exn_y_d_m_Mont=
      caml_string_of_jsbytes
       ("Date.create_exn ~y:%d ~m:%{Month} ~d:%d error: %s"),
     cst_m=caml_string_of_jsbytes(" ~m:"),
     cst_Date_create_exn_y=caml_string_of_jsbytes("Date.create_exn ~y:"),
     cst_year_outside_of_0_9999=
      caml_string_of_jsbytes("year outside of [0..9999]"),
     cst_day_0=caml_string_of_jsbytes("day <= 0"),
     cst_Core_Date0=caml_string_of_jsbytes("Core__Date0"),
     cst_core$326=caml_string_of_jsbytes("core"),
     cst_core_src_date0_ml=caml_string_of_jsbytes("core/src/date0.ml"),
     cst$116=caml_string_of_jsbytes(""),
     cst_core$327=caml_string_of_jsbytes("core"),
     name$56=
      caml_string_of_jsbytes
       ("core/src/date0.ml.Stable.V1.Without_comparable.T.t"),
     cst_899ee3e0_490a_11e6_a10a_a3=
      caml_string_of_jsbytes("899ee3e0-490a-11e6-a10a-a3734f733566"),
     cst_core_src_date0_ml$0=caml_string_of_jsbytes("core/src/date0.ml"),
     cst_invalid_value=caml_string_of_jsbytes("invalid value"),
     error_source_021=
      caml_string_of_jsbytes
       ("core/src/date0.ml.Stable.V1.Without_comparable.Sexpable.Old_date.t"),
     cst_t$175=caml_string_of_jsbytes("t"),
     cst_core_src_date0_ml_283_6=
      caml_string_of_jsbytes("core/src/date0.ml:283:6"),
     cst_t$176=caml_string_of_jsbytes("t"),
     cst_826a3e79_3321_451a_9707_ed=
      caml_string_of_jsbytes("826a3e79-3321-451a-9707-ed6c03b84e2f"),
     name$57=caml_string_of_jsbytes("core/src/date0.ml.Stable.Option.V1.t"),
     module_name$7=caml_string_of_jsbytes("Core.Date"),
     cst_2100_01_01=caml_string_of_jsbytes("2100-01-01"),
     cst_1900_01_01=caml_string_of_jsbytes("1900-01-01"),
     cst_core$328=caml_string_of_jsbytes("core"),
     cst_Core_Date0$0=caml_string_of_jsbytes("Core__Date0"),
     cst_Core_Immediate_option_intf=
      caml_string_of_jsbytes("Core__Immediate_option_intf"),
     cst_core$329=caml_string_of_jsbytes("core"),
     cst_core_src_immediate_option_=
      caml_string_of_jsbytes("core/src/immediate_option_intf.ml"),
     cst$117=caml_string_of_jsbytes(""),
     cst_core$330=caml_string_of_jsbytes("core"),
     cst_core$331=caml_string_of_jsbytes("core"),
     cst_Core_Immediate_option_intf$0=
      caml_string_of_jsbytes("Core__Immediate_option_intf"),
     cst_Core_Date0_intf=caml_string_of_jsbytes("Core__Date0_intf"),
     cst_core$332=caml_string_of_jsbytes("core"),
     cst_core_src_date0_intf_ml=
      caml_string_of_jsbytes("core/src/date0_intf.ml"),
     cst$118=caml_string_of_jsbytes(""),
     cst_core$333=caml_string_of_jsbytes("core"),
     cst_core$334=caml_string_of_jsbytes("core"),
     cst_Core_Date0_intf$0=caml_string_of_jsbytes("Core__Date0_intf"),
     cst_Core_Immediate_option=
      caml_string_of_jsbytes("Core__Immediate_option"),
     cst_core$335=caml_string_of_jsbytes("core"),
     cst_core_src_immediate_option_$0=
      caml_string_of_jsbytes("core/src/immediate_option.ml"),
     cst$119=caml_string_of_jsbytes(""),
     cst_core$336=caml_string_of_jsbytes("core"),
     cst_core$337=caml_string_of_jsbytes("core"),
     cst_Core_Immediate_option$0=
      caml_string_of_jsbytes("Core__Immediate_option"),
     cst$121=caml_string_of_jsbytes(""),
     cst_len_2=caml_string_of_jsbytes("len < 2"),
     cst_hour_24=caml_string_of_jsbytes("hour > 24"),
     cst_2_len_5=caml_string_of_jsbytes("2 < len < 5"),
     cst_first_colon_missing=caml_string_of_jsbytes("first colon missing"),
     cst_minute_60=caml_string_of_jsbytes("minute > 60"),
     cst_24_hours_and_non_zero_minu=
      caml_string_of_jsbytes("24 hours and non-zero minute"),
     cst_5_len_8=caml_string_of_jsbytes("5 < len < 8"),
     cst_second_colon_missing=caml_string_of_jsbytes("second colon missing"),
     cst_24_hours_and_non_zero_seco=
      caml_string_of_jsbytes("24 hours and non-zero seconds"),
     cst_length_9=caml_string_of_jsbytes("length = 9"),
     cst_missing_subsecond_separato=
      caml_string_of_jsbytes("missing subsecond separator"),
     cst_24_hours_and_non_zero_subs=
      caml_string_of_jsbytes("24 hours and non-zero subseconds"),
     cst$122=caml_string_of_jsbytes(""),
     cst$125=caml_string_of_jsbytes(""),
     cst$123=caml_string_of_jsbytes(""),
     cst$124=caml_string_of_jsbytes(""),
     cst_expected_end_of_string_aft=
      caml_string_of_jsbytes("expected end of string after minutes"),
     cst_expected_colon_or_am_pm_su=
      caml_string_of_jsbytes
       ("expected colon or am/pm suffix with optional space after minutes"),
     cst_expected_two_digits_of_sec=
      caml_string_of_jsbytes("expected two digits of seconds"),
     cst_expected_decimal_point_or_=
      caml_string_of_jsbytes
       ("expected decimal point or am/pm suffix after seconds"),
     cst_BUG_did_not_expect_seconds=
      caml_string_of_jsbytes("BUG: did not expect seconds, but found them"),
     cst_hours_out_of_bounds$0=caml_string_of_jsbytes("hours out of bounds"),
     cst_hours_out_of_bounds$1=caml_string_of_jsbytes("hours out of bounds"),
     cst_time_is_past_24_00_00=caml_string_of_jsbytes("time is past 24:00:00"),
     cst_hours_without_minutes_or_A=
      caml_string_of_jsbytes("hours without minutes or AM/PM"),
     cst_hours_out_of_bounds=caml_string_of_jsbytes("hours out of bounds"),
     cst_minutes_out_of_bounds=caml_string_of_jsbytes("minutes out of bounds"),
     cst_seconds_out_of_bounds=caml_string_of_jsbytes("seconds out of bounds"),
     cst_expected_digits_after_deci=
      caml_string_of_jsbytes("expected digits after decimal point"),
     cst_expected_digits_and_or_und=
      caml_string_of_jsbytes
       ("expected digits and/or underscores after decimal point"),
     cst_Time_Ofday_invalid_string=
      caml_string_of_jsbytes("Time.Ofday: invalid string"),
     cst_Core_Ofday_helpers=caml_string_of_jsbytes("Core__Ofday_helpers"),
     cst_core$338=caml_string_of_jsbytes("core"),
     cst_core_src_ofday_helpers_ml=
      caml_string_of_jsbytes("core/src/ofday_helpers.ml"),
     cst$120=caml_string_of_jsbytes(""),
     cst_core$339=caml_string_of_jsbytes("core"),
     cst_core$340=caml_string_of_jsbytes("core"),
     cst_Core_Ofday_helpers$0=caml_string_of_jsbytes("Core__Ofday_helpers"),
     cst_Core_Stable_internal=caml_string_of_jsbytes("Core__Stable_internal"),
     cst_core$341=caml_string_of_jsbytes("core"),
     cst_core_src_stable_internal_m=
      caml_string_of_jsbytes("core/src/stable_internal.ml"),
     cst$126=caml_string_of_jsbytes(""),
     cst_core$342=caml_string_of_jsbytes("core"),
     cst_core$343=caml_string_of_jsbytes("core"),
     cst_Core_Stable_internal$0=
      caml_string_of_jsbytes("Core__Stable_internal"),
     cst_Decimal_t_of_sexp_Expected=
      caml_string_of_jsbytes("Decimal.t_of_sexp: Expected Atom, found List"),
     cst_Core_Float_with_finite_onl=
      caml_string_of_jsbytes("Core__Float_with_finite_only_serialization"),
     cst_core$344=caml_string_of_jsbytes("core"),
     cst_core_src_float_with_finite=
      caml_string_of_jsbytes
       ("core/src/float_with_finite_only_serialization.ml"),
     cst$127=caml_string_of_jsbytes(""),
     cst_core$345=caml_string_of_jsbytes("core"),
     cst_Core_Float_with_finite_onl$0=
      caml_string_of_jsbytes
       ("Core__Float_with_finite_only_serialization.Stable.V1.Nan_or_inf"),
     cst_core$346=caml_string_of_jsbytes("core"),
     cst_Core_Float_with_finite_onl$1=
      caml_string_of_jsbytes("Core__Float_with_finite_only_serialization"),
     cst$132=caml_string_of_jsbytes("%"),
     cst_Percent_Option_value_exn_n=
      caml_string_of_jsbytes("Percent.Option.value_exn none"),
     cst_core_src_percent_ml_172_31=
      caml_string_of_jsbytes("core/src/percent.ml:172:31"),
     cst_x$1=caml_string_of_jsbytes("x"),
     cst$131=caml_string_of_jsbytes("%"),
     cst_bp$1=caml_string_of_jsbytes("bp"),
     cst_0x$0=caml_string_of_jsbytes("0x"),
     cst_x$0=caml_string_of_jsbytes("x"),
     cst$130=caml_string_of_jsbytes("%"),
     cst_bp$0=caml_string_of_jsbytes("bp"),
     cst_0x=caml_string_of_jsbytes("0x"),
     cst_x=caml_string_of_jsbytes("x"),
     cst$129=caml_string_of_jsbytes("%"),
     cst_bp=caml_string_of_jsbytes("bp"),
     cst_Core_Percent=caml_string_of_jsbytes("Core__Percent"),
     cst_core$347=caml_string_of_jsbytes("core"),
     cst_core_src_percent_ml=caml_string_of_jsbytes("core/src/percent.ml"),
     cst$128=caml_string_of_jsbytes(""),
     cst_core$348=caml_string_of_jsbytes("core"),
     name$58=caml_string_of_jsbytes("core/src/percent.ml.Stable.V1.t"),
     cst_t$177=caml_string_of_jsbytes("t"),
     cst_core_src_percent_ml_135_8=
      caml_string_of_jsbytes("core/src/percent.ml:135:8"),
     cst_t$178=caml_string_of_jsbytes("t"),
     cst_t$179=caml_string_of_jsbytes("t"),
     cst_core_src_percent_ml_150_6=
      caml_string_of_jsbytes("core/src/percent.ml:150:6"),
     cst_t$180=caml_string_of_jsbytes("t"),
     name$59=caml_string_of_jsbytes("core/src/percent.ml.Stable.Option.V1.t"),
     cst_core$349=caml_string_of_jsbytes("core"),
     cst_Core_Percent$0=caml_string_of_jsbytes("Core__Percent"),
     cst_d$1=caml_string_of_jsbytes("d"),
     cst_h=caml_string_of_jsbytes("h"),
     cst_m$2=caml_string_of_jsbytes("m"),
     cst_s$4=caml_string_of_jsbytes("s"),
     cst_ms=caml_string_of_jsbytes("ms"),
     cst_us=caml_string_of_jsbytes("us"),
     cst$134=caml_string_of_jsbytes("-"),
     cst_Span_randomize_percent_is_=
      caml_string_of_jsbytes
       ("Span.randomize: percent is out of range [0x, 1x]"),
     cst_Core_Span_helpers=caml_string_of_jsbytes("Core__Span_helpers"),
     cst_core$350=caml_string_of_jsbytes("core"),
     cst_core_src_span_helpers_ml=
      caml_string_of_jsbytes("core/src/span_helpers.ml"),
     cst$133=caml_string_of_jsbytes(""),
     cst_core$351=caml_string_of_jsbytes("core"),
     cst_core$352=caml_string_of_jsbytes("core"),
     cst_Core_Span_helpers$0=caml_string_of_jsbytes("Core__Span_helpers"),
     suffix$0=caml_string_of_jsbytes("ns"),
     suffix$1=caml_string_of_jsbytes("us"),
     suffix$2=caml_string_of_jsbytes("ms"),
     suffix$3=caml_string_of_jsbytes("s"),
     suffix$4=caml_string_of_jsbytes("m"),
     suffix$5=caml_string_of_jsbytes("h"),
     suffix$6=caml_string_of_jsbytes("d"),
     cst$143=caml_string_of_jsbytes(" "),
     cst_Time_Span_Stable_V3_t_of_s=
      caml_string_of_jsbytes
       ("Time.Span.Stable.V3.t_of_sexp: sexp must be an Atom"),
     cst_NANs$0=caml_string_of_jsbytes("NANs"),
     cst_INFs$1=caml_string_of_jsbytes("-INFs"),
     cst_INFs$2=caml_string_of_jsbytes("INFs"),
     cst_0s$0=caml_string_of_jsbytes("0s"),
     cst$141=caml_string_of_jsbytes("-"),
     cst$142=caml_string_of_jsbytes(""),
     cst$139=caml_string_of_jsbytes(""),
     cst$140=caml_string_of_jsbytes(""),
     cst$138=caml_string_of_jsbytes(""),
     suffix=caml_string_of_jsbytes("."),
     cst_invalid_span_part_suffix=
      caml_string_of_jsbytes("invalid span part suffix"),
     cst_INFs=caml_string_of_jsbytes("-INFs"),
     cst_INFs$0=caml_string_of_jsbytes("INFs"),
     cst_NANs=caml_string_of_jsbytes("NANs"),
     cst_empty_input=caml_string_of_jsbytes("empty input"),
     cst_empty_input$0=caml_string_of_jsbytes("empty input"),
     cst_invalid_span_part_magnitud=
      caml_string_of_jsbytes("invalid span part magnitude"),
     cst_Time_Span_of_string=caml_string_of_jsbytes("Time.Span.of_string: "),
     cst_ns$3=caml_string_of_jsbytes("ns"),
     cst_us$4=caml_string_of_jsbytes("us"),
     cst_ms$4=caml_string_of_jsbytes("ms"),
     cst_s$6=caml_string_of_jsbytes("s"),
     cst_m$4=caml_string_of_jsbytes("m"),
     cst_h$1=caml_string_of_jsbytes("h"),
     cst_d$3=caml_string_of_jsbytes("d"),
     cst_inf=caml_string_of_jsbytes("inf"),
     cst_inf$0=caml_string_of_jsbytes("-inf"),
     cst_nan=caml_string_of_jsbytes("nan"),
     cst_ns$2=caml_string_of_jsbytes("ns"),
     cst_us$3=caml_string_of_jsbytes("us"),
     cst_ms$3=caml_string_of_jsbytes("ms"),
     cst_s$5=caml_string_of_jsbytes("s"),
     cst_m$3=caml_string_of_jsbytes("m"),
     cst_h$0=caml_string_of_jsbytes("h"),
     cst_d$2=caml_string_of_jsbytes("d"),
     cst_0s=caml_string_of_jsbytes("0s"),
     cst$137=caml_string_of_jsbytes(""),
     cst_no_number_given=caml_string_of_jsbytes("no number given"),
     cst$136=caml_string_of_jsbytes(""),
     cst_empty_string=caml_string_of_jsbytes("empty string"),
     cst_Time_spans_must_end_in_ns_=
      caml_string_of_jsbytes
       ("Time spans must end in ns, us, ms, s, m, h, or d."),
     cst_Time_spans_must_end_in_ms_=
      caml_string_of_jsbytes("Time spans must end in ms, s, m, h, or d."),
     cst_ns$1=caml_string_of_jsbytes("ns"),
     cst_us$2=caml_string_of_jsbytes("us"),
     cst_ms$2=caml_string_of_jsbytes("ms"),
     cst_sec$1=caml_string_of_jsbytes("sec"),
     cst_min$1=caml_string_of_jsbytes("min"),
     cst_hr$1=caml_string_of_jsbytes("hr"),
     cst_sign$1=caml_string_of_jsbytes("sign"),
     cst_hr=caml_string_of_jsbytes("hr"),
     cst_min=caml_string_of_jsbytes("min"),
     cst_ms$0=caml_string_of_jsbytes("ms"),
     cst_ns=caml_string_of_jsbytes("ns"),
     cst_sec=caml_string_of_jsbytes("sec"),
     cst_sign=caml_string_of_jsbytes("sign"),
     cst_us$0=caml_string_of_jsbytes("us"),
     cst_ns$0=caml_string_of_jsbytes("ns"),
     cst_us$1=caml_string_of_jsbytes("us"),
     cst_ms$1=caml_string_of_jsbytes("ms"),
     cst_sec$0=caml_string_of_jsbytes("sec"),
     cst_min$0=caml_string_of_jsbytes("min"),
     cst_hr$0=caml_string_of_jsbytes("hr"),
     cst_sign$0=caml_string_of_jsbytes("sign"),
     cst_Core_Span_float=caml_string_of_jsbytes("Core__Span_float"),
     cst_core$353=caml_string_of_jsbytes("core"),
     cst_core_src_span_float_ml=
      caml_string_of_jsbytes("core/src/span_float.ml"),
     cst$135=caml_string_of_jsbytes(""),
     cst_core$354=caml_string_of_jsbytes("core"),
     error_source_032=
      caml_string_of_jsbytes("core/src/span_float.ml.Stable.V1.Parts.t"),
     cst_Core_Span_float_Stable_V1_=
      caml_string_of_jsbytes("Core__Span_float.Stable.V1.T_of_sexp"),
     cst_Core_Span_float_Stable_V1_$0=
      caml_string_of_jsbytes
       ("Core__Span_float.Stable.V1.T_of_sexp_expected_atom_but_got"),
     module_name$8=caml_string_of_jsbytes("Core.Time.Span"),
     cst_t$181=caml_string_of_jsbytes("t"),
     cst_core_src_span_float_ml_764=
      caml_string_of_jsbytes("core/src/span_float.ml:764:4"),
     cst_t$182=caml_string_of_jsbytes("t"),
     cst_t$183=caml_string_of_jsbytes("t"),
     cst_core_src_span_float_ml_777=
      caml_string_of_jsbytes("core/src/span_float.ml:777:2"),
     cst_t$184=caml_string_of_jsbytes("t"),
     cst_core$355=caml_string_of_jsbytes("core"),
     cst_Core_Span_float$0=caml_string_of_jsbytes("Core__Span_float"),
     cst_Core_Span_intf=caml_string_of_jsbytes("Core__Span_intf"),
     cst_core$356=caml_string_of_jsbytes("core"),
     cst_core_src_span_intf_ml=caml_string_of_jsbytes("core/src/span_intf.ml"),
     cst$144=caml_string_of_jsbytes(""),
     cst_core$357=caml_string_of_jsbytes("core"),
     cst_core$358=caml_string_of_jsbytes("core"),
     cst_Core_Span_intf$0=caml_string_of_jsbytes("Core__Span_intf"),
     cst_Ofday_t_of_sexp=caml_string_of_jsbytes("Ofday.t_of_sexp: "),
     cst_Ofday_t_of_sexp$0=caml_string_of_jsbytes("Ofday.t_of_sexp"),
     cst_Ofday_out_of_range_Span=
      caml_string_of_jsbytes("Ofday out of range: %{Span}"),
     cst_Ofday_out_of_range=caml_string_of_jsbytes("Ofday out of range: "),
     cst_Ofday_of_span_since_start_$0=
      caml_string_of_jsbytes
       ("Ofday.of_span_since_start_of_day_exn: infinite value"),
     cst_Ofday_of_span_since_start_=
      caml_string_of_jsbytes
       ("Ofday.of_span_since_start_of_day_exn: NaN value"),
     cst_Core_Ofday_float=caml_string_of_jsbytes("Core__Ofday_float"),
     cst_core$359=caml_string_of_jsbytes("core"),
     cst_core_src_ofday_float_ml=
      caml_string_of_jsbytes("core/src/ofday_float.ml"),
     cst$145=caml_string_of_jsbytes(""),
     cst_core$360=caml_string_of_jsbytes("core"),
     module_name$9=caml_string_of_jsbytes("Core.Time.Ofday"),
     cst_t$185=caml_string_of_jsbytes("t"),
     cst_core_src_ofday_float_ml_27=
      caml_string_of_jsbytes("core/src/ofday_float.ml:275:4"),
     cst_t$186=caml_string_of_jsbytes("t"),
     cst_t$187=caml_string_of_jsbytes("t"),
     cst_core_src_ofday_float_ml_28=
      caml_string_of_jsbytes("core/src/ofday_float.ml:288:2"),
     cst_t$188=caml_string_of_jsbytes("t"),
     cst_core$361=caml_string_of_jsbytes("core"),
     cst_Core_Ofday_float$0=caml_string_of_jsbytes("Core__Ofday_float"),
     cst_Core_Ofday_intf=caml_string_of_jsbytes("Core__Ofday_intf"),
     cst_core$362=caml_string_of_jsbytes("core"),
     cst_core_src_ofday_intf_ml=
      caml_string_of_jsbytes("core/src/ofday_intf.ml"),
     cst$146=caml_string_of_jsbytes(""),
     cst_core$363=caml_string_of_jsbytes("core"),
     cst_core$364=caml_string_of_jsbytes("core"),
     cst_Core_Ofday_intf$0=caml_string_of_jsbytes("Core__Ofday_intf"),
     cst_Core_Time0_intf=caml_string_of_jsbytes("Core__Time0_intf"),
     cst_core$365=caml_string_of_jsbytes("core"),
     cst_core_src_time0_intf_ml=
      caml_string_of_jsbytes("core/src/time0_intf.ml"),
     cst$147=caml_string_of_jsbytes(""),
     cst_core$366=caml_string_of_jsbytes("core"),
     cst_core$367=caml_string_of_jsbytes("core"),
     cst_Core_Time0_intf$0=caml_string_of_jsbytes("Core__Time0_intf"),
     cst_Core_Time_intf=caml_string_of_jsbytes("Core__Time_intf"),
     cst_core$368=caml_string_of_jsbytes("core"),
     cst_core_src_time_intf_ml=caml_string_of_jsbytes("core/src/time_intf.ml"),
     cst$148=caml_string_of_jsbytes(""),
     cst_core$369=caml_string_of_jsbytes("core"),
     cst_core$370=caml_string_of_jsbytes("core"),
     cst_Core_Time_intf$0=caml_string_of_jsbytes("Core__Time_intf"),
     cst_time_has_no_time_zone_or_U=
      caml_string_of_jsbytes("time has no time zone or UTC offset"),
     cst$156=caml_string_of_jsbytes(" "),
     cst$157=caml_string_of_jsbytes(" "),
     cst_no_spaces_or_T_found=caml_string_of_jsbytes("no spaces or T found"),
     cst_too_many_spaces=caml_string_of_jsbytes("too many spaces"),
     utc_offset=[0,0.],
     cst_00=caml_string_of_jsbytes(":00"),
     cst$155=caml_string_of_jsbytes(":"),
     cst_Time_of_localized_string=
      caml_string_of_jsbytes("Time.of_localized_string"),
     cst_no_space_in_filename_strin=
      caml_string_of_jsbytes("no space in filename string"),
     cst$154=caml_string_of_jsbytes("_"),
     cst$153=caml_string_of_jsbytes(" "),
     cst$152=caml_string_of_jsbytes(" "),
     cst_Z=caml_string_of_jsbytes("Z"),
     cst$150=caml_string_of_jsbytes("-"),
     cst$151=caml_string_of_jsbytes("+"),
     cst_Time_to_date_ofday_precise=
      caml_string_of_jsbytes("Time.to_date_ofday_precise"),
     cst_Core_Time_Make_Time0_Time_=
      caml_string_of_jsbytes("Core__Time.Make(Time0).Time_of_string"),
     cst_Core_Time=caml_string_of_jsbytes("Core__Time"),
     cst_core$371=caml_string_of_jsbytes("core"),
     cst_core_src_time_ml=caml_string_of_jsbytes("core/src/time.ml"),
     cst$149=caml_string_of_jsbytes(""),
     cst_core$372=caml_string_of_jsbytes("core"),
     cst_core$373=caml_string_of_jsbytes("core"),
     cst_Core_Time$0=caml_string_of_jsbytes("Core__Time"),
     cst_Time_next_multiple_got_non=
      caml_string_of_jsbytes("Time.next_multiple got nonpositive interval"),
     cst_Core_Time_float0=caml_string_of_jsbytes("Core__Time_float0"),
     cst_core$374=caml_string_of_jsbytes("core"),
     cst_core_src_time_float0_ml=
      caml_string_of_jsbytes("core/src/time_float0.ml"),
     cst$158=caml_string_of_jsbytes(""),
     cst_core$375=caml_string_of_jsbytes("core"),
     cst_core$376=caml_string_of_jsbytes("core"),
     cst_Core_Time_float0$0=caml_string_of_jsbytes("Core__Time_float0"),
     cst_Time_Stable_With_utc_V2_t_$0=
      caml_string_of_jsbytes
       ("Time.Stable.With_utc.V2.t_of_sexp: unknown time zone"),
     cst$160=caml_string_of_jsbytes(" "),
     cst_Time_Stable_With_utc_V2_t_=
      caml_string_of_jsbytes("Time.Stable.With_utc.V2.t_of_sexp"),
     cst_Core_Time_float=caml_string_of_jsbytes("Core__Time_float"),
     cst_core$377=caml_string_of_jsbytes("core"),
     cst_core_src_time_float_ml=
      caml_string_of_jsbytes("core/src/time_float.ml"),
     cst$159=caml_string_of_jsbytes(""),
     cst_core$378=caml_string_of_jsbytes("core"),
     cst_t$189=caml_string_of_jsbytes("t"),
     cst_core_src_time_float_ml_25_=
      caml_string_of_jsbytes("core/src/time_float.ml:25:6"),
     cst_t$190=caml_string_of_jsbytes("t"),
     cst_core$379=caml_string_of_jsbytes("core"),
     cst_Core_Time_float$0=caml_string_of_jsbytes("Core__Time_float"),
     cst_Core_Time_ns_intf=caml_string_of_jsbytes("Core__Time_ns_intf"),
     cst_core$380=caml_string_of_jsbytes("core"),
     cst_core_src_time_ns_intf_ml=
      caml_string_of_jsbytes("core/src/time_ns_intf.ml"),
     cst$161=caml_string_of_jsbytes(""),
     cst_core$381=caml_string_of_jsbytes("core"),
     cst_core$382=caml_string_of_jsbytes("core"),
     cst_Core_Time_ns_intf$0=caml_string_of_jsbytes("Core__Time_ns_intf"),
     cst_Core_Date=caml_string_of_jsbytes("Core__Date"),
     cst_core$383=caml_string_of_jsbytes("core"),
     cst_core_src_date_ml=caml_string_of_jsbytes("core/src/date.ml"),
     cst$162=caml_string_of_jsbytes(""),
     cst_core$384=caml_string_of_jsbytes("core"),
     cst_core$385=caml_string_of_jsbytes("core"),
     cst_Core_Date$0=caml_string_of_jsbytes("Core__Date"),
     cst_Core_Date_intf=caml_string_of_jsbytes("Core__Date_intf"),
     cst_core$386=caml_string_of_jsbytes("core"),
     cst_core_src_date_intf_ml=caml_string_of_jsbytes("core/src/date_intf.ml"),
     cst$163=caml_string_of_jsbytes(""),
     cst_core$387=caml_string_of_jsbytes("core"),
     cst_core$388=caml_string_of_jsbytes("core"),
     cst_Core_Date_intf$0=caml_string_of_jsbytes("Core__Date_intf"),
     cst_Time_ns_Span_does_not_supp=
      caml_string_of_jsbytes("Time_ns.Span does not support this span"),
     cst_Span_t_exceeds_limits=caml_string_of_jsbytes("Span.t exceeds limits"),
     suffix$7=caml_string_of_jsbytes("ns"),
     suffix$8=caml_string_of_jsbytes("us"),
     suffix$9=caml_string_of_jsbytes("ms"),
     suffix$10=caml_string_of_jsbytes("s"),
     suffix$11=caml_string_of_jsbytes("m"),
     suffix$12=caml_string_of_jsbytes("h"),
     suffix$13=caml_string_of_jsbytes("d"),
     cst$165=caml_string_of_jsbytes(" "),
     cst_Time_ns_Span_Stable_V2_t_o=
      caml_string_of_jsbytes
       ("Time_ns.Span.Stable.V2.t_of_sexp: sexp must be an Atom"),
     cst_empty_string$0=caml_string_of_jsbytes("empty string"),
     cst_no_digits_before_unit_suff=
      caml_string_of_jsbytes("no digits before unit suffix"),
     cst_unparseable_unit_suffix=
      caml_string_of_jsbytes("unparseable unit suffix"),
     cst_unparseable_unit_suffix$0=
      caml_string_of_jsbytes("unparseable unit suffix"),
     cst_no_unit_suffix_after_digit=
      caml_string_of_jsbytes("no unit suffix after digits"),
     cst_span_would_be_outside_of_i$2=
      caml_string_of_jsbytes("span would be outside of int63 range"),
     cst_span_would_be_outside_of_i$1=
      caml_string_of_jsbytes("span would be outside of int63 range"),
     cst_span_would_be_outside_of_i$0=
      caml_string_of_jsbytes("span would be outside of int63 range"),
     cst_span_would_be_outside_of_i=
      caml_string_of_jsbytes("span would be outside of int63 range"),
     cst_Time_ns_Span_of_string_inv=
      caml_string_of_jsbytes("Time_ns.Span.of_string: invalid string"),
     cst_0s$1=caml_string_of_jsbytes("0s"),
     cst_Time_ns_Span_to_int_ns_uns=
      caml_string_of_jsbytes
       ("Time_ns.Span.to_int_ns: unsupported on 32bit machines"),
     cst_ns$6=caml_string_of_jsbytes("ns"),
     cst_us$7=caml_string_of_jsbytes("us"),
     cst_ms$7=caml_string_of_jsbytes("ms"),
     cst_sec$4=caml_string_of_jsbytes("sec"),
     cst_min$4=caml_string_of_jsbytes("min"),
     cst_hr$4=caml_string_of_jsbytes("hr"),
     cst_sign$4=caml_string_of_jsbytes("sign"),
     cst_hr$2=caml_string_of_jsbytes("hr"),
     cst_min$2=caml_string_of_jsbytes("min"),
     cst_ms$5=caml_string_of_jsbytes("ms"),
     cst_ns$4=caml_string_of_jsbytes("ns"),
     cst_sec$2=caml_string_of_jsbytes("sec"),
     cst_sign$2=caml_string_of_jsbytes("sign"),
     cst_us$5=caml_string_of_jsbytes("us"),
     cst_ns$5=caml_string_of_jsbytes("ns"),
     cst_us$6=caml_string_of_jsbytes("us"),
     cst_ms$6=caml_string_of_jsbytes("ms"),
     cst_sec$3=caml_string_of_jsbytes("sec"),
     cst_min$3=caml_string_of_jsbytes("min"),
     cst_hr$3=caml_string_of_jsbytes("hr"),
     cst_sign$3=caml_string_of_jsbytes("sign"),
     cst_Core_Span_ns=caml_string_of_jsbytes("Core__Span_ns"),
     cst_core$389=caml_string_of_jsbytes("core"),
     cst_core_src_span_ns_ml=caml_string_of_jsbytes("core/src/span_ns.ml"),
     cst$164=caml_string_of_jsbytes(""),
     cst_core$390=caml_string_of_jsbytes("core"),
     module_name$10=caml_string_of_jsbytes("Core.Time_ns.Span"),
     cst_t$191=caml_string_of_jsbytes("t"),
     cst_core_src_span_ns_ml_15_2=
      caml_string_of_jsbytes("core/src/span_ns.ml:15:2"),
     cst_t$192=caml_string_of_jsbytes("t"),
     name$61=caml_string_of_jsbytes("core/src/span_ns.ml.T.t"),
     error_source_032$0=caml_string_of_jsbytes("core/src/span_ns.ml.Parts.t"),
     cst_t$193=caml_string_of_jsbytes("t"),
     cst_core_src_span_ns_ml_187_8=
      caml_string_of_jsbytes("core/src/span_ns.ml:187:8"),
     cst_t$194=caml_string_of_jsbytes("t"),
     cst_t$195=caml_string_of_jsbytes("t"),
     cst_core_src_span_ns_ml_738_4=
      caml_string_of_jsbytes("core/src/span_ns.ml:738:4"),
     cst_t$196=caml_string_of_jsbytes("t"),
     cst_t$197=caml_string_of_jsbytes("t"),
     cst_core_src_span_ns_ml_744_4=
      caml_string_of_jsbytes("core/src/span_ns.ml:744:4"),
     cst_t$198=caml_string_of_jsbytes("t"),
     cst_core$391=caml_string_of_jsbytes("core"),
     cst_Core_Span_ns$0=caml_string_of_jsbytes("Core__Span_ns"),
     cst_core_src_ofday_ns_ml$0=caml_string_of_jsbytes("core/src/ofday_ns.ml"),
     cst_Time_ns_Ofday_every_called=
      caml_string_of_jsbytes
       ("[Time_ns.Ofday.every] called with [start] > [stop]"),
     cst_Time_ns_Ofday_every_called$0=
      caml_string_of_jsbytes
       ("[Time_ns.Ofday.every] called with negative span"),
     cst_Time_ns_Ofday_of_string_is=
      caml_string_of_jsbytes
       ("Time_ns.Ofday.of_string_iso8601_extended: cannot parse string"),
     cst_expected_an_atom=caml_string_of_jsbytes("expected an atom"),
     cst_Incorrect_day=caml_string_of_jsbytes("Incorrect day"),
     cst_Time_ns_Ofday_of_span_sinc=
      caml_string_of_jsbytes
       ("Time_ns.Ofday.of_span_since_start_of_day_exn: input out of bounds"),
     cst_Core_Ofday_ns=caml_string_of_jsbytes("Core__Ofday_ns"),
     cst_core$392=caml_string_of_jsbytes("core"),
     cst_core_src_ofday_ns_ml=caml_string_of_jsbytes("core/src/ofday_ns.ml"),
     cst$166=caml_string_of_jsbytes(""),
     cst_core$393=caml_string_of_jsbytes("core"),
     cst_t$199=caml_string_of_jsbytes("t"),
     cst_core_src_ofday_ns_ml_6_0=
      caml_string_of_jsbytes("core/src/ofday_ns.ml:6:0"),
     cst_t$200=caml_string_of_jsbytes("t"),
     name$62=caml_string_of_jsbytes("core/src/ofday_ns.ml.t"),
     cst_t$201=caml_string_of_jsbytes("t"),
     cst_core_src_ofday_ns_ml_73_4=
      caml_string_of_jsbytes("core/src/ofday_ns.ml:73:4"),
     cst_t$202=caml_string_of_jsbytes("t"),
     cst_t$203=caml_string_of_jsbytes("t"),
     cst_core_src_ofday_ns_ml_205_4=
      caml_string_of_jsbytes("core/src/ofday_ns.ml:205:4"),
     cst_t$204=caml_string_of_jsbytes("t"),
     module_name$11=caml_string_of_jsbytes("Core.Time_ns.Ofday"),
     cst_core_src_ofday_ns_ml$1=caml_string_of_jsbytes("core/src/ofday_ns.ml"),
     cst_core_src_ofday_ns_ml$2=caml_string_of_jsbytes("core/src/ofday_ns.ml"),
     cst_core_src_ofday_ns_ml$3=caml_string_of_jsbytes("core/src/ofday_ns.ml"),
     cst_core_src_ofday_ns_ml$4=caml_string_of_jsbytes("core/src/ofday_ns.ml"),
     cst_134496998b70c29fb10f794853=
      caml_string_of_jsbytes("134496998b70c29fb10f7948532d26c9"),
     cst_core$394=caml_string_of_jsbytes("core"),
     cst_Core_Ofday_ns$0=caml_string_of_jsbytes("Core__Ofday_ns"),
     cst_time_has_no_time_zone_or_U$0=
      caml_string_of_jsbytes("time has no time zone or UTC offset"),
     cst$177=caml_string_of_jsbytes(" "),
     cst$178=caml_string_of_jsbytes(" "),
     cst_no_spaces_or_T_found$0=caml_string_of_jsbytes("no spaces or T found"),
     cst_too_many_spaces$0=caml_string_of_jsbytes("too many spaces"),
     utc_offset$2=[0,0.],
     cst_00$0=caml_string_of_jsbytes(":00"),
     cst$176=caml_string_of_jsbytes(":"),
     cst_Time_of_localized_string$0=
      caml_string_of_jsbytes("Time.of_localized_string"),
     cst_no_space_in_filename_strin$0=
      caml_string_of_jsbytes("no space in filename string"),
     cst$175=caml_string_of_jsbytes("_"),
     cst$174=caml_string_of_jsbytes(" "),
     cst$173=caml_string_of_jsbytes(" "),
     cst_Z$2=caml_string_of_jsbytes("Z"),
     cst$171=caml_string_of_jsbytes("-"),
     cst$172=caml_string_of_jsbytes("+"),
     cst_Time_to_date_ofday_precise$0=
      caml_string_of_jsbytes("Time.to_date_ofday_precise"),
     cst_Z$1=caml_string_of_jsbytes("Z"),
     cst_Z$0=caml_string_of_jsbytes("Z"),
     cst$170=caml_string_of_jsbytes(" "),
     cst$169=caml_string_of_jsbytes("."),
     cst$168=caml_string_of_jsbytes(""),
     cst_Time_ns_next_multiple_got_=
      caml_string_of_jsbytes("Time_ns.next_multiple got nonpositive interval"),
     cst_Time_ns_does_not_support_t=
      caml_string_of_jsbytes("Time_ns does not support this time"),
     cst_Time_ns_to_int_ns_since_ep=
      caml_string_of_jsbytes
       ("Time_ns.to_int_ns_since_epoch: unsupported on 32bit machines"),
     cst_Time_ns_overflow=caml_string_of_jsbytes("Time_ns: overflow"),
     cst_Core_Time_ns=caml_string_of_jsbytes("Core__Time_ns"),
     cst_core$395=caml_string_of_jsbytes("core"),
     cst_core_src_time_ns_ml=caml_string_of_jsbytes("core/src/time_ns.ml"),
     cst$167=caml_string_of_jsbytes(""),
     cst_core$396=caml_string_of_jsbytes("core"),
     cst_t$205=caml_string_of_jsbytes("t"),
     cst_core_src_time_ns_ml_9_0=
      caml_string_of_jsbytes("core/src/time_ns.ml:9:0"),
     cst_t$206=caml_string_of_jsbytes("t"),
     name$63=caml_string_of_jsbytes("core/src/time_ns.ml.t"),
     cst_t$207=caml_string_of_jsbytes("t"),
     cst_core_src_time_ns_ml_330_8=
      caml_string_of_jsbytes("core/src/time_ns.ml:330:8"),
     cst_t$208=caml_string_of_jsbytes("t"),
     cst_Core_Time_ns_To_and_of_str=
      caml_string_of_jsbytes
       ("Core__Time_ns.To_and_of_string.Time_ns_of_string"),
     cst_core$397=caml_string_of_jsbytes("core"),
     cst_Core_Time_ns$0=caml_string_of_jsbytes("Core__Time_ns"),
     cst_Core_Time_ns_alternate_sex=
      caml_string_of_jsbytes("Core__Time_ns_alternate_sexp"),
     cst_core$398=caml_string_of_jsbytes("core"),
     cst_core_src_time_ns_alternate=
      caml_string_of_jsbytes("core/src/time_ns_alternate_sexp.ml"),
     cst$179=caml_string_of_jsbytes(""),
     cst_core$399=caml_string_of_jsbytes("core"),
     cst_core$400=caml_string_of_jsbytes("core"),
     cst_Core_Time_ns_alternate_sex$0=
      caml_string_of_jsbytes("Core__Time_ns_alternate_sexp"),
     cst_Core_Substring_intf=caml_string_of_jsbytes("Core__Substring_intf"),
     cst_core$401=caml_string_of_jsbytes("core"),
     cst_core_src_substring_intf_ml=
      caml_string_of_jsbytes("core/src/substring_intf.ml"),
     cst$180=caml_string_of_jsbytes(""),
     cst_core$402=caml_string_of_jsbytes("core"),
     cst_core$403=caml_string_of_jsbytes("core"),
     cst_Core_Substring_intf$0=caml_string_of_jsbytes("Core__Substring_intf"),
     cst_Core_Make_substring_intf=
      caml_string_of_jsbytes("Core__Make_substring_intf"),
     cst_core$404=caml_string_of_jsbytes("core"),
     cst_core_src_make_substring_in=
      caml_string_of_jsbytes("core/src/make_substring_intf.ml"),
     cst$181=caml_string_of_jsbytes(""),
     cst_core$405=caml_string_of_jsbytes("core"),
     cst_core$406=caml_string_of_jsbytes("core"),
     cst_Core_Make_substring_intf$0=
      caml_string_of_jsbytes("Core__Make_substring_intf"),
     cst_suffix=caml_string_of_jsbytes("suffix"),
     cst_prefix=caml_string_of_jsbytes("prefix"),
     cst_drop_suffix=caml_string_of_jsbytes("drop_suffix"),
     cst_drop_prefix=caml_string_of_jsbytes("drop_prefix"),
     cst_expecting_nonnegative_argu=
      caml_string_of_jsbytes(" expecting nonnegative argument"),
     cst_index_out_of_bounds=caml_string_of_jsbytes("index out of bounds"),
     cst_string$1=caml_string_of_jsbytes("string"),
     cst_bigstring=caml_string_of_jsbytes("bigstring"),
     cst_Core_Make_substring=caml_string_of_jsbytes("Core__Make_substring"),
     cst_core$407=caml_string_of_jsbytes("core"),
     cst_core_src_make_substring_ml=
      caml_string_of_jsbytes("core/src/make_substring.ml"),
     cst$182=caml_string_of_jsbytes(""),
     cst_core$408=caml_string_of_jsbytes("core"),
     cst_core$409=caml_string_of_jsbytes("core"),
     cst_Core_Make_substring$0=caml_string_of_jsbytes("Core__Make_substring"),
     cst_Core_Substring=caml_string_of_jsbytes("Core__Substring"),
     cst_core$410=caml_string_of_jsbytes("core"),
     cst_core_src_substring_ml=caml_string_of_jsbytes("core/src/substring.ml"),
     cst$183=caml_string_of_jsbytes(""),
     cst_core$411=caml_string_of_jsbytes("core"),
     cst_core$412=caml_string_of_jsbytes("core"),
     cst_Core_Substring$0=caml_string_of_jsbytes("Core__Substring"),
     cst_Core_Arg=caml_string_of_jsbytes("Core__Arg"),
     cst_core$413=caml_string_of_jsbytes("core"),
     cst_core_src_arg_ml=caml_string_of_jsbytes("core/src/arg.ml"),
     cst$184=caml_string_of_jsbytes(""),
     cst_core$414=caml_string_of_jsbytes("core"),
     cst_core$415=caml_string_of_jsbytes("core"),
     cst_Core_Arg$0=caml_string_of_jsbytes("Core__Arg"),
     cst_Core_Command_env_var=caml_string_of_jsbytes("Core__Command_env_var"),
     cst_core$416=caml_string_of_jsbytes("core"),
     cst_core_src_command_env_var_m=
      caml_string_of_jsbytes("core/src/command_env_var.ml"),
     cst$185=caml_string_of_jsbytes(""),
     cst_core$417=caml_string_of_jsbytes("core"),
     all$5=[0,0,[0,1,[0,2,0]]],
     cst_core$418=caml_string_of_jsbytes("core"),
     cst_Core_Command_env_var$0=
      caml_string_of_jsbytes("Core__Command_env_var"),
     cst_Filename_of_absolute_exn_f=
      caml_string_of_jsbytes
       ("Filename.of_absolute_exn: first argument must be an absolute path"),
     cst_Filename_of_absolute_exn_r=
      caml_string_of_jsbytes
       ("Filename.of_absolute_exn: [~relative_to] must be an absolute path"),
     cst_Filename_of_parts_empty_pa=
      caml_string_of_jsbytes("Filename.of_parts: empty parts list"),
     cst$199=caml_string_of_jsbytes("."),
     cst$200=caml_string_of_jsbytes("/"),
     cst$201=caml_string_of_jsbytes("/"),
     cst$202=caml_string_of_jsbytes("."),
     cst$198=caml_string_of_jsbytes("/"),
     cst$196=caml_string_of_jsbytes("."),
     cst$197=caml_string_of_jsbytes(".."),
     cst$187=caml_string_of_jsbytes(""),
     cst$190=caml_string_of_jsbytes(""),
     cst$191=caml_string_of_jsbytes("."),
     cst$192=caml_string_of_jsbytes(""),
     cst$188=caml_string_of_jsbytes(""),
     cst$189=caml_string_of_jsbytes("."),
     cst$193=caml_string_of_jsbytes(""),
     cst$194=caml_string_of_jsbytes("."),
     cst$195=caml_string_of_jsbytes("/"),
     cst_Core_Filename=caml_string_of_jsbytes("Core__Filename"),
     cst_core$419=caml_string_of_jsbytes("core"),
     cst_core_src_filename_ml=caml_string_of_jsbytes("core/src/filename.ml"),
     cst$186=caml_string_of_jsbytes(""),
     cst_core$420=caml_string_of_jsbytes("core"),
     root$0=caml_string_of_jsbytes("/"),
     cst_core$421=caml_string_of_jsbytes("core"),
     cst_Core_Filename$0=caml_string_of_jsbytes("Core__Filename"),
     cst_core_src_command_shape_ml_$36=
      caml_string_of_jsbytes("core/src/command_shape.ml.Fully_forced.t"),
     cst_Basic$3=caml_string_of_jsbytes("Basic"),
     cst_Exec$12=caml_string_of_jsbytes("Exec"),
     cst_Group$12=caml_string_of_jsbytes("Group"),
     cst_basic$1=caml_string_of_jsbytes("basic"),
     cst_exec$7=caml_string_of_jsbytes("exec"),
     cst_group$7=caml_string_of_jsbytes("group"),
     cst_Basic$4=caml_string_of_jsbytes("Basic"),
     cst_Exec$13=caml_string_of_jsbytes("Exec"),
     cst_Group$13=caml_string_of_jsbytes("Group"),
     cst_basic$2=caml_string_of_jsbytes("basic"),
     cst_exec$8=caml_string_of_jsbytes("exec"),
     cst_group$8=caml_string_of_jsbytes("group"),
     cst_child_subcommand$4=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$10=caml_string_of_jsbytes("path_to_exe"),
     cst_readme$21=caml_string_of_jsbytes("readme"),
     cst_summary$30=caml_string_of_jsbytes("summary"),
     cst_working_dir$7=caml_string_of_jsbytes("working_dir"),
     cst_child_subcommand$5=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$11=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$8=caml_string_of_jsbytes("working_dir"),
     cst_summary$31=caml_string_of_jsbytes("summary"),
     cst_core_src_command_shape_ml_$34=
      caml_string_of_jsbytes("core/src/command_shape.ml.Exec_info.t"),
     cst$209=caml_string_of_jsbytes("-"),
     cst_Subcommands_must_not_begin=
      caml_string_of_jsbytes("Subcommands must not begin with '-'"),
     cst_readme$18=caml_string_of_jsbytes("readme"),
     cst_subcommands$7=caml_string_of_jsbytes("subcommands"),
     cst_summary$26=caml_string_of_jsbytes("summary"),
     cst_subcommands$8=caml_string_of_jsbytes("subcommands"),
     cst_summary$27=caml_string_of_jsbytes("summary"),
     cst_core_src_command_shape_ml_$32=
      caml_string_of_jsbytes("core/src/command_shape.ml.Group_info.t"),
     cst_t$260=caml_string_of_jsbytes("t"),
     cst$208=caml_string_of_jsbytes("-"),
     cst_Flags_must_begin_with=
      caml_string_of_jsbytes("Flags must begin with '-'"),
     cst_anons$4=caml_string_of_jsbytes("anons"),
     cst_flags$7=caml_string_of_jsbytes("flags"),
     cst_readme$15=caml_string_of_jsbytes("readme"),
     cst_summary$22=caml_string_of_jsbytes("summary"),
     cst_flags$8=caml_string_of_jsbytes("flags"),
     cst_anons$5=caml_string_of_jsbytes("anons"),
     cst_summary$23=caml_string_of_jsbytes("summary"),
     cst_core_src_command_shape_ml_$29=
      caml_string_of_jsbytes("core/src/command_shape.ml.Base_info.t"),
     cst_Key_type_s_is_an_ambiguous=
      caml_string_of_jsbytes("%{Key_type} %s is an ambiguous prefix: %s"),
     cst_unknown_Key_type_s=caml_string_of_jsbytes("unknown %{Key_type} %s"),
     cst_unknown=caml_string_of_jsbytes("unknown "),
     cst_flag=caml_string_of_jsbytes("flag"),
     cst_subcommand=caml_string_of_jsbytes("subcommand"),
     cst$207=caml_string_of_jsbytes(""),
     cst$206=caml_string_of_jsbytes(" "),
     cst_help=caml_string_of_jsbytes("[-help]"),
     cst_help$0=caml_string_of_jsbytes("[-help]"),
     cst_version=caml_string_of_jsbytes("[-version]"),
     cst_version$0=caml_string_of_jsbytes("[-version]"),
     cst_build_info=caml_string_of_jsbytes("[-build-info]"),
     cst_build_info$0=caml_string_of_jsbytes("[-build-info]"),
     cst_help$1=caml_string_of_jsbytes("help"),
     cst_help$2=caml_string_of_jsbytes("help"),
     cst_version$1=caml_string_of_jsbytes("version"),
     cst_version$2=caml_string_of_jsbytes("version"),
     cst_Unable_to_parse=caml_string_of_jsbytes("Unable to parse"),
     cst_aliases$4=caml_string_of_jsbytes("aliases"),
     cst_doc$4=caml_string_of_jsbytes("doc"),
     cst_name$7=caml_string_of_jsbytes("name"),
     cst_aliases$5=caml_string_of_jsbytes("aliases"),
     cst_doc$5=caml_string_of_jsbytes("doc"),
     cst_name$8=caml_string_of_jsbytes("name"),
     cst_core_src_command_shape_ml_$27=
      caml_string_of_jsbytes("core/src/command_shape.ml.Flag_info.t"),
     x_644=caml_string_of_jsbytes("name"),
     cst_core_src_command_shape_ml$60=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_Grammar$3=caml_string_of_jsbytes("Grammar"),
     cst_Usage$3=caml_string_of_jsbytes("Usage"),
     cst_grammar$1=caml_string_of_jsbytes("grammar"),
     cst_usage$4=caml_string_of_jsbytes("usage"),
     cst_Grammar$4=caml_string_of_jsbytes("Grammar"),
     cst_Usage$4=caml_string_of_jsbytes("Usage"),
     cst_grammar$2=caml_string_of_jsbytes("grammar"),
     cst_usage$5=caml_string_of_jsbytes("usage"),
     cst_ad_hoc$1=caml_string_of_jsbytes("ad_hoc"),
     cst_Ad_hoc$3=caml_string_of_jsbytes("Ad_hoc"),
     cst_Concat$3=caml_string_of_jsbytes("Concat"),
     cst_Many$3=caml_string_of_jsbytes("Many"),
     cst_Maybe$3=caml_string_of_jsbytes("Maybe"),
     cst_One$3=caml_string_of_jsbytes("One"),
     cst_Zero$4=caml_string_of_jsbytes("Zero"),
     cst_concat$1=caml_string_of_jsbytes("concat"),
     cst_many$1=caml_string_of_jsbytes("many"),
     cst_maybe$1=caml_string_of_jsbytes("maybe"),
     cst_one$1=caml_string_of_jsbytes("one"),
     cst_zero$3=caml_string_of_jsbytes("zero"),
     cst_ad_hoc$2=caml_string_of_jsbytes("ad_hoc"),
     cst_Ad_hoc$4=caml_string_of_jsbytes("Ad_hoc"),
     cst_Concat$4=caml_string_of_jsbytes("Concat"),
     cst_Many$4=caml_string_of_jsbytes("Many"),
     cst_Maybe$4=caml_string_of_jsbytes("Maybe"),
     cst_One$4=caml_string_of_jsbytes("One"),
     cst_Zero$5=caml_string_of_jsbytes("Zero"),
     cst_concat$2=caml_string_of_jsbytes("concat"),
     cst_many$2=caml_string_of_jsbytes("many"),
     cst_maybe$2=caml_string_of_jsbytes("maybe"),
     cst_one$2=caml_string_of_jsbytes("one"),
     cst_zero$4=caml_string_of_jsbytes("zero"),
     cst_unsupported_version_to_use=
      caml_string_of_jsbytes("unsupported version_to_use"),
     cst_core_src_command_shape_ml$55=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_V1$0=caml_string_of_jsbytes("V1"),
     cst_V2$0=caml_string_of_jsbytes("V2"),
     cst_V3$0=caml_string_of_jsbytes("V3"),
     cst_v1=caml_string_of_jsbytes("v1"),
     cst_v2=caml_string_of_jsbytes("v2"),
     cst_v3=caml_string_of_jsbytes("v3"),
     cst_V1$1=caml_string_of_jsbytes("V1"),
     cst_V2$1=caml_string_of_jsbytes("V2"),
     cst_V3$1=caml_string_of_jsbytes("V3"),
     cst_v1$0=caml_string_of_jsbytes("v1"),
     cst_v2$0=caml_string_of_jsbytes("v2"),
     cst_v3$0=caml_string_of_jsbytes("v3"),
     cst_core_src_command_shape_ml$50=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_Base$6=caml_string_of_jsbytes("Base"),
     cst_Exec$9=caml_string_of_jsbytes("Exec"),
     cst_Group$9=caml_string_of_jsbytes("Group"),
     cst_base$3=caml_string_of_jsbytes("base"),
     cst_exec$5=caml_string_of_jsbytes("exec"),
     cst_group$5=caml_string_of_jsbytes("group"),
     cst_Base$7=caml_string_of_jsbytes("Base"),
     cst_Exec$10=caml_string_of_jsbytes("Exec"),
     cst_Group$10=caml_string_of_jsbytes("Group"),
     cst_base$4=caml_string_of_jsbytes("base"),
     cst_exec$6=caml_string_of_jsbytes("exec"),
     cst_group$6=caml_string_of_jsbytes("group"),
     cst_core_src_command_shape_ml$45=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_Base$3=caml_string_of_jsbytes("Base"),
     cst_Exec$6=caml_string_of_jsbytes("Exec"),
     cst_Group$6=caml_string_of_jsbytes("Group"),
     cst_base$1=caml_string_of_jsbytes("base"),
     cst_exec$3=caml_string_of_jsbytes("exec"),
     cst_group$3=caml_string_of_jsbytes("group"),
     cst_Base$4=caml_string_of_jsbytes("Base"),
     cst_Exec$7=caml_string_of_jsbytes("Exec"),
     cst_Group$7=caml_string_of_jsbytes("Group"),
     cst_base$2=caml_string_of_jsbytes("base"),
     cst_exec$4=caml_string_of_jsbytes("exec"),
     cst_group$4=caml_string_of_jsbytes("group"),
     cst_core_src_command_shape_ml$40=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_Base$0=caml_string_of_jsbytes("Base"),
     cst_Exec$3=caml_string_of_jsbytes("Exec"),
     cst_Group$3=caml_string_of_jsbytes("Group"),
     cst_Lazy$0=caml_string_of_jsbytes("Lazy"),
     cst_base=caml_string_of_jsbytes("base"),
     cst_exec$1=caml_string_of_jsbytes("exec"),
     cst_group$1=caml_string_of_jsbytes("group"),
     cst_lazy=caml_string_of_jsbytes("lazy"),
     cst_Base$1=caml_string_of_jsbytes("Base"),
     cst_Exec$4=caml_string_of_jsbytes("Exec"),
     cst_Group$4=caml_string_of_jsbytes("Group"),
     cst_Lazy$1=caml_string_of_jsbytes("Lazy"),
     cst_base$0=caml_string_of_jsbytes("base"),
     cst_exec$2=caml_string_of_jsbytes("exec"),
     cst_group$2=caml_string_of_jsbytes("group"),
     cst_lazy$0=caml_string_of_jsbytes("lazy"),
     cst_core_src_command_shape_ml$35=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml_$19=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Fully_forced.V1.t"),
     cst_Basic$0=caml_string_of_jsbytes("Basic"),
     cst_Exec$0=caml_string_of_jsbytes("Exec"),
     cst_Group$0=caml_string_of_jsbytes("Group"),
     cst_basic=caml_string_of_jsbytes("basic"),
     cst_exec=caml_string_of_jsbytes("exec"),
     cst_group=caml_string_of_jsbytes("group"),
     cst_Basic$1=caml_string_of_jsbytes("Basic"),
     cst_Exec$1=caml_string_of_jsbytes("Exec"),
     cst_Group$1=caml_string_of_jsbytes("Group"),
     cst_basic$0=caml_string_of_jsbytes("basic"),
     cst_exec$0=caml_string_of_jsbytes("exec"),
     cst_group$0=caml_string_of_jsbytes("group"),
     cst$205=caml_string_of_jsbytes("/"),
     cst_path_to_exe$6=caml_string_of_jsbytes("path_to_exe"),
     cst_readme$12=caml_string_of_jsbytes("readme"),
     cst_summary$18=caml_string_of_jsbytes("summary"),
     cst_path_to_exe$7=caml_string_of_jsbytes("path_to_exe"),
     cst_summary$19=caml_string_of_jsbytes("summary"),
     cst_path_to_exe$3=caml_string_of_jsbytes("path_to_exe"),
     cst_readme$10=caml_string_of_jsbytes("readme"),
     cst_summary$15=caml_string_of_jsbytes("summary"),
     cst_working_dir$3=caml_string_of_jsbytes("working_dir"),
     cst_path_to_exe$4=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$4=caml_string_of_jsbytes("working_dir"),
     cst_summary$16=caml_string_of_jsbytes("summary"),
     cst_core_src_command_shape_ml$30=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_child_subcommand$0=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$0=caml_string_of_jsbytes("path_to_exe"),
     cst_readme$8=caml_string_of_jsbytes("readme"),
     cst_summary$12=caml_string_of_jsbytes("summary"),
     cst_working_dir$0=caml_string_of_jsbytes("working_dir"),
     cst_child_subcommand$1=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$1=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$1=caml_string_of_jsbytes("working_dir"),
     cst_summary$13=caml_string_of_jsbytes("summary"),
     cst_core_src_command_shape_ml_$15=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Exec_info.V3.t"),
     cst_core_src_command_shape_ml$25=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_readme$6=caml_string_of_jsbytes("readme"),
     cst_subcommands$3=caml_string_of_jsbytes("subcommands"),
     cst_summary$9=caml_string_of_jsbytes("summary"),
     cst_subcommands$4=caml_string_of_jsbytes("subcommands"),
     cst_summary$10=caml_string_of_jsbytes("summary"),
     cst_t$225=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml$20=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_readme$4=caml_string_of_jsbytes("readme"),
     cst_subcommands$0=caml_string_of_jsbytes("subcommands"),
     cst_summary$6=caml_string_of_jsbytes("summary"),
     cst_subcommands$1=caml_string_of_jsbytes("subcommands"),
     cst_summary$7=caml_string_of_jsbytes("summary"),
     cst_core_src_command_shape_ml_$11=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Group_info.V2.t"),
     cst_t$223=caml_string_of_jsbytes("t"),
     cst_flags$3=caml_string_of_jsbytes("flags"),
     cst_readme$2=caml_string_of_jsbytes("readme"),
     cst_summary$3=caml_string_of_jsbytes("summary"),
     cst_usage$2=caml_string_of_jsbytes("usage"),
     cst_flags$4=caml_string_of_jsbytes("flags"),
     cst_usage$3=caml_string_of_jsbytes("usage"),
     cst_summary$4=caml_string_of_jsbytes("summary"),
     cst_core_src_command_shape_ml$15=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_anons$0=caml_string_of_jsbytes("anons"),
     cst_flags$0=caml_string_of_jsbytes("flags"),
     cst_readme$0=caml_string_of_jsbytes("readme"),
     cst_summary$0=caml_string_of_jsbytes("summary"),
     cst_flags$1=caml_string_of_jsbytes("flags"),
     cst_anons$1=caml_string_of_jsbytes("anons"),
     cst_summary$1=caml_string_of_jsbytes("summary"),
     cst_core_src_command_shape_ml_$6=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Base_info.V2.t"),
     cst_core_src_command_shape_ml$10=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_aliases$0=caml_string_of_jsbytes("aliases"),
     cst_doc$0=caml_string_of_jsbytes("doc"),
     cst_name$3=caml_string_of_jsbytes("name"),
     cst_aliases$1=caml_string_of_jsbytes("aliases"),
     cst_doc$1=caml_string_of_jsbytes("doc"),
     cst_name$4=caml_string_of_jsbytes("name"),
     cst_core_src_command_shape_ml_$4=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Flag_info.V1.t"),
     cst_core_src_command_shape_ml$5=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_Grammar$0=caml_string_of_jsbytes("Grammar"),
     cst_Usage$0=caml_string_of_jsbytes("Usage"),
     cst_grammar=caml_string_of_jsbytes("grammar"),
     cst_usage=caml_string_of_jsbytes("usage"),
     cst_Grammar$1=caml_string_of_jsbytes("Grammar"),
     cst_Usage$1=caml_string_of_jsbytes("Usage"),
     cst_grammar$0=caml_string_of_jsbytes("grammar"),
     cst_usage$0=caml_string_of_jsbytes("usage"),
     cst_core_src_command_shape_ml_$2=
      caml_string_of_jsbytes("core/src/command_shape.ml.Stable.Anons.V2.t"),
     cst_Many_Zero_should_be_just_Z=
      caml_string_of_jsbytes("Many Zero should be just Zero"),
     cst_Maybe_Zero_should_be_just_=
      caml_string_of_jsbytes("Maybe Zero should be just Zero"),
     cst_Flatten_zero_and_one_eleme=
      caml_string_of_jsbytes("Flatten zero and one-element Concat"),
     cst$204=caml_string_of_jsbytes(""),
     cst_bug_in_command_ml=caml_string_of_jsbytes("bug in command.ml"),
     cst_bug_in_command_ml$0=caml_string_of_jsbytes("bug in command.ml"),
     cst_core_src_command_shape_ml$0=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml_$0=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Anons.Grammar.V1.t"),
     cst_ad_hoc=caml_string_of_jsbytes("ad_hoc"),
     cst_Ad_hoc$0=caml_string_of_jsbytes("Ad_hoc"),
     cst_Concat$0=caml_string_of_jsbytes("Concat"),
     cst_Many$0=caml_string_of_jsbytes("Many"),
     cst_Maybe$0=caml_string_of_jsbytes("Maybe"),
     cst_One$0=caml_string_of_jsbytes("One"),
     cst_Zero$2=caml_string_of_jsbytes("Zero"),
     cst_concat=caml_string_of_jsbytes("concat"),
     cst_many=caml_string_of_jsbytes("many"),
     cst_maybe=caml_string_of_jsbytes("maybe"),
     cst_one=caml_string_of_jsbytes("one"),
     cst_zero$1=caml_string_of_jsbytes("zero"),
     cst_ad_hoc$0=caml_string_of_jsbytes("ad_hoc"),
     cst_Ad_hoc$1=caml_string_of_jsbytes("Ad_hoc"),
     cst_Concat$1=caml_string_of_jsbytes("Concat"),
     cst_Many$1=caml_string_of_jsbytes("Many"),
     cst_Maybe$1=caml_string_of_jsbytes("Maybe"),
     cst_One$1=caml_string_of_jsbytes("One"),
     cst_Zero$3=caml_string_of_jsbytes("Zero"),
     cst_concat$0=caml_string_of_jsbytes("concat"),
     cst_many$0=caml_string_of_jsbytes("many"),
     cst_maybe$0=caml_string_of_jsbytes("maybe"),
     cst_one$0=caml_string_of_jsbytes("one"),
     cst_zero$2=caml_string_of_jsbytes("zero"),
     cst_Core_Command_shape=caml_string_of_jsbytes("Core__Command_shape"),
     cst_core$422=caml_string_of_jsbytes("core"),
     cst_core_src_command_shape_ml=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst$203=caml_string_of_jsbytes(""),
     cst_core$423=caml_string_of_jsbytes("core"),
     cst_Ad_hoc=caml_string_of_jsbytes("Ad_hoc"),
     cst_t$209=caml_string_of_jsbytes("t"),
     cst_Concat=caml_string_of_jsbytes("Concat"),
     cst_t$210=caml_string_of_jsbytes("t"),
     cst_Maybe=caml_string_of_jsbytes("Maybe"),
     cst_t$211=caml_string_of_jsbytes("t"),
     cst_Many=caml_string_of_jsbytes("Many"),
     cst_One=caml_string_of_jsbytes("One"),
     cst_t$212=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_=
      caml_string_of_jsbytes("core/src/command_shape.ml:8:8"),
     cst_t$213=caml_string_of_jsbytes("t"),
     error_source_017=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Anons.Grammar.V1.t"),
     cst_core_src_command_shape_ml$1=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$2=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$3=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$4=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_Grammar=caml_string_of_jsbytes("Grammar"),
     cst_Usage=caml_string_of_jsbytes("Usage"),
     cst_t$214=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$1=
      caml_string_of_jsbytes("core/src/command_shape.ml:59:6"),
     cst_t$215=caml_string_of_jsbytes("t"),
     error_source_062=
      caml_string_of_jsbytes("core/src/command_shape.ml.Stable.Anons.V2.t"),
     cst_core_src_command_shape_ml$6=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$7=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$8=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$9=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$0=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_aliases=caml_string_of_jsbytes("aliases"),
     cst_doc=caml_string_of_jsbytes("doc"),
     cst_name$2=caml_string_of_jsbytes("name"),
     cst_t$216=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$3=
      caml_string_of_jsbytes("core/src/command_shape.ml:75:6"),
     cst_t$217=caml_string_of_jsbytes("t"),
     error_source_099=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Flag_info.V1.t"),
     cst_core_src_command_shape_ml$11=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$12=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$13=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$14=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$1=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_flags=caml_string_of_jsbytes("flags"),
     cst_anons=caml_string_of_jsbytes("anons"),
     cst_readme=caml_string_of_jsbytes("readme"),
     cst_summary=caml_string_of_jsbytes("summary"),
     cst_t$218=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$5=
      caml_string_of_jsbytes("core/src/command_shape.ml:93:6"),
     cst_t$219=caml_string_of_jsbytes("t"),
     error_source_136=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Base_info.V2.t"),
     cst_core_src_command_shape_ml$16=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$17=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$18=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$19=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$2=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_flags$2=caml_string_of_jsbytes("flags"),
     cst_usage$1=caml_string_of_jsbytes("usage"),
     cst_readme$1=caml_string_of_jsbytes("readme"),
     cst_summary$2=caml_string_of_jsbytes("summary"),
     cst_t$220=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$7=
      caml_string_of_jsbytes("core/src/command_shape.ml:108:6"),
     cst_t$221=caml_string_of_jsbytes("t"),
     error_source_171=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Base_info.V1.t"),
     cst_a$74=caml_string_of_jsbytes("a"),
     cst_core_src_command_shape_ml_$8=
      caml_string_of_jsbytes("core/src/command_shape.ml:136:4"),
     cst_a$75=caml_string_of_jsbytes("a"),
     cst_a$76=caml_string_of_jsbytes("a"),
     cst_core_src_command_shape_ml_$9=
      caml_string_of_jsbytes("core/src/command_shape.ml:143:34"),
     cst_subcommands=caml_string_of_jsbytes("subcommands"),
     cst_readme$3=caml_string_of_jsbytes("readme"),
     cst_summary$5=caml_string_of_jsbytes("summary"),
     cst_a$77=caml_string_of_jsbytes("a"),
     cst_t$222=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$10=
      caml_string_of_jsbytes("core/src/command_shape.ml:140:6"),
     error_source_218=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Group_info.V2.t"),
     cst_core_src_command_shape_ml$21=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$22=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$23=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$24=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$3=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_a$78=caml_string_of_jsbytes("a"),
     cst_core_src_command_shape_ml_$12=
      caml_string_of_jsbytes("core/src/command_shape.ml:165:34"),
     cst_subcommands$2=caml_string_of_jsbytes("subcommands"),
     cst_readme$5=caml_string_of_jsbytes("readme"),
     cst_summary$8=caml_string_of_jsbytes("summary"),
     cst_a$79=caml_string_of_jsbytes("a"),
     cst_t$224=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$13=
      caml_string_of_jsbytes("core/src/command_shape.ml:162:6"),
     error_source_269=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Group_info.V1.t"),
     cst_core_src_command_shape_ml$26=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$27=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$28=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$29=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$4=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_child_subcommand=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir=caml_string_of_jsbytes("working_dir"),
     cst_readme$7=caml_string_of_jsbytes("readme"),
     cst_summary$11=caml_string_of_jsbytes("summary"),
     cst_t$226=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$14=
      caml_string_of_jsbytes("core/src/command_shape.ml:194:6"),
     cst_t$227=caml_string_of_jsbytes("t"),
     error_source_319=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Exec_info.V3.t"),
     cst_core_src_command_shape_ml$31=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$32=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$33=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$34=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$5=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_path_to_exe$2=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$2=caml_string_of_jsbytes("working_dir"),
     cst_readme$9=caml_string_of_jsbytes("readme"),
     cst_summary$14=caml_string_of_jsbytes("summary"),
     cst_t$228=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$16=
      caml_string_of_jsbytes("core/src/command_shape.ml:215:6"),
     cst_t$229=caml_string_of_jsbytes("t"),
     error_source_356=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Exec_info.V2.t"),
     cst_path_to_exe$5=caml_string_of_jsbytes("path_to_exe"),
     cst_readme$11=caml_string_of_jsbytes("readme"),
     cst_summary$17=caml_string_of_jsbytes("summary"),
     cst_t$230=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$17=
      caml_string_of_jsbytes("core/src/command_shape.ml:245:6"),
     cst_t$231=caml_string_of_jsbytes("t"),
     error_source_388=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Exec_info.V1.t"),
     cst_t$232=caml_string_of_jsbytes("t"),
     cst_Exec=caml_string_of_jsbytes("Exec"),
     cst_t$233=caml_string_of_jsbytes("t"),
     cst_Group=caml_string_of_jsbytes("Group"),
     cst_Basic=caml_string_of_jsbytes("Basic"),
     cst_t$234=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$18=
      caml_string_of_jsbytes("core/src/command_shape.ml:275:6"),
     cst_t$235=caml_string_of_jsbytes("t"),
     error_source_415=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Fully_forced.V1.t"),
     cst_core_src_command_shape_ml$36=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$37=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$38=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$39=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$6=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_t$236=caml_string_of_jsbytes("t"),
     cst_Lazy=caml_string_of_jsbytes("Lazy"),
     cst_Exec$2=caml_string_of_jsbytes("Exec"),
     cst_t$237=caml_string_of_jsbytes("t"),
     cst_Group$2=caml_string_of_jsbytes("Group"),
     cst_Base=caml_string_of_jsbytes("Base"),
     cst_t$238=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$20=
      caml_string_of_jsbytes("core/src/command_shape.ml:292:6"),
     cst_t$239=caml_string_of_jsbytes("t"),
     error_source_444=
      caml_string_of_jsbytes("core/src/command_shape.ml.Stable.Sexpable.V3.t"),
     cst_core_src_command_shape_ml$41=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$42=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$43=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$44=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$7=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_Exec$5=caml_string_of_jsbytes("Exec"),
     cst_t$240=caml_string_of_jsbytes("t"),
     cst_Group$5=caml_string_of_jsbytes("Group"),
     cst_Base$2=caml_string_of_jsbytes("Base"),
     cst_t$241=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$21=
      caml_string_of_jsbytes("core/src/command_shape.ml:311:6"),
     cst_t$242=caml_string_of_jsbytes("t"),
     error_source_476=
      caml_string_of_jsbytes("core/src/command_shape.ml.Stable.Sexpable.V2.t"),
     cst_core_src_command_shape_ml$46=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$47=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$48=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$49=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$8=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_Exec$8=caml_string_of_jsbytes("Exec"),
     cst_t$243=caml_string_of_jsbytes("t"),
     cst_Group$8=caml_string_of_jsbytes("Group"),
     cst_Base$5=caml_string_of_jsbytes("Base"),
     cst_t$244=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$22=
      caml_string_of_jsbytes("core/src/command_shape.ml:337:6"),
     cst_t$245=caml_string_of_jsbytes("t"),
     error_source_501=
      caml_string_of_jsbytes("core/src/command_shape.ml.Stable.Sexpable.V1.t"),
     cst_core_src_command_shape_ml$51=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$52=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$53=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$54=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$9=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_V3=caml_string_of_jsbytes("V3"),
     cst_V2=caml_string_of_jsbytes("V2"),
     cst_V1=caml_string_of_jsbytes("V1"),
     cst_t$246=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$23=
      caml_string_of_jsbytes("core/src/command_shape.ml:363:6"),
     cst_t$247=caml_string_of_jsbytes("t"),
     error_source_526=
      caml_string_of_jsbytes
       ("core/src/command_shape.ml.Stable.Sexpable.Versioned.t"),
     cst_V1$2=caml_string_of_jsbytes("V1"),
     cst_V2$2=caml_string_of_jsbytes("V2"),
     cst_V3$2=caml_string_of_jsbytes("V3"),
     cst_core_src_command_shape_ml$56=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$57=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$58=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$59=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$10=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_Ad_hoc$2=caml_string_of_jsbytes("Ad_hoc"),
     cst_t$248=caml_string_of_jsbytes("t"),
     cst_Concat$2=caml_string_of_jsbytes("Concat"),
     cst_t$249=caml_string_of_jsbytes("t"),
     cst_Maybe$2=caml_string_of_jsbytes("Maybe"),
     cst_t$250=caml_string_of_jsbytes("t"),
     cst_Many$2=caml_string_of_jsbytes("Many"),
     cst_One$2=caml_string_of_jsbytes("One"),
     cst_t$251=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$24=
      caml_string_of_jsbytes("core/src/command_shape.ml:403:4"),
     cst_t$252=caml_string_of_jsbytes("t"),
     error_source_565=
      caml_string_of_jsbytes("core/src/command_shape.ml.Anons.Grammar.t"),
     cst_Grammar$2=caml_string_of_jsbytes("Grammar"),
     cst_Usage$2=caml_string_of_jsbytes("Usage"),
     cst_t$253=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$25=
      caml_string_of_jsbytes("core/src/command_shape.ml:416:2"),
     cst_t$254=caml_string_of_jsbytes("t"),
     error_source_610=
      caml_string_of_jsbytes("core/src/command_shape.ml.Anons.t"),
     enumerate_628=[0,0,[0,1,0]],
     enumerate_629=[0,0,[0,1,0]],
     names$0=
      [0,
       caml_string_of_jsbytes("at_least_once"),
       [0,caml_string_of_jsbytes("at_most_once"),0]],
     cst_at_most_once=caml_string_of_jsbytes("at_most_once"),
     cst_at_least_once=caml_string_of_jsbytes("at_least_once"),
     maybe_missing_prefix=caml_string_of_jsbytes("["),
     maybe_missing_suffix=caml_string_of_jsbytes("]"),
     maybe_more_suffix=caml_string_of_jsbytes(" ..."),
     cst_core_src_command_shape_ml$61=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$62=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$63=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_core_src_command_shape_ml$64=
      caml_string_of_jsbytes("core/src/command_shape.ml"),
     cst_160e67717247caff5664ecc8a9$11=
      caml_string_of_jsbytes("160e67717247caff5664ecc8a993b12a"),
     cst_aliases$2=caml_string_of_jsbytes("aliases"),
     cst_doc$2=caml_string_of_jsbytes("doc"),
     cst_name$5=caml_string_of_jsbytes("name"),
     cst_t$255=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$26=
      caml_string_of_jsbytes("core/src/command_shape.ml:478:2"),
     cst_t$256=caml_string_of_jsbytes("t"),
     names$1=
      [0,
       caml_string_of_jsbytes("name"),
       [0,
        caml_string_of_jsbytes("doc"),
        [0,caml_string_of_jsbytes("aliases"),0]]],
     cst_aliases$3=caml_string_of_jsbytes("aliases"),
     cst_doc$3=caml_string_of_jsbytes("doc"),
     cst_name$6=caml_string_of_jsbytes("name"),
     error_source_669=
      caml_string_of_jsbytes("core/src/command_shape.ml.Flag_info.t"),
     indentation=caml_string_of_jsbytes("  "),
     spacing_dot=caml_string_of_jsbytes(". "),
     cst_flags$5=caml_string_of_jsbytes("flags"),
     cst_anons$2=caml_string_of_jsbytes("anons"),
     cst_readme$13=caml_string_of_jsbytes("readme"),
     cst_summary$20=caml_string_of_jsbytes("summary"),
     cst_t$257=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$28=
      caml_string_of_jsbytes("core/src/command_shape.ml:667:2"),
     cst_t$258=caml_string_of_jsbytes("t"),
     names$2=
      [0,
       caml_string_of_jsbytes("summary"),
       [0,
        caml_string_of_jsbytes("readme"),
        [0,
         caml_string_of_jsbytes("anons"),
         [0,caml_string_of_jsbytes("flags"),0]]]],
     cst_flags$6=caml_string_of_jsbytes("flags"),
     cst_anons$3=caml_string_of_jsbytes("anons"),
     cst_readme$14=caml_string_of_jsbytes("readme"),
     cst_summary$21=caml_string_of_jsbytes("summary"),
     error_source_708=
      caml_string_of_jsbytes("core/src/command_shape.ml.Base_info.t"),
     cst_a$80=caml_string_of_jsbytes("a"),
     cst_core_src_command_shape_ml_$30=
      caml_string_of_jsbytes("core/src/command_shape.ml:703:30"),
     cst_subcommands$5=caml_string_of_jsbytes("subcommands"),
     cst_readme$16=caml_string_of_jsbytes("readme"),
     cst_summary$24=caml_string_of_jsbytes("summary"),
     cst_a$81=caml_string_of_jsbytes("a"),
     cst_t$259=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$31=
      caml_string_of_jsbytes("core/src/command_shape.ml:700:2"),
     names$3=
      [0,
       caml_string_of_jsbytes("summary"),
       [0,
        caml_string_of_jsbytes("readme"),
        [0,caml_string_of_jsbytes("subcommands"),0]]],
     cst_subcommands$6=caml_string_of_jsbytes("subcommands"),
     cst_readme$17=caml_string_of_jsbytes("readme"),
     cst_summary$25=caml_string_of_jsbytes("summary"),
     error_source_757=
      caml_string_of_jsbytes("core/src/command_shape.ml.Group_info.t"),
     cst_child_subcommand$2=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$8=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$5=caml_string_of_jsbytes("working_dir"),
     cst_readme$19=caml_string_of_jsbytes("readme"),
     cst_summary$28=caml_string_of_jsbytes("summary"),
     cst_t$261=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$33=
      caml_string_of_jsbytes("core/src/command_shape.ml:723:2"),
     cst_t$262=caml_string_of_jsbytes("t"),
     names$4=
      [0,
       caml_string_of_jsbytes("summary"),
       [0,
        caml_string_of_jsbytes("readme"),
        [0,
         caml_string_of_jsbytes("working_dir"),
         [0,
          caml_string_of_jsbytes("path_to_exe"),
          [0,caml_string_of_jsbytes("child_subcommand"),0]]]]],
     cst_child_subcommand$3=caml_string_of_jsbytes("child_subcommand"),
     cst_path_to_exe$9=caml_string_of_jsbytes("path_to_exe"),
     cst_working_dir$6=caml_string_of_jsbytes("working_dir"),
     cst_readme$20=caml_string_of_jsbytes("readme"),
     cst_summary$29=caml_string_of_jsbytes("summary"),
     error_source_807=
      caml_string_of_jsbytes("core/src/command_shape.ml.Exec_info.t"),
     cst_t$263=caml_string_of_jsbytes("t"),
     cst_Exec$11=caml_string_of_jsbytes("Exec"),
     cst_t$264=caml_string_of_jsbytes("t"),
     cst_Group$11=caml_string_of_jsbytes("Group"),
     cst_Basic$2=caml_string_of_jsbytes("Basic"),
     cst_t$265=caml_string_of_jsbytes("t"),
     cst_core_src_command_shape_ml_$35=
      caml_string_of_jsbytes("core/src/command_shape.ml:734:2"),
     cst_t$266=caml_string_of_jsbytes("t"),
     error_source_838=
      caml_string_of_jsbytes("core/src/command_shape.ml.Fully_forced.t"),
     cst_core$424=caml_string_of_jsbytes("core"),
     cst_Core_Command_shape$0=caml_string_of_jsbytes("Core__Command_shape"),
     cst_Core_Command_shape_intf=
      caml_string_of_jsbytes("Core__Command_shape_intf"),
     cst_core$425=caml_string_of_jsbytes("core"),
     cst_core_src_command_shape_int=
      caml_string_of_jsbytes("core/src/command_shape_intf.ml"),
     cst$210=caml_string_of_jsbytes(""),
     cst_core$426=caml_string_of_jsbytes("core"),
     cst_core$427=caml_string_of_jsbytes("core"),
     cst_Core_Command_shape_intf$0=
      caml_string_of_jsbytes("Core__Command_shape_intf"),
     pos$1=caml_string_of_jsbytes("core/src/host_and_port.ml:105:23"),
     pos$0=caml_string_of_jsbytes("core/src/host_and_port.ml:98:21"),
     pos=caml_string_of_jsbytes("core/src/host_and_port.ml:95:21"),
     cst_localhost_8080=caml_string_of_jsbytes("(localhost 8080)"),
     expect=[0,caml_string_of_jsbytes("localhost"),8080],
     cst_localhost_8080$0=caml_string_of_jsbytes("localhost:8080"),
     expect$0=[0,caml_string_of_jsbytes("localhost"),8080],
     cst_core_src_host_and_port_ml$0=
      caml_string_of_jsbytes("core/src/host_and_port.ml"),
     cst_core_src_host_and_port_ml_$0=
      caml_string_of_jsbytes
       ("core/src/host_and_port.ml.Stable.V1.Serializable.t"),
     cst_Core_Host_and_port=caml_string_of_jsbytes("Core__Host_and_port"),
     cst_core$428=caml_string_of_jsbytes("core"),
     cst_core_src_host_and_port_ml=
      caml_string_of_jsbytes("core/src/host_and_port.ml"),
     cst$211=caml_string_of_jsbytes(""),
     cst_core$429=caml_string_of_jsbytes("core"),
     error_source_007=
      caml_string_of_jsbytes
       ("core/src/host_and_port.ml.Stable.V1.Serializable.t"),
     cst_t$267=caml_string_of_jsbytes("t"),
     cst_core_src_host_and_port_ml_=
      caml_string_of_jsbytes("core/src/host_and_port.ml:6:6"),
     cst_t$268=caml_string_of_jsbytes("t"),
     cst_core_src_host_and_port_ml$1=
      caml_string_of_jsbytes("core/src/host_and_port.ml"),
     cst_core_src_host_and_port_ml$2=
      caml_string_of_jsbytes("core/src/host_and_port.ml"),
     cst_core_src_host_and_port_ml$3=
      caml_string_of_jsbytes("core/src/host_and_port.ml"),
     cst_core_src_host_and_port_ml$4=
      caml_string_of_jsbytes("core/src/host_and_port.ml"),
     cst_b64ae259269031fe1d40eb7fbc=
      caml_string_of_jsbytes("b64ae259269031fe1d40eb7fbc8c8ad2"),
     t_sexp_grammar$36=[4,[0,4,[0,[2,[0,4,[0,2,0]]],0]]],
     cst_core_src_host_and_port_ml$5=
      caml_string_of_jsbytes("core/src/host_and_port.ml"),
     cst_t_of_sexp=caml_string_of_jsbytes("t_of_sexp"),
     cst_core_src_host_and_port_ml$6=
      caml_string_of_jsbytes("core/src/host_and_port.ml"),
     cst_sexp_roundtrip=caml_string_of_jsbytes("sexp roundtrip"),
     module_name$12=caml_string_of_jsbytes("Core.Host_and_port"),
     cst_Host_and_port=caml_string_of_jsbytes("Host_and_port"),
     cst_core$430=caml_string_of_jsbytes("core"),
     cst_Core_Host_and_port$0=caml_string_of_jsbytes("Core__Host_and_port"),
     cst_Core_Pid=caml_string_of_jsbytes("Core__Pid"),
     cst_core$431=caml_string_of_jsbytes("core"),
     cst_core_src_pid_ml=caml_string_of_jsbytes("core/src/pid.ml"),
     cst$212=caml_string_of_jsbytes(""),
     cst_core$432=caml_string_of_jsbytes("core"),
     cst_Core_Pid_Stable_V1_Without=
      caml_string_of_jsbytes
       ("Core__Pid.Stable.V1.Without_containers.Pid_must_be_positive"),
     cst_t$269=caml_string_of_jsbytes("t"),
     cst_core_src_pid_ml_52_4=caml_string_of_jsbytes("core/src/pid.ml:52:4"),
     cst_t$270=caml_string_of_jsbytes("t"),
     module_name$13=caml_string_of_jsbytes("Core.Pid"),
     cst_core$433=caml_string_of_jsbytes("core"),
     cst_Core_Pid$0=caml_string_of_jsbytes("Core__Pid"),
     cst_Core_Command_intf=caml_string_of_jsbytes("Core__Command_intf"),
     cst_core$434=caml_string_of_jsbytes("core"),
     cst_core_src_command_intf_ml=
      caml_string_of_jsbytes("core/src/command_intf.ml"),
     cst$213=caml_string_of_jsbytes(""),
     cst_core$435=caml_string_of_jsbytes("core"),
     cst_core$436=caml_string_of_jsbytes("core"),
     cst_Core_Command_intf$0=caml_string_of_jsbytes("Core__Command_intf"),
     cst_el$14=caml_string_of_jsbytes("el"),
     cst_BUG_Fdeque_back_0_front_2=
      caml_string_of_jsbytes("BUG: Fdeque: |back| = 0, |front| >= 2"),
     cst_BUG_Fdeque_front_0_back_2=
      caml_string_of_jsbytes("BUG: Fdeque: |front| = 0, |back| >= 2"),
     cst_Core_Fdeque=caml_string_of_jsbytes("Core__Fdeque"),
     cst_core$437=caml_string_of_jsbytes("core"),
     cst_core_src_fdeque_ml=caml_string_of_jsbytes("core/src/fdeque.ml"),
     cst$214=caml_string_of_jsbytes(""),
     cst_core$438=caml_string_of_jsbytes("core"),
     cst_Core_Fdeque_Empty=caml_string_of_jsbytes("Core__Fdeque.Empty"),
     acc=[0,0,0,0],
     cst_a$82=caml_string_of_jsbytes("a"),
     cst_core_src_fdeque_ml_314_21=
      caml_string_of_jsbytes("core/src/fdeque.ml:314:21"),
     cst_a$83=caml_string_of_jsbytes("a"),
     cst_el$13=caml_string_of_jsbytes("el"),
     cst_core_src_fdeque_ml_314_8=
      caml_string_of_jsbytes("core/src/fdeque.ml:314:8"),
     cst_83f96982_4992_11e6_919d_fb=
      caml_string_of_jsbytes("83f96982-4992-11e6-919d-fbddcfdca576"),
     module_name$14=[0,caml_string_of_jsbytes("Core.Fdeque")],
     cst_core$439=caml_string_of_jsbytes("core"),
     cst_Core_Fdeque$0=caml_string_of_jsbytes("Core__Fdeque"),
     cst_Core_Fqueue=caml_string_of_jsbytes("Core__Fqueue"),
     cst_core$440=caml_string_of_jsbytes("core"),
     cst_core_src_fqueue_ml=caml_string_of_jsbytes("core/src/fqueue.ml"),
     cst$215=caml_string_of_jsbytes(""),
     cst_core$441=caml_string_of_jsbytes("core"),
     cst_core$442=caml_string_of_jsbytes("core"),
     cst_Core_Fqueue$0=caml_string_of_jsbytes("Core__Fqueue"),
     cst_Set_once_get_exn_unset=
      caml_string_of_jsbytes("[Set_once.get_exn] unset"),
     cst_Set_once_set_exn_already_s=
      caml_string_of_jsbytes("[Set_once.set_exn] already set"),
     cst_unset=caml_string_of_jsbytes("unset"),
     cst_t$272=caml_string_of_jsbytes("t"),
     cst_Core_Set_once=caml_string_of_jsbytes("Core__Set_once"),
     cst_core$443=caml_string_of_jsbytes("core"),
     cst_core_src_set_once_ml=caml_string_of_jsbytes("core/src/set_once.ml"),
     cst$216=caml_string_of_jsbytes(""),
     cst_core$444=caml_string_of_jsbytes("core"),
     cst_a$84=caml_string_of_jsbytes("a"),
     cst_core_src_set_once_ml_14_18=
      caml_string_of_jsbytes("core/src/set_once.ml:14:18"),
     cst_a$85=caml_string_of_jsbytes("a"),
     cst_t$271=caml_string_of_jsbytes("t"),
     cst_core_src_set_once_ml_14_6=
      caml_string_of_jsbytes("core/src/set_once.ml:14:6"),
     cst_core$445=caml_string_of_jsbytes("core"),
     cst_Core_Set_once$0=caml_string_of_jsbytes("Core__Set_once"),
     cst$240=caml_string_of_jsbytes(" "),
     cst$241=caml_string_of_jsbytes("  "),
     cst_help$10=caml_string_of_jsbytes("help"),
     cst_build_info$3=caml_string_of_jsbytes("--build-info"),
     cst_help$11=caml_string_of_jsbytes("--help"),
     cst_version$6=caml_string_of_jsbytes("--version"),
     cst_build_info$4=caml_string_of_jsbytes("-build-info"),
     cst_help$12=caml_string_of_jsbytes("-help"),
     cst_version$7=caml_string_of_jsbytes("-version"),
     cst_expand_dots$0=caml_string_of_jsbytes("-expand-dots"),
     cst_flags$10=caml_string_of_jsbytes("-flags"),
     cst_r=caml_string_of_jsbytes("-r"),
     cst_help$13=caml_string_of_jsbytes("-help"),
     cst_missing_executable_name=
      caml_string_of_jsbytes("missing executable name"),
     cst_Couldn_t_choose_a_supporte=
      caml_string_of_jsbytes
       ("Couldn't choose a supported help output version for Command.exec from the given supported versions."),
     partial$1=[12,32,[2,0,[12,10,[10,0]]]],
     cst_SUBCOMMAND=caml_string_of_jsbytes("SUBCOMMAND"),
     cst_expand_subcommands_in_recu=
      caml_string_of_jsbytes(" expand subcommands in recursive help"),
     cst_expand_dots=caml_string_of_jsbytes("-expand-dots"),
     cst_show_flags_as_well_in_recu=
      caml_string_of_jsbytes(" show flags as well in recursive help"),
     cst_flags$9=caml_string_of_jsbytes("-flags"),
     cst_show_subcommands_of_subcom=
      caml_string_of_jsbytes(" show subcommands of subcommands, etc."),
     cst_recursive=caml_string_of_jsbytes("-recursive"),
     cst_explain_a_given_subcommand=
      caml_string_of_jsbytes
       ("explain a given subcommand (perhaps recursively)"),
     cst_subcommands_and_flags=
      caml_string_of_jsbytes("=== subcommands and flags ==="),
     cst_subcommands$10=caml_string_of_jsbytes("=== subcommands ==="),
     cst$239=caml_string_of_jsbytes("  "),
     cst_help$9=caml_string_of_jsbytes("[-help]"),
     cst_help$8=caml_string_of_jsbytes("help"),
     cst_cannot_parse_command_shape=
      caml_string_of_jsbytes("cannot parse command shape"),
     cst_BUG_failed_to_read=caml_string_of_jsbytes("BUG failed to read"),
     cst_stdout=caml_string_of_jsbytes("stdout"),
     cst_stderr=caml_string_of_jsbytes("stderr"),
     cst$237=caml_string_of_jsbytes(" "),
     cst$238=caml_string_of_jsbytes("."),
     opt=[0,0],
     cst_some_build_info=caml_string_of_jsbytes("some build info"),
     cst_core_src_command_ml$5=caml_string_of_jsbytes("core/src/command.ml"),
     cst_core_src_command_ml$0=caml_string_of_jsbytes("core/src/command.ml"),
     version_list=
      [0,
       caml_string_of_jsbytes("hg://some/path_0xdeadbeef"),
       [0,caml_string_of_jsbytes("ssh://a/path_8badf00d"),0]],
     cst_core_src_command_ml$1=caml_string_of_jsbytes("core/src/command.ml"),
     cst_core_src_command_ml$2=caml_string_of_jsbytes("core/src/command.ml"),
     cst_core_src_command_ml$3=caml_string_of_jsbytes("core/src/command.ml"),
     cst_core_src_command_ml$4=caml_string_of_jsbytes("core/src/command.ml"),
     cst_7cccd00f8f5b5ef8ad56c69272=
      caml_string_of_jsbytes("7cccd00f8f5b5ef8ad56c6927290ef2a"),
     cst_core_src_command_ml$6=caml_string_of_jsbytes("core/src/command.ml"),
     cst_core_src_command_ml$7=caml_string_of_jsbytes("core/src/command.ml"),
     cst_core_src_command_ml$8=caml_string_of_jsbytes("core/src/command.ml"),
     cst_core_src_command_ml$9=caml_string_of_jsbytes("core/src/command.ml"),
     cst_7cccd00f8f5b5ef8ad56c69272$0=
      caml_string_of_jsbytes("7cccd00f8f5b5ef8ad56c6927290ef2a"),
     cst_version$5=caml_string_of_jsbytes("version"),
     cst_the_version_of_this_build=
      caml_string_of_jsbytes("the version of this build"),
     cst_version$4=caml_string_of_jsbytes("-version"),
     cst_info_about_this_build=caml_string_of_jsbytes("info about this build"),
     cst_build_info$2=caml_string_of_jsbytes("-build-info"),
     cst_print_build_info_for_this_=
      caml_string_of_jsbytes(" print build info for this build"),
     cst_build_info$1=caml_string_of_jsbytes("-build-info"),
     cst_print_the_version_of_this_=
      caml_string_of_jsbytes(" print the version of this build"),
     cst_version$3=caml_string_of_jsbytes("-version"),
     cst_print_version_information=
      caml_string_of_jsbytes("print version information"),
     cst_Path_passed_to_Absolute_mu=
      caml_string_of_jsbytes("Path passed to `Absolute must be absolute"),
     cst_Path_passed_to_Relative_to=
      caml_string_of_jsbytes
       ("Path passed to `Relative_to_me must be relative"),
     cst_this_help_text=caml_string_of_jsbytes("this help text"),
     cst_help$7=caml_string_of_jsbytes("-help"),
     cst$230=caml_string_of_jsbytes("-"),
     cst_anon=caml_string_of_jsbytes("-anon"),
     cst$231=caml_string_of_jsbytes("-"),
     cst$232=caml_string_of_jsbytes("-"),
     cst_and_arg_name_expects_exact=
      caml_string_of_jsbytes("[and_arg_name] expects exactly one name, got"),
     cst_Cannot_pass_more_than_one_=
      caml_string_of_jsbytes
       ("Cannot pass more than one of these: \n  %{Choice_name.list_to_string}"),
     cst_Cannot_pass_more_than_one_$0=
      caml_string_of_jsbytes("Cannot pass more than one of these: \n  "),
     cst_Must_pass_one_of_these_Cho=
      caml_string_of_jsbytes
       ("Must pass one of these:\n  %{Choice_name.list_to_string}"),
     cst_Must_pass_one_of_these=
      caml_string_of_jsbytes("Must pass one of these:\n  "),
     cst_Command_Spec_choose_one_ca=
      caml_string_of_jsbytes
       ("[Command.Spec.choose_one] called with duplicate name"),
     cst_For_simplicity_Command_Spe=
      caml_string_of_jsbytes
       ("For simplicity, [Command.Spec.choose_one] does not support names with commas."),
     cst_choose_one_expects_choices=
      caml_string_of_jsbytes
       ("[choose_one] expects choices to read command-line arguments."),
     cst_Arg_Tuple_is_not_supported=
      caml_string_of_jsbytes
       ("Arg.Tuple is not supported by Command.Spec.flags_of_args_exn"),
     cst_Arg_Rest_all_is_not_suppor=
      caml_string_of_jsbytes
       ("Arg.Rest_all is not supported by Command.Spec.flags_of_args_exn"),
     cst_Arg_Expand_is_not_supporte=
      caml_string_of_jsbytes
       ("Arg.Expand is not supported by Command.Spec.flags_of_args_exn"),
     cst$236=caml_string_of_jsbytes("_"),
     cst_s_default_Sexp=caml_string_of_jsbytes("%s (default: %{Sexp})"),
     cst_default=caml_string_of_jsbytes(" (default: "),
     cst$234=caml_string_of_jsbytes(" "),
     cst$235=caml_string_of_jsbytes(""),
     cst_ARG=caml_string_of_jsbytes("ARG"),
     cst_help$6=caml_string_of_jsbytes(" -help\n"),
     cst$233=caml_string_of_jsbytes("  "),
     cst_For_usage_information_run=
      caml_string_of_jsbytes("For usage information, run"),
     cst_Error_parsing_command_line=
      caml_string_of_jsbytes("Error parsing command line:"),
     cst$229=caml_string_of_jsbytes("  "),
     cst_help$4=caml_string_of_jsbytes("-help"),
     cst$226=caml_string_of_jsbytes("-"),
     cst_invalid_Key_type_name_S=
      caml_string_of_jsbytes("invalid %{Key_type} name: %S"),
     cst_invalid=caml_string_of_jsbytes("invalid "),
     cst_invalid_Key_type_name_cont=
      caml_string_of_jsbytes
       ("invalid %{Key_type} name (contains whitespace): %S"),
     cst_invalid$0=caml_string_of_jsbytes("invalid "),
     cst$227=caml_string_of_jsbytes("-"),
     cst$228=caml_string_of_jsbytes("-"),
     cst_WILL_NEVER_BE_PRINTED=caml_string_of_jsbytes("WILL NEVER BE PRINTED"),
     cst_Empty_anonymous_argument_n=
      caml_string_of_jsbytes("Empty anonymous argument name provided"),
     cst_BUG_asked_for_final_value_=
      caml_string_of_jsbytes
       ("BUG: asked for final value when doing completion"),
     cst_bug_in_command_ml$1=caml_string_of_jsbytes("bug in command.ml"),
     cst$225=caml_string_of_jsbytes("."),
     cst_help$3=caml_string_of_jsbytes("help"),
     cst$224=caml_string_of_jsbytes(" "),
     cst$223=caml_string_of_jsbytes(" "),
     cst$221=caml_string_of_jsbytes(""),
     cst$222=caml_string_of_jsbytes(""),
     cst_Command_Spec_Arg_type_comm=
      caml_string_of_jsbytes
       ("Command.Spec.Arg_type.comma_separated: empty list not allowed"),
     cst$220=caml_string_of_jsbytes(","),
     cst$219=caml_string_of_jsbytes(""),
     cst_case_insensitive=caml_string_of_jsbytes(" (case insensitive)"),
     cst_can_be=caml_string_of_jsbytes("(can be: "),
     cst$218=caml_string_of_jsbytes(""),
     cst_Command_Spec_Arg_type_of_a=
      caml_string_of_jsbytes("Command.Spec.Arg_type.of_alist_exn"),
     cst_Core_Command=caml_string_of_jsbytes("Core__Command"),
     cst_core$446=caml_string_of_jsbytes("core"),
     cst_core_src_command_ml=caml_string_of_jsbytes("core/src/command.ml"),
     cst$217=caml_string_of_jsbytes(""),
     cst_core$447=caml_string_of_jsbytes("core"),
     cst_Core_Command_Exit_called=
      caml_string_of_jsbytes("Core__Command.Exit_called"),
     cst_Core_Command_Failed_to_par=
      caml_string_of_jsbytes("Core__Command.Failed_to_parse_command_line"),
     enumerate_008=[0,0,[0,1,0]],
     enumerate_009=[0,0,[0,1,0]],
     any=[0,0,0],
     at_least_once$1=[0,1,0],
     at_most_once$1=[0,0,1],
     exactly_once=[0,1,1],
     cst_path=caml_string_of_jsbytes("path"),
     cst_args=caml_string_of_jsbytes("args"),
     cst_help$5=caml_string_of_jsbytes("help"),
     cst_subcommands$9=caml_string_of_jsbytes("subcommands"),
     cst_core_src_command_ml$10=caml_string_of_jsbytes("core/src/command.ml"),
     cst_Version_info=caml_string_of_jsbytes("Version_info"),
     cst_core$448=caml_string_of_jsbytes("core"),
     cst_Core_Command$0=caml_string_of_jsbytes("Core__Command"),
     cst_Core_String_id_intf=caml_string_of_jsbytes("Core__String_id_intf"),
     cst_core$449=caml_string_of_jsbytes("core"),
     cst_core_src_string_id_intf_ml=
      caml_string_of_jsbytes("core/src/string_id_intf.ml"),
     cst$242=caml_string_of_jsbytes(""),
     cst_core$450=caml_string_of_jsbytes("core"),
     cst_core$451=caml_string_of_jsbytes("core"),
     cst_Core_String_id_intf$0=caml_string_of_jsbytes("Core__String_id_intf"),
     cst_it_is_empty=caml_string_of_jsbytes("it is empty"),
     cst_it_has_whitespace_on_the_e=
      caml_string_of_jsbytes("it has whitespace on the edge"),
     name$66=
      caml_string_of_jsbytes
       ("core/src/string_id.ml.Make_with_validate_without_pretty_printer.Stable.V1.T.t"),
     cst_Core_String_id=caml_string_of_jsbytes("Core__String_id"),
     cst_core$452=caml_string_of_jsbytes("core"),
     cst_core_src_string_id_ml=caml_string_of_jsbytes("core/src/string_id.ml"),
     cst$243=caml_string_of_jsbytes(""),
     cst_core$453=caml_string_of_jsbytes("core"),
     module_name$15=caml_string_of_jsbytes("Core.String_id"),
     cst_core$454=caml_string_of_jsbytes("core"),
     cst_Core_String_id$0=caml_string_of_jsbytes("Core__String_id"),
     cst_Core_Stack=caml_string_of_jsbytes("Core__Stack"),
     cst_core$455=caml_string_of_jsbytes("core"),
     cst_core_src_stack_ml=caml_string_of_jsbytes("core/src/stack.ml"),
     cst$244=caml_string_of_jsbytes(""),
     cst_core$456=caml_string_of_jsbytes("core"),
     cst_core$457=caml_string_of_jsbytes("core"),
     cst_Core_Stack$0=caml_string_of_jsbytes("Core__Stack"),
     cst_bin_io_deserialization_mis$0=
      caml_string_of_jsbytes("bin-io deserialization mismatch"),
     cst_serialization_mismatch=
      caml_string_of_jsbytes("serialization mismatch"),
     cst_sexp_deserialization_msima=
      caml_string_of_jsbytes("sexp deserialization msimatch"),
     cst_expected_list_when_seriali=
      caml_string_of_jsbytes
       ("expected list when serializing unordered container"),
     cst_sexp_serialization_mismatc$0=
      caml_string_of_jsbytes("sexp serialization mismatch"),
     cst_core_src_stable_unit_test_$4=
      caml_string_of_jsbytes("core/src/stable_unit_test.ml"),
     cst_sexp=caml_string_of_jsbytes("sexp"),
     cst_core_src_stable_unit_test_$5=
      caml_string_of_jsbytes("core/src/stable_unit_test.ml"),
     cst_bin_io$0=caml_string_of_jsbytes("bin_io"),
     cst_bin_io_serialization_misma=
      caml_string_of_jsbytes("bin_io serialization mismatch"),
     cst_bin_io_deserialization_mis=
      caml_string_of_jsbytes("bin_io deserialization mismatch"),
     cst_core_src_stable_unit_test_$3=
      caml_string_of_jsbytes("core/src/stable_unit_test.ml"),
     cst_bin_io=caml_string_of_jsbytes("bin_io"),
     cst_sexp_serialization_mismatc=
      caml_string_of_jsbytes("sexp serialization mismatch"),
     cst_core_src_stable_unit_test_$2=
      caml_string_of_jsbytes("core/src/stable_unit_test.ml"),
     cst_sexp_serialization=caml_string_of_jsbytes("sexp serialization"),
     cst_sexp_deserialization_misma=
      caml_string_of_jsbytes("sexp deserialization mismatch"),
     cst_could_not_deserialize_sexp=
      caml_string_of_jsbytes("could not deserialize sexp"),
     cst_core_src_stable_unit_test_$1=
      caml_string_of_jsbytes("core/src/stable_unit_test.ml"),
     cst_sexp_deserialization=caml_string_of_jsbytes("sexp deserialization"),
     cst_Core_Stable_unit_test=
      caml_string_of_jsbytes("Core__Stable_unit_test"),
     cst_core$458=caml_string_of_jsbytes("core"),
     cst_core_src_stable_unit_test_$0=
      caml_string_of_jsbytes("core/src/stable_unit_test.ml"),
     cst$245=caml_string_of_jsbytes(""),
     cst_core$459=caml_string_of_jsbytes("core"),
     cst_core$460=caml_string_of_jsbytes("core"),
     cst_Core_Stable_unit_test$0=
      caml_string_of_jsbytes("Core__Stable_unit_test"),
     cst_blang$0=caml_string_of_jsbytes("blang"),
     cst_false=caml_string_of_jsbytes("false"),
     cst_true=caml_string_of_jsbytes("true"),
     cst_and=caml_string_of_jsbytes("and"),
     cst_if=caml_string_of_jsbytes("if"),
     cst_not=caml_string_of_jsbytes("not"),
     cst_or=caml_string_of_jsbytes("or"),
     name$68=caml_string_of_jsbytes("not"),
     name$69=caml_string_of_jsbytes("if"),
     cst_core_src_blang_ml_T_t=caml_string_of_jsbytes("core/src/blang.ml.T.t"),
     cst_True=caml_string_of_jsbytes("True"),
     cst_False=caml_string_of_jsbytes("False"),
     cst_And$0=caml_string_of_jsbytes("And"),
     cst_Or$0=caml_string_of_jsbytes("Or"),
     cst_Not$0=caml_string_of_jsbytes("Not"),
     cst_If$0=caml_string_of_jsbytes("If"),
     cst_Base$9=caml_string_of_jsbytes("Base"),
     cst_t$282=caml_string_of_jsbytes("t"),
     cst_Core_Blang=caml_string_of_jsbytes("Core__Blang"),
     cst_core$461=caml_string_of_jsbytes("core"),
     cst_core_src_blang_ml=caml_string_of_jsbytes("core/src/blang.ml"),
     cst$246=caml_string_of_jsbytes(""),
     cst_core$462=caml_string_of_jsbytes("core"),
     cst_a$86=caml_string_of_jsbytes("a"),
     cst_core_src_blang_ml_48_14=
      caml_string_of_jsbytes("core/src/blang.ml:48:14"),
     cst_Base$8=caml_string_of_jsbytes("Base"),
     cst_a$87=caml_string_of_jsbytes("a"),
     cst_core_src_blang_ml_47_26=
      caml_string_of_jsbytes("core/src/blang.ml:47:26"),
     cst_t$273=caml_string_of_jsbytes("t"),
     cst_a$88=caml_string_of_jsbytes("a"),
     cst_core_src_blang_ml_47_19=
      caml_string_of_jsbytes("core/src/blang.ml:47:19"),
     cst_t$274=caml_string_of_jsbytes("t"),
     cst_a$89=caml_string_of_jsbytes("a"),
     cst_core_src_blang_ml_47_12=
      caml_string_of_jsbytes("core/src/blang.ml:47:12"),
     cst_t$275=caml_string_of_jsbytes("t"),
     cst_If=caml_string_of_jsbytes("If"),
     cst_a$90=caml_string_of_jsbytes("a"),
     cst_core_src_blang_ml_46_13=
      caml_string_of_jsbytes("core/src/blang.ml:46:13"),
     cst_t$276=caml_string_of_jsbytes("t"),
     cst_Not=caml_string_of_jsbytes("Not"),
     cst_a$91=caml_string_of_jsbytes("a"),
     cst_core_src_blang_ml_45_19=
      caml_string_of_jsbytes("core/src/blang.ml:45:19"),
     cst_t$277=caml_string_of_jsbytes("t"),
     cst_a$92=caml_string_of_jsbytes("a"),
     cst_core_src_blang_ml_45_12=
      caml_string_of_jsbytes("core/src/blang.ml:45:12"),
     cst_t$278=caml_string_of_jsbytes("t"),
     cst_Or=caml_string_of_jsbytes("Or"),
     cst_a$93=caml_string_of_jsbytes("a"),
     cst_core_src_blang_ml_44_20=
      caml_string_of_jsbytes("core/src/blang.ml:44:20"),
     cst_t$279=caml_string_of_jsbytes("t"),
     cst_a$94=caml_string_of_jsbytes("a"),
     cst_core_src_blang_ml_44_13=
      caml_string_of_jsbytes("core/src/blang.ml:44:13"),
     cst_t$280=caml_string_of_jsbytes("t"),
     cst_And=caml_string_of_jsbytes("And"),
     cst_a$95=caml_string_of_jsbytes("a"),
     cst_t$281=caml_string_of_jsbytes("t"),
     cst_core_src_blang_ml_41_2=
      caml_string_of_jsbytes("core/src/blang.ml:41:2"),
     name$67=caml_string_of_jsbytes("core/src/blang.ml.T.t"),
     blang=
      [7,
       caml_string_of_jsbytes("blang"),
       [0,[6,caml_string_of_jsbytes("a")],0]],
     cst_not$0=caml_string_of_jsbytes("not"),
     cst_or$0=caml_string_of_jsbytes("or"),
     cst_and$0=caml_string_of_jsbytes("and"),
     cst_if$0=caml_string_of_jsbytes("if"),
     cst_blang=caml_string_of_jsbytes("blang"),
     cst_core$463=caml_string_of_jsbytes("core"),
     cst_Core_Blang$0=caml_string_of_jsbytes("Core__Blang"),
     cst$257=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$29=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$258=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$30=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$259=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$31=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$260=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$32=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$261=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$33=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$262=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$34=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$263=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$35=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$264=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$36=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$265=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$37=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$266=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$38=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$267=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$39=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$268=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$40=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$269=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$41=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$248=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$0=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$249=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$1=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$250=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$2=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$251=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$3=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$252=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$4=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$253=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$5=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$254=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$6=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$255=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$7=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$256=caml_string_of_jsbytes("%{}"),
     cst_core_src_byte_units_ml$8=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_Bytes=caml_string_of_jsbytes("Bytes"),
     cst_Exabytes=caml_string_of_jsbytes("Exabytes"),
     cst_Gigabytes=caml_string_of_jsbytes("Gigabytes"),
     cst_Kilobytes=caml_string_of_jsbytes("Kilobytes"),
     cst_Megabytes=caml_string_of_jsbytes("Megabytes"),
     cst_Petabytes=caml_string_of_jsbytes("Petabytes"),
     cst_Terabytes=caml_string_of_jsbytes("Terabytes"),
     cst_Words=caml_string_of_jsbytes("Words"),
     cst_Not_a_recognized_Byte_unit=
      caml_string_of_jsbytes("Not a recognized [Byte_units.t] representation"),
     cst_Core_Byte_units=caml_string_of_jsbytes("Core__Byte_units"),
     cst_core$464=caml_string_of_jsbytes("core"),
     cst_core_src_byte_units_ml=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst$247=caml_string_of_jsbytes(""),
     cst_core$465=caml_string_of_jsbytes("core"),
     cst_core_src_byte_units_ml$9=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$10=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$11=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$12=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$13=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$14=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$15=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$16=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$17=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$18=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$19=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$20=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$21=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$22=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$23=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$24=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$25=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$26=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$27=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$28=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_93907cd6dc6cc01a303e474801=
      caml_string_of_jsbytes("93907cd6dc6cc01a303e474801f62c96"),
     cst_core_src_byte_units_ml$42=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$43=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$44=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$45=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$46=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$47=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$48=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$49=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$50=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$51=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$52=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$53=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$54=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$55=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$56=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$57=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$58=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$59=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$60=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$61=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$62=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$63=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$64=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$65=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$66=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$67=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$68=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_core_src_byte_units_ml$69=
      caml_string_of_jsbytes("core/src/byte_units.ml"),
     cst_93907cd6dc6cc01a303e474801$0=
      caml_string_of_jsbytes("93907cd6dc6cc01a303e474801f62c96"),
     cst_core$466=caml_string_of_jsbytes("core"),
     cst_Core_Byte_units$0=caml_string_of_jsbytes("Core__Byte_units"),
     cst_Heap_block_create_exn_call=
      caml_string_of_jsbytes
       ("Heap_block.create_exn called with non heap block"),
     cst_Core_Heap_block=caml_string_of_jsbytes("Core__Heap_block"),
     cst_core$467=caml_string_of_jsbytes("core"),
     cst_core_src_heap_block_ml=
      caml_string_of_jsbytes("core/src/heap_block.ml"),
     cst$270=caml_string_of_jsbytes(""),
     cst_core$468=caml_string_of_jsbytes("core"),
     cst_core$469=caml_string_of_jsbytes("core"),
     cst_Core_Heap_block$0=caml_string_of_jsbytes("Core__Heap_block"),
     cst_gc_alarm=caml_string_of_jsbytes("<gc alarm>"),
     cst_measure_and_log_allocation=
      caml_string_of_jsbytes("measure_and_log_allocation"),
     cst_max_overhead$0=caml_string_of_jsbytes("max_overhead"),
     cst_allocation_policy$0=caml_string_of_jsbytes("allocation_policy"),
     cst_custom_major_ratio$0=caml_string_of_jsbytes("custom_major_ratio"),
     cst_custom_minor_max_size$0=
      caml_string_of_jsbytes("custom_minor_max_size"),
     cst_custom_minor_ratio$0=caml_string_of_jsbytes("custom_minor_ratio"),
     cst_major_heap_increment$0=caml_string_of_jsbytes("major_heap_increment"),
     cst_minor_heap_size$0=caml_string_of_jsbytes("minor_heap_size"),
     cst_space_overhead$0=caml_string_of_jsbytes("space_overhead"),
     cst_stack_limit$0=caml_string_of_jsbytes("stack_limit"),
     cst_verbose$0=caml_string_of_jsbytes("verbose"),
     cst_window_size$0=caml_string_of_jsbytes("window_size"),
     cst_custom_minor_max_size$1=
      caml_string_of_jsbytes("custom_minor_max_size"),
     cst_custom_minor_ratio$1=caml_string_of_jsbytes("custom_minor_ratio"),
     cst_custom_major_ratio$1=caml_string_of_jsbytes("custom_major_ratio"),
     cst_window_size$1=caml_string_of_jsbytes("window_size"),
     cst_allocation_policy$1=caml_string_of_jsbytes("allocation_policy"),
     cst_stack_limit$1=caml_string_of_jsbytes("stack_limit"),
     cst_max_overhead$1=caml_string_of_jsbytes("max_overhead"),
     cst_verbose$1=caml_string_of_jsbytes("verbose"),
     cst_space_overhead$1=caml_string_of_jsbytes("space_overhead"),
     cst_major_heap_increment$1=caml_string_of_jsbytes("major_heap_increment"),
     cst_minor_heap_size$1=caml_string_of_jsbytes("minor_heap_size"),
     cst_core_src_gc_ml_Stable_Cont=
      caml_string_of_jsbytes("core/src/gc.ml.Stable.Control.V1.t"),
     cst_live_blocks$3=caml_string_of_jsbytes("live_blocks"),
     cst_compactions$3=caml_string_of_jsbytes("compactions"),
     cst_forced_major_collections$0=
      caml_string_of_jsbytes("forced_major_collections"),
     cst_fragments$3=caml_string_of_jsbytes("fragments"),
     cst_free_blocks$3=caml_string_of_jsbytes("free_blocks"),
     cst_free_words$3=caml_string_of_jsbytes("free_words"),
     cst_heap_chunks$3=caml_string_of_jsbytes("heap_chunks"),
     cst_heap_words$3=caml_string_of_jsbytes("heap_words"),
     cst_largest_free$3=caml_string_of_jsbytes("largest_free"),
     cst_live_words$3=caml_string_of_jsbytes("live_words"),
     cst_major_collections$3=caml_string_of_jsbytes("major_collections"),
     cst_major_words$3=caml_string_of_jsbytes("major_words"),
     cst_minor_collections$3=caml_string_of_jsbytes("minor_collections"),
     cst_minor_words$3=caml_string_of_jsbytes("minor_words"),
     cst_promoted_words$3=caml_string_of_jsbytes("promoted_words"),
     cst_stack_size$3=caml_string_of_jsbytes("stack_size"),
     cst_top_heap_words$3=caml_string_of_jsbytes("top_heap_words"),
     cst_forced_major_collections$1=
      caml_string_of_jsbytes("forced_major_collections"),
     cst_stack_size$4=caml_string_of_jsbytes("stack_size"),
     cst_top_heap_words$4=caml_string_of_jsbytes("top_heap_words"),
     cst_compactions$4=caml_string_of_jsbytes("compactions"),
     cst_fragments$4=caml_string_of_jsbytes("fragments"),
     cst_largest_free$4=caml_string_of_jsbytes("largest_free"),
     cst_free_blocks$4=caml_string_of_jsbytes("free_blocks"),
     cst_free_words$4=caml_string_of_jsbytes("free_words"),
     cst_live_blocks$4=caml_string_of_jsbytes("live_blocks"),
     cst_live_words$4=caml_string_of_jsbytes("live_words"),
     cst_heap_chunks$4=caml_string_of_jsbytes("heap_chunks"),
     cst_heap_words$4=caml_string_of_jsbytes("heap_words"),
     cst_major_collections$4=caml_string_of_jsbytes("major_collections"),
     cst_minor_collections$4=caml_string_of_jsbytes("minor_collections"),
     cst_major_words$4=caml_string_of_jsbytes("major_words"),
     cst_promoted_words$4=caml_string_of_jsbytes("promoted_words"),
     cst_minor_words$4=caml_string_of_jsbytes("minor_words"),
     cst_core_src_gc_ml_Stable_Stat$0=
      caml_string_of_jsbytes("core/src/gc.ml.Stable.Stat.V2.t"),
     cst_live_words$0=caml_string_of_jsbytes("live_words"),
     cst_compactions$0=caml_string_of_jsbytes("compactions"),
     cst_fragments$0=caml_string_of_jsbytes("fragments"),
     cst_free_blocks$0=caml_string_of_jsbytes("free_blocks"),
     cst_free_words$0=caml_string_of_jsbytes("free_words"),
     cst_heap_chunks$0=caml_string_of_jsbytes("heap_chunks"),
     cst_heap_words$0=caml_string_of_jsbytes("heap_words"),
     cst_largest_free$0=caml_string_of_jsbytes("largest_free"),
     cst_live_blocks$0=caml_string_of_jsbytes("live_blocks"),
     cst_major_collections$0=caml_string_of_jsbytes("major_collections"),
     cst_major_words$0=caml_string_of_jsbytes("major_words"),
     cst_minor_collections$0=caml_string_of_jsbytes("minor_collections"),
     cst_minor_words$0=caml_string_of_jsbytes("minor_words"),
     cst_promoted_words$0=caml_string_of_jsbytes("promoted_words"),
     cst_stack_size$0=caml_string_of_jsbytes("stack_size"),
     cst_top_heap_words$0=caml_string_of_jsbytes("top_heap_words"),
     cst_stack_size$1=caml_string_of_jsbytes("stack_size"),
     cst_top_heap_words$1=caml_string_of_jsbytes("top_heap_words"),
     cst_compactions$1=caml_string_of_jsbytes("compactions"),
     cst_fragments$1=caml_string_of_jsbytes("fragments"),
     cst_largest_free$1=caml_string_of_jsbytes("largest_free"),
     cst_free_blocks$1=caml_string_of_jsbytes("free_blocks"),
     cst_free_words$1=caml_string_of_jsbytes("free_words"),
     cst_live_blocks$1=caml_string_of_jsbytes("live_blocks"),
     cst_live_words$1=caml_string_of_jsbytes("live_words"),
     cst_heap_chunks$1=caml_string_of_jsbytes("heap_chunks"),
     cst_heap_words$1=caml_string_of_jsbytes("heap_words"),
     cst_major_collections$1=caml_string_of_jsbytes("major_collections"),
     cst_minor_collections$1=caml_string_of_jsbytes("minor_collections"),
     cst_major_words$1=caml_string_of_jsbytes("major_words"),
     cst_promoted_words$1=caml_string_of_jsbytes("promoted_words"),
     cst_minor_words$1=caml_string_of_jsbytes("minor_words"),
     cst_core_src_gc_ml_Stable_Stat=
      caml_string_of_jsbytes("core/src/gc.ml.Stable.Stat.V1.t"),
     cst_Best_fit=caml_string_of_jsbytes("Best_fit"),
     cst_First_fit=caml_string_of_jsbytes("First_fit"),
     cst_Next_fit=caml_string_of_jsbytes("Next_fit"),
     cst_best_fit=caml_string_of_jsbytes("best_fit"),
     cst_first_fit=caml_string_of_jsbytes("first_fit"),
     cst_next_fit=caml_string_of_jsbytes("next_fit"),
     cst_Best_fit$0=caml_string_of_jsbytes("Best_fit"),
     cst_First_fit$0=caml_string_of_jsbytes("First_fit"),
     cst_Next_fit$0=caml_string_of_jsbytes("Next_fit"),
     cst_best_fit$0=caml_string_of_jsbytes("best_fit"),
     cst_first_fit$0=caml_string_of_jsbytes("first_fit"),
     cst_next_fit$0=caml_string_of_jsbytes("next_fit"),
     cst_core_src_gc_ml_Stable_Allo=
      caml_string_of_jsbytes("core/src/gc.ml.Stable.Allocation_policy.V1.t"),
     cst_Core_Gc=caml_string_of_jsbytes("Core__Gc"),
     cst_core$470=caml_string_of_jsbytes("core"),
     cst_core_src_gc_ml=caml_string_of_jsbytes("core/src/gc.ml"),
     cst$271=caml_string_of_jsbytes(""),
     cst_core$471=caml_string_of_jsbytes("core"),
     cst_t$283=caml_string_of_jsbytes("t"),
     cst_core_src_gc_ml_6_6=caml_string_of_jsbytes("core/src/gc.ml:6:6"),
     cst_t$284=caml_string_of_jsbytes("t"),
     error_source_007$0=
      caml_string_of_jsbytes("core/src/gc.ml.Stable.Allocation_policy.V1.t"),
     cst_stack_size=caml_string_of_jsbytes("stack_size"),
     cst_top_heap_words=caml_string_of_jsbytes("top_heap_words"),
     cst_compactions=caml_string_of_jsbytes("compactions"),
     cst_fragments=caml_string_of_jsbytes("fragments"),
     cst_largest_free=caml_string_of_jsbytes("largest_free"),
     cst_free_blocks=caml_string_of_jsbytes("free_blocks"),
     cst_free_words=caml_string_of_jsbytes("free_words"),
     cst_live_blocks=caml_string_of_jsbytes("live_blocks"),
     cst_live_words=caml_string_of_jsbytes("live_words"),
     cst_heap_chunks=caml_string_of_jsbytes("heap_chunks"),
     cst_heap_words=caml_string_of_jsbytes("heap_words"),
     cst_major_collections=caml_string_of_jsbytes("major_collections"),
     cst_minor_collections=caml_string_of_jsbytes("minor_collections"),
     cst_major_words=caml_string_of_jsbytes("major_words"),
     cst_promoted_words=caml_string_of_jsbytes("promoted_words"),
     cst_minor_words=caml_string_of_jsbytes("minor_words"),
     cst_t$285=caml_string_of_jsbytes("t"),
     cst_core_src_gc_ml_65_6=caml_string_of_jsbytes("core/src/gc.ml:65:6"),
     cst_t$286=caml_string_of_jsbytes("t"),
     error_source_069=
      caml_string_of_jsbytes("core/src/gc.ml.Stable.Stat.V1.t"),
     cst_forced_major_collections=
      caml_string_of_jsbytes("forced_major_collections"),
     cst_stack_size$2=caml_string_of_jsbytes("stack_size"),
     cst_top_heap_words$2=caml_string_of_jsbytes("top_heap_words"),
     cst_compactions$2=caml_string_of_jsbytes("compactions"),
     cst_fragments$2=caml_string_of_jsbytes("fragments"),
     cst_largest_free$2=caml_string_of_jsbytes("largest_free"),
     cst_free_blocks$2=caml_string_of_jsbytes("free_blocks"),
     cst_free_words$2=caml_string_of_jsbytes("free_words"),
     cst_live_blocks$2=caml_string_of_jsbytes("live_blocks"),
     cst_live_words$2=caml_string_of_jsbytes("live_words"),
     cst_heap_chunks$2=caml_string_of_jsbytes("heap_chunks"),
     cst_heap_words$2=caml_string_of_jsbytes("heap_words"),
     cst_major_collections$2=caml_string_of_jsbytes("major_collections"),
     cst_minor_collections$2=caml_string_of_jsbytes("minor_collections"),
     cst_major_words$2=caml_string_of_jsbytes("major_words"),
     cst_promoted_words$2=caml_string_of_jsbytes("promoted_words"),
     cst_minor_words$2=caml_string_of_jsbytes("minor_words"),
     cst_t$287=caml_string_of_jsbytes("t"),
     cst_core_src_gc_ml_87_6=caml_string_of_jsbytes("core/src/gc.ml:87:6"),
     cst_t$288=caml_string_of_jsbytes("t"),
     error_source_169=
      caml_string_of_jsbytes("core/src/gc.ml.Stable.Stat.V2.t"),
     cst_custom_minor_max_size=caml_string_of_jsbytes("custom_minor_max_size"),
     cst_custom_minor_ratio=caml_string_of_jsbytes("custom_minor_ratio"),
     cst_custom_major_ratio=caml_string_of_jsbytes("custom_major_ratio"),
     cst_window_size=caml_string_of_jsbytes("window_size"),
     cst_allocation_policy=caml_string_of_jsbytes("allocation_policy"),
     cst_stack_limit=caml_string_of_jsbytes("stack_limit"),
     cst_max_overhead=caml_string_of_jsbytes("max_overhead"),
     cst_verbose=caml_string_of_jsbytes("verbose"),
     cst_space_overhead=caml_string_of_jsbytes("space_overhead"),
     cst_major_heap_increment=caml_string_of_jsbytes("major_heap_increment"),
     cst_minor_heap_size=caml_string_of_jsbytes("minor_heap_size"),
     cst_t$289=caml_string_of_jsbytes("t"),
     cst_core_src_gc_ml_116_6=caml_string_of_jsbytes("core/src/gc.ml:116:6"),
     cst_t$290=caml_string_of_jsbytes("t"),
     error_source_253=
      caml_string_of_jsbytes("core/src/gc.ml.Stable.Control.V1.t"),
     names$6=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("minor_words"),
         caml_string_of_jsbytes("promoted_words"),
         caml_string_of_jsbytes("major_words"),
         caml_string_of_jsbytes("minor_collections"),
         caml_string_of_jsbytes("major_collections"),
         caml_string_of_jsbytes("heap_words"),
         caml_string_of_jsbytes("heap_chunks"),
         caml_string_of_jsbytes("live_words"),
         caml_string_of_jsbytes("live_blocks"),
         caml_string_of_jsbytes("free_words"),
         caml_string_of_jsbytes("free_blocks"),
         caml_string_of_jsbytes("largest_free"),
         caml_string_of_jsbytes("fragments"),
         caml_string_of_jsbytes("compactions"),
         caml_string_of_jsbytes("top_heap_words"),
         caml_string_of_jsbytes("stack_size"),
         caml_string_of_jsbytes("forced_major_collections")]),
     cst_forced_major_collections$2=
      caml_string_of_jsbytes("forced_major_collections"),
     cst_stack_size$5=caml_string_of_jsbytes("stack_size"),
     cst_top_heap_words$5=caml_string_of_jsbytes("top_heap_words"),
     cst_compactions$5=caml_string_of_jsbytes("compactions"),
     cst_fragments$5=caml_string_of_jsbytes("fragments"),
     cst_largest_free$5=caml_string_of_jsbytes("largest_free"),
     cst_free_blocks$5=caml_string_of_jsbytes("free_blocks"),
     cst_free_words$5=caml_string_of_jsbytes("free_words"),
     cst_live_blocks$5=caml_string_of_jsbytes("live_blocks"),
     cst_live_words$5=caml_string_of_jsbytes("live_words"),
     cst_heap_chunks$5=caml_string_of_jsbytes("heap_chunks"),
     cst_heap_words$5=caml_string_of_jsbytes("heap_words"),
     cst_major_collections$5=caml_string_of_jsbytes("major_collections"),
     cst_minor_collections$5=caml_string_of_jsbytes("minor_collections"),
     cst_major_words$5=caml_string_of_jsbytes("major_words"),
     cst_promoted_words$5=caml_string_of_jsbytes("promoted_words"),
     cst_minor_words$5=caml_string_of_jsbytes("minor_words"),
     names$7=
      caml_list_of_js_array
       ([caml_string_of_jsbytes("minor_heap_size"),
         caml_string_of_jsbytes("major_heap_increment"),
         caml_string_of_jsbytes("space_overhead"),
         caml_string_of_jsbytes("verbose"),
         caml_string_of_jsbytes("max_overhead"),
         caml_string_of_jsbytes("stack_limit"),
         caml_string_of_jsbytes("allocation_policy"),
         caml_string_of_jsbytes("window_size"),
         caml_string_of_jsbytes("custom_major_ratio"),
         caml_string_of_jsbytes("custom_minor_ratio"),
         caml_string_of_jsbytes("custom_minor_max_size")]),
     cst_custom_minor_max_size$2=
      caml_string_of_jsbytes("custom_minor_max_size"),
     cst_custom_minor_ratio$2=caml_string_of_jsbytes("custom_minor_ratio"),
     cst_custom_major_ratio$2=caml_string_of_jsbytes("custom_major_ratio"),
     cst_window_size$2=caml_string_of_jsbytes("window_size"),
     cst_allocation_policy$2=caml_string_of_jsbytes("allocation_policy"),
     cst_stack_limit$2=caml_string_of_jsbytes("stack_limit"),
     cst_max_overhead$2=caml_string_of_jsbytes("max_overhead"),
     cst_verbose$2=caml_string_of_jsbytes("verbose"),
     cst_space_overhead$2=caml_string_of_jsbytes("space_overhead"),
     cst_major_heap_increment$2=caml_string_of_jsbytes("major_heap_increment"),
     cst_minor_heap_size$2=caml_string_of_jsbytes("minor_heap_size"),
     cst_0=caml_string_of_jsbytes("0"),
     cst_core$472=caml_string_of_jsbytes("core"),
     cst_Core_Gc$0=caml_string_of_jsbytes("Core__Gc"),
     cst_Core_Make_stable=caml_string_of_jsbytes("Core__Make_stable"),
     cst_core$473=caml_string_of_jsbytes("core"),
     cst_core_src_make_stable_ml=
      caml_string_of_jsbytes("core/src/make_stable.ml"),
     cst$272=caml_string_of_jsbytes(""),
     cst_core$474=caml_string_of_jsbytes("core"),
     cst_core$475=caml_string_of_jsbytes("core"),
     cst_Core_Make_stable$0=caml_string_of_jsbytes("Core__Make_stable"),
     cst_el$16=caml_string_of_jsbytes("el"),
     cst_Core_Queue=caml_string_of_jsbytes("Core__Queue"),
     cst_core$476=caml_string_of_jsbytes("core"),
     cst_core_src_queue_ml=caml_string_of_jsbytes("core/src/queue.ml"),
     cst$273=caml_string_of_jsbytes(""),
     cst_core$477=caml_string_of_jsbytes("core"),
     cst_a$96=caml_string_of_jsbytes("a"),
     cst_core_src_queue_ml_35_19=
      caml_string_of_jsbytes("core/src/queue.ml:35:19"),
     cst_a$97=caml_string_of_jsbytes("a"),
     cst_el$15=caml_string_of_jsbytes("el"),
     cst_core_src_queue_ml_35_6=
      caml_string_of_jsbytes("core/src/queue.ml:35:6"),
     cst_b4c84254_4992_11e6_9ba7_73=
      caml_string_of_jsbytes("b4c84254-4992-11e6-9ba7-734e154027bd"),
     module_name$16=[0,caml_string_of_jsbytes("Core.Queue")],
     cst_core$478=caml_string_of_jsbytes("core"),
     cst_Core_Queue$0=caml_string_of_jsbytes("Core__Queue"),
     cst_Core_Stable=caml_string_of_jsbytes("Core__Stable"),
     cst_core$479=caml_string_of_jsbytes("core"),
     cst_core_src_stable_ml=caml_string_of_jsbytes("core/src/stable.ml"),
     cst$274=caml_string_of_jsbytes(""),
     cst_core$480=caml_string_of_jsbytes("core"),
     cst_core$481=caml_string_of_jsbytes("core"),
     cst_Core_Stable$0=caml_string_of_jsbytes("Core__Stable"),
     cst_Signal_default_sys_behavio=
      caml_string_of_jsbytes("Signal.default_sys_behavior: unknown signal "),
     cst_unknown_signal$0=caml_string_of_jsbytes("<unknown signal "),
     cst$276=caml_string_of_jsbytes(">"),
     cst_unknown_signal=caml_string_of_jsbytes("<unknown signal "),
     cst_Continue=caml_string_of_jsbytes("Continue"),
     cst_Dump_core=caml_string_of_jsbytes("Dump_core"),
     cst_Ignore=caml_string_of_jsbytes("Ignore"),
     cst_Stop=caml_string_of_jsbytes("Stop"),
     cst_Terminate=caml_string_of_jsbytes("Terminate"),
     cst_Continue$0=caml_string_of_jsbytes("Continue"),
     cst_Dump_core$0=caml_string_of_jsbytes("Dump_core"),
     cst_Ignore$0=caml_string_of_jsbytes("Ignore"),
     cst_Stop$0=caml_string_of_jsbytes("Stop"),
     cst_Terminate$0=caml_string_of_jsbytes("Terminate"),
     cst_Core_Signal=caml_string_of_jsbytes("Core__Signal"),
     cst_core$482=caml_string_of_jsbytes("core"),
     cst_core_src_signal_ml=caml_string_of_jsbytes("core/src/signal.ml"),
     cst$275=caml_string_of_jsbytes(""),
     cst_core$483=caml_string_of_jsbytes("core"),
     error_source_006=
      caml_string_of_jsbytes("core/src/signal.ml.sys_behavior"),
     error_source_008=
      caml_string_of_jsbytes("core/src/signal.ml.sys_behavior"),
     cst_Core_Signal_Invalid_signal=
      caml_string_of_jsbytes("Core__Signal.Invalid_signal_mnemonic_or_number"),
     cst_sigzero=caml_string_of_jsbytes("sigzero"),
     cst_sigxfsz=caml_string_of_jsbytes("sigxfsz"),
     cst_sigxcpu=caml_string_of_jsbytes("sigxcpu"),
     cst_sigvtalrm=caml_string_of_jsbytes("sigvtalrm"),
     cst_sigusr2=caml_string_of_jsbytes("sigusr2"),
     cst_sigusr1=caml_string_of_jsbytes("sigusr1"),
     cst_sigurg=caml_string_of_jsbytes("sigurg"),
     cst_sigttou=caml_string_of_jsbytes("sigttou"),
     cst_sigttin=caml_string_of_jsbytes("sigttin"),
     cst_sigtstp=caml_string_of_jsbytes("sigtstp"),
     cst_sigtrap=caml_string_of_jsbytes("sigtrap"),
     cst_sigterm=caml_string_of_jsbytes("sigterm"),
     cst_sigsys=caml_string_of_jsbytes("sigsys"),
     cst_sigstop=caml_string_of_jsbytes("sigstop"),
     cst_sigsegv=caml_string_of_jsbytes("sigsegv"),
     cst_sigquit=caml_string_of_jsbytes("sigquit"),
     cst_sigprof=caml_string_of_jsbytes("sigprof"),
     cst_sigpoll=caml_string_of_jsbytes("sigpoll"),
     cst_sigpipe=caml_string_of_jsbytes("sigpipe"),
     cst_sigkill=caml_string_of_jsbytes("sigkill"),
     cst_sigint=caml_string_of_jsbytes("sigint"),
     cst_sigill=caml_string_of_jsbytes("sigill"),
     cst_sighup=caml_string_of_jsbytes("sighup"),
     cst_sigfpe=caml_string_of_jsbytes("sigfpe"),
     cst_sigcont=caml_string_of_jsbytes("sigcont"),
     cst_sigchld=caml_string_of_jsbytes("sigchld"),
     cst_sigbus=caml_string_of_jsbytes("sigbus"),
     cst_sigalrm=caml_string_of_jsbytes("sigalrm"),
     cst_sigabrt=caml_string_of_jsbytes("sigabrt"),
     cst_Core_Signal_Expected_atom=
      caml_string_of_jsbytes("Core__Signal.Expected_atom"),
     cst_t$291=caml_string_of_jsbytes("t"),
     cst_core_src_signal_ml_193_4=
      caml_string_of_jsbytes("core/src/signal.ml:193:4"),
     cst_t$292=caml_string_of_jsbytes("t"),
     cst_t$293=caml_string_of_jsbytes("t"),
     cst_core_src_signal_ml_200_4=
      caml_string_of_jsbytes("core/src/signal.ml:200:4"),
     cst_t$294=caml_string_of_jsbytes("t"),
     cst_core$484=caml_string_of_jsbytes("core"),
     cst_Core_Signal$0=caml_string_of_jsbytes("Core__Signal"),
     cst_Neg$4=caml_string_of_jsbytes("Neg"),
     cst_Zero$8=caml_string_of_jsbytes("Zero"),
     cst_Pos$4=caml_string_of_jsbytes("Pos"),
     cst_Nan$1=caml_string_of_jsbytes("Nan"),
     cst_core_src_sign_or_nan_ml_St=
      caml_string_of_jsbytes("core/src/sign_or_nan.ml.Stable.V1.t"),
     cst_Nan=caml_string_of_jsbytes("Nan"),
     cst_Neg$2=caml_string_of_jsbytes("Neg"),
     cst_Pos$2=caml_string_of_jsbytes("Pos"),
     cst_Zero$6=caml_string_of_jsbytes("Zero"),
     cst_nan$0=caml_string_of_jsbytes("nan"),
     cst_neg$1=caml_string_of_jsbytes("neg"),
     cst_pos$1=caml_string_of_jsbytes("pos"),
     cst_zero$5=caml_string_of_jsbytes("zero"),
     cst_Nan$0=caml_string_of_jsbytes("Nan"),
     cst_Neg$3=caml_string_of_jsbytes("Neg"),
     cst_Pos$3=caml_string_of_jsbytes("Pos"),
     cst_Zero$7=caml_string_of_jsbytes("Zero"),
     cst_nan$1=caml_string_of_jsbytes("nan"),
     cst_neg$2=caml_string_of_jsbytes("neg"),
     cst_pos$2=caml_string_of_jsbytes("pos"),
     cst_zero$6=caml_string_of_jsbytes("zero"),
     cst_Core_Sign_or_nan=caml_string_of_jsbytes("Core__Sign_or_nan"),
     cst_core$485=caml_string_of_jsbytes("core"),
     cst_core_src_sign_or_nan_ml=
      caml_string_of_jsbytes("core/src/sign_or_nan.ml"),
     cst$277=caml_string_of_jsbytes(""),
     cst_core$486=caml_string_of_jsbytes("core"),
     error_source_003$2=
      caml_string_of_jsbytes("core/src/sign_or_nan.ml.Stable.V1.t"),
     cst_t$295=caml_string_of_jsbytes("t"),
     cst_core_src_sign_or_nan_ml_6_=
      caml_string_of_jsbytes("core/src/sign_or_nan.ml:6:4"),
     cst_t$296=caml_string_of_jsbytes("t"),
     name$70=caml_string_of_jsbytes("core/src/sign_or_nan.ml.Stable.V1.t"),
     cst_core$487=caml_string_of_jsbytes("core"),
     cst_Core_Sign_or_nan$0=caml_string_of_jsbytes("Core__Sign_or_nan"),
     cst_Core_Queue_intf=caml_string_of_jsbytes("Core__Queue_intf"),
     cst_core$488=caml_string_of_jsbytes("core"),
     cst_core_src_queue_intf_ml=
      caml_string_of_jsbytes("core/src/queue_intf.ml"),
     cst$278=caml_string_of_jsbytes(""),
     cst_core$489=caml_string_of_jsbytes("core"),
     cst_core$490=caml_string_of_jsbytes("core"),
     cst_Core_Queue_intf$0=caml_string_of_jsbytes("Core__Queue_intf"),
     cst_Core_Printexc=caml_string_of_jsbytes("Core__Printexc"),
     cst_core$491=caml_string_of_jsbytes("core"),
     cst_core_src_printexc_ml=caml_string_of_jsbytes("core/src/printexc.ml"),
     cst$279=caml_string_of_jsbytes(""),
     cst_core$492=caml_string_of_jsbytes("core"),
     cst_core$493=caml_string_of_jsbytes("core"),
     cst_Core_Printexc$0=caml_string_of_jsbytes("Core__Printexc"),
     cst_t$298=caml_string_of_jsbytes("t"),
     cst_Core_Option_array=caml_string_of_jsbytes("Core__Option_array"),
     cst_core$494=caml_string_of_jsbytes("core"),
     cst_core_src_option_array_ml=
      caml_string_of_jsbytes("core/src/option_array.ml"),
     cst$280=caml_string_of_jsbytes(""),
     cst_core$495=caml_string_of_jsbytes("core"),
     cst_a$98=caml_string_of_jsbytes("a"),
     cst_core_src_option_array_ml_7=
      caml_string_of_jsbytes("core/src/option_array.ml:7:18"),
     cst_a$99=caml_string_of_jsbytes("a"),
     cst_t$297=caml_string_of_jsbytes("t"),
     cst_core_src_option_array_ml_7$0=
      caml_string_of_jsbytes("core/src/option_array.ml:7:6"),
     cst_core$496=caml_string_of_jsbytes("core"),
     cst_Core_Option_array$0=caml_string_of_jsbytes("Core__Option_array"),
     cst_Core_Only_in_test=caml_string_of_jsbytes("Core__Only_in_test"),
     cst_core$497=caml_string_of_jsbytes("core"),
     cst_core_src_only_in_test_ml=
      caml_string_of_jsbytes("core/src/only_in_test.ml"),
     cst$281=caml_string_of_jsbytes(""),
     cst_core$498=caml_string_of_jsbytes("core"),
     cst_core$499=caml_string_of_jsbytes("core"),
     cst_Core_Only_in_test$0=caml_string_of_jsbytes("Core__Only_in_test"),
     cst_Core_No_polymorphic_compar=
      caml_string_of_jsbytes("Core__No_polymorphic_compare"),
     cst_core$500=caml_string_of_jsbytes("core"),
     cst_core_src_no_polymorphic_co=
      caml_string_of_jsbytes("core/src/no_polymorphic_compare.ml"),
     cst$282=caml_string_of_jsbytes(""),
     cst_core$501=caml_string_of_jsbytes("core"),
     cst_core$502=caml_string_of_jsbytes("core"),
     cst_Core_No_polymorphic_compar$0=
      caml_string_of_jsbytes("Core__No_polymorphic_compare"),
     cst_Core_Memo=caml_string_of_jsbytes("Core__Memo"),
     cst_core$503=caml_string_of_jsbytes("core"),
     cst_core_src_memo_ml=caml_string_of_jsbytes("core/src/memo.ml"),
     cst$283=caml_string_of_jsbytes(""),
     cst_core$504=caml_string_of_jsbytes("core"),
     cst_core$505=caml_string_of_jsbytes("core"),
     cst_Core_Memo$0=caml_string_of_jsbytes("Core__Memo"),
     cst_el$18=caml_string_of_jsbytes("el"),
     cst_Core_Linked_queue=caml_string_of_jsbytes("Core__Linked_queue"),
     cst_core$506=caml_string_of_jsbytes("core"),
     cst_core_src_linked_queue_ml=
      caml_string_of_jsbytes("core/src/linked_queue.ml"),
     cst$284=caml_string_of_jsbytes(""),
     cst_core$507=caml_string_of_jsbytes("core"),
     cst_a$100=caml_string_of_jsbytes("a"),
     cst_core_src_linked_queue_ml_7=
      caml_string_of_jsbytes("core/src/linked_queue.ml:7:17"),
     cst_a$101=caml_string_of_jsbytes("a"),
     cst_el$17=caml_string_of_jsbytes("el"),
     cst_core_src_linked_queue_ml_7$0=
      caml_string_of_jsbytes("core/src/linked_queue.ml:7:4"),
     cst_800df9a0_4992_11e6_881d_ff=
      caml_string_of_jsbytes("800df9a0-4992-11e6-881d-ffe1a5c8aced"),
     module_name$17=[0,caml_string_of_jsbytes("Core.Linked_queue")],
     cst_core$508=caml_string_of_jsbytes("core"),
     cst_Core_Linked_queue$0=caml_string_of_jsbytes("Core__Linked_queue"),
     cst_Core_Ephemeron=caml_string_of_jsbytes("Core__Ephemeron"),
     cst_core$509=caml_string_of_jsbytes("core"),
     cst_core_src_ephemeron_ml=caml_string_of_jsbytes("core/src/ephemeron.ml"),
     cst$285=caml_string_of_jsbytes(""),
     cst_core$510=caml_string_of_jsbytes("core"),
     cst_core$511=caml_string_of_jsbytes("core"),
     cst_Core_Ephemeron$0=caml_string_of_jsbytes("Core__Ephemeron"),
     cst_Core_Deriving_hash_intf=
      caml_string_of_jsbytes("Core__Deriving_hash_intf"),
     cst_core$512=caml_string_of_jsbytes("core"),
     cst_core_src_deriving_hash_int=
      caml_string_of_jsbytes("core/src/deriving_hash_intf.ml"),
     cst$286=caml_string_of_jsbytes(""),
     cst_core$513=caml_string_of_jsbytes("core"),
     cst_core$514=caml_string_of_jsbytes("core"),
     cst_Core_Deriving_hash_intf$0=
      caml_string_of_jsbytes("Core__Deriving_hash_intf"),
     cst_Core_Deriving_hash=caml_string_of_jsbytes("Core__Deriving_hash"),
     cst_core$515=caml_string_of_jsbytes("core"),
     cst_core_src_deriving_hash_ml=
      caml_string_of_jsbytes("core/src/deriving_hash.ml"),
     cst$287=caml_string_of_jsbytes(""),
     cst_core$516=caml_string_of_jsbytes("core"),
     cst_core$517=caml_string_of_jsbytes("core"),
     cst_Core_Deriving_hash$0=caml_string_of_jsbytes("Core__Deriving_hash"),
     cst_Deque_front_index_exn=caml_string_of_jsbytes("Deque.front_index_exn"),
     cst_Deque_back_index_exn=caml_string_of_jsbytes("Deque.back_index_exn"),
     cst_el$20=caml_string_of_jsbytes("el"),
     cst_Deque_true_index_exn=caml_string_of_jsbytes("Deque.true_index_exn"),
     cst_Deque_dequeue_back_exn_pas=
      caml_string_of_jsbytes("Deque.dequeue_back_exn passed an empty queue"),
     cst_Deque_dequeue_front_exn_pa=
      caml_string_of_jsbytes("Deque.dequeue_front_exn passed an empty queue"),
     cst_Deque_peek_back_exn_passed=
      caml_string_of_jsbytes("Deque.peek_back_exn passed an empty queue"),
     cst_Deque_peek_front_exn_passe=
      caml_string_of_jsbytes("Deque.peek_front_exn passed an empty queue"),
     cst_Core_Deque=caml_string_of_jsbytes("Core__Deque"),
     cst_core$518=caml_string_of_jsbytes("core"),
     cst_core_src_deque_ml=caml_string_of_jsbytes("core/src/deque.ml"),
     cst$288=caml_string_of_jsbytes(""),
     cst_core$519=caml_string_of_jsbytes("core"),
     cst_a$102=caml_string_of_jsbytes("a"),
     cst_core_src_deque_ml_448_17=
      caml_string_of_jsbytes("core/src/deque.ml:448:17"),
     cst_a$103=caml_string_of_jsbytes("a"),
     cst_el$19=caml_string_of_jsbytes("el"),
     cst_core_src_deque_ml_448_4=
      caml_string_of_jsbytes("core/src/deque.ml:448:4"),
     cst_34c1e9ca_4992_11e6_a686_8b=
      caml_string_of_jsbytes("34c1e9ca-4992-11e6-a686-8b4bd4f87796"),
     module_name$18=[0,caml_string_of_jsbytes("Core.Deque")],
     cst_core$520=caml_string_of_jsbytes("core"),
     cst_Core_Deque$0=caml_string_of_jsbytes("Core__Deque"),
     cst$290=caml_string_of_jsbytes("."),
     cst_invariant_pre_condition_fa=
      caml_string_of_jsbytes("invariant pre-condition failed"),
     cst_invariant_post_condition_f=
      caml_string_of_jsbytes("invariant post-condition failed"),
     cst$291=caml_string_of_jsbytes("."),
     cst_Core_Debug=caml_string_of_jsbytes("Core__Debug"),
     cst_core$521=caml_string_of_jsbytes("core"),
     cst_core_src_debug_ml=caml_string_of_jsbytes("core/src/debug.ml"),
     cst$289=caml_string_of_jsbytes(""),
     cst_core$522=caml_string_of_jsbytes("core"),
     cst_core$523=caml_string_of_jsbytes("core"),
     cst_Core_Debug$0=caml_string_of_jsbytes("Core__Debug"),
     cst_function$0=caml_string_of_jsbytes("function"),
     cst_else=caml_string_of_jsbytes("else"),
     cst_case=caml_string_of_jsbytes("case"),
     cst_coproc=caml_string_of_jsbytes("coproc"),
     cst_do=caml_string_of_jsbytes("do"),
     cst_done=caml_string_of_jsbytes("done"),
     cst_elif=caml_string_of_jsbytes("elif"),
     cst_esac=caml_string_of_jsbytes("esac"),
     cst_fi=caml_string_of_jsbytes("fi"),
     cst_for=caml_string_of_jsbytes("for"),
     cst_foreach=caml_string_of_jsbytes("foreach"),
     cst_if$1=caml_string_of_jsbytes("if"),
     cst_in=caml_string_of_jsbytes("in"),
     cst_nocorrect=caml_string_of_jsbytes("nocorrect"),
     cst_repeat=caml_string_of_jsbytes("repeat"),
     cst_select=caml_string_of_jsbytes("select"),
     cst_then=caml_string_of_jsbytes("then"),
     cst_time=caml_string_of_jsbytes("time"),
     cst_until=caml_string_of_jsbytes("until"),
     cst_while=caml_string_of_jsbytes("while"),
     cst_Core_Core_sys=caml_string_of_jsbytes("Core__Core_sys"),
     cst_core$524=caml_string_of_jsbytes("core"),
     cst_core_src_core_sys_ml=caml_string_of_jsbytes("core/src/core_sys.ml"),
     cst$292=caml_string_of_jsbytes(""),
     cst_core$525=caml_string_of_jsbytes("core"),
     cst_Unix=caml_string_of_jsbytes("Unix"),
     cst_core$526=caml_string_of_jsbytes("core"),
     cst_Core_Core_sys$0=caml_string_of_jsbytes("Core__Core_sys"),
     cst_Core_Bag_intf=caml_string_of_jsbytes("Core__Bag_intf"),
     cst_core$527=caml_string_of_jsbytes("core"),
     cst_core_src_bag_intf_ml=caml_string_of_jsbytes("core/src/bag_intf.ml"),
     cst$293=caml_string_of_jsbytes(""),
     cst_core$528=caml_string_of_jsbytes("core"),
     cst_core$529=caml_string_of_jsbytes("core"),
     cst_Core_Bag_intf$0=caml_string_of_jsbytes("Core__Bag_intf"),
     cst_Core_Bag=caml_string_of_jsbytes("Core__Bag"),
     cst_core$530=caml_string_of_jsbytes("core"),
     cst_core_src_bag_ml=caml_string_of_jsbytes("core/src/bag.ml"),
     cst$294=caml_string_of_jsbytes(""),
     cst_core$531=caml_string_of_jsbytes("core"),
     cst_core$532=caml_string_of_jsbytes("core"),
     cst_Core_Bag$0=caml_string_of_jsbytes("Core__Bag"),
     cst_Core_Bigbuffer_internal=
      caml_string_of_jsbytes("Core__Bigbuffer_internal"),
     cst_core$533=caml_string_of_jsbytes("core"),
     cst_core_src_bigbuffer_interna=
      caml_string_of_jsbytes("core/src/bigbuffer_internal.ml"),
     cst$295=caml_string_of_jsbytes(""),
     cst_core$534=caml_string_of_jsbytes("core"),
     cst_core$535=caml_string_of_jsbytes("core"),
     cst_Core_Bigbuffer_internal$0=
      caml_string_of_jsbytes("Core__Bigbuffer_internal"),
     cst_Bigbuffer_add_substitute_c=
      caml_string_of_jsbytes
       ("Bigbuffer.add_substitute: cannot find closing delimiter"),
     cst_Bigbuffer_add_subbytes=
      caml_string_of_jsbytes("Bigbuffer.add_subbytes"),
     cst_Bigbuffer_add_substring=
      caml_string_of_jsbytes("Bigbuffer.add_substring"),
     cst_Bigbuffer_nth=caml_string_of_jsbytes("Bigbuffer.nth"),
     cst_Core_Bigbuffer=caml_string_of_jsbytes("Core__Bigbuffer"),
     cst_core$536=caml_string_of_jsbytes("core"),
     cst_core_src_bigbuffer_ml=caml_string_of_jsbytes("core/src/bigbuffer.ml"),
     cst$296=caml_string_of_jsbytes(""),
     cst_core$537=caml_string_of_jsbytes("core"),
     cst_core$538=caml_string_of_jsbytes("core"),
     cst_Core_Bigbuffer$0=caml_string_of_jsbytes("Core__Bigbuffer"),
     cst_Core_Bigsubstring=caml_string_of_jsbytes("Core__Bigsubstring"),
     cst_core$539=caml_string_of_jsbytes("core"),
     cst_core_src_bigsubstring_ml=
      caml_string_of_jsbytes("core/src/bigsubstring.ml"),
     cst$297=caml_string_of_jsbytes(""),
     cst_core$540=caml_string_of_jsbytes("core"),
     cst_core$541=caml_string_of_jsbytes("core"),
     cst_Core_Bigsubstring$0=caml_string_of_jsbytes("Core__Bigsubstring"),
     cst_Core_Bounded_index_intf=
      caml_string_of_jsbytes("Core__Bounded_index_intf"),
     cst_core$542=caml_string_of_jsbytes("core"),
     cst_core_src_bounded_index_int=
      caml_string_of_jsbytes("core/src/bounded_index_intf.ml"),
     cst$298=caml_string_of_jsbytes(""),
     cst_core$543=caml_string_of_jsbytes("core"),
     cst_core$544=caml_string_of_jsbytes("core"),
     cst_Core_Bounded_index_intf$0=
      caml_string_of_jsbytes("Core__Bounded_index_intf"),
     cst_t$303=caml_string_of_jsbytes("t"),
     cst_core_src_bounded_index_ml_$2=
      caml_string_of_jsbytes("core/src/bounded_index.ml:75:2"),
     cst_t$304=caml_string_of_jsbytes("t"),
     cst_t$305=caml_string_of_jsbytes("t"),
     cst_core_src_bounded_index_ml_$3=
      caml_string_of_jsbytes("core/src/bounded_index.ml:97:6"),
     cst_t$306=caml_string_of_jsbytes("t"),
     cst_of$0=caml_string_of_jsbytes("of"),
     cst_to$0=caml_string_of_jsbytes("to"),
     cst_invalid_sexp_for_index=
      caml_string_of_jsbytes("invalid sexp for index"),
     cst_to=caml_string_of_jsbytes("to"),
     cst_of=caml_string_of_jsbytes("of"),
     cst_index_out_of_bounds$0=caml_string_of_jsbytes("index out of bounds"),
     cst_core_src_bounded_index_ml_$0=
      caml_string_of_jsbytes("core/src/bounded_index.ml.Stable.V1.Make.t"),
     cst_max_index=caml_string_of_jsbytes("max_index"),
     cst_min_index=caml_string_of_jsbytes("min_index"),
     cst_index=caml_string_of_jsbytes("index"),
     cst_t$299=caml_string_of_jsbytes("t"),
     cst_core_src_bounded_index_ml_=
      caml_string_of_jsbytes("core/src/bounded_index.ml:10:6"),
     cst_t$300=caml_string_of_jsbytes("t"),
     error_source_017$0=
      caml_string_of_jsbytes
       ("core/src/bounded_index.ml.Stable.V1.Make.For_sexpable.t"),
     cst_t$301=caml_string_of_jsbytes("t"),
     cst_core_src_bounded_index_ml_$1=
      caml_string_of_jsbytes("core/src/bounded_index.ml:51:10"),
     cst_t$302=caml_string_of_jsbytes("t"),
     cst_Core_Bounded_index=caml_string_of_jsbytes("Core__Bounded_index"),
     cst_core$545=caml_string_of_jsbytes("core"),
     cst_core_src_bounded_index_ml=
      caml_string_of_jsbytes("core/src/bounded_index.ml"),
     cst$299=caml_string_of_jsbytes(""),
     cst_core$546=caml_string_of_jsbytes("core"),
     cst_core$547=caml_string_of_jsbytes("core"),
     cst_Core_Bounded_index$0=caml_string_of_jsbytes("Core__Bounded_index"),
     cst_Core=caml_string_of_jsbytes("Core"),
     cst_core$548=caml_string_of_jsbytes("core"),
     cst_core_src_core_ml=caml_string_of_jsbytes("core/src/core.ml"),
     cst$300=caml_string_of_jsbytes(""),
     cst_core$549=caml_string_of_jsbytes("core"),
     cst_core$550=caml_string_of_jsbytes("core"),
     cst_Core$0=caml_string_of_jsbytes("Core"),
     Bin_prot_Common=global_data.Bin_prot__Common,
     Bin_prot_Shape=global_data.Bin_prot__Shape,
     Ppx_module_timer_runtime=global_data.Ppx_module_timer_runtime,
     Ppx_bench_lib_Benchmark_accumu=
      global_data.Ppx_bench_lib__Benchmark_accumulator,
     Expect_test_collector=global_data.Expect_test_collector,
     Ppx_inline_test_lib_Runtime=global_data.Ppx_inline_test_lib__Runtime,
     Base=global_data.Base,
     Stdio=global_data.Stdio,
     Bin_prot_Std=global_data.Bin_prot__Std,
     Sexplib_Conv=global_data.Sexplib__Conv,
     Typerep_lib_Make_typename=global_data.Typerep_lib__Make_typename,
     Typerep_lib_Std=global_data.Typerep_lib__Std,
     Base_With_return=global_data.Base__With_return,
     include$0=global_data.Caml,
     Stdlib=global_data.Stdlib,
     Bin_prot_Write=global_data.Bin_prot__Write,
     Assert_failure=global_data.Assert_failure,
     Stdlib_Bigarray=global_data.Stdlib__Bigarray,
     Sexplib0_Sexp_conv=global_data.Sexplib0__Sexp_conv,
     Bin_prot_Utils=global_data.Bin_prot__Utils,
     Bin_prot_Read=global_data.Bin_prot__Read,
     include$2=global_data.Bin_prot__Binable,
     Inline_test_config=global_data.Inline_test_config,
     Stdlib_Buffer=global_data.Stdlib__Buffer,
     include$4=global_data.Base__Printf,
     Stdio_Out_channel=global_data.Stdio__Out_channel,
     Base_Hash=global_data.Base__Hash,
     Base_Nothing=global_data.Base__Nothing,
     Sexplib_Sexp_grammar=global_data.Sexplib__Sexp_grammar,
     Sexplib0_Sexp_conv_error=global_data.Sexplib0__Sexp_conv_error,
     Ppx_compare_lib=global_data.Ppx_compare_lib,
     include$5=global_data.Base__Comparator,
     include$6=global_data.Base__Result,
     include$7=global_data.Base__Container,
     Base_Fn=global_data.Base__Fn,
     include$8=global_data.Base__Ordered_collection_common,
     Base_Field=global_data.Base__Field,
     Base_Comparable=global_data.Base__Comparable,
     include$9=global_data.Base__Sequence,
     Base_quickcheck_Export=global_data.Base_quickcheck__Export,
     include$11=global_data.Base__Array,
     Base_for_tests_Test_blit=global_data.Base_for_tests__Test_blit,
     include$13=global_data.Base__Float,
     include$15=global_data.Base__Sys,
     Typerep_lib_Typename=global_data.Typerep_lib__Typename,
     include$16=global_data.Base__Either,
     Base_quickcheck_Generator=global_data.Base_quickcheck__Generator,
     Base_quickcheck_Observer=global_data.Base_quickcheck__Observer,
     Base_quickcheck_Shrinker=global_data.Base_quickcheck__Shrinker,
     include$18=global_data.Base__Source_code_position,
     include$19=global_data.Sexplib__Sexp,
     Base_Exn=global_data.Base__Exn,
     Base_Info=global_data.Base__Info,
     Base_Error=global_data.Base__Error,
     include$23=global_data.Base__Or_error,
     Expect_test_config=global_data.Expect_test_config,
     Stdlib_Set=global_data.Stdlib__Set,
     Base_quickcheck_Test=global_data.Base_quickcheck__Test,
     include$27=global_data.Base__Int,
     include$28=global_data.Base__Option,
     CamlinternalLazy=global_data.CamlinternalLazy,
     Splittable_random=global_data.Splittable_random,
     Base_Random=global_data.Base__Random,
     include$25=global_data.Base__List,
     Base_Word_size=global_data.Base__Word_size,
     Base_Hashtbl=global_data.Base__Hashtbl,
     Base_Hashable=global_data.Base__Hashable,
     Validate=global_data.Validate,
     include$33=global_data.Base__Hash_set,
     Base_Map_intf=global_data.Base__Map_intf,
     Base_Map=global_data.Base__Map,
     Base_Set=global_data.Base__Set,
     Expect_test_common_File=global_data.Expect_test_common__File,
     include$37=global_data.Base__Maybe_bound,
     include$41=global_data.Base__String,
     Base_Staged=global_data.Base__Staged,
     Base_Char=global_data.Base__Char,
     Base_Pretty_printer=global_data.Base__Pretty_printer,
     Base_Bool=global_data.Base__Bool,
     include$52=global_data.Base__Bytes,
     Base_Sign=global_data.Base__Sign,
     Base_Int32=global_data.Base__Int32,
     Base_Int64=global_data.Base__Int64,
     Base_Int63_emul=global_data.Base__Int63_emul,
     Base_Int63=global_data.Base__Int63,
     include$72=global_data.Base__Unit,
     Sexplib_Std=global_data.Sexplib__Std,
     include$73=global_data.Base__Lazy,
     Base_Nativeint=global_data.Base__Nativeint,
     Sexplib_Conv_error=global_data.Sexplib__Conv_error,
     include$77=global_data.Base__Ordering,
     include$78=global_data.Base__Ref,
     Stdlib_Callback=global_data.Stdlib__Callback,
     include$80=global_data.Typerep_lib__Std_internal,
     include$81=global_data.Base_bigstring,
     Md5_lib=global_data.Md5_lib,
     Stdlib_Digest=global_data.Stdlib__Digest,
     include$83=global_data.Bin_prot__Md5,
     Stdio_In_channel=global_data.Stdio__In_channel,
     Base_Sexpable=global_data.Base__Sexpable,
     include$92=global_data.Base__Type_equal,
     Base_Invariant=global_data.Base__Invariant,
     include$96=global_data.Base__Uniform_array,
     Typerep_lib_Type_generic=global_data.Typerep_lib__Type_generic,
     Time_now=global_data.Time_now,
     Base_Indexed_container=global_data.Base__Indexed_container,
     include$138=global_data.Stdlib__Arg,
     Stdlib_Filename=global_data.Stdlib__Filename,
     Stdlib_List=global_data.Stdlib__List,
     Ppx_assert_lib_Runtime=global_data.Ppx_assert_lib__Runtime,
     Base_Monad=global_data.Base__Monad,
     Stdlib_Sys=global_data.Stdlib__Sys,
     Stdlib_String=global_data.Stdlib__String,
     Base_Applicative=global_data.Base__Applicative,
     include$160=global_data.Base__Stack,
     include$165=global_data.Stdlib__Gc,
     Stdlib_Printexc=global_data.Stdlib__Printexc,
     include$168=global_data.Base__Queue,
     Base_for_tests_Test_binary_sea=
      global_data.Base_for_tests__Test_binary_searchable,
     Base_Sign_or_nan=global_data.Base__Sign_or_nan,
     include$172=global_data.Base__Option_array,
     include$174=global_data.Base__Linked_queue,
     Stdlib_Ephemeron=global_data.Stdlib__Ephemeron,
     Base_Backtrace=global_data.Base__Backtrace,
     Stdlib_Format=global_data.Stdlib__Format,
     Base_Blit=global_data.Base__Blit,
     Core=[0];
    caml_register_global(5170,Core,"Core__");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Import);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core);
    caml_call1(Expect_test_collector[5][1],cst_core_src_import_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$0,cst);
    var
     _a_=Base[86],
     _b_=_a_[1],
     _d_=_a_[3],
     _e_=_a_[4],
     _l_=_a_[11],
     _s_=_a_[18],
     sexp_of_t=_a_[20],
     _u_=_a_[21],
     _v_=_a_[22],
     _w_=_a_[23],
     _y_=_a_[25],
     _z_=_a_[26],
     compare=_a_[28],
     _B_=_a_[29],
     hash_fold_t=_a_[30],
     _C_=_a_[31],
     t_of_sexp=_a_[32],
     sexp_of_t$0=_a_[33],
     _S_=_a_[49],
     _U_=_a_[51],
     _W_=_a_[53],
     _ah_=_a_[66],
     _ao_=_a_[73],
     _aq_=_a_[75],
     _ar_=_a_[76],
     _as_=_a_[77],
     _at_=_a_[78],
     _aR_=_a_[102],
     _aS_=_a_[103],
     _aU_=_a_[105],
     _a0_=_a_[111],
     _a1_=_a_[112],
     _a2_=_a_[113],
     _a3_=_a_[114],
     _a4_=_a_[115],
     _a5_=_a_[116],
     _a6_=_a_[117],
     _a__=Stdio[4],
     _bd_=Stdio[9],
     bin_size_t=Bin_prot_Std[1],
     bin_size_t$0=Bin_prot_Std[2],
     bin_size_t$1=Bin_prot_Std[3],
     bin_size_bytes=Bin_prot_Std[4],
     bin_size_t$2=Bin_prot_Std[5],
     bin_size_t$3=Bin_prot_Std[6],
     bin_size_t$4=Bin_prot_Std[7],
     bin_size_t$5=Bin_prot_Std[8],
     bin_size_t$6=Bin_prot_Std[9],
     bin_size_t$7=Bin_prot_Std[10],
     _bg_=Bin_prot_Std[12],
     _bh_=Bin_prot_Std[13],
     _bj_=Bin_prot_Std[15],
     _bm_=Bin_prot_Std[18],
     _bn_=Bin_prot_Std[19],
     bin_size_t_frozen=Bin_prot_Std[27],
     _bN_=Bin_prot_Std[46],
     bin_write_t=Bin_prot_Std[48],
     bin_read_t=Bin_prot_Std[50],
     bin_read_t$0=Bin_prot_Std[51],
     _bR_=Bin_prot_Std[53],
     bin_write_t$0=Bin_prot_Std[55],
     bin_read_t$1=Bin_prot_Std[57],
     bin_read_t$2=Bin_prot_Std[58],
     _bV_=Bin_prot_Std[60],
     bin_write_t$1=Bin_prot_Std[62],
     bin_read_t$3=Bin_prot_Std[64],
     bin_read_t$4=Bin_prot_Std[65],
     _bZ_=Bin_prot_Std[67],
     bin_write_bytes=Bin_prot_Std[69],
     bin_read_bytes=Bin_prot_Std[71],
     bin_read_bytes$0=Bin_prot_Std[72],
     _b3_=Bin_prot_Std[74],
     bin_write_t$2=Bin_prot_Std[76],
     bin_read_t$5=Bin_prot_Std[78],
     bin_read_t$6=Bin_prot_Std[79],
     _b7_=Bin_prot_Std[81],
     bin_write_t$3=Bin_prot_Std[83],
     bin_read_t$7=Bin_prot_Std[85],
     bin_read_t$8=Bin_prot_Std[86],
     _b$_=Bin_prot_Std[88],
     bin_write_t$4=Bin_prot_Std[90],
     bin_read_t$9=Bin_prot_Std[92],
     bin_read_t$10=Bin_prot_Std[93],
     _cq_=Bin_prot_Std[108],
     bin_write_t$5=Bin_prot_Std[110],
     bin_read_t$11=Bin_prot_Std[112],
     bin_read_t$12=Bin_prot_Std[113],
     _cu_=Bin_prot_Std[115],
     bin_write_t$6=Bin_prot_Std[117],
     bin_read_t$13=Bin_prot_Std[119],
     bin_read_t$14=Bin_prot_Std[120],
     _cy_=Bin_prot_Std[122],
     bin_write_t$7=Bin_prot_Std[124],
     bin_read_t$15=Bin_prot_Std[126],
     bin_read_t$16=Bin_prot_Std[127],
     _cC_=Bin_prot_Std[129],
     _cE_=Bin_prot_Std[131],
     _cG_=Bin_prot_Std[133],
     _cH_=Bin_prot_Std[134],
     _cJ_=Bin_prot_Std[136],
     _cL_=Bin_prot_Std[138],
     _cN_=Bin_prot_Std[140],
     _cO_=Bin_prot_Std[141],
     _cX_=Bin_prot_Std[150],
     _cZ_=Bin_prot_Std[152],
     _c1_=Bin_prot_Std[154],
     _c2_=Bin_prot_Std[155],
     _c4_=Bin_prot_Std[157],
     _c6_=Bin_prot_Std[159],
     _c8_=Bin_prot_Std[161],
     _c9_=Bin_prot_Std[162],
     _c$_=Bin_prot_Std[164],
     _db_=Bin_prot_Std[166],
     _dd_=Bin_prot_Std[168],
     _de_=Bin_prot_Std[169],
     _dn_=Bin_prot_Std[178],
     bin_write_t_frozen=Bin_prot_Std[180],
     bin_read_t_frozen=Bin_prot_Std[182],
     bin_read_t_frozen$0=Bin_prot_Std[183],
     include=
      [0,
       Sexplib_Conv[71],
       Sexplib_Conv[80],
       Sexplib_Conv[77],
       Sexplib_Conv[92],
       Sexplib_Conv[74],
       Sexplib_Conv[86],
       Sexplib_Conv[23],
       Sexplib_Conv[47],
       Sexplib_Conv[18],
       Sexplib_Conv[42],
       Sexplib_Conv[25],
       Sexplib_Conv[27],
       Sexplib_Conv[28]],
     _ef_=include[12],
     _eg_=include[13],
     _c_=_a_[2],
     _f_=_a_[5],
     _g_=_a_[6],
     _h_=_a_[7],
     _i_=_a_[8],
     _j_=_a_[9],
     _k_=_a_[10],
     _m_=_a_[12],
     _n_=_a_[13],
     _o_=_a_[14],
     _p_=_a_[15],
     _q_=_a_[16],
     _r_=_a_[17],
     _t_=_a_[19],
     _x_=_a_[24],
     _A_=_a_[27],
     _D_=_a_[34],
     _E_=_a_[35],
     _F_=_a_[36],
     _G_=_a_[37],
     _H_=_a_[38],
     _I_=_a_[39],
     _J_=_a_[40],
     _K_=_a_[41],
     _L_=_a_[42],
     _M_=_a_[43],
     _N_=_a_[44],
     _O_=_a_[45],
     _P_=_a_[46],
     _Q_=_a_[47],
     _R_=_a_[48],
     _T_=_a_[50],
     _V_=_a_[52],
     _X_=_a_[54],
     _Y_=_a_[55],
     _Z_=_a_[56],
     ___=_a_[57],
     _$_=_a_[58],
     _aa_=_a_[59],
     _ab_=_a_[60],
     _ac_=_a_[61],
     _ad_=_a_[62],
     _ae_=_a_[63],
     _af_=_a_[64],
     _ag_=_a_[65],
     _ai_=_a_[67],
     _aj_=_a_[68],
     _ak_=_a_[69],
     _al_=_a_[70],
     _am_=_a_[71],
     _an_=_a_[72],
     _ap_=_a_[74],
     _au_=_a_[79],
     _av_=_a_[80],
     _aw_=_a_[81],
     _ax_=_a_[82],
     _ay_=_a_[83],
     _az_=_a_[84],
     _aA_=_a_[85],
     _aB_=_a_[86],
     _aC_=_a_[87],
     _aD_=_a_[88],
     _aE_=_a_[89],
     _aF_=_a_[90],
     _aG_=_a_[91],
     _aH_=_a_[92],
     _aI_=_a_[93],
     _aJ_=_a_[94],
     _aK_=_a_[95],
     _aL_=_a_[96],
     _aM_=_a_[97],
     _aN_=_a_[98],
     _aO_=_a_[99],
     _aP_=_a_[100],
     _aQ_=_a_[101],
     _aT_=_a_[104],
     _aV_=_a_[106],
     _aW_=_a_[107],
     _aX_=_a_[108],
     _aY_=_a_[109],
     _aZ_=_a_[110],
     _a7_=Stdio[1],
     _a8_=Stdio[2],
     _a9_=Stdio[3],
     _a$_=Stdio[5],
     _ba_=Stdio[6],
     _bb_=Stdio[7],
     _bc_=Stdio[8],
     _be_=Stdio[10],
     _bf_=Bin_prot_Std[11],
     _bi_=Bin_prot_Std[14],
     _bk_=Bin_prot_Std[16],
     _bl_=Bin_prot_Std[17],
     _bo_=Bin_prot_Std[20],
     _bp_=Bin_prot_Std[21],
     _bq_=Bin_prot_Std[22],
     _br_=Bin_prot_Std[23],
     _bs_=Bin_prot_Std[24],
     _bt_=Bin_prot_Std[25],
     _bu_=Bin_prot_Std[26],
     _bv_=Bin_prot_Std[28],
     _bw_=Bin_prot_Std[29],
     _bx_=Bin_prot_Std[30],
     _by_=Bin_prot_Std[31],
     _bz_=Bin_prot_Std[32],
     _bA_=Bin_prot_Std[33],
     _bB_=Bin_prot_Std[34],
     _bC_=Bin_prot_Std[35],
     _bD_=Bin_prot_Std[36],
     _bE_=Bin_prot_Std[37],
     _bF_=Bin_prot_Std[38],
     _bG_=Bin_prot_Std[39],
     _bH_=Bin_prot_Std[40],
     _bI_=Bin_prot_Std[41],
     _bJ_=Bin_prot_Std[42],
     _bK_=Bin_prot_Std[43],
     _bL_=Bin_prot_Std[44],
     _bM_=Bin_prot_Std[45],
     _bO_=Bin_prot_Std[47],
     _bP_=Bin_prot_Std[49],
     _bQ_=Bin_prot_Std[52],
     _bS_=Bin_prot_Std[54],
     _bT_=Bin_prot_Std[56],
     _bU_=Bin_prot_Std[59],
     _bW_=Bin_prot_Std[61],
     _bX_=Bin_prot_Std[63],
     _bY_=Bin_prot_Std[66],
     _b0_=Bin_prot_Std[68],
     _b1_=Bin_prot_Std[70],
     _b2_=Bin_prot_Std[73],
     _b4_=Bin_prot_Std[75],
     _b5_=Bin_prot_Std[77],
     _b6_=Bin_prot_Std[80],
     _b8_=Bin_prot_Std[82],
     _b9_=Bin_prot_Std[84],
     _b__=Bin_prot_Std[87],
     _ca_=Bin_prot_Std[89],
     _cb_=Bin_prot_Std[91],
     _cc_=Bin_prot_Std[94],
     _cd_=Bin_prot_Std[95],
     _ce_=Bin_prot_Std[96],
     _cf_=Bin_prot_Std[97],
     _cg_=Bin_prot_Std[98],
     _ch_=Bin_prot_Std[99],
     _ci_=Bin_prot_Std[100],
     _cj_=Bin_prot_Std[101],
     _ck_=Bin_prot_Std[102],
     _cl_=Bin_prot_Std[103],
     _cm_=Bin_prot_Std[104],
     _cn_=Bin_prot_Std[105],
     _co_=Bin_prot_Std[106],
     _cp_=Bin_prot_Std[107],
     _cr_=Bin_prot_Std[109],
     _cs_=Bin_prot_Std[111],
     _ct_=Bin_prot_Std[114],
     _cv_=Bin_prot_Std[116],
     _cw_=Bin_prot_Std[118],
     _cx_=Bin_prot_Std[121],
     _cz_=Bin_prot_Std[123],
     _cA_=Bin_prot_Std[125],
     _cB_=Bin_prot_Std[128],
     _cD_=Bin_prot_Std[130],
     _cF_=Bin_prot_Std[132],
     _cI_=Bin_prot_Std[135],
     _cK_=Bin_prot_Std[137],
     _cM_=Bin_prot_Std[139],
     _cP_=Bin_prot_Std[142],
     _cQ_=Bin_prot_Std[143],
     _cR_=Bin_prot_Std[144],
     _cS_=Bin_prot_Std[145],
     _cT_=Bin_prot_Std[146],
     _cU_=Bin_prot_Std[147],
     _cV_=Bin_prot_Std[148],
     _cW_=Bin_prot_Std[149],
     _cY_=Bin_prot_Std[151],
     _c0_=Bin_prot_Std[153],
     _c3_=Bin_prot_Std[156],
     _c5_=Bin_prot_Std[158],
     _c7_=Bin_prot_Std[160],
     _c__=Bin_prot_Std[163],
     _da_=Bin_prot_Std[165],
     _dc_=Bin_prot_Std[167],
     _df_=Bin_prot_Std[170],
     _dg_=Bin_prot_Std[171],
     _dh_=Bin_prot_Std[172],
     _di_=Bin_prot_Std[173],
     _dj_=Bin_prot_Std[174],
     _dk_=Bin_prot_Std[175],
     _dl_=Bin_prot_Std[176],
     _dm_=Bin_prot_Std[177],
     _do_=Bin_prot_Std[179],
     _dp_=Bin_prot_Std[181],
     _dq_=Bin_prot_Std[184],
     _dr_=Bin_prot_Std[185],
     _ds_=Bin_prot_Std[186],
     _dt_=Bin_prot_Std[187],
     _du_=Bin_prot_Std[188],
     _dv_=Bin_prot_Std[189],
     _dw_=Bin_prot_Std[190],
     _dx_=Bin_prot_Std[191],
     _dy_=Bin_prot_Std[192],
     _dz_=Bin_prot_Std[193],
     _dA_=Bin_prot_Std[194],
     _dB_=Bin_prot_Std[195],
     _dC_=Bin_prot_Std[196],
     _dD_=Bin_prot_Std[197],
     _dE_=Bin_prot_Std[198],
     _dF_=Bin_prot_Std[199],
     _dG_=Bin_prot_Std[200],
     _dH_=Bin_prot_Std[201],
     _dI_=Bin_prot_Std[202],
     _dJ_=Bin_prot_Std[203],
     _dK_=Bin_prot_Std[204],
     _dL_=Bin_prot_Std[205],
     _dM_=Bin_prot_Std[206],
     _dN_=Bin_prot_Std[207],
     _dO_=Bin_prot_Std[208],
     _dP_=Bin_prot_Std[209],
     _dQ_=Bin_prot_Std[210],
     _dR_=Bin_prot_Std[211],
     _dS_=Bin_prot_Std[212],
     _dT_=Bin_prot_Std[213],
     _dU_=Bin_prot_Std[214],
     _dV_=Bin_prot_Std[215],
     _dW_=Bin_prot_Std[216],
     _dX_=Bin_prot_Std[217],
     _dY_=Bin_prot_Std[218],
     _dZ_=Bin_prot_Std[219],
     _d0_=Bin_prot_Std[220],
     _d1_=Bin_prot_Std[221],
     _d2_=Bin_prot_Std[222],
     _d3_=Bin_prot_Std[223],
     _d4_=Bin_prot_Std[224],
     _d5_=Bin_prot_Std[225],
     _d6_=include[1],
     _d7_=include[2],
     _d8_=include[3],
     _d9_=include[4],
     _d__=include[5],
     _d$_=include[6],
     _ea_=include[7],
     _eb_=include[8],
     _ec_=include[9],
     _ed_=include[10],
     _ee_=include[11],
     _eh_=caml_call1(Bin_prot_Shape[3][1],cst_a),
     _ei_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_import_ml_75_24),
     _ej_=caml_call2(Bin_prot_Shape[15],_ei_,_eh_),
     _ek_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$0),0],
     _el_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_sexp_opaque),_ek_,_ej_],0],
     _em_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_import_ml_75_2),
     group=caml_call2(Bin_prot_Shape[6],_em_,_el_),
     _en_=[5,caml_string_of_jsbytes("core/src/import.ml.sexp_opaque")],
     _fi_=[0,caml_string_of_jsbytes("core/src/binable0.ml"),195,2],
     _fg_=[0,caml_string_of_jsbytes("bigstring_length")],
     _fh_=[0,caml_string_of_jsbytes("consumed")],
     _fe_=
      [0,
       caml_string_of_jsbytes
        ("core/src/binable0.ml.Stable.Of_stringable.V2.Of_binable")],
     _ff_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _fc_=
      [0,
       caml_string_of_jsbytes
        ("core/src/binable0.ml.Stable.Of_stringable.V1.Of_binable")],
     _fd_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _fb_=
      [1,
       caml_string_of_jsbytes("core/src/binable0.ml.Stable.Of_sexpable.V2.t")],
     _fa_=
      [1,
       caml_string_of_jsbytes("core/src/binable0.ml.Stable.Of_sexpable.V1.t")],
     _fG_=[0,[2,0,[12,10,[10,0]]],caml_string_of_jsbytes("%s\n%!")],
     _gF_=
      [5,
       caml_string_of_jsbytes
        ("core/src/perms.ml.Only_used_as_phantom_type1.t")],
     _gE_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly used "),
        [2,0,[11,caml_string_of_jsbytes(" bin_io deserialization"),0]]],
       caml_string_of_jsbytes("Unexpectedly used %s bin_io deserialization")],
     _gD_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly used "),
        [2,0,[11,caml_string_of_jsbytes(" bin_io serialization"),0]]],
       caml_string_of_jsbytes("Unexpectedly used %s bin_io serialization")],
     _gC_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly called ["),
        [2,0,[11,caml_string_of_jsbytes(".hash_fold_t]"),0]]],
       caml_string_of_jsbytes("Unexpectedly called [%s.hash_fold_t]")],
     _gB_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly called ["),
        [2,0,[11,caml_string_of_jsbytes(".compare]"),0]]],
       caml_string_of_jsbytes("Unexpectedly called [%s.compare]")],
     _gA_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly called ["),
        [2,0,[11,caml_string_of_jsbytes(".t_of_sexp]"),0]]],
       caml_string_of_jsbytes("Unexpectedly called [%s.t_of_sexp]")],
     _gz_=
      [0,
       [11,
        caml_string_of_jsbytes("Unexpectedly called ["),
        [2,0,[11,caml_string_of_jsbytes(".sexp_of_t]"),0]]],
       caml_string_of_jsbytes("Unexpectedly called [%s.sexp_of_t]")],
     _gy_=[0,caml_string_of_jsbytes("Who_can_write")],
     _gd_=[0,caml_string_of_jsbytes("Who_can_write")],
     _f6_=[0,caml_string_of_jsbytes("Who_can_write")],
     _fZ_=[0,caml_string_of_jsbytes("Read")],
     _fS_=[0,caml_string_of_jsbytes("core/src/perms.ml"),15,4],
     _fR_=[6,caml_string_of_jsbytes("core/src/perms.ml.Types.Me.t")],
     _fM_=[0,caml_string_of_jsbytes("core/src/perms.ml"),9,4],
     _fL_=[6,caml_string_of_jsbytes("core/src/perms.ml.Types.Nobody.t")],
     _hq_=[0,caml_string_of_jsbytes("Ok")],
     _hr_=[0,caml_string_of_jsbytes("Error")],
     _hp_=[1,caml_string_of_jsbytes("core/src/result.ml.Stable.V1.t")],
     _k6_=
      [1,
       caml_string_of_jsbytes
        ("core/src/sequence.ml.Merge_with_duplicates_element.t")],
     _kJ_=[1,caml_string_of_jsbytes("core/src/sequence.ml.Step.t")],
     _kC_=[0,caml_string_of_jsbytes("Done"),0],
     _lW_=[0,caml_string_of_jsbytes("First")],
     _lX_=[0,caml_string_of_jsbytes("Second")],
     _lV_=[1,caml_string_of_jsbytes("core/src/either.ml.Stable.V1.t")],
     _mu_=[0,caml_string_of_jsbytes("pos_cnum")],
     _mv_=[0,caml_string_of_jsbytes("pos_bol")],
     _mw_=[0,caml_string_of_jsbytes("pos_lnum")],
     _mx_=[0,caml_string_of_jsbytes("pos_fname")],
     _mt_=[0,caml_string_of_jsbytes("core/src/source_code_position0.ml"),7,4],
     _mJ_=
      [1,
       caml_string_of_jsbytes
        ("core/src/info.ml.Extend.Internal_repr.Stable.V2.t")],
     _mK_=[0,caml_string_of_jsbytes("Could_not_construct")],
     _mL_=[0,caml_string_of_jsbytes("String")],
     _mM_=[0,caml_string_of_jsbytes("Exn")],
     _mN_=[0,caml_string_of_jsbytes("Sexp")],
     _mO_=[0,caml_string_of_jsbytes("Tag_sexp")],
     _mP_=[0,caml_string_of_jsbytes("Tag_t")],
     _mQ_=[0,caml_string_of_jsbytes("Tag_arg")],
     _mR_=[0,caml_string_of_jsbytes("Of_list")],
     _mS_=[0,caml_string_of_jsbytes("With_backtrace")],
     _mI_=[1,caml_string_of_jsbytes("core/src/info.ml.Sexp.t")],
     _pl_=[0,caml_string_of_jsbytes("attempts")],
     _ph_=[0,caml_string_of_jsbytes("values")],
     _pi_=[0,caml_string_of_jsbytes("actual_count")],
     _pj_=[0,caml_string_of_jsbytes("expect_count")],
     _pk_=[0,caml_string_of_jsbytes("trials")],
     _pg_=[0,caml_string_of_jsbytes("_")],
     _pf_=
      [0,
       [11,
        caml_string_of_jsbytes("Generator.of_sequence: probability ["),
        [8,[0,0,0],0,0,[11,caml_string_of_jsbytes("] out of bounds"),0]]],
       caml_string_of_jsbytes
        ("Generator.of_sequence: probability [%f] out of bounds")],
     _pn_=[0,104758188],
     _tS_=[0,caml_string_of_jsbytes("core/src/hashtbl.ml"),201,5387,5407],
     _vq_=[0,caml_string_of_jsbytes("_")],
     _vp_=[0,caml_string_of_jsbytes("_")],
     _vc_=[0,caml_string_of_jsbytes("_")],
     _uL_=[0,caml_string_of_jsbytes("_")],
     _uI_=[0,caml_string_of_jsbytes("core/src/map.ml"),93,2532,2546],
     _uy_=[0,caml_string_of_jsbytes("Unequal")],
     _uz_=[0,caml_string_of_jsbytes("Right")],
     _ux_=[0,caml_string_of_jsbytes("Left")],
     _uC_=[1,caml_string_of_jsbytes(" 00674be9fe8dfe9e9ad476067d7d8101 ")],
     _uD_=[0,caml_string_of_jsbytes("")],
     _wg_=[0,caml_string_of_jsbytes("Unbounded")],
     _wh_=[0,caml_string_of_jsbytes("Incl")],
     _wi_=[0,caml_string_of_jsbytes("Excl")],
     _wf_=[1,caml_string_of_jsbytes("core/src/maybe_bound.ml.t")],
     _vP_=[0,caml_string_of_jsbytes("Unbounded")],
     _vQ_=[0,caml_string_of_jsbytes("Incl")],
     _vR_=[0,caml_string_of_jsbytes("Excl")],
     _vO_=[1,caml_string_of_jsbytes("core/src/maybe_bound.ml.Stable.V1.t")],
     _vD_=[0,[0,caml_string_of_jsbytes("Unbounded"),0],0],
     _v6_=[0,[0,caml_string_of_jsbytes("Unbounded"),0],0],
     _wN_=[0,caml_string_of_jsbytes("_")],
     _wM_=[0,caml_string_of_jsbytes("_")],
     _wF_=[0,caml_string_of_jsbytes("_")],
     _wl_=[0,caml_string_of_jsbytes("_")],
     _w$_=[0,caml_string_of_jsbytes("core/src/list.ml.Duplicate_found")],
     _xa_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _w9_=[0,caml_string_of_jsbytes("core/src/list.ml"),21,24],
     _w8_=[0,caml_string_of_jsbytes("core/src/list.ml"),20,24],
     _ym_=[0,caml_string_of_jsbytes("core/src/union_find.ml"),58,16],
     _yp_=[0,caml_string_of_jsbytes("core/src/doubly_linked.ml"),284,6],
     _yo_=[0,caml_string_of_jsbytes("core/src/doubly_linked.ml"),285,6],
     _yn_=[0,caml_string_of_jsbytes("core/src/doubly_linked.ml"),286,6],
     _yq_=[0,caml_string_of_jsbytes("core/src/doubly_linked.ml"),291,4],
     _y$_=[0,caml_string_of_jsbytes("failure building sexp")],
     _y__=
      [0,
       caml_string_of_jsbytes
        ("could not build sexp for exn raised when building sexp for value")],
     _y9_=[5,caml_string_of_jsbytes("core/src/sexp.ml.no_raise")],
     _yV_=[0,caml_string_of_jsbytes("sexp_parse_error")],
     _yK_=[1,caml_string_of_jsbytes("core/src/sexp.ml.Stable.V1.t")],
     _zD_=[0,caml_string_of_jsbytes("core/src/hash_queue.ml"),57,10],
     _zE_=[0,caml_string_of_jsbytes("core/src/hash_queue.ml"),55,18],
     _zF_=[0,caml_string_of_jsbytes("core/src/hash_queue.ml"),46,6],
     _AO_=[0,caml_string_of_jsbytes("_")],
     _AN_=[0,caml_string_of_jsbytes("_")],
     _AM_=[0,caml_string_of_jsbytes("_")],
     _AL_=[0,caml_string_of_jsbytes("_")],
     _AK_=[0,caml_string_of_jsbytes("\n")],
     _AJ_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes("  "),
         [2,0,[11,caml_string_of_jsbytes("  |"),[2,0,[12,124,0]]]]]],
       caml_string_of_jsbytes("%s  %s  |%s|")],
     _AI_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,0,[12,32,[2,0,[12,32,[2,0,[12,32,[2,0,[12,32,partial$0]]]]]]]]]],
       caml_string_of_jsbytes
        ("%s %s %s %s %s %s %s %s  %s %s %s %s %s %s %s %s")],
     _AH_=[0,[4,6,[0,2,2],0,0],caml_string_of_jsbytes("%02x")],
     _AG_=[0,[4,6,[0,2,8],0,0],caml_string_of_jsbytes("%08x")],
     _C4_=[0,caml_string_of_jsbytes("expected_case_insensitive")],
     _C5_=[0,caml_string_of_jsbytes("input")],
     _C3_=
      [0,
       [0,
        0,
        [0,
         caml_string_of_jsbytes("false"),
         [0,caml_string_of_jsbytes("no"),[0,caml_string_of_jsbytes("0"),0]]]],
       [0,
        [0,
         1,
         [0,
          caml_string_of_jsbytes("true"),
          [0,caml_string_of_jsbytes("yes"),[0,caml_string_of_jsbytes("1"),0]]]],
        0]],
     _GF_=[1,0],
     _GG_=[1,1],
     _GH_=[1,2],
     _GE_=[1,caml_string_of_jsbytes("core/src/sign.ml.Stable.V1.t")],
     _Gw_=[0,caml_string_of_jsbytes("Neg")],
     _Gx_=[0,caml_string_of_jsbytes("Zero")],
     _Gy_=[0,caml_string_of_jsbytes("Pos")],
     _Gz_=
      [0,
       [0,caml_string_of_jsbytes("Neg"),0],
       [0,
        [0,caml_string_of_jsbytes("Zero"),0],
        [0,[0,caml_string_of_jsbytes("Pos"),0],0]]],
     _IQ_=[0,caml_string_of_jsbytes("value is infinite")],
     _IP_=[0,caml_string_of_jsbytes("value is NaN")],
     _KB_=[1,caml_string_of_jsbytes(" 86ba5df747eec837f0b391dd49f33f9e ")],
     _KC_=[0,caml_string_of_jsbytes("")],
     _Lz_=[0,caml_string_of_jsbytes("core/src/nothing.ml"),13,259,276],
     _Mm_=[1,caml_string_of_jsbytes("core/src/ordering.ml.t")],
     _Mh_=
      [0,
       [0,caml_string_of_jsbytes("Less"),0],
       [0,
        [0,caml_string_of_jsbytes("Equal"),0],
        [0,[0,caml_string_of_jsbytes("Greater"),0],0]]],
     _Pm_=[0,caml_string_of_jsbytes("core/src/std_internal.ml.Bug")],
     _Pn_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _QQ_=[0,[4,0,0,0,[12,66,0]],caml_string_of_jsbytes("%dB")],
     _QR_=[0,[8,[0,0,3],0,0,[12,75,0]],caml_string_of_jsbytes("%gK")],
     _QS_=[0,[8,[0,0,3],0,0,[12,77,0]],caml_string_of_jsbytes("%gM")],
     _QT_=[0,[8,[0,0,3],0,0,[12,71,0]],caml_string_of_jsbytes("%gG")],
     _SV_=
      [0,
       [11,
        caml_string_of_jsbytes("Bigstring.set_head_padded_fixed_string: "),
        [3,0,[11,caml_string_of_jsbytes(" is longer than "),[4,0,0,0,0]]]],
       caml_string_of_jsbytes
        ("Bigstring.set_head_padded_fixed_string: %S is longer than %d")],
     _SU_=
      [0,
       [11,
        caml_string_of_jsbytes("Bigstring.set_tail_padded_fixed_string: "),
        [3,0,[11,caml_string_of_jsbytes(" is longer than "),[4,0,0,0,0]]]],
       caml_string_of_jsbytes
        ("Bigstring.set_tail_padded_fixed_string: %S is longer than %d")],
     _SN_=[0,caml_string_of_jsbytes("pos_after_data")],
     _SO_=[0,caml_string_of_jsbytes("start_pos")],
     _SP_=[0,caml_string_of_jsbytes("bin_prot_size_header_length")],
     _SQ_=[0,caml_string_of_jsbytes("data_len")],
     _SR_=[0,caml_string_of_jsbytes("total_len")],
     _SJ_=[0,caml_string_of_jsbytes("pos")],
     _SK_=[0,caml_string_of_jsbytes("pos_after_writing")],
     _SL_=[0,caml_string_of_jsbytes("bigstring_length")],
     _SI_=[0,caml_string_of_jsbytes("core/src/bigstring.ml"),94,2563,2583],
     _SM_=[0,caml_string_of_jsbytes("core/src/bigstring.ml"),98,2706,2718],
     _SS_=[0,caml_string_of_jsbytes("core/src/bigstring.ml"),108,3203,3215],
     _SZ_=[0,caml_string_of_jsbytes("core/src/core_bin_prot.ml"),50,4],
     _SY_=[0,caml_string_of_jsbytes("core/src/core_bin_prot.ml"),41,4],
     _SX_=[0,caml_string_of_jsbytes("core/src/core_bin_prot.ml"),24,4],
     _SW_=[0,caml_string_of_jsbytes("core/src/core_bin_prot.ml"),14,4],
     _Tx_=[0,0,[0,6,0]],
     _Uh_=
      [0,
       [11,caml_string_of_jsbytes("UTC"),[2,0,[4,0,0,0,0]]],
       caml_string_of_jsbytes("UTC%s%d")],
     _Ug_=[0,caml_string_of_jsbytes("core/src/zone.ml"),366,8],
     _Uf_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(" - "),[2,0,0]]],
       caml_string_of_jsbytes("%s - %s")],
     _Ue_=[0,caml_string_of_jsbytes("core/src/zone.ml"),338,10],
     _Ud_=
      [0,
       [11,
        caml_string_of_jsbytes("version ("),
        [0,[11,caml_string_of_jsbytes(") is invalid"),0]]],
       caml_string_of_jsbytes("version (%c) is invalid")],
     _T8_=[0,caml_string_of_jsbytes("leap_seconds")],
     _T9_=[0,caml_string_of_jsbytes("default_local_time_type")],
     _T__=[0,caml_string_of_jsbytes("last_regime_index")],
     _T$_=[0,caml_string_of_jsbytes("transitions")],
     _Ua_=[0,caml_string_of_jsbytes("digest")],
     _Ub_=[0,caml_string_of_jsbytes("original_filename")],
     _Uc_=[0,caml_string_of_jsbytes("name")],
     _T7_=[0,caml_string_of_jsbytes("core/src/zone.ml"),91,6],
     _TX_=[0,caml_string_of_jsbytes("new_regime")],
     _TY_=[0,caml_string_of_jsbytes("start_time_in_seconds_since_epoch")],
     _TW_=[0,caml_string_of_jsbytes("core/src/zone.ml"),84,8],
     _TQ_=[0,caml_string_of_jsbytes("seconds")],
     _TR_=[0,caml_string_of_jsbytes("time_in_seconds_since_epoch")],
     _TP_=[0,caml_string_of_jsbytes("core/src/zone.ml"),76,8],
     _TI_=[0,caml_string_of_jsbytes("abbrv")],
     _TJ_=[0,caml_string_of_jsbytes("is_dst")],
     _TK_=[0,caml_string_of_jsbytes("utc_offset_in_seconds")],
     _TH_=[0,caml_string_of_jsbytes("core/src/zone.ml"),64,8],
     _TB_=[0,caml_string_of_jsbytes("core/src/zone.ml.Invalid_file_format")],
     _TC_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _Ui_=
      [0,
       caml_string_of_jsbytes("America/New_York"),
       [0,
        caml_string_of_jsbytes("Europe/London"),
        [0,
         caml_string_of_jsbytes("Asia/Hong_Kong"),
         [0,caml_string_of_jsbytes("America/Chicago"),0]]]],
     _UE_=
      [0,
       [11,
        caml_string_of_jsbytes("Univ_map.change_exn on unknown key "),
        [2,0,0]],
       caml_string_of_jsbytes("Univ_map.change_exn on unknown key %s")],
     _UD_=
      [0,
       [11,
        caml_string_of_jsbytes("Univ_map.add_exn on existing key "),
        [2,0,0]],
       caml_string_of_jsbytes("Univ_map.add_exn on existing key %s")],
     _UC_=
      [0,
       [11,
        caml_string_of_jsbytes("Univ_map.find_exn on unknown key "),
        [2,0,0]],
       caml_string_of_jsbytes("Univ_map.find_exn on unknown key %s")],
     _UA_=[0,caml_string_of_jsbytes("_")],
     _Uz_=[0,caml_string_of_jsbytes("core/src/univ_map.ml"),83,8],
     _UB_=[0,caml_string_of_jsbytes("core/src/univ_map.ml"),81,2462,2486],
     _Ux_=[0,caml_string_of_jsbytes("_")],
     _Uv_=[0,caml_string_of_jsbytes("type_id2")],
     _Uw_=[0,caml_string_of_jsbytes("type_id1")],
     _Uy_=[0,caml_string_of_jsbytes("key")],
     _Us_=[0,caml_string_of_jsbytes("<uid>")],
     _Ut_=[0,caml_string_of_jsbytes("uid")],
     _Uu_=[0,caml_string_of_jsbytes("name")],
     _UH_=[0,caml_string_of_jsbytes("Nanosecond")],
     _UI_=[0,caml_string_of_jsbytes("Microsecond")],
     _UJ_=[0,caml_string_of_jsbytes("Millisecond")],
     _UK_=[0,caml_string_of_jsbytes("Second")],
     _UL_=[0,caml_string_of_jsbytes("Minute")],
     _UM_=[0,caml_string_of_jsbytes("Hour")],
     _UN_=[0,caml_string_of_jsbytes("Day")],
     _U8_=
      [0,
       [11,
        caml_string_of_jsbytes("Immediate.value_as_int_exn: typename:"),
        [3,0,0]],
       caml_string_of_jsbytes("Immediate.value_as_int_exn: typename:%S")],
     _U7_=
      [0,
       [11,
        caml_string_of_jsbytes("Immediate.int_as_value_exn: typename:"),
        [3,0,[11,caml_string_of_jsbytes(" int:"),[4,0,0,0,0]]]],
       caml_string_of_jsbytes
        ("Immediate.int_as_value_exn: typename:%S int:%d")],
     _U6_=
      [0,
       [11,
        caml_string_of_jsbytes("type "),
        [2,
         0,
         [11,caml_string_of_jsbytes(" is not independent of its arguments"),0]]],
       caml_string_of_jsbytes("type %s is not independent of its arguments")],
     _U5_=
      [0,
       [11,
        caml_string_of_jsbytes("type "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" does not have desired immediacy: wanted "),
          [2,0,[11,caml_string_of_jsbytes(" but got "),[2,0,0]]]]]],
       caml_string_of_jsbytes
        ("type %s does not have desired immediacy: wanted %s but got %s")],
     _U4_=[0,caml_string_of_jsbytes("core/src/type_immediacy.ml"),231,28],
     _U3_=[0,0,0,0],
     _UX_=[1,0],
     _UY_=[1,0],
     _UZ_=[1,0],
     _U0_=[1,1],
     _U1_=[1,255],
     _VQ_=
      [0,
       [11,caml_string_of_jsbytes("Day_of_week.of_string: "),[3,0,0]],
       caml_string_of_jsbytes("Day_of_week.of_string: %S")],
     _VP_=
      [0,
       [11,caml_string_of_jsbytes("Day_of_week.of_int_exn: "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Day_of_week.of_int_exn: %d")],
     _VO_=
      [0,
       [11,caml_string_of_jsbytes("Day_of_week.of_string: "),[3,0,0]],
       caml_string_of_jsbytes("Day_of_week.of_string: %S")],
     _Vw_=[1,caml_string_of_jsbytes("core/src/day_of_week.ml.Stable.V1.T.t")],
     _Vr_=
      [0,
       [0,caml_string_of_jsbytes("Sun"),0],
       [0,
        [0,caml_string_of_jsbytes("Mon"),0],
        [0,
         [0,caml_string_of_jsbytes("Tue"),0],
         [0,
          [0,caml_string_of_jsbytes("Wed"),0],
          [0,
           [0,caml_string_of_jsbytes("Thu"),0],
           [0,
            [0,caml_string_of_jsbytes("Fri"),0],
            [0,[0,caml_string_of_jsbytes("Sat"),0],0]]]]]]],
     _V3_=[12,93,0],
     _V4_=[0,0],
     _V5_=[0,0],
     _V2_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": "),
           [4,
            0,
            0,
            0,
            [11,
             caml_string_of_jsbytes(" out of range [0, "),
             [4,0,0,0,[12,93,0]]]]]]]],
       caml_string_of_jsbytes("%s.%s: %d out of range [0, %d]")],
     _V0_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": pos="),
           [4,
            0,
            0,
            0,
            [11,
             caml_string_of_jsbytes(" out of range for string of length "),
             [4,0,0,0,0]]]]]]],
       caml_string_of_jsbytes
        ("%s.%s: pos=%d out of range for string of length %d")],
     _V1_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": "),
           [4,
            0,
            0,
            0,
            [11,
             caml_string_of_jsbytes(" digits do not fit at pos "),
             [4,
              0,
              0,
              0,
              [11,caml_string_of_jsbytes(" in string of length "),[4,0,0,0,0]]]]]]]]],
       caml_string_of_jsbytes
        ("%s.%s: %d digits do not fit at pos %d in string of length %d")],
     _VZ_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": scale="),
           [7,
            0,
            0,
            0,
            [11,
             caml_string_of_jsbytes(" out of range ["),
             [7,0,0,0,[11,caml_string_of_jsbytes(", "),[7,0,0,0,[12,93,0]]]]]]]]]],
       caml_string_of_jsbytes("%s.%s: scale=%Ld out of range [%Ld, %Ld]")],
     _VY_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": digits="),
           [4,
            0,
            0,
            0,
            [11,caml_string_of_jsbytes(" is not a positive number"),0]]]]]],
       caml_string_of_jsbytes("%s.%s: digits=%d is not a positive number")],
     _VX_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,
          0,
          [11,
           caml_string_of_jsbytes(": decimals="),
           [4,0,0,0,[11,caml_string_of_jsbytes(" is negative"),0]]]]]],
       caml_string_of_jsbytes("%s.%s: decimals=%d is negative")],
     _VW_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,0,[11,caml_string_of_jsbytes(": invalid decimal character"),0]]]],
       caml_string_of_jsbytes("%s.%s: invalid decimal character")],
     _VV_=
      [0,
       [2,
        0,
        [12,
         46,
         [2,0,[11,caml_string_of_jsbytes(": overflow reading int63"),0]]]],
       caml_string_of_jsbytes("%s.%s: overflow reading int63")],
     _VT_=[0,caml_string_of_jsbytes("Toward_negative_infinity")],
     _VU_=[0,caml_string_of_jsbytes("Toward_positive_infinity")],
     _WV_=
      [0,
       [11,caml_string_of_jsbytes("Invalid month: "),[2,0,0]],
       caml_string_of_jsbytes("Invalid month: %s")],
     _WT_=
      [0,
       [11,caml_string_of_jsbytes("Month.of_int_exn "),[4,0,0,0,0]],
       caml_string_of_jsbytes("Month.of_int_exn %d")],
     _WS_=[0,0],
     _WR_=[0,0],
     _WQ_=[0,0],
     _WP_=[0,0],
     _WO_=[0,0],
     _WN_=[0,0],
     _WM_=[0,0],
     _WL_=[0,0],
     _WK_=[0,0],
     _WJ_=[0,0],
     _WI_=[0,0],
     _WH_=[0,0],
     _V6_=[0,caml_string_of_jsbytes("Jan")],
     _V7_=[0,caml_string_of_jsbytes("Feb")],
     _V8_=[0,caml_string_of_jsbytes("Mar")],
     _V9_=[0,caml_string_of_jsbytes("Apr")],
     _V__=[0,caml_string_of_jsbytes("May")],
     _V$_=[0,caml_string_of_jsbytes("Jun")],
     _Wa_=[0,caml_string_of_jsbytes("Jul")],
     _Wb_=[0,caml_string_of_jsbytes("Aug")],
     _Wc_=[0,caml_string_of_jsbytes("Sep")],
     _Wd_=[0,caml_string_of_jsbytes("Oct")],
     _We_=[0,caml_string_of_jsbytes("Nov")],
     _Wf_=[0,caml_string_of_jsbytes("Dec")],
     _Xf_=[0,caml_string_of_jsbytes("upper_bound")],
     _Xg_=[0,caml_string_of_jsbytes("lower_bound")],
     _Xb_=[0,caml_string_of_jsbytes("core/src/date0.ml"),421,6],
     _W4_=[0,caml_string_of_jsbytes("core/src/date0.ml"),236,10],
     _W3_=
      [0,
       [11,
        caml_string_of_jsbytes("Date.of_string ("),
        [2,0,[11,caml_string_of_jsbytes("): "),[2,0,0]]]],
       caml_string_of_jsbytes("Date.of_string (%s): %s")],
     _WY_=
      [11,
       caml_string_of_jsbytes(" ~d:"),
       [4,0,0,0,[11,caml_string_of_jsbytes(" error: "),[2,0,0]]]],
     _WZ_=[0,0],
     _W0_=
      [0,
       [4,0,0,0,[11,caml_string_of_jsbytes(" day month violation"),0]],
       caml_string_of_jsbytes("%d day month violation")],
     _Xc_=[0,0,3,2,5,0,3,5,1,4,6,2,4],
     _Xd_=[0,0,31,59,90,120,151,181,212,243,273,304,334],
     _Xe_=[0,0,31,60,91,121,152,182,213,244,274,305,335],
     _Xr_=
      [0,
       [11,
        caml_string_of_jsbytes("Ofday.of_string_iso8601_extended: "),
        [2,0,0]],
       caml_string_of_jsbytes("Ofday.of_string_iso8601_extended: %s")],
     _Xq_=
      [0,
       [11,caml_string_of_jsbytes("invalid second: "),[4,3,0,0,0]],
       caml_string_of_jsbytes("invalid second: %i")],
     _Xp_=[0,caml_string_of_jsbytes("core/src/ofday_helpers.ml"),76,22],
     _Xl_=
      [0,
       [0,[11,caml_string_of_jsbytes(".M."),0]],
       caml_string_of_jsbytes("%c.M.")],
     _Xm_=
      [0,
       [0,[11,caml_string_of_jsbytes(".M"),0]],
       caml_string_of_jsbytes("%c.M")],
     _Xn_=[0,[0,[12,77,0]],caml_string_of_jsbytes("%cM")],
     _Xo_=[0,[0,0],caml_string_of_jsbytes("%c")],
     _$2_=
      [0,
       caml_string_of_jsbytes
        ("core/src/float_with_finite_only_serialization.ml.Stable.V1.Nan_or_inf")],
     _$3_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _aau_=[0,[8,[0,0,4],0,[0,6],[12,37,0]],caml_string_of_jsbytes("%.6G%%")],
     _aaj_=
      [0,
       [11,
        caml_string_of_jsbytes("Percent.of_string: must end in x, "),
        [12,37,[11,caml_string_of_jsbytes(", or bp: "),[2,0,0]]]],
       caml_string_of_jsbytes
        ("Percent.of_string: must end in x, %%, or bp: %s")],
     _aai_=[0,[8,[0,0,4],0,[0,6],0],caml_string_of_jsbytes("%.6G")],
     _aaa_=[0,[8,[0,0,5],0,0,0],caml_string_of_jsbytes("%F")],
     _aab_=[0,[8,[0,0,1],0,1,0],caml_string_of_jsbytes("%.*e")],
     _aac_=[0,[8,[0,0,2],0,1,0],caml_string_of_jsbytes("%.*E")],
     _aad_=[0,[8,[0,0,0],0,1,0],caml_string_of_jsbytes("%.*f")],
     _aae_=[0,[8,[0,0,3],0,1,0],caml_string_of_jsbytes("%.*g")],
     _aaf_=[0,[8,[0,0,4],0,1,0],caml_string_of_jsbytes("%.*G")],
     _aag_=[0,[8,[0,0,6],0,1,0],caml_string_of_jsbytes("%.*h")],
     _aah_=[0,[8,[0,0,7],0,1,0],caml_string_of_jsbytes("%.*H")],
     _$4_=[0,caml_string_of_jsbytes("Ocaml")],
     _$5_=[0,caml_string_of_jsbytes("Exponent")],
     _$6_=[0,caml_string_of_jsbytes("Exponent_E")],
     _$7_=[0,caml_string_of_jsbytes("Decimal")],
     _$8_=[0,caml_string_of_jsbytes("Compact")],
     _$9_=[0,caml_string_of_jsbytes("Compact_E")],
     _$__=[0,caml_string_of_jsbytes("Hex")],
     _$$_=[0,caml_string_of_jsbytes("Hex_E")],
     _aaz_=
      [0,
       [4,3,0,0,[11,caml_string_of_jsbytes("ns"),0]],
       caml_string_of_jsbytes("%ins")],
     _aay_=[0,caml_string_of_jsbytes("core/src/span_helpers.ml"),15,2],
     _aaw_=
      [0,
       [4,0,0,0,[12,46,[4,0,0,0,[2,0,0]]]],
       caml_string_of_jsbytes("%d.%d%s")],
     _aax_=[0,[4,0,0,0,[2,0,0]],caml_string_of_jsbytes("%d%s")],
     _aav_=[0,caml_string_of_jsbytes("percent")],
     _aa4_=[0,[8,[0,0,3],0,1,0],caml_string_of_jsbytes("%.*g")],
     _aa3_=[0,[8,[0,0,3],0,[0,1],0],caml_string_of_jsbytes("%.1g")],
     _aaY_=[0,2],
     _aa1_=[0,1],
     _aa2_=[0,0],
     _aa0_=[0,3],
     _aaZ_=[0,4],
     _aaX_=[0,[8,[0,0,3],0,0,[2,0,0]],caml_string_of_jsbytes("%g%s")],
     _aaV_=
      [0,
       caml_string_of_jsbytes
        ("core/src/span_float.ml.Stable.V1.T_of_sexp_expected_atom_but_got")],
     _aaW_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _aaS_=
      [0,caml_string_of_jsbytes("core/src/span_float.ml.Stable.V1.T_of_sexp")],
     _aaT_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _aaQ_=
      [0,
       [11,
        caml_string_of_jsbytes("Span.of_string could not parse '"),
        [2,0,[11,caml_string_of_jsbytes("': "),[2,0,0]]]],
       caml_string_of_jsbytes("Span.of_string could not parse '%s': %s")],
     _aaB_=[0,caml_string_of_jsbytes("ns")],
     _aaC_=[0,caml_string_of_jsbytes("us")],
     _aaD_=[0,caml_string_of_jsbytes("ms")],
     _aaE_=[0,caml_string_of_jsbytes("sec")],
     _aaF_=[0,caml_string_of_jsbytes("min")],
     _aaG_=[0,caml_string_of_jsbytes("hr")],
     _aaH_=[0,caml_string_of_jsbytes("sign")],
     _aaA_=[0,caml_string_of_jsbytes("core/src/span_float.ml"),8,6],
     _abu_=
      [0,
       [11,
        caml_string_of_jsbytes("Ofday.of_string_iso8601_extended("),
        [2,0,[11,caml_string_of_jsbytes("): "),[2,0,0]]]],
       caml_string_of_jsbytes("Ofday.of_string_iso8601_extended(%s): %s")],
     _abs_=[0,caml_string_of_jsbytes("core/src/ofday_float.ml"),151,6],
     _abp_=[0,0],
     _abq_=[0,0],
     _abr_=[0,0],
     _abo_=[0,0],
     _abY_=
      [0,
       [11,
        caml_string_of_jsbytes("unable to lookup Zone "),
        [2,
         0,
         [11,caml_string_of_jsbytes(".  Try using Core.Time.of_string"),0]]],
       caml_string_of_jsbytes
        ("unable to lookup Zone %s.  Try using Core.Time.of_string")],
     _abW_=[0,caml_string_of_jsbytes("core/src/time.ml.Make.Time_of_string")],
     _abX_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _abV_=
      [0,
       [11,caml_string_of_jsbytes("invalid offset "),[2,0,0]],
       caml_string_of_jsbytes("invalid offset %s")],
     _abU_=
      [0,
       [11,caml_string_of_jsbytes("no space in date_ofday string: "),[2,0,0]],
       caml_string_of_jsbytes("no space in date_ofday string: %s")],
     _abT_=
      [0,
       [11,
        caml_string_of_jsbytes("Time.of_filename_string ("),
        [2,0,[11,caml_string_of_jsbytes("): "),[2,0,0]]]],
       caml_string_of_jsbytes("Time.of_filename_string (%s): %s")],
     _abS_=[0,caml_string_of_jsbytes("T")],
     _abR_=[0,caml_string_of_jsbytes(" ")],
     _abQ_=[0,caml_string_of_jsbytes(" ")],
     _abP_=[0,caml_string_of_jsbytes("")],
     _abL_=[0,caml_string_of_jsbytes("zone")],
     _abM_=[0,caml_string_of_jsbytes("span_since_epoch")],
     _abN_=[0,caml_string_of_jsbytes("core/src/time.ml"),262,10],
     _abO_=[0,caml_string_of_jsbytes("core/src/time.ml"),271,10],
     _abK_=[0,[0,caml_string_of_jsbytes("core/src/time.ml"),212,7320,7400]],
     _ab1_=[0,caml_string_of_jsbytes("core/src/time_float0.ml"),117,3604,3616],
     _ab2_=[0,759637122],
     _ab0_=
      [0,
       [11,
        caml_string_of_jsbytes("Time.gmtime: out of range ("),
        [8,[0,0,0],0,0,[12,41,0]]],
       caml_string_of_jsbytes("Time.gmtime: out of range (%f)")],
     _ab7_=
      [0,
       [11,
        caml_string_of_jsbytes("Time.Stable.With_utc.V2.t_of_sexp: "),
        [2,0,0]],
       caml_string_of_jsbytes("Time.Stable.With_utc.V2.t_of_sexp: %s")],
     _acU_=[0,caml_string_of_jsbytes("core/src/span_ns.ml"),792,27579,27591],
     _acR_=[0,caml_string_of_jsbytes("max_value_for_1us_rounding")],
     _acS_=[0,caml_string_of_jsbytes("min_value_for_1us_rounding")],
     _acT_=[0,caml_string_of_jsbytes("t")],
     _acr_=[0,caml_string_of_jsbytes("reason")],
     _acs_=[0,caml_string_of_jsbytes("string")],
     _acq_=[0,caml_string_of_jsbytes("core/src/span_ns.ml"),405,14],
     _acp_=[0,caml_string_of_jsbytes("core/src/span_ns.ml"),422,14],
     _aco_=[0,caml_string_of_jsbytes("core/src/span_ns.ml"),214,12],
     _acn_=[0,caml_string_of_jsbytes("core/src/span_ns.ml"),207,17],
     _acc_=[0,caml_string_of_jsbytes("ns")],
     _acd_=[0,caml_string_of_jsbytes("us")],
     _ace_=[0,caml_string_of_jsbytes("ms")],
     _acf_=[0,caml_string_of_jsbytes("sec")],
     _acg_=[0,caml_string_of_jsbytes("min")],
     _ach_=[0,caml_string_of_jsbytes("hr")],
     _aci_=[0,caml_string_of_jsbytes("sign")],
     _acb_=[0,caml_string_of_jsbytes("core/src/span_ns.ml"),26,2],
     _adE_=
      [0,
       [11,
        caml_string_of_jsbytes("small_diff "),
        [2,0,[12,32,[2,0,[11,caml_string_of_jsbytes(" = "),[2,0,[12,10,0]]]]]]],
       caml_string_of_jsbytes("small_diff %s %s = %s\n")],
     _adF_=
      [0,
       [0,caml_string_of_jsbytes("12:00"),caml_string_of_jsbytes("12:05")],
       [0,
        [0,caml_string_of_jsbytes("12:58"),caml_string_of_jsbytes("13:02")],
        [0,
         [0,caml_string_of_jsbytes("00:52"),caml_string_of_jsbytes("23:19")],
         [0,
          [0,caml_string_of_jsbytes("00:00"),caml_string_of_jsbytes("24:00")],
          0]]]],
     _adB_=[0,caml_string_of_jsbytes("stop")],
     _adC_=[0,caml_string_of_jsbytes("start")],
     _acZ_=[0,0],
     _ac0_=[0,0],
     _ac1_=[0,0],
     _adH_=
      [1,
       caml_string_of_jsbytes
        ("\n    small_diff 12:00:00.000000000 12:05:00.000000000 = -5m\n    small_diff 12:05:00.000000000 12:00:00.000000000 = 5m\n    small_diff 12:58:00.000000000 13:02:00.000000000 = -4m\n    small_diff 13:02:00.000000000 12:58:00.000000000 = 4m\n    small_diff 00:52:00.000000000 23:19:00.000000000 = -27m\n    small_diff 23:19:00.000000000 00:52:00.000000000 = 27m\n    small_diff 00:00:00.000000000 24:00:00.000000000 = 0s\n    small_diff 24:00:00.000000000 00:00:00.000000000 = 0s ")],
     _adI_=[0,caml_string_of_jsbytes("")],
     _adK_=[0,caml_string_of_jsbytes("small_diff")],
     _aeS_=[0,1],
     _aeR_=
      [0,
       [11,
        caml_string_of_jsbytes("unable to lookup Zone "),
        [2,
         0,
         [11,caml_string_of_jsbytes(".  Try using Core.Time.of_string"),0]]],
       caml_string_of_jsbytes
        ("unable to lookup Zone %s.  Try using Core.Time.of_string")],
     _aeP_=
      [0,
       caml_string_of_jsbytes
        ("core/src/time_ns.ml.To_and_of_string.Time_ns_of_string")],
     _aeQ_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _aeN_=
      [0,
       [11,caml_string_of_jsbytes("invalid offset "),[2,0,0]],
       caml_string_of_jsbytes("invalid offset %s")],
     _aeM_=
      [0,
       [11,caml_string_of_jsbytes("no space in date_ofday string: "),[2,0,0]],
       caml_string_of_jsbytes("no space in date_ofday string: %s")],
     _aeL_=
      [0,
       [11,
        caml_string_of_jsbytes("Time.of_filename_string ("),
        [2,0,[11,caml_string_of_jsbytes("): "),[2,0,0]]]],
       caml_string_of_jsbytes("Time.of_filename_string (%s): %s")],
     _aeK_=[0,caml_string_of_jsbytes("T")],
     _aeJ_=[0,caml_string_of_jsbytes(" ")],
     _aeI_=[0,caml_string_of_jsbytes(" ")],
     _aeH_=[0,caml_string_of_jsbytes("")],
     _aeD_=[0,caml_string_of_jsbytes("zone")],
     _aeE_=[0,caml_string_of_jsbytes("span_since_epoch")],
     _aeF_=[0,caml_string_of_jsbytes("core/src/time_ns.ml"),723,10],
     _aeG_=[0,caml_string_of_jsbytes("core/src/time_ns.ml"),732,10],
     _aee_=[0,caml_string_of_jsbytes("core/src/time_ns.ml"),279,8],
     _aed_=[0,caml_string_of_jsbytes("core/src/time_ns.ml"),261,10],
     _aec_=[0,caml_string_of_jsbytes("core/src/time_ns.ml"),273,19],
     _ad5_=[0,[12,46,[4,0,[0,2,1],0,0]],caml_string_of_jsbytes(".%01d")],
     _ad6_=[0,[12,46,[4,0,[0,2,2],0,0]],caml_string_of_jsbytes(".%02d")],
     _ad7_=[0,[12,46,[4,0,[0,2,3],0,0]],caml_string_of_jsbytes(".%03d")],
     _ad8_=[0,[12,46,[4,0,[0,2,4],0,0]],caml_string_of_jsbytes(".%04d")],
     _ad9_=[0,[12,46,[4,0,[0,2,5],0,0]],caml_string_of_jsbytes(".%05d")],
     _ad__=[0,[12,46,[4,0,[0,2,6],0,0]],caml_string_of_jsbytes(".%06d")],
     _ad$_=[0,[12,46,[4,0,[0,2,7],0,0]],caml_string_of_jsbytes(".%07d")],
     _aea_=[0,[12,46,[4,0,[0,2,8],0,0]],caml_string_of_jsbytes(".%08d")],
     _aeb_=[0,[12,46,[4,0,[0,2,9],0,0]],caml_string_of_jsbytes(".%09d")],
     _ad4_=[0,caml_string_of_jsbytes("core/src/time_ns.ml"),219,15],
     _ad3_=[0,caml_string_of_jsbytes("core/src/time_ns.ml"),208,8],
     _ad2_=
      [0,
       [4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,[12,58,[4,0,[0,2,2],0,0]]]]],
       caml_string_of_jsbytes("%02d:%02d:%02d")],
     _ad1_=[0,caml_string_of_jsbytes("core/src/time_ns.ml"),180,4],
     _ad0_=[0,caml_string_of_jsbytes("core/src/time_ns.ml"),122,3568,3578],
     _adZ_=[0,caml_string_of_jsbytes("core/src/time_ns.ml"),103,2999,3011],
     _afg_=[0,0],
     _aff_=
      [0,
       [11,
        caml_string_of_jsbytes("Substring.blit_from_"),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" len > substring length : "),
          [4,0,0,0,[11,caml_string_of_jsbytes(" > "),[4,0,0,0,0]]]]]],
       caml_string_of_jsbytes
        ("Substring.blit_from_%s len > substring length : %d > %d")],
     _agi_=[0,caml_string_of_jsbytes("COMMAND_OUTPUT_INSTALLATION_BASH")],
     _agj_=[0,caml_string_of_jsbytes("COMMAND_OUTPUT_HELP_SEXP")],
     _agk_=[0,caml_string_of_jsbytes("COMP_CWORD")],
     _agz_=[0,caml_string_of_jsbytes("first_arg")],
     _agA_=[0,caml_string_of_jsbytes("relative_to")],
     _agy_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Filename.to_absolute_exn called with a [relative_to] that is a relative path: "),
        [2,0,0]],
       caml_string_of_jsbytes
        ("Filename.to_absolute_exn called with a [relative_to] that is a relative path: %s")],
     _agx_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("Filename.concat called with an empty string as its first argument (second argument: "),
        [2,0,[12,41,0]]],
       caml_string_of_jsbytes
        ("Filename.concat called with an empty string as its first argument (second argument: %s)")],
     _amP_=[0,caml_string_of_jsbytes("Base")],
     _amQ_=[0,caml_string_of_jsbytes("Group")],
     _amR_=[0,caml_string_of_jsbytes("Exec")],
     _amS_=[0,caml_string_of_jsbytes("Lazy")],
     _amO_=[0,0,0],
     _amK_=
      [1,caml_string_of_jsbytes("core/src/command_shape.ml.Fully_forced.t")],
     _amL_=[0,caml_string_of_jsbytes("Basic")],
     _amM_=[0,caml_string_of_jsbytes("Group")],
     _amN_=[0,caml_string_of_jsbytes("Exec")],
     _amx_=[0,caml_string_of_jsbytes("child_subcommand")],
     _amy_=[0,caml_string_of_jsbytes("path_to_exe")],
     _amz_=[0,caml_string_of_jsbytes("working_dir")],
     _amA_=[0,caml_string_of_jsbytes("readme")],
     _amB_=[0,caml_string_of_jsbytes("summary")],
     _amw_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),723,2],
     _amd_=[0,caml_string_of_jsbytes("subcommands")],
     _ame_=[0,caml_string_of_jsbytes("readme")],
     _amf_=[0,caml_string_of_jsbytes("summary")],
     _amc_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),700,2],
     _alV_=[0,caml_string_of_jsbytes("flags")],
     _alW_=[0,caml_string_of_jsbytes("anons")],
     _alX_=[0,caml_string_of_jsbytes("readme")],
     _alY_=[0,caml_string_of_jsbytes("summary")],
     _alU_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),667,2],
     _alB_=[0,caml_string_of_jsbytes(", ")],
     _alC_=
      [12,
       32,
       [2,0,[11,caml_string_of_jsbytes(" is an ambiguous prefix: "),[2,0,0]]]],
     _alD_=[0,0],
     _alE_=[12,32,[2,0,0]],
     _alF_=[0,0],
     _alA_=[0,caml_string_of_jsbytes(", ")],
     _aly_=[0,[0,caml_string_of_jsbytes("\n"),0],0],
     _alv_=[0,caml_string_of_jsbytes("aliases")],
     _alw_=[0,caml_string_of_jsbytes("doc")],
     _alx_=[0,caml_string_of_jsbytes("name")],
     _alu_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),478,2],
     _alb_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),466,6],
     _ala_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),467,6],
     _ak9_=[0,caml_string_of_jsbytes("at_most_once")],
     _ak__=[0,caml_string_of_jsbytes("at_least_once")],
     _ak3_=[0,caml_string_of_jsbytes("Usage")],
     _ak4_=[0,caml_string_of_jsbytes("Grammar")],
     _ak2_=[1,caml_string_of_jsbytes("core/src/command_shape.ml.Anons.t")],
     _akR_=
      [1,caml_string_of_jsbytes("core/src/command_shape.ml.Anons.Grammar.t")],
     _akS_=[0,caml_string_of_jsbytes("Zero")],
     _akT_=[0,caml_string_of_jsbytes("One")],
     _akU_=[0,caml_string_of_jsbytes("Many")],
     _akV_=[0,caml_string_of_jsbytes("Maybe")],
     _akW_=[0,caml_string_of_jsbytes("Concat")],
     _akX_=[0,caml_string_of_jsbytes("Ad_hoc")],
     _akF_=
      [0,caml_string_of_jsbytes("core/src/command_shape.ml"),389,10455,10473],
     _akv_=[0,caml_string_of_jsbytes("V1")],
     _akw_=[0,caml_string_of_jsbytes("V2")],
     _akx_=[0,caml_string_of_jsbytes("V3")],
     _akh_=[0,caml_string_of_jsbytes("Base")],
     _aki_=[0,caml_string_of_jsbytes("Group")],
     _akj_=[0,caml_string_of_jsbytes("Exec")],
     _aj3_=[0,caml_string_of_jsbytes("Base")],
     _aj4_=[0,caml_string_of_jsbytes("Group")],
     _aj5_=[0,caml_string_of_jsbytes("Exec")],
     _ajM_=[0,caml_string_of_jsbytes("Base")],
     _ajN_=[0,caml_string_of_jsbytes("Group")],
     _ajO_=[0,caml_string_of_jsbytes("Exec")],
     _ajP_=[0,caml_string_of_jsbytes("Lazy")],
     _ajs_=
      [1,
       caml_string_of_jsbytes
        ("core/src/command_shape.ml.Stable.Fully_forced.V1.t")],
     _ajt_=[0,caml_string_of_jsbytes("Basic")],
     _aju_=[0,caml_string_of_jsbytes("Group")],
     _ajv_=[0,caml_string_of_jsbytes("Exec")],
     _ajh_=[0,caml_string_of_jsbytes("path_to_exe")],
     _aji_=[0,caml_string_of_jsbytes("readme")],
     _ajj_=[0,caml_string_of_jsbytes("summary")],
     _ajg_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),245,6],
     _ai9_=[0,caml_string_of_jsbytes("path_to_exe")],
     _ai__=[0,caml_string_of_jsbytes("working_dir")],
     _ai$_=[0,caml_string_of_jsbytes("readme")],
     _aja_=[0,caml_string_of_jsbytes("summary")],
     _ai8_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),215,6],
     _aiR_=[0,caml_string_of_jsbytes("child_subcommand")],
     _aiS_=[0,caml_string_of_jsbytes("path_to_exe")],
     _aiT_=[0,caml_string_of_jsbytes("working_dir")],
     _aiU_=[0,caml_string_of_jsbytes("readme")],
     _aiV_=[0,caml_string_of_jsbytes("summary")],
     _aiQ_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),194,6],
     _aiA_=[0,caml_string_of_jsbytes("subcommands")],
     _aiB_=[0,caml_string_of_jsbytes("readme")],
     _aiC_=[0,caml_string_of_jsbytes("summary")],
     _aiz_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),162,6],
     _aif_=[0,caml_string_of_jsbytes("subcommands")],
     _aig_=[0,caml_string_of_jsbytes("readme")],
     _aih_=[0,caml_string_of_jsbytes("summary")],
     _aie_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),140,6],
     _ahW_=[0,caml_string_of_jsbytes("flags")],
     _ahX_=[0,caml_string_of_jsbytes("usage")],
     _ahY_=[0,caml_string_of_jsbytes("readme")],
     _ahZ_=[0,caml_string_of_jsbytes("summary")],
     _ahV_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),108,6],
     _ahE_=[0,caml_string_of_jsbytes("flags")],
     _ahF_=[0,caml_string_of_jsbytes("anons")],
     _ahG_=[0,caml_string_of_jsbytes("readme")],
     _ahH_=[0,caml_string_of_jsbytes("summary")],
     _ahD_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),93,6],
     _ahn_=[0,caml_string_of_jsbytes("aliases")],
     _aho_=[0,caml_string_of_jsbytes("doc")],
     _ahp_=[0,caml_string_of_jsbytes("name")],
     _ahm_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),75,6],
     _ag__=[0,caml_string_of_jsbytes("Usage")],
     _ag$_=[0,caml_string_of_jsbytes("Grammar")],
     _ag9_=
      [1,
       caml_string_of_jsbytes("core/src/command_shape.ml.Stable.Anons.V2.t")],
     _ag0_=[0,caml_string_of_jsbytes("core/src/command_shape.ml"),23,535,570],
     _ag2_=
      [0,
       [11,
        caml_string_of_jsbytes("[("),
        [2,0,[11,caml_string_of_jsbytes(") ...]"),0]]],
       caml_string_of_jsbytes("[(%s) ...]")],
     _ag1_=
      [0,
       [12,91,[2,0,[11,caml_string_of_jsbytes(" ...]"),0]]],
       caml_string_of_jsbytes("[%s ...]")],
     _ag3_=[0,[12,91,[2,0,[12,93,0]]],caml_string_of_jsbytes("[%s]")],
     _ag4_=[0,caml_string_of_jsbytes(" ")],
     _agM_=
      [1,
       caml_string_of_jsbytes
        ("core/src/command_shape.ml.Stable.Anons.Grammar.V1.t")],
     _agN_=[0,caml_string_of_jsbytes("Zero")],
     _agO_=[0,caml_string_of_jsbytes("One")],
     _agP_=[0,caml_string_of_jsbytes("Many")],
     _agQ_=[0,caml_string_of_jsbytes("Maybe")],
     _agR_=[0,caml_string_of_jsbytes("Concat")],
     _agS_=[0,caml_string_of_jsbytes("Ad_hoc")],
     _agG_=[0,caml_string_of_jsbytes("Zero"),0],
     _agV_=[1,caml_string_of_jsbytes(" a17fd34ec213e508db450f6469f7fe99 ")],
     _agW_=[0,caml_string_of_jsbytes("")],
     _ahc_=[1,caml_string_of_jsbytes(" 081d9ec167903f8f8c49cbf8e3fb3a66 ")],
     _ahd_=[0,caml_string_of_jsbytes("")],
     _ahs_=[1,caml_string_of_jsbytes(" bd8d6fb7a662d2c0b5e0d2026c6d2d21 ")],
     _aht_=[0,caml_string_of_jsbytes("")],
     _ahK_=[1,caml_string_of_jsbytes(" 8faac1e8d9deb0baaa56ac8ebf85b498 ")],
     _ahL_=[0,caml_string_of_jsbytes("")],
     _ah0_=
      [0,
       [0,
        caml_string_of_jsbytes
         ("Dummy_type_because_we_cannot_digest_type_constructors_only_concrete_types"),
        0],
       0],
     _aik_=[1,caml_string_of_jsbytes(" 2cc3eeb58d12d8fe4400009e592d7827 ")],
     _ail_=[0,caml_string_of_jsbytes("")],
     _aiF_=[1,caml_string_of_jsbytes(" 2cc3eeb58d12d8fe4400009e592d7827 ")],
     _aiG_=[0,caml_string_of_jsbytes("")],
     _aiY_=[1,caml_string_of_jsbytes(" c0c8256e9238cdd8f2ec1f8785e02ae0 ")],
     _aiZ_=[0,caml_string_of_jsbytes("")],
     _ajy_=[1,caml_string_of_jsbytes(" 981154ef3919437c6c822619882841d4 ")],
     _ajz_=[0,caml_string_of_jsbytes("")],
     _ajS_=[1,caml_string_of_jsbytes(" d3c375548f1a43c58c71e814c04ba36a ")],
     _ajT_=[0,caml_string_of_jsbytes("")],
     _aj8_=[1,caml_string_of_jsbytes(" 598d4b41ef435bc69a4886bdba0f8689 ")],
     _aj9_=[0,caml_string_of_jsbytes("")],
     _akm_=[1,caml_string_of_jsbytes(" 70d20b5432ffab77a385b02b04031d2e ")],
     _akn_=[0,caml_string_of_jsbytes("")],
     _akA_=[1,caml_string_of_jsbytes(" 796fbf006deb25159171637c2a510bf4 ")],
     _akB_=[0,caml_string_of_jsbytes("")],
     _akL_=[0,caml_string_of_jsbytes("Zero"),0],
     _ald_=
      [1,
       caml_string_of_jsbytes
        ('\n        (((at_least_once false) (at_most_once false)) "[name] ...")\n        (((at_least_once true) (at_most_once false)) "name ...")\n        (((at_least_once false) (at_most_once true)) [name])\n        (((at_least_once true) (at_most_once true)) name) ')],
     _ale_=[0,caml_string_of_jsbytes("")],
     _alg_=[0,caml_string_of_jsbytes("to_help_string")],
     _anl_=
      [0,
       [11,
        caml_string_of_jsbytes("Host_and_port.of_string: bad port: "),
        [2,0,0]],
       caml_string_of_jsbytes("Host_and_port.of_string: bad port: %s")],
     _ank_=
      [0,
       [11,caml_string_of_jsbytes("Host_and_port.of_string: "),[2,0,0]],
       caml_string_of_jsbytes("Host_and_port.of_string: %s")],
     _anj_=[0,[2,0,[12,58,[4,0,0,0,0]]],caml_string_of_jsbytes("%s:%d")],
     _anc_=
      [1,
       caml_string_of_jsbytes
        ("\n                  957990f0fc4161fb874e66872550fb40\n                  957990f0fc4161fb874e66872550fb40 ")],
     _and_=[0,caml_string_of_jsbytes("")],
     _anf_=[0,caml_string_of_jsbytes("stable")],
     _anV_=
      [0,
       caml_string_of_jsbytes
        ("core/src/pid.ml.Stable.V1.Without_containers.Pid_must_be_positive")],
     _anW_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _ao4_=[0,caml_string_of_jsbytes("core/src/fdeque.ml"),329,14],
     _aoM_=[0,0,0],
     _aoL_=[0,0,0],
     _aoK_=[0,caml_string_of_jsbytes("core/src/fdeque.ml"),25,2],
     _aoJ_=[0,caml_string_of_jsbytes("core/src/fdeque.ml"),26,2],
     _aoH_=[0,caml_string_of_jsbytes("core/src/fdeque.ml.Empty")],
     _aoI_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _apk_=[0,caml_string_of_jsbytes("core/src/set_once.ml"),106,2319,2354],
     _apj_=[0,caml_string_of_jsbytes("at")],
     _apg_=[0,0],
     _aph_=[0,caml_string_of_jsbytes("previously_set_at")],
     _api_=[0,caml_string_of_jsbytes("setting_at")],
     _apf_=[0,caml_string_of_jsbytes("core/src/set_once.ml"),67,1326,1367],
     _apd_=[0,caml_string_of_jsbytes("set_at")],
     _ape_=[0,caml_string_of_jsbytes("value")],
     _apb_=[0,caml_string_of_jsbytes("core/src/set_once.ml"),20,377,449],
     _aqK_=[0,caml_string_of_jsbytes("=== flags ===")],
     _aqT_=
      [0,
       [11,caml_string_of_jsbytes("missing subcommand for command "),[2,0,0]],
       caml_string_of_jsbytes("missing subcommand for command %s")],
     _aqU_=[0,caml_string_of_jsbytes(" ")],
     _aqR_=[0,[2,0,[12,10,[10,0]]],caml_string_of_jsbytes("%s\n%!")],
     _aqS_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _aqQ_=[0,caml_string_of_jsbytes(""),0],
     _aqP_=[0,caml_string_of_jsbytes("core/src/command.ml"),2627,81347,81361],
     _aqN_=
      [0,
       [11,caml_string_of_jsbytes("_jsautocom_"),[2,0,0]],
       caml_string_of_jsbytes("_jsautocom_%s")],
     _aqO_=
      [0,
       [11,
        caml_string_of_jsbytes("function "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" {\n  export COMP_CWORD\n  COMP_WORDS[0]="),
          [2,
           0,
           [11,
            caml_string_of_jsbytes
             ('\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS['),
            [17,
             0,
             [11,
              caml_string_of_jsbytes
               ('}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS['),
              [17,
               0,
               [11,
                caml_string_of_jsbytes('}")\n  fi\n}\ncomplete -F '),
                [2,0,partial$1]]]]]]]]]],
       caml_string_of_jsbytes
        ('function %s {\n  export COMP_CWORD\n  COMP_WORDS[0]=%s\n  if type readarray > /dev/null\n  then readarray -t COMPREPLY < <("${COMP_WORDS[@]}")\n  else IFS="\n" read -d "" -A COMPREPLY < <("${COMP_WORDS[@]}")\n  fi\n}\ncomplete -F %s %s\n%!')],
     _aqM_=[0,caml_string_of_jsbytes("core/src/command.ml"),2564,21],
     _aqL_=
      [0,
       [11,
        caml_string_of_jsbytes("unknown subcommand "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" for command "),
          [2,0,[11,caml_string_of_jsbytes(": "),[2,0,0]]]]]],
       caml_string_of_jsbytes("unknown subcommand %s for command %s: %s")],
     _aqJ_=[0,caml_string_of_jsbytes(" SUBCOMMAND"),0],
     _aqH_=
      [0,
       [11,caml_string_of_jsbytes("unexpected subcommand "),[3,0,0]],
       caml_string_of_jsbytes("unexpected subcommand %S")],
     _aqI_=
      [0,
       [11,caml_string_of_jsbytes("unknown subcommand "),[3,0,0]],
       caml_string_of_jsbytes("unknown subcommand %S")],
     _aqF_=[0,caml_string_of_jsbytes("stderr")],
     _aqG_=[0,caml_string_of_jsbytes("stdout")],
     _aqE_=[0,caml_string_of_jsbytes("info")],
     _aqD_=[0,caml_string_of_jsbytes("core/src/command.ml"),2366,71469,71511],
     _aqC_=[0,caml_string_of_jsbytes("core/src/command.ml"),2226,26],
     _aqw_=
      [1,
       caml_string_of_jsbytes
        ("\n        hg://some/path_0xdeadbeef\n        ssh://a/path_8badf00d ")],
     _aqx_=[0,caml_string_of_jsbytes("")],
     _aqy_=
      [0,
       caml_string_of_jsbytes("print version where multiple repos are used")],
     _aqz_=[1,caml_string_of_jsbytes(" some build info ")],
     _aqA_=[0,caml_string_of_jsbytes("")],
     _aqB_=[0,caml_string_of_jsbytes("print build info")],
     _aqs_=[0,caml_string_of_jsbytes("--version"),0],
     _aqt_=[0,caml_string_of_jsbytes("--build-info"),0],
     _aqu_=[0,caml_string_of_jsbytes("\n")],
     _aqr_=
      [0,
       [11,caml_string_of_jsbytes("multiple subcommands named "),[2,0,0]],
       caml_string_of_jsbytes("multiple subcommands named %s")],
     _aqp_=[0,caml_string_of_jsbytes("--help"),0],
     _aqq_=[0,caml_string_of_jsbytes("-?"),0],
     _aqo_=
      [0,
       [11,
        caml_string_of_jsbytes(" print "),
        [2,0,[11,caml_string_of_jsbytes(" and exit"),0]]],
       caml_string_of_jsbytes(" print %s and exit")],
     _aqn_=
      [0,
       [11,
        caml_string_of_jsbytes("there is already a "),
        [2,0,[11,caml_string_of_jsbytes(" named "),[2,0,0]]]],
       caml_string_of_jsbytes("there is already a %s named %s")],
     _aqk_=[0,0],
     _aql_=[0,0],
     _aqm_=[0,caml_string_of_jsbytes("core/src/command.ml"),1795,53982,54000],
     _aqj_=[0,caml_string_of_jsbytes("\n  ")],
     _aqh_=[0,caml_string_of_jsbytes("core/src/command.ml"),1761,52897,52917],
     _aqe_=[0,0],
     _aqc_=[12,41,0],
     _aqd_=[0,0],
     _ap9_=[0,caml_string_of_jsbytes("\n\n")],
     _ap8_=
      [0,
       [11,caml_string_of_jsbytes("missing argument for flag "),[2,0,0]],
       caml_string_of_jsbytes("missing argument for flag %s")],
     _ap7_=[0,[2,0,0],caml_string_of_jsbytes("%s")],
     _ap6_=[0,caml_string_of_jsbytes("\n")],
     _ap5_=
      [0,
       [11,caml_string_of_jsbytes("multiple flags named "),[2,0,0]],
       caml_string_of_jsbytes("multiple flags named %s")],
     _ap1_=[11,caml_string_of_jsbytes(" name: "),[3,0,0]],
     _ap2_=[0,0],
     _ap3_=
      [11,caml_string_of_jsbytes(" name (contains whitespace): "),[3,0,0]],
     _ap4_=[0,0],
     _ap0_=
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           caml_string_of_jsbytes
            (" contains an underscore. Use a dash instead."),
           0]]]],
       caml_string_of_jsbytes
        ("%s %s contains an underscore. Use a dash instead.")],
     _apY_=
      [0,
       [11,
        caml_string_of_jsbytes("argument name "),
        [3,0,[11,caml_string_of_jsbytes(" has surrounding whitespace"),0]]],
       caml_string_of_jsbytes("argument name %S has surrounding whitespace")],
     _apZ_=[0,60,[0,62,[0,91,[0,93,[0,40,[0,41,[0,123,[0,125,0]]]]]]]],
     _apV_=
      [0,
       [11,caml_string_of_jsbytes("missing anonymous argument: "),[2,0,0]],
       caml_string_of_jsbytes("missing anonymous argument: %s")],
     _apW_=
      [0,
       [11,caml_string_of_jsbytes("too many anonymous arguments"),0],
       caml_string_of_jsbytes("too many anonymous arguments")],
     _apX_=[3,0],
     _apU_=
      [0,
       [11,caml_string_of_jsbytes("missing anonymous argument: "),[2,0,0]],
       caml_string_of_jsbytes("missing anonymous argument: %s")],
     _apS_=[3,0],
     _apT_=
      [0,
       [11,
        caml_string_of_jsbytes("failed to parse "),
        [2,0,[11,caml_string_of_jsbytes(" value "),[3,0,[12,10,[2,0,0]]]]]],
       caml_string_of_jsbytes("failed to parse %s value %S\n%s")],
     _apP_=[0,caml_string_of_jsbytes("core/src/command.ml"),851,11],
     _apR_=
      [0,
       [11,
        caml_string_of_jsbytes("the grammar "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           (" for anonymous arguments is not supported because there is the possibility for arguments ("),
          [2,
           0,
           [11,
            caml_string_of_jsbytes
             (") following a variable number of arguments ("),
            [2,
             0,
             [11,
              caml_string_of_jsbytes
               (").  Supporting such grammars would complicate the implementation significantly."),
              0]]]]]]],
       caml_string_of_jsbytes
        ("the grammar %s for anonymous arguments is not supported because there is the possibility for arguments (%s) following a variable number of arguments (%s).  Supporting such grammars would complicate the implementation significantly.")],
     _apQ_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("iteration of variable-length grammars such as "),
        [2,0,[11,caml_string_of_jsbytes(" is disallowed"),0]]],
       caml_string_of_jsbytes
        ("iteration of variable-length grammars such as %s is disallowed")],
     _apO_=[0,caml_string_of_jsbytes("core/src/command.ml"),802,11],
     _apN_=
      [0,
       [11,caml_string_of_jsbytes("missing required flag: "),[2,0,0]],
       caml_string_of_jsbytes("missing required flag: %s")],
     _apM_=[0,caml_string_of_jsbytes("_")],
     _apL_=[0,caml_string_of_jsbytes("_")],
     _apK_=
      [0,
       [11,
        caml_string_of_jsbytes("flag "),
        [2,0,[11,caml_string_of_jsbytes(" passed more than once"),0]]],
       caml_string_of_jsbytes("flag %s passed more than once")],
     _apJ_=[0,caml_string_of_jsbytes("_")],
     _apI_=
      [0,
       [11,caml_string_of_jsbytes("missing required flag: "),[2,0,0]],
       caml_string_of_jsbytes("missing required flag: %s")],
     _apH_=[0,caml_string_of_jsbytes("_")],
     _apG_=
      [0,
       [11,
        caml_string_of_jsbytes("flag "),
        [2,0,[11,caml_string_of_jsbytes(" passed more than once"),0]]],
       caml_string_of_jsbytes("flag %s passed more than once")],
     _apF_=
      [0,
       [11,
        caml_string_of_jsbytes("failed to parse "),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(" value "),
          [3,0,[11,caml_string_of_jsbytes(".\n"),[2,0,0]]]]]],
       caml_string_of_jsbytes("failed to parse %s value %S.\n%s")],
     _apD_=
      [0,
       [11,caml_string_of_jsbytes("multiple flags or aliases named "),[2,0,0]],
       caml_string_of_jsbytes("multiple flags or aliases named %s")],
     _apE_=
      [0,
       [11,caml_string_of_jsbytes("multiple flags named "),[2,0,0]],
       caml_string_of_jsbytes("multiple flags named %s")],
     _apC_=
      [0,
       [11,caml_string_of_jsbytes('same as "'),[2,0,[12,34,0]]],
       caml_string_of_jsbytes('same as "%s"')],
     _apB_=
      [0,
       [11,caml_string_of_jsbytes('same as "'),[2,0,[12,34,0]]],
       caml_string_of_jsbytes('same as "%s"')],
     _apA_=[0,caml_string_of_jsbytes("_")],
     _apz_=[0,caml_string_of_jsbytes(",")],
     _apw_=[0,caml_string_of_jsbytes(",")],
     _apx_=
      [0,
       [11,
        caml_string_of_jsbytes("valid arguments"),
        [2,0,[11,caml_string_of_jsbytes(": {"),[2,0,[12,125,0]]]]],
       caml_string_of_jsbytes("valid arguments%s: {%s}")],
     _apu_=[0,caml_string_of_jsbytes(", ")],
     _apv_=[0,caml_string_of_jsbytes(")"),0],
     _apt_=[0,caml_string_of_jsbytes("duplicate_keys")],
     _aps_=[0,caml_string_of_jsbytes("\n\n")],
     _apr_=[0,caml_string_of_jsbytes(" ")],
     _apo_=[0,caml_string_of_jsbytes("status")],
     _app_=[0,caml_string_of_jsbytes("core/src/command.ml.Exit_called")],
     _apq_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _apy_=[0,0],
     _aqi_=[0,caml_string_of_jsbytes(",")],
     _aqY_=[0,0],
     _aqX_=[0,0],
     _aqW_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_string_of_jsbytes("' is not a valid "),
          [2,0,[11,caml_string_of_jsbytes(" because "),[2,0,0]]]]]],
       caml_string_of_jsbytes("'%s' is not a valid %s because %s")],
     _ask_=[0,caml_string_of_jsbytes("Expected")],
     _asl_=[0,caml_string_of_jsbytes("But_got")],
     _asm_=
      [0,caml_string_of_jsbytes("core/src/stable_unit_test.ml"),158,5836,5854],
     _ash_=[0,caml_string_of_jsbytes("Expected")],
     _asi_=[0,caml_string_of_jsbytes("But_got")],
     _asj_=
      [0,caml_string_of_jsbytes("core/src/stable_unit_test.ml"),148,5351,5367],
     _ase_=[0,caml_string_of_jsbytes("Expected")],
     _asf_=[0,caml_string_of_jsbytes("But_got")],
     _asg_=
      [0,caml_string_of_jsbytes("core/src/stable_unit_test.ml"),111,3968,3986],
     _asb_=[0,caml_string_of_jsbytes("Expected")],
     _asc_=[0,caml_string_of_jsbytes("But_got")],
     _asa_=
      [0,caml_string_of_jsbytes("core/src/stable_unit_test.ml"),91,3135,3153],
     _asd_=
      [0,caml_string_of_jsbytes("core/src/stable_unit_test.ml"),101,3521,3537],
     _ar9_=[0,caml_string_of_jsbytes("Expected")],
     _ar__=[0,caml_string_of_jsbytes("But_got")],
     _ar6_=[0,caml_string_of_jsbytes("Expected")],
     _ar7_=[0,caml_string_of_jsbytes("But_got")],
     _ar8_=
      [0,caml_string_of_jsbytes("core/src/stable_unit_test.ml"),58,2006,2022],
     _ar$_=
      [0,caml_string_of_jsbytes("core/src/stable_unit_test.ml"),66,2340,2356],
     _ar3_=[0,caml_string_of_jsbytes("Expected")],
     _ar4_=[0,caml_string_of_jsbytes("But_got")],
     _ar5_=
      [0,caml_string_of_jsbytes("core/src/stable_unit_test.ml"),41,1360,1381],
     _ar2_=[0,caml_string_of_jsbytes("Expected")],
     _ar0_=[0,caml_string_of_jsbytes("Expected")],
     _ar1_=[0,caml_string_of_jsbytes("But_got")],
     _arZ_=[0,0],
     _atv_=[0,0],
     _atw_=[0,1],
     _atl_=[0,caml_string_of_jsbytes("true")],
     _atm_=[0,caml_string_of_jsbytes("false")],
     _atn_=[0,caml_string_of_jsbytes("and")],
     _ato_=[0,caml_string_of_jsbytes("or")],
     _atp_=[0,caml_string_of_jsbytes("not")],
     _atq_=[0,caml_string_of_jsbytes("if")],
     _atk_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" expects three arguments, "),
         [4,0,0,0,[11,caml_string_of_jsbytes(" found"),0]]]],
       caml_string_of_jsbytes("%s expects three arguments, %d found")],
     _atj_=
      [0,
       [2,
        0,
        [11,
         caml_string_of_jsbytes(" expects one argument, "),
         [4,0,0,0,[11,caml_string_of_jsbytes(" found"),0]]]],
       caml_string_of_jsbytes("%s expects one argument, %d found")],
     _atc_=[0,caml_string_of_jsbytes("True")],
     _atd_=[0,caml_string_of_jsbytes("False")],
     _ate_=[0,caml_string_of_jsbytes("And")],
     _atf_=[0,caml_string_of_jsbytes("Or")],
     _atg_=[0,caml_string_of_jsbytes("Not")],
     _ath_=[0,caml_string_of_jsbytes("If")],
     _ati_=[0,caml_string_of_jsbytes("Base")],
     _atb_=[0,caml_string_of_jsbytes("core/src/blang.ml"),59,24],
     _as__=[1,caml_string_of_jsbytes("core/src/blang.ml.T.t")],
     _as$_=[1,0],
     _ata_=[1,1],
     _as3_=[0,caml_string_of_jsbytes("False"),0],
     _as4_=[0,caml_string_of_jsbytes("True"),0],
     _atr_=[1,[0,caml_string_of_jsbytes("false"),0]],
     _ats_=[1,[0,caml_string_of_jsbytes("true"),0]],
     _att_=[6,caml_string_of_jsbytes("a")],
     _atu_=[0,caml_string_of_jsbytes("a"),0],
     _auT_=[0,0],
     _auU_=[0,0],
     _auV_=[0,0],
     _auW_=[0,0],
     _auX_=[0,0],
     _auY_=[0,0],
     _auZ_=[0,0],
     _au0_=[0,0],
     _au1_=[0,0],
     _au2_=[0,0],
     _au3_=[0,0],
     _au4_=[0,0],
     _au5_=[0,0],
     _auO_=[0,[8,[0,0,0],0,[0,0],[0,0]],caml_string_of_jsbytes("%.0f%c")],
     _auP_=[0,[8,[0,0,0],0,[0,1],[0,0]],caml_string_of_jsbytes("%.1f%c")],
     _auQ_=[0,[8,[0,0,0],0,[0,2],[0,0]],caml_string_of_jsbytes("%.2f%c")],
     _auR_=[0,[4,0,0,0,[12,66,0]],caml_string_of_jsbytes("%dB")],
     _auN_=[0,caml_string_of_jsbytes("Bytes")],
     _at2_=[0,0],
     _at3_=[0,0],
     _at4_=[0,0],
     _at5_=[0,0],
     _at6_=[0,0],
     _at7_=[0,0],
     _at8_=[0,0],
     _at9_=[0,0],
     _at__=[0,0],
     _atY_=[0,caml_string_of_jsbytes("Gigabytes")],
     _atX_=[0,caml_string_of_jsbytes("Kilobytes")],
     _atZ_=[0,caml_string_of_jsbytes("Bytes")],
     _at0_=[0,caml_string_of_jsbytes("Megabytes")],
     _atK_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           ("' passed to Byte_units.of_string - too short"),
          0]]],
       caml_string_of_jsbytes
        ("'%s' passed to Byte_units.of_string - too short")],
     _atL_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_string_of_jsbytes("' passed to Byte_units.of_string - "),
          [2,
           0,
           [11,caml_string_of_jsbytes(" cannot be converted to float "),0]]]]],
       caml_string_of_jsbytes
        ("'%s' passed to Byte_units.of_string - %s cannot be converted to float ")],
     _atM_=
      [0,
       [12,
        39,
        [2,
         0,
         [11,
          caml_string_of_jsbytes
           ("' passed to Byte_units.of_string - illegal extension "),
          [0,0]]]],
       caml_string_of_jsbytes
        ("'%s' passed to Byte_units.of_string - illegal extension %c")],
     _aua_=[1,caml_string_of_jsbytes(" 1000b ")],
     _aub_=[0,caml_string_of_jsbytes("")],
     _aue_=[1,caml_string_of_jsbytes(" 1023b ")],
     _auf_=[0,caml_string_of_jsbytes("")],
     _aui_=[1,caml_string_of_jsbytes(" 1k ")],
     _auj_=[0,caml_string_of_jsbytes("")],
     _aum_=[1,caml_string_of_jsbytes(" 1.00098k ")],
     _aun_=[0,caml_string_of_jsbytes("")],
     _auq_=[1,caml_string_of_jsbytes(" 1.46484k ")],
     _aur_=[0,caml_string_of_jsbytes("")],
     _auu_=[1,caml_string_of_jsbytes(" 9.76562k ")],
     _auv_=[0,caml_string_of_jsbytes("")],
     _auy_=[1,caml_string_of_jsbytes(" 97.6562k ")],
     _auz_=[0,caml_string_of_jsbytes("")],
     _auC_=[1,caml_string_of_jsbytes(" 976.562k ")],
     _auD_=[0,caml_string_of_jsbytes("")],
     _auG_=[1,caml_string_of_jsbytes(" 9.53674m ")],
     _auH_=[0,caml_string_of_jsbytes("")],
     _auJ_=[0,caml_string_of_jsbytes("no-js"),0],
     _au7_=[1,caml_string_of_jsbytes(" 1000B ")],
     _au8_=[0,caml_string_of_jsbytes("")],
     _au$_=[1,caml_string_of_jsbytes(" 1023B ")],
     _ava_=[0,caml_string_of_jsbytes("")],
     _avd_=[1,caml_string_of_jsbytes(" 1.00K ")],
     _ave_=[0,caml_string_of_jsbytes("")],
     _avh_=[1,caml_string_of_jsbytes(" 1.00K ")],
     _avi_=[0,caml_string_of_jsbytes("")],
     _avl_=[1,caml_string_of_jsbytes(" 9.77K ")],
     _avm_=[0,caml_string_of_jsbytes("")],
     _avp_=[1,caml_string_of_jsbytes(" 97.7K ")],
     _avq_=[0,caml_string_of_jsbytes("")],
     _avt_=[1,caml_string_of_jsbytes(" 977K ")],
     _avu_=[0,caml_string_of_jsbytes("")],
     _avx_=[1,caml_string_of_jsbytes(" 9.54M ")],
     _avy_=[0,caml_string_of_jsbytes("")],
     _avB_=[1,caml_string_of_jsbytes(" 9.31G ")],
     _avC_=[0,caml_string_of_jsbytes("")],
     _avF_=[1,caml_string_of_jsbytes(" 931G ")],
     _avG_=[0,caml_string_of_jsbytes("")],
     _avJ_=[1,caml_string_of_jsbytes(" 90.9T ")],
     _avK_=[0,caml_string_of_jsbytes("")],
     _avN_=[1,caml_string_of_jsbytes(" 88.8P ")],
     _avO_=[0,caml_string_of_jsbytes("")],
     _avR_=[1,caml_string_of_jsbytes(" 2.60E ")],
     _avS_=[0,caml_string_of_jsbytes("")],
     _ayu_=[0,caml_string_of_jsbytes("backtrace")],
     _ayv_=[0,caml_string_of_jsbytes("is_major")],
     _ayw_=[0,caml_string_of_jsbytes("size_in_words")],
     _ays_=[0,caml_string_of_jsbytes("minor_words_allocated")],
     _ayt_=[0,caml_string_of_jsbytes("major_words_allocated")],
     _ayr_=[0,1000000],
     _ayq_=
      [0,
       [11,
        caml_string_of_jsbytes("Gc.Control."),
        [2,
         0,
         [11,
          caml_string_of_jsbytes(": "),
          [2,0,[11,caml_string_of_jsbytes(" -> "),[2,0,0]]]]]],
       caml_string_of_jsbytes("Gc.Control.%s: %s -> %s")],
     _ayn_=[0,caml_string_of_jsbytes("Next_fit")],
     _ayo_=[0,caml_string_of_jsbytes("First_fit")],
     _ayp_=[0,caml_string_of_jsbytes("Best_fit")],
     _axS_=[0,caml_string_of_jsbytes("custom_minor_max_size")],
     _axT_=[0,caml_string_of_jsbytes("custom_minor_ratio")],
     _axU_=[0,caml_string_of_jsbytes("custom_major_ratio")],
     _axV_=[0,caml_string_of_jsbytes("window_size")],
     _axW_=[0,caml_string_of_jsbytes("allocation_policy")],
     _axX_=[0,caml_string_of_jsbytes("stack_limit")],
     _axY_=[0,caml_string_of_jsbytes("max_overhead")],
     _axZ_=[0,caml_string_of_jsbytes("verbose")],
     _ax0_=[0,caml_string_of_jsbytes("space_overhead")],
     _ax1_=[0,caml_string_of_jsbytes("major_heap_increment")],
     _ax2_=[0,caml_string_of_jsbytes("minor_heap_size")],
     _aw5_=[0,caml_string_of_jsbytes("forced_major_collections")],
     _aw6_=[0,caml_string_of_jsbytes("stack_size")],
     _aw7_=[0,caml_string_of_jsbytes("top_heap_words")],
     _aw8_=[0,caml_string_of_jsbytes("compactions")],
     _aw9_=[0,caml_string_of_jsbytes("fragments")],
     _aw__=[0,caml_string_of_jsbytes("largest_free")],
     _aw$_=[0,caml_string_of_jsbytes("free_blocks")],
     _axa_=[0,caml_string_of_jsbytes("free_words")],
     _axb_=[0,caml_string_of_jsbytes("live_blocks")],
     _axc_=[0,caml_string_of_jsbytes("live_words")],
     _axd_=[0,caml_string_of_jsbytes("heap_chunks")],
     _axe_=[0,caml_string_of_jsbytes("heap_words")],
     _axf_=[0,caml_string_of_jsbytes("major_collections")],
     _axg_=[0,caml_string_of_jsbytes("minor_collections")],
     _axh_=[0,caml_string_of_jsbytes("major_words")],
     _axi_=[0,caml_string_of_jsbytes("promoted_words")],
     _axj_=[0,caml_string_of_jsbytes("minor_words")],
     _awU_=[0,caml_string_of_jsbytes("custom_minor_max_size")],
     _awV_=[0,caml_string_of_jsbytes("custom_minor_ratio")],
     _awW_=[0,caml_string_of_jsbytes("custom_major_ratio")],
     _awX_=[0,caml_string_of_jsbytes("window_size")],
     _awY_=[0,caml_string_of_jsbytes("allocation_policy")],
     _awZ_=[0,caml_string_of_jsbytes("stack_limit")],
     _aw0_=[0,caml_string_of_jsbytes("max_overhead")],
     _aw1_=[0,caml_string_of_jsbytes("verbose")],
     _aw2_=[0,caml_string_of_jsbytes("space_overhead")],
     _aw3_=[0,caml_string_of_jsbytes("major_heap_increment")],
     _aw4_=[0,caml_string_of_jsbytes("minor_heap_size")],
     _awT_=[0,caml_string_of_jsbytes("core/src/gc.ml"),116,6],
     _awy_=[0,caml_string_of_jsbytes("forced_major_collections")],
     _awz_=[0,caml_string_of_jsbytes("stack_size")],
     _awA_=[0,caml_string_of_jsbytes("top_heap_words")],
     _awB_=[0,caml_string_of_jsbytes("compactions")],
     _awC_=[0,caml_string_of_jsbytes("fragments")],
     _awD_=[0,caml_string_of_jsbytes("largest_free")],
     _awE_=[0,caml_string_of_jsbytes("free_blocks")],
     _awF_=[0,caml_string_of_jsbytes("free_words")],
     _awG_=[0,caml_string_of_jsbytes("live_blocks")],
     _awH_=[0,caml_string_of_jsbytes("live_words")],
     _awI_=[0,caml_string_of_jsbytes("heap_chunks")],
     _awJ_=[0,caml_string_of_jsbytes("heap_words")],
     _awK_=[0,caml_string_of_jsbytes("major_collections")],
     _awL_=[0,caml_string_of_jsbytes("minor_collections")],
     _awM_=[0,caml_string_of_jsbytes("major_words")],
     _awN_=[0,caml_string_of_jsbytes("promoted_words")],
     _awO_=[0,caml_string_of_jsbytes("minor_words")],
     _awx_=[0,caml_string_of_jsbytes("core/src/gc.ml"),87,6],
     _awd_=[0,caml_string_of_jsbytes("stack_size")],
     _awe_=[0,caml_string_of_jsbytes("top_heap_words")],
     _awf_=[0,caml_string_of_jsbytes("compactions")],
     _awg_=[0,caml_string_of_jsbytes("fragments")],
     _awh_=[0,caml_string_of_jsbytes("largest_free")],
     _awi_=[0,caml_string_of_jsbytes("free_blocks")],
     _awj_=[0,caml_string_of_jsbytes("free_words")],
     _awk_=[0,caml_string_of_jsbytes("live_blocks")],
     _awl_=[0,caml_string_of_jsbytes("live_words")],
     _awm_=[0,caml_string_of_jsbytes("heap_chunks")],
     _awn_=[0,caml_string_of_jsbytes("heap_words")],
     _awo_=[0,caml_string_of_jsbytes("major_collections")],
     _awp_=[0,caml_string_of_jsbytes("minor_collections")],
     _awq_=[0,caml_string_of_jsbytes("major_words")],
     _awr_=[0,caml_string_of_jsbytes("promoted_words")],
     _aws_=[0,caml_string_of_jsbytes("minor_words")],
     _awc_=[0,caml_string_of_jsbytes("core/src/gc.ml"),65,6],
     _av7_=[0,caml_string_of_jsbytes("Next_fit")],
     _av8_=[0,caml_string_of_jsbytes("First_fit")],
     _av9_=[0,caml_string_of_jsbytes("Best_fit")],
     _av6_=
      [1,
       caml_string_of_jsbytes("core/src/gc.ml.Stable.Allocation_policy.V1.t")],
     _av1_=
      [0,
       [0,caml_string_of_jsbytes("Next_fit"),0],
       [0,
        [0,caml_string_of_jsbytes("First_fit"),0],
        [0,[0,caml_string_of_jsbytes("Best_fit"),0],0]]],
     _aAd_=[0,caml_string_of_jsbytes("core/src/signal.ml.Expected_atom")],
     _aAe_=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _az9_=
      [0,
       caml_string_of_jsbytes
        ("core/src/signal.ml.Invalid_signal_mnemonic_or_number")],
     _az__=[0,caml_string_of_jsbytes("_none_"),0,-1],
     _az4_=[0,caml_string_of_jsbytes("Stop")],
     _az5_=[0,caml_string_of_jsbytes("Terminate")],
     _az6_=[0,caml_string_of_jsbytes("Dump_core")],
     _az7_=[0,caml_string_of_jsbytes("Ignore")],
     _az3_=[0,caml_string_of_jsbytes("Continue")],
     _az$_=[0,1],
     _aAa_=[0,1],
     _aAb_=[0,1],
     _aAv_=[1,0],
     _aAw_=[1,1],
     _aAx_=[1,2],
     _aAy_=[1,3],
     _aAu_=[1,caml_string_of_jsbytes("core/src/sign_or_nan.ml.Stable.V1.t")],
     _aAl_=[0,caml_string_of_jsbytes("Neg")],
     _aAm_=[0,caml_string_of_jsbytes("Zero")],
     _aAn_=[0,caml_string_of_jsbytes("Pos")],
     _aAo_=[0,caml_string_of_jsbytes("Nan")],
     _aAp_=
      [0,
       [0,caml_string_of_jsbytes("Neg"),0],
       [0,
        [0,caml_string_of_jsbytes("Zero"),0],
        [0,
         [0,caml_string_of_jsbytes("Pos"),0],
         [0,[0,caml_string_of_jsbytes("Nan"),0],0]]]],
     _aBG_=
      [0,
       [11,
        caml_string_of_jsbytes("Memo.lru: max_cache_size of "),
        [4,3,0,0,[11,caml_string_of_jsbytes(" <= 0"),0]]],
       caml_string_of_jsbytes("Memo.lru: max_cache_size of %i <= 0")],
     _aBF_=[0,0],
     _aC2_=
      [0,
       [11,
        caml_string_of_jsbytes("invalid index: "),
        [4,
         3,
         0,
         0,
         [11,
          caml_string_of_jsbytes(" for array with indices ("),
          [4,3,0,0,[12,44,[4,3,0,0,[12,41,0]]]]]]],
       caml_string_of_jsbytes
        ("invalid index: %i for array with indices (%i,%i)")],
     _aC1_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(": Deque.t is empty"),0]],
       caml_string_of_jsbytes("%s: Deque.t is empty")],
     _aC0_=
      [0,
       [11,
        caml_string_of_jsbytes("Deque.drop:  negative input ("),
        [4,0,0,0,[12,41,0]]],
       caml_string_of_jsbytes("Deque.drop:  negative input (%d)")],
     _aCY_=[0,caml_string_of_jsbytes("core/src/deque.ml"),226,2],
     _aCZ_=[0,caml_string_of_jsbytes("core/src/deque.ml"),263,2],
     _aCL_=
      [0,
       [11,
        caml_string_of_jsbytes
         ("passed negative initial_length to Deque.create: "),
        [4,3,0,0,0]],
       caml_string_of_jsbytes
        ("passed negative initial_length to Deque.create: %i")],
     _aDd_=
      [0,
       [2,0,[11,caml_string_of_jsbytes(":\n"),0]],
       caml_string_of_jsbytes("%s:\n")],
     _aDe_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _aDf_=[0,[2,0,[12,10,0]],caml_string_of_jsbytes("%s\n")],
     _aDg_=[0,[10,0],caml_string_of_jsbytes("%!")],
     _aC__=[0,caml_string_of_jsbytes("")],
     _aC$_=[0,caml_string_of_jsbytes("core/src/debug.ml"),23,720,736],
     _aDa_=[0,caml_string_of_jsbytes("core/src/debug.ml"),33,1000,1016],
     _aDb_=[0,caml_string_of_jsbytes("-result"),0],
     _aDc_=[0,caml_string_of_jsbytes("")],
     _aC9_=[0,[2,0,[12,10,[10,0]]],caml_string_of_jsbytes("%s\n%!")],
     _aDB_=[0,caml_string_of_jsbytes(" ")],
     _aDC_=[0,caml_string_of_jsbytes("init")],
     _aDD_=[0,caml_string_of_jsbytes("len")],
     _aDE_=[0,caml_string_of_jsbytes("pos")],
     _aDF_=[0,caml_string_of_jsbytes("bstr")],
     _aDJ_=[0,caml_string_of_jsbytes("start")],
     _aDK_=[0,caml_string_of_jsbytes("closing")],
     _aDL_=[0,caml_string_of_jsbytes("opening")],
     _aDI_=[0,caml_string_of_jsbytes("core/src/bigbuffer.ml"),149,9],
     _aEA_=[0,caml_string_of_jsbytes("label")],
     _aEx_=[0,caml_string_of_jsbytes("max")],
     _aEy_=[0,caml_string_of_jsbytes("min")],
     _aEz_=[0,caml_string_of_jsbytes("index")];
    function bin_shape_sexp_opaque(a)
     {var _bHg_=caml_call1(Bin_prot_Shape[2][1],cst_sexp_opaque$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group,_bHg_),[0,a,0])}
    function bin_size_sexp_opaque(size_of_a){return size_of_a}
    function bin_write_sexp_opaque(write_a){return write_a}
    function bin_writer_sexp_opaque(bin_writer_a)
     {function _bHf_(v){return caml_call1(bin_writer_a[2],v)}
      return [0,function(v){return caml_call1(bin_writer_a[1],v)},_bHf_]}
    function bin_read_sexp_opaque(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[18],_en_,pos_ref[1])}
    function bin_read_sexp_opaque$0(of_a){return of_a}
    function bin_reader_sexp_opaque(bin_reader_a)
     {function _bHe_(buf,pos_ref,vtag)
       {return bin_read_sexp_opaque(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2(bin_reader_a[1],buf,pos_ref)},
              _bHe_]}
    function bin_sexp_opaque(bin_a)
     {var
       _bHc_=bin_reader_sexp_opaque(bin_a[3]),
       _bHd_=bin_writer_sexp_opaque(bin_a[2]);
      return [0,bin_shape_sexp_opaque(bin_a[1]),_bHd_,_bHc_]}
    function compare_sexp_opaque(cmp_a,a_001,b_002)
     {return caml_call2(cmp_a,a_001,b_002)}
    function hash_fold_sexp_opaque(hash_fold_a,hsv,arg)
     {return caml_call2(hash_fold_a,hsv,arg)}
    var
     Typename_of_sexp_opaque=caml_call1(Typerep_lib_Make_typename[2],[0,name]),
     typename_of_sexp_opaque=Typename_of_sexp_opaque[2];
    function typerep_of_sexp_opaque(of_a)
     {var name_of_sexp_opaque=caml_call1(Typename_of_sexp_opaque[1],of_a);
      return [9,[0,name_of_sexp_opaque,[0,of_a]]]}
    var
     _es_=Typerep_lib_Std[42],
     _ez_=Typerep_lib_Std[35],
     _eA_=Typerep_lib_Std[34],
     _eB_=Typerep_lib_Std[33],
     _eC_=Typerep_lib_Std[32],
     _eD_=Typerep_lib_Std[31],
     _eE_=Typerep_lib_Std[30],
     _eF_=Typerep_lib_Std[29],
     _eG_=Typerep_lib_Std[28],
     _eH_=Typerep_lib_Std[27],
     _eI_=Typerep_lib_Std[26],
     _eJ_=Typerep_lib_Std[25],
     _eM_=Typerep_lib_Std[22],
     _eN_=Typerep_lib_Std[21],
     _eO_=Typerep_lib_Std[20],
     _eQ_=Typerep_lib_Std[18],
     _eR_=Typerep_lib_Std[17],
     _eS_=Typerep_lib_Std[16],
     _eU_=Typerep_lib_Std[14],
     _eV_=Typerep_lib_Std[13],
     _eW_=Typerep_lib_Std[12],
     _eX_=Typerep_lib_Std[11],
     _eY_=Typerep_lib_Std[10],
     _eZ_=Typerep_lib_Std[9],
     _e0_=Typerep_lib_Std[8],
     _e1_=Typerep_lib_Std[7],
     _e2_=Typerep_lib_Std[6],
     _e3_=Typerep_lib_Std[5],
     _e4_=Typerep_lib_Std[4],
     _e5_=Typerep_lib_Std[3],
     _e6_=Typerep_lib_Std[2],
     _e7_=Base_With_return[1],
     _e8_=Ppx_inline_test_lib_Runtime[13],
     _eo_=Typerep_lib_Std[46],
     _ep_=Typerep_lib_Std[45],
     _eq_=Typerep_lib_Std[44],
     _er_=Typerep_lib_Std[43],
     _et_=Typerep_lib_Std[41],
     _eu_=Typerep_lib_Std[40],
     _ev_=Typerep_lib_Std[39],
     _ew_=Typerep_lib_Std[38],
     _ex_=Typerep_lib_Std[37],
     _ey_=Typerep_lib_Std[36],
     _eK_=Typerep_lib_Std[24],
     _eL_=Typerep_lib_Std[23],
     _eP_=Typerep_lib_Std[19],
     _eT_=Typerep_lib_Std[15];
    try
     {runtime.caml_sys_getenv(cst_TESTING_FRAMEWORK);
      var _aEF_=1,am_running_test=_aEF_}
    catch(_bHb_)
     {_bHb_ = caml_wrap_exception(_bHb_);
      if(_bHb_ !== include$0[8])throw _bHb_;
      var am_running_test=0}
    var
     Not_found=Stdlib[8],
     Not_found_s=Base[205],
     include$1=[0,Not_found,Not_found_s],
     _e__=include$1[2],
     _e9_=include$1[1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$1);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Import$0);
    var
     Core_Import=
      [0,
       _b_,
       _c_,
       _d_,
       _e_,
       _f_,
       _g_,
       _h_,
       _i_,
       _j_,
       _k_,
       _l_,
       _m_,
       _n_,
       _o_,
       _p_,
       _q_,
       _r_,
       _s_,
       _t_,
       sexp_of_t,
       _u_,
       _v_,
       _w_,
       _x_,
       _y_,
       _z_,
       _A_,
       compare,
       _B_,
       hash_fold_t,
       _C_,
       t_of_sexp,
       sexp_of_t$0,
       _D_,
       _E_,
       _F_,
       _G_,
       _H_,
       _I_,
       _J_,
       _K_,
       _L_,
       _M_,
       _N_,
       _O_,
       _P_,
       _Q_,
       _R_,
       _S_,
       _T_,
       _U_,
       _V_,
       _W_,
       _X_,
       _Y_,
       _Z_,
       ___,
       _$_,
       _aa_,
       _ab_,
       _ac_,
       _ad_,
       _ae_,
       _af_,
       _ag_,
       _ah_,
       _ai_,
       _aj_,
       _ak_,
       _al_,
       _am_,
       _an_,
       _ao_,
       _ap_,
       _aq_,
       _ar_,
       _as_,
       _at_,
       _au_,
       _av_,
       _aw_,
       _ax_,
       _ay_,
       _az_,
       _aA_,
       _aB_,
       _aC_,
       _aD_,
       _aE_,
       _aF_,
       _aG_,
       _aH_,
       _aI_,
       _aJ_,
       _aK_,
       _aL_,
       _aM_,
       _aN_,
       _aO_,
       _aP_,
       _aQ_,
       _aR_,
       _aS_,
       _aT_,
       _aU_,
       _aV_,
       _aW_,
       _aX_,
       _aY_,
       _aZ_,
       _a0_,
       _a1_,
       _a2_,
       _a3_,
       _a4_,
       _a5_,
       _a6_,
       _a7_,
       _a8_,
       _a9_,
       _a__,
       _a$_,
       _ba_,
       _bb_,
       _bc_,
       _bd_,
       _be_,
       bin_size_t,
       bin_size_t$0,
       bin_size_t$1,
       bin_size_bytes,
       bin_size_t$2,
       bin_size_t$3,
       bin_size_t$4,
       bin_size_t$5,
       bin_size_t$6,
       bin_size_t$7,
       _bf_,
       _bg_,
       _bh_,
       _bi_,
       _bj_,
       _bk_,
       _bl_,
       _bm_,
       _bn_,
       _bo_,
       _bp_,
       _bq_,
       _br_,
       _bs_,
       _bt_,
       _bu_,
       bin_size_t_frozen,
       _bv_,
       _bw_,
       _bx_,
       _by_,
       _bz_,
       _bA_,
       _bB_,
       _bC_,
       _bD_,
       _bE_,
       _bF_,
       _bG_,
       _bH_,
       _bI_,
       _bJ_,
       _bK_,
       _bL_,
       _bM_,
       _bN_,
       _bO_,
       bin_write_t,
       _bP_,
       bin_read_t,
       bin_read_t$0,
       _bQ_,
       _bR_,
       _bS_,
       bin_write_t$0,
       _bT_,
       bin_read_t$1,
       bin_read_t$2,
       _bU_,
       _bV_,
       _bW_,
       bin_write_t$1,
       _bX_,
       bin_read_t$3,
       bin_read_t$4,
       _bY_,
       _bZ_,
       _b0_,
       bin_write_bytes,
       _b1_,
       bin_read_bytes,
       bin_read_bytes$0,
       _b2_,
       _b3_,
       _b4_,
       bin_write_t$2,
       _b5_,
       bin_read_t$5,
       bin_read_t$6,
       _b6_,
       _b7_,
       _b8_,
       bin_write_t$3,
       _b9_,
       bin_read_t$7,
       bin_read_t$8,
       _b__,
       _b$_,
       _ca_,
       bin_write_t$4,
       _cb_,
       bin_read_t$9,
       bin_read_t$10,
       _cc_,
       _cd_,
       _ce_,
       _cf_,
       _cg_,
       _ch_,
       _ci_,
       _cj_,
       _ck_,
       _cl_,
       _cm_,
       _cn_,
       _co_,
       _cp_,
       _cq_,
       _cr_,
       bin_write_t$5,
       _cs_,
       bin_read_t$11,
       bin_read_t$12,
       _ct_,
       _cu_,
       _cv_,
       bin_write_t$6,
       _cw_,
       bin_read_t$13,
       bin_read_t$14,
       _cx_,
       _cy_,
       _cz_,
       bin_write_t$7,
       _cA_,
       bin_read_t$15,
       bin_read_t$16,
       _cB_,
       _cC_,
       _cD_,
       _cE_,
       _cF_,
       _cG_,
       _cH_,
       _cI_,
       _cJ_,
       _cK_,
       _cL_,
       _cM_,
       _cN_,
       _cO_,
       _cP_,
       _cQ_,
       _cR_,
       _cS_,
       _cT_,
       _cU_,
       _cV_,
       _cW_,
       _cX_,
       _cY_,
       _cZ_,
       _c0_,
       _c1_,
       _c2_,
       _c3_,
       _c4_,
       _c5_,
       _c6_,
       _c7_,
       _c8_,
       _c9_,
       _c__,
       _c$_,
       _da_,
       _db_,
       _dc_,
       _dd_,
       _de_,
       _df_,
       _dg_,
       _dh_,
       _di_,
       _dj_,
       _dk_,
       _dl_,
       _dm_,
       _dn_,
       _do_,
       bin_write_t_frozen,
       _dp_,
       bin_read_t_frozen,
       bin_read_t_frozen$0,
       _dq_,
       _dr_,
       _ds_,
       _dt_,
       _du_,
       _dv_,
       _dw_,
       _dx_,
       _dy_,
       _dz_,
       _dA_,
       _dB_,
       _dC_,
       _dD_,
       _dE_,
       _dF_,
       _dG_,
       _dH_,
       _dI_,
       _dJ_,
       _dK_,
       _dL_,
       _dM_,
       _dN_,
       _dO_,
       _dP_,
       _dQ_,
       _dR_,
       _dS_,
       _dT_,
       _dU_,
       _dV_,
       _dW_,
       _dX_,
       _dY_,
       _dZ_,
       _d0_,
       _d1_,
       _d2_,
       _d3_,
       _d4_,
       _d5_,
       include,
       _d6_,
       _d7_,
       _d8_,
       _d9_,
       _d__,
       _d$_,
       _ea_,
       _eb_,
       _ec_,
       _ed_,
       _ee_,
       _ef_,
       _eg_,
       bin_shape_sexp_opaque,
       bin_size_sexp_opaque,
       bin_write_sexp_opaque,
       bin_writer_sexp_opaque,
       bin_read_sexp_opaque$0,
       bin_read_sexp_opaque,
       bin_reader_sexp_opaque,
       bin_sexp_opaque,
       compare_sexp_opaque,
       hash_fold_sexp_opaque,
       typerep_of_sexp_opaque,
       typename_of_sexp_opaque,
       _e6_,
       _e5_,
       _e4_,
       _e3_,
       _e2_,
       _e1_,
       _e0_,
       _eZ_,
       _eY_,
       _eX_,
       _eW_,
       _eV_,
       _eU_,
       _eT_,
       _eS_,
       _eR_,
       _eQ_,
       _eP_,
       _eO_,
       _eN_,
       _eM_,
       _eL_,
       _eK_,
       _eJ_,
       _eI_,
       _eH_,
       _eG_,
       _eF_,
       _eE_,
       _eD_,
       _eC_,
       _eB_,
       _eA_,
       _ez_,
       _ey_,
       _ex_,
       _ew_,
       _ev_,
       _eu_,
       _et_,
       _es_,
       _er_,
       _eq_,
       _ep_,
       _eo_,
       _e7_,
       _e8_,
       am_running_test,
       include$1,
       _e9_,
       _e__];
    caml_register_global(5186,Core_Import,"Core__Import");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Sexpable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$2);
    caml_call1(Expect_test_collector[5][1],cst_core_src_sexpable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$3,cst$0);
    function V1(Sexpable,M)
     {function t_of_sexp(sexp)
       {var s=caml_call1(Sexpable[1],sexp);
        try
         {var _bHa_=caml_call1(M[2],s);return _bHa_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_eg_,exn,sexp)}}
      function sexp_of_t(t)
       {var _bG$_=caml_call1(M[1],t);return caml_call1(Sexpable[2],_bG$_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable=[0,V1];
    function V1$0(Sexpable,M)
     {function t_of_sexp(a_of_sexp,sexp)
       {var s=caml_call2(Sexpable[1],a_of_sexp,sexp);
        try
         {var _bG__=caml_call1(M[2],s);return _bG__}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_eg_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,t)
       {var _bG9_=caml_call1(M[1],t);
        return caml_call2(Sexpable[2],sexp_of_a,_bG9_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable1=[0,V1$0];
    function V1$1(Sexpable,M)
     {function t_of_sexp(a_of_sexp,b_of_sexp,sexp)
       {var s=caml_call3(Sexpable[1],a_of_sexp,b_of_sexp,sexp);
        try
         {var _bG8_=caml_call1(M[2],s);return _bG8_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_eg_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,sexp_of_b,t)
       {var _bG7_=caml_call1(M[1],t);
        return caml_call3(Sexpable[2],sexp_of_a,sexp_of_b,_bG7_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable2=[0,V1$1];
    function V1$2(Sexpable,M)
     {function t_of_sexp(a_of_sexp,b_of_sexp,c_of_sexp,sexp)
       {var s=caml_call4(Sexpable[1],a_of_sexp,b_of_sexp,c_of_sexp,sexp);
        try
         {var _bG6_=caml_call1(M[2],s);return _bG6_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_eg_,exn,sexp)}}
      function sexp_of_t(sexp_of_a,sexp_of_b,sexp_of_c,t)
       {var _bG5_=caml_call1(M[1],t);
        return caml_call4(Sexpable[2],sexp_of_a,sexp_of_b,sexp_of_c,_bG5_)}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_sexpable3=[0,V1$2];
    function V1$3(M)
     {function t_of_sexp(sexp)
       {if(0 === sexp[0])
         {var s=sexp[1];
          try
           {var _bG4_=caml_call1(M[1],s);return _bG4_}
          catch(exn)
           {exn = caml_wrap_exception(exn);return caml_call2(_eg_,exn,sexp)}}
        return caml_call2(_ef_,cst_Sexpable_Of_stringable_t_o,sexp)}
      function sexp_of_t(t){return [0,caml_call1(M[2],t)]}
      return [0,t_of_sexp,sexp_of_t]}
    var Of_stringable=[0,V1$3];
    function V1$4(M)
     {function of_string(x){return caml_call2(Sexplib_Conv[93],M[1],x)}
      function to_string(x){return caml_call2(Sexplib_Conv[78],M[2],x)}
      return [0,of_string,to_string]}
    var
     To_stringable=[0,V1$4],
     Stable=
      [0,
       Of_sexpable,
       Of_sexpable1,
       Of_sexpable2,
       Of_sexpable3,
       Of_stringable,
       To_stringable];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$4);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Sexpable$0);
    var _e$_=Stable[6][1],Core_Sexpable=[0,_e$_,Stable];
    caml_register_global(5187,Core_Sexpable,"Core__Sexpable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Binable_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$5);
    caml_call1(Expect_test_collector[5][1],cst_core_src_binable_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$6,cst$1);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$7);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Binable_intf$0);
    var Core_Binable_intf=[0];
    caml_register_global(5188,Core_Binable_intf,"Core__Binable_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Binable0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$8);
    caml_call1(Expect_test_collector[5][1],cst_core_src_binable0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$9,cst$2);
    var Minimal=include$2[1];
    function V1$5(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[11],[0,Binable,to_binable,of_binable])}
    function V2(Binable,M)
     {var to_binable=M[1],of_binable=M[2],caller_identity=M[3];
      return caml_call1
              (Bin_prot_Utils[7],
               [0,Binable,to_binable,of_binable,caller_identity])}
    var Of_binable=[0,V1$5,V2];
    function V1$6(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[12],[0,Binable,to_binable,of_binable])}
    function V2$0(Binable,M)
     {var to_binable=M[1],of_binable=M[2],caller_identity=M[3];
      return caml_call1
              (Bin_prot_Utils[8],
               [0,Binable,to_binable,of_binable,caller_identity])}
    var Of_binable1=[0,V1$6,V2$0];
    function V1$7(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[13],[0,Binable,to_binable,of_binable])}
    function V2$1(Binable,M)
     {var to_binable=M[1],of_binable=M[2],caller_identity=M[3];
      return caml_call1
              (Bin_prot_Utils[9],
               [0,Binable,to_binable,of_binable,caller_identity])}
    var Of_binable2=[0,V1$7,V2$1];
    function V1$8(Binable,M)
     {var to_binable=M[1],of_binable=M[2];
      return caml_call1(Bin_prot_Utils[14],[0,Binable,to_binable,of_binable])}
    function V2$2(Binable,M)
     {var to_binable=M[1],of_binable=M[2],caller_identity=M[3];
      return caml_call1
              (Bin_prot_Utils[10],
               [0,Binable,to_binable,of_binable,caller_identity])}
    var Of_binable3=[0,V1$8,V2$2];
    function V1$9(M)
     {var
       to_binable=M[2],
       of_binable=M[1],
       _bGW_=caml_call1(Bin_prot_Shape[2][1],cst_t),
       _bGX_=
        [0,
         [0,cst_Atom,[0,_bV_,0]],
         [0,
          [0,
           cst_List,
           [0,
            caml_call1
             (_c4_,caml_call1(caml_call1(Bin_prot_Shape[13],_bGW_),0)),
            0]],
          0]],
       _bGY_=caml_call1(Bin_prot_Shape[9],_bGX_),
       _bGZ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$0),0,_bGY_],0],
       _bG0_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_binable0_ml_85_10),
       group=caml_call2(Bin_prot_Shape[6],_bG0_,_bGZ_),
       _bG1_=caml_call1(Bin_prot_Shape[2][1],cst_t$1),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bG1_),0),
       _bGV_=[0,to_binable,of_binable];
      function bin_size_t(param)
       {if(0 === param[0])
         {var v1=param[1],_bG2_=caml_call1(bin_size_t$1,v1);
          return caml_call2(Bin_prot_Common[23],1,_bG2_)}
        var v1$0=param[1],_bG3_=caml_call2(_bm_,bin_size_t,v1$0);
        return caml_call2(Bin_prot_Common[23],1,_bG3_)}
      function bin_write_t(buf,pos,param)
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
          return caml_call3(bin_write_t$1,buf,pos$0,v1)}
        var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,1);
        return caml_call3(caml_call1(_c6_,bin_write_t),buf,pos$1,v1$0)}
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_core_src_binable0_ml_Stabl,
                 pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
        if(0 === match)
         {var arg_1=caml_call2(bin_read_t$3,buf,pos_ref);return [0,arg_1]}
        if(1 === match)
         {var arg_1$0=caml_call2(caml_call1(_c8_,bin_read_t$0),buf,pos_ref);
          return [1,arg_1$0]}
        return caml_call2(Bin_prot_Common[18],_fa_,pos_ref[1])}
      return caml_call1
              (caml_call1
                (Of_binable[1],
                 [0,
                  bin_shape_t,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t$0,
                  bin_read_t]),
               _bGV_)}
    function V2$3(M)
     {var
       to_binable=M[2],
       of_binable=M[1],
       caller_identity=M[3],
       _bGN_=caml_call1(Bin_prot_Shape[2][1],cst_t$2),
       _bGO_=
        [0,
         [0,cst_Atom$0,[0,_bV_,0]],
         [0,
          [0,
           cst_List$0,
           [0,
            caml_call1
             (_c4_,caml_call1(caml_call1(Bin_prot_Shape[13],_bGN_),0)),
            0]],
          0]],
       _bGP_=caml_call1(Bin_prot_Shape[9],_bGO_),
       _bGQ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$3),0,_bGP_],0],
       _bGR_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_binable0_ml_100_1),
       group=caml_call2(Bin_prot_Shape[6],_bGR_,_bGQ_),
       _bGS_=caml_call1(Bin_prot_Shape[2][1],cst_t$4),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bGS_),0),
       _bGM_=[0,to_binable,of_binable,caller_identity];
      function bin_size_t(param)
       {if(0 === param[0])
         {var v1=param[1],_bGT_=caml_call1(bin_size_t$1,v1);
          return caml_call2(Bin_prot_Common[23],1,_bGT_)}
        var v1$0=param[1],_bGU_=caml_call2(_bm_,bin_size_t,v1$0);
        return caml_call2(Bin_prot_Common[23],1,_bGU_)}
      function bin_write_t(buf,pos,param)
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
          return caml_call3(bin_write_t$1,buf,pos$0,v1)}
        var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,1);
        return caml_call3(caml_call1(_c6_,bin_write_t),buf,pos$1,v1$0)}
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_core_src_binable0_ml_Stabl$0,
                 pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
        if(0 === match)
         {var arg_1=caml_call2(bin_read_t$3,buf,pos_ref);return [0,arg_1]}
        if(1 === match)
         {var arg_1$0=caml_call2(caml_call1(_c8_,bin_read_t$0),buf,pos_ref);
          return [1,arg_1$0]}
        return caml_call2(Bin_prot_Common[18],_fb_,pos_ref[1])}
      return caml_call1
              (caml_call1
                (Of_binable[2],
                 [0,
                  bin_shape_t,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t$0,
                  bin_read_t]),
               _bGM_)}
    var Of_sexpable$0=[0,V1$9,V2$3];
    function V1$10(M)
     {var
       _bGG_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$5),0,_bV_],0],
       _bGH_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_binable0_ml_117_1),
       group=caml_call2(Bin_prot_Shape[6],_bGH_,_bGG_),
       _bGI_=caml_call1(Bin_prot_Shape[2][1],cst_t$6),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bGI_),0),
       Of_binable=[248,cst_Of_binable,caml_fresh_oo_id(0)],
       _bGJ_=M[2];
      function _bGK_(param)
       {if(param[1] === Of_binable)
         {var
           arg1_002=param[3],
           arg0_001=param[2],
           res0_003=caml_call1(_at_,arg0_001),
           res1_004=caml_call1(sexp_of_t,arg1_002);
          return [1,[0,_fc_,[0,res0_003,[0,res1_004,0]]]]}
        throw [0,Assert_failure,_fd_]}
      caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Of_binable,_bGK_);
      function of_binable(s)
       {try
         {var _bGL_=caml_call1(M[1],s);return _bGL_}
        catch(x){x = caml_wrap_exception(x);throw [0,Of_binable,s,x]}}
      return caml_call1
              (Bin_prot_Utils[11],
               [0,
                [0,
                 bin_shape_t,
                 bin_size_t$1,
                 bin_write_t$1,
                 bin_read_t$3,
                 bin_read_t$4],
                _bGJ_,
                of_binable])}
    function V2$4(M)
     {var
       _bGA_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$7),0,_bV_],0],
       _bGB_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_binable0_ml_136_1),
       group=caml_call2(Bin_prot_Shape[6],_bGB_,_bGA_),
       _bGC_=caml_call1(Bin_prot_Shape[2][1],cst_t$8),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bGC_),0),
       Of_binable=[248,cst_Of_binable$0,caml_fresh_oo_id(0)],
       _bGD_=M[2];
      function _bGE_(param)
       {if(param[1] === Of_binable)
         {var
           arg1_006=param[3],
           arg0_005=param[2],
           res0_007=caml_call1(_at_,arg0_005),
           res1_008=caml_call1(sexp_of_t,arg1_006);
          return [1,[0,_fe_,[0,res0_007,[0,res1_008,0]]]]}
        throw [0,Assert_failure,_ff_]}
      caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Of_binable,_bGE_);
      function of_binable(s)
       {try
         {var _bGF_=caml_call1(M[1],s);return _bGF_}
        catch(x){x = caml_wrap_exception(x);throw [0,Of_binable,s,x]}}
      var caller_identity=M[3];
      return caml_call1
              (Bin_prot_Utils[7],
               [0,
                [0,
                 bin_shape_t,
                 bin_size_t$1,
                 bin_write_t$1,
                 bin_read_t$3,
                 bin_read_t$4],
                _bGD_,
                of_binable,
                caller_identity])}
    var
     Of_stringable$0=[0,V1$10,V2$4],
     Stable$0=
      [0,
       Of_binable,
       Of_binable1,
       Of_binable2,
       Of_binable3,
       Of_sexpable$0,
       Of_stringable$0];
    function of_bigstring(m,bigstring)
     {var
       pos_ref=[0,0],
       t=caml_call2(m[3],bigstring,pos_ref),
       bigstring_length=runtime.caml_ba_dim_1(bigstring),
       match=pos_ref[1] === bigstring_length?1:0;
      if(! match)
       {var
         _bGy_=
          [0,[1,[0,_fg_,[0,caml_call1(sexp_of_t$0,bigstring_length),0]]],0],
         _bGz_=[0,[1,[0,_fh_,[0,caml_call1(sexp_of_t$0,pos_ref[1]),0]]],_bGy_];
        caml_call1
         (_a5_,
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_bin_read_t_did_not_consume),
            _bGz_]])}
      return t}
    function to_bigstring(opt,m,t)
     {if(opt)
       var sth=opt[1],prefix_with_length=sth;
      else
       var prefix_with_length=0;
      var
       t_length=caml_call1(m[1],t),
       bigstring_length=prefix_with_length?t_length + 8 | 0:t_length,
       bigstring=
        caml_call3
         (Stdlib_Bigarray[19][1],
          Stdlib_Bigarray[13],
          Stdlib_Bigarray[15],
          bigstring_length),
       pos=
        prefix_with_length
         ?caml_call3(Bin_prot_Write[34],bigstring,0,t_length)
         :0,
       pos$0=caml_call3(m[2],bigstring,pos,t);
      if(pos$0 === bigstring_length)return bigstring;
      throw [0,Assert_failure,_fi_]}
    function _fj_(param){return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst$3,
      0,
      cst_core_src_binable0_ml$0,
      212,
      0,
      425,
      _fj_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$10);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Binable0$0);
    var
     _fk_=Stable$0[6][1],
     _fl_=Stable$0[5][1],
     _fm_=Stable$0[6][2],
     _fn_=Stable$0[5][2],
     _fo_=Stable$0[4][1],
     _fp_=Stable$0[3][1],
     _fq_=Stable$0[2][1],
     _fr_=Stable$0[1][1],
     _fs_=Stable$0[4][2],
     _ft_=Stable$0[3][2],
     _fu_=Stable$0[2][2],
     _fv_=Stable$0[1][2],
     include$3=
      [0,
       Minimal,
       _fv_,
       _fu_,
       _ft_,
       _fs_,
       _fr_,
       _fq_,
       _fp_,
       _fo_,
       _fn_,
       _fm_,
       _fl_,
       _fk_,
       of_bigstring,
       to_bigstring,
       Stable$0];
    caml_register_global(5197,include$3,"Core__Binable0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Printf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$11);
    caml_call1(Expect_test_collector[5][1],cst_core_src_printf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$12,cst$4);
    var
     _fw_=include$4[1],
     _fx_=include$4[2],
     _fy_=include$4[3],
     _fz_=include$4[4],
     _fA_=include$4[5],
     failwithf=include$4[6],
     _fC_=Stdio_Out_channel[26],
     _fD_=Stdio_Out_channel[22],
     _fF_=Stdio_Out_channel[23],
     _fB_=include$4[7],
     _fE_=Stdio_Out_channel[27];
    function exitf(fmt)
     {return caml_call2
              (_fz_,
               function(s,param)
                {caml_call2(_fC_,_fG_,s);return caml_call1(Stdlib[99],1)},
               fmt)}
    function collect_to_string(f)
     {var buf=caml_call1(Stdlib_Buffer[1],64),done=[0,0];
      function printf(fmt)
       {return caml_call3
                (_fA_,
                 function(buf)
                  {var _bGx_=done[1];
                   return _bGx_
                           ?(caml_call1(Stdlib_Buffer[9],buf),
                             caml_call1
                              (_a5_,
                               caml_call1
                                (Sexplib0_Sexp_conv[7],cst_printf_used_after_collect_)))
                           :_bGx_},
                 buf,
                 fmt)}
      caml_call1(f,[0,printf]);
      done[1] = 1;
      var output=caml_call1(Stdlib_Buffer[2],buf);
      caml_call1(Stdlib_Buffer[9],buf);
      return output}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$13);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Printf$0);
    var
     Core_Printf=
      [0,
       _fw_,
       _fx_,
       _fy_,
       _fz_,
       _fA_,
       failwithf,
       _fB_,
       _fC_,
       _fD_,
       _fE_,
       _fF_,
       exitf,
       collect_to_string];
    caml_register_global(5201,Core_Printf,"Core__Printf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Perms);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$14);
    caml_call1(Expect_test_collector[5][1],cst_core_src_perms_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$15,cst$5);
    var
     _fH_=caml_call1(Bin_prot_Shape[9],0),
     _fI_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$9),0,_fH_],0],
     _fJ_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_9_4),
     group$0=caml_call2(Bin_prot_Shape[6],_fJ_,_fI_),
     _fK_=caml_call1(Bin_prot_Shape[2][1],cst_t$10),
     bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_fK_),0);
    function bin_size_t$8(v)
     {throw [0,Bin_prot_Common[17],cst_core_src_perms_ml_Types_No]}
    function bin_write_t$8(buf,param,v)
     {throw [0,Bin_prot_Common[17],cst_core_src_perms_ml_Types_No$0]}
    var bin_writer_t=[0,bin_size_t$8,bin_write_t$8];
    function bin_read_t$17(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_perms_ml_Types_No$1,
               pos_ref[1])}
    function bin_read_t$18(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],_fL_,pos_ref[1])}
    var
     bin_reader_t=[0,bin_read_t$18,bin_read_t$17],
     bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
    function compare$0(a_001,b_002)
     {return caml_call3(Ppx_compare_lib[2],cst_t$11,a_001,b_002)}
    function hash_fold_t$0(hsv,arg)
     {return caml_call1(_a3_,cst_hash_called_on_the_type_t_)}
    function hash(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bGw_=hash_fold_t$0(hsv,x);
      return caml_call1(Base_Hash[9],_bGw_)}
    function t_of_sexp$0(x_005)
     {return caml_call2(Sexplib0_Sexp_conv_error[26],error_source_004,x_005)}
    function sexp_of_t$1(param){throw [0,Assert_failure,_fM_]}
    var
     _fN_=caml_call1(Bin_prot_Shape[9],0),
     _fO_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$12),0,_fN_],0],
     _fP_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_15_4),
     group$1=caml_call2(Bin_prot_Shape[6],_fP_,_fO_),
     _fQ_=caml_call1(Bin_prot_Shape[2][1],cst_t$13),
     bin_shape_t$0=caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_fQ_),0);
    function bin_size_t$9(v)
     {throw [0,Bin_prot_Common[17],cst_core_src_perms_ml_Types_Me]}
    function bin_write_t$9(buf,param,v)
     {throw [0,Bin_prot_Common[17],cst_core_src_perms_ml_Types_Me$0]}
    var bin_writer_t$0=[0,bin_size_t$9,bin_write_t$9];
    function bin_read_t$19(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_perms_ml_Types_Me$1,
               pos_ref[1])}
    function bin_read_t$20(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],_fR_,pos_ref[1])}
    var
     bin_reader_t$0=[0,bin_read_t$20,bin_read_t$19],
     bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0];
    function compare$1(a_006,b_007)
     {return caml_call3(Ppx_compare_lib[2],cst_t$14,a_006,b_007)}
    function hash_fold_t$1(hsv,arg)
     {return caml_call1(_a3_,cst_hash_called_on_the_type_t_$0)}
    function hash$0(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bGv_=hash_fold_t$1(hsv,x);
      return caml_call1(Base_Hash[9],_bGv_)}
    function t_of_sexp$1(x_010)
     {return caml_call2(Sexplib0_Sexp_conv_error[26],error_source_009,x_010)}
    function sexp_of_t$2(param){throw [0,Assert_failure,_fS_]}
    var
     _fT_=[0,caml_call2(Bin_prot_Shape[10],cst_Read,0),0],
     _fU_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_21_13),
     _fV_=caml_call2(Bin_prot_Shape[12],_fU_,_fT_),
     _fW_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$15),0,_fV_],0],
     _fX_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_21_4),
     group$2=caml_call2(Bin_prot_Shape[6],_fX_,_fW_),
     _fY_=caml_call1(Bin_prot_Shape[2][1],cst_t$16),
     bin_shape_t$1=caml_call1(caml_call2(Bin_prot_Shape[14],group$2,_fY_),0);
    function bin_size_t$10(param){return 4}
    function bin_write_t$10(buf,pos,param)
     {return caml_call3(Bin_prot_Write[30],buf,pos,914388854)}
    var bin_writer_t$1=[0,bin_size_t$10,bin_write_t$10];
    function bin_read_t$21(buf,param,vint)
     {if(914388854 === vint)return 914388854;throw Bin_prot_Common[13]}
    function bin_read_t$22(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      try
       {var _bGt_=bin_read_t$21(buf,pos_ref,vint);return _bGt_}
      catch(_bGu_)
       {_bGu_ = caml_wrap_exception(_bGu_);
        if(_bGu_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err,pos_ref[1]);
        throw _bGu_}}
    var
     bin_reader_t$1=[0,bin_read_t$22,bin_read_t$21],
     bin_t$1=[0,bin_shape_t$1,bin_writer_t$1,bin_reader_t$1];
    function compare$2(a_011,b_012)
     {return caml_call2(Ppx_compare_lib[1],a_011,b_012)?0:0}
    function hash_fold_t$2(hsv,arg)
     {return caml_call2(Base_Hash[3],hsv,914388854)}
    function hash$1(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bGs_=hash_fold_t$2(hsv,x);
      return caml_call1(Base_Hash[9],_bGs_)}
    function t_of_sexp$2(sexp_016)
     {if(0 === sexp_016[0])
       {var atom_014=sexp_016[1];
        return caml_string_notequal(atom_014,cst_Read$0)
                ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                :914388854}
      var _bGq_=sexp_016[1];
      if(_bGq_)
       {var _bGr_=_bGq_[1];
        if(0 === _bGr_[0])
         {var atom_014$0=_bGr_[1];
          return caml_string_notequal(atom_014$0,cst_Read$1)
                  ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                  :caml_call2
                    (Sexplib0_Sexp_conv_error[21],error_source_018,sexp_016)}
        return caml_call2
                (Sexplib0_Sexp_conv_error[24],error_source_018,sexp_016)}
      return caml_call2
              (Sexplib0_Sexp_conv_error[25],error_source_018,sexp_016)}
    function t_of_sexp$3(sexp_019)
     {try
       {var _bGo_=t_of_sexp$2(sexp_019);return _bGo_}
      catch(_bGp_)
       {_bGp_ = caml_wrap_exception(_bGp_);
        if(_bGp_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[20],error_source_020,sexp_019);
        throw _bGp_}}
    function sexp_of_t$3(param){return _fZ_}
    var
     _f0_=
      [0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write,[0,bin_shape_t$0]),0],
     _f1_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_27_13),
     _f2_=caml_call2(Bin_prot_Shape[12],_f1_,_f0_),
     _f3_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$17),0,_f2_],0],
     _f4_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_27_4),
     group$3=caml_call2(Bin_prot_Shape[6],_f4_,_f3_),
     _f5_=caml_call1(Bin_prot_Shape[2][1],cst_t$18),
     bin_shape_t$2=caml_call1(caml_call2(Bin_prot_Shape[14],group$3,_f5_),0);
    function bin_size_t$11(param)
     {var args=param[2],size_args=bin_size_t$9(args);
      return caml_call2(Bin_prot_Common[23],size_args,4)}
    function bin_write_t$11(buf,pos,param)
     {var
       args=param[2],
       pos$0=caml_call3(Bin_prot_Write[30],buf,pos,271892623);
      return bin_write_t$9(buf,pos$0,args)}
    var bin_writer_t$2=[0,bin_size_t$11,bin_write_t$11];
    function bin_read_t$23(buf,pos_ref,vint)
     {if(271892623 === vint)
       {var arg_1=bin_read_t$20(buf,pos_ref);return [0,271892623,arg_1]}
      throw Bin_prot_Common[13]}
    function bin_read_t$24(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      try
       {var _bGm_=bin_read_t$23(buf,pos_ref,vint);return _bGm_}
      catch(_bGn_)
       {_bGn_ = caml_wrap_exception(_bGn_);
        if(_bGn_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$0,pos_ref[1]);
        throw _bGn_}}
    var
     bin_reader_t$2=[0,bin_read_t$24,bin_read_t$23],
     bin_t$2=[0,bin_shape_t$2,bin_writer_t$2,bin_reader_t$2];
    function compare$3(a_021,b_022)
     {if(caml_call2(Ppx_compare_lib[1],a_021,b_022))return 0;
      var right_024=b_022[2],left_023=a_021[2];
      return compare$1(left_023,right_024)}
    function hash_fold_t$3(hsv,arg)
     {var v=arg[2],hsv$0=caml_call2(Base_Hash[3],hsv,271892623);
      return hash_fold_t$1(hsv$0,v)}
    function hash$2(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bGl_=hash_fold_t$3(hsv,x);
      return caml_call1(Base_Hash[9],_bGl_)}
    function t_of_sexp$4(sexp_028)
     {if(0 === sexp_028[0])
       {var atom_026=sexp_028[1];
        return caml_string_notequal(atom_026,cst_Who_can_write$0)
                ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                :caml_call2
                  (Sexplib0_Sexp_conv_error[23],error_source_033,sexp_028)}
      var _bGj_=sexp_028[1];
      if(_bGj_)
       {var _bGk_=_bGj_[1];
        if(0 === _bGk_[0])
         {var sexp_args_029=_bGj_[2],atom_026$0=_bGk_[1];
          if(caml_string_notequal(atom_026$0,cst_Who_can_write$1))
           return caml_call1(Sexplib0_Sexp_conv_error[19],0);
          if(sexp_args_029 && ! sexp_args_029[2])
           {var arg0_031=sexp_args_029[1],res0_032=t_of_sexp$1(arg0_031);
            return [0,271892623,res0_032]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[22],
                   error_source_033,
                   atom_026$0,
                   sexp_028)}
        return caml_call2
                (Sexplib0_Sexp_conv_error[24],error_source_033,sexp_028)}
      return caml_call2
              (Sexplib0_Sexp_conv_error[25],error_source_033,sexp_028)}
    function t_of_sexp$5(sexp_034)
     {try
       {var _bGh_=t_of_sexp$4(sexp_034);return _bGh_}
      catch(_bGi_)
       {_bGi_ = caml_wrap_exception(_bGi_);
        if(_bGi_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[20],error_source_035,sexp_034);
        throw _bGi_}}
    function sexp_of_t$4(param)
     {var v_036=param[2];return [1,[0,_f6_,[0,sexp_of_t$2(v_036),0]]]}
    var
     _f7_=
      [0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write$2,[0,bin_shape_t]),0],
     _f8_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_34_8),
     _f9_=[0,caml_call2(Bin_prot_Shape[11],_f8_,bin_shape_t$1),_f7_],
     _f__=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_34_6),
     _f$_=caml_call2(Bin_prot_Shape[12],_f__,_f9_),
     _ga_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$19),0,_f$_],0],
     _gb_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_33_4),
     group$4=caml_call2(Bin_prot_Shape[6],_gb_,_ga_),
     _gc_=caml_call1(Bin_prot_Shape[2][1],cst_t$20),
     bin_shape_t$3=caml_call1(caml_call2(Bin_prot_Shape[14],group$4,_gc_),0);
    function bin_size_t$12(v)
     {if(typeof v === "number")return 4;
      var args=v[2],size_args=bin_size_t$8(args);
      return caml_call2(Bin_prot_Common[23],size_args,4)}
    function bin_write_t$12(buf,pos,v)
     {if(typeof v === "number")return bin_write_t$10(buf,pos,v);
      var args=v[2],pos$0=caml_call3(Bin_prot_Write[30],buf,pos,271892623);
      return bin_write_t$8(buf,pos$0,args)}
    var bin_writer_t$3=[0,bin_size_t$12,bin_write_t$12];
    function bin_read_t$25(buf,pos_ref,vint)
     {try
       {var _bGf_=bin_read_t$21(buf,pos_ref,vint);return _bGf_}
      catch(_bGg_)
       {_bGg_ = caml_wrap_exception(_bGg_);
        if(_bGg_ === Bin_prot_Common[13])
         {if(271892623 === vint)
           {var arg_1=bin_read_t$18(buf,pos_ref);return [0,271892623,arg_1]}
          throw Bin_prot_Common[13]}
        throw _bGg_}}
    function bin_read_t$26(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      try
       {var _bGd_=bin_read_t$25(buf,pos_ref,vint);return _bGd_}
      catch(_bGe_)
       {_bGe_ = caml_wrap_exception(_bGe_);
        if(_bGe_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$1,pos_ref[1]);
        throw _bGe_}}
    var
     bin_reader_t$3=[0,bin_read_t$26,bin_read_t$25],
     bin_t$3=[0,bin_shape_t$3,bin_writer_t$3,bin_reader_t$3];
    function compare$4(a_037,b_038)
     {if(caml_call2(Ppx_compare_lib[1],a_037,b_038))return 0;
      if(typeof a_037 === "number")
       {if(914388854 === b_038)return compare$2(a_037,b_038)}
      else
       if(typeof b_038 !== "number" && 271892623 === b_038[1])
        {var right_042=b_038[2],left_041=a_037[2];
         return compare$0(left_041,right_042)}
      return caml_compare(a_037,b_038)}
    function hash_fold_t$4(hsv,arg)
     {if(typeof arg === "number")return hash_fold_t$2(hsv,arg);
      var v=arg[2],hsv$0=caml_call2(Base_Hash[3],hsv,271892623);
      return hash_fold_t$0(hsv$0,v)}
    function hash$3(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bGc_=hash_fold_t$4(hsv,x);
      return caml_call1(Base_Hash[9],_bGc_)}
    function t_of_sexp$6(sexp_052)
     {try
       {try
         {var _bF__=t_of_sexp$2(sexp_052),_bF$_=_bF__}
        catch(_bGb_)
         {_bGb_ = caml_wrap_exception(_bGb_);
          if(_bGb_ !== Sexplib0_Sexp_conv_error[18])throw _bGb_;
          if(0 === sexp_052[0])
           var
            atom_044=sexp_052[1],
            _bF$_=
             caml_string_notequal(atom_044,cst_Who_can_write$3)
              ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
              :caml_call2
                (Sexplib0_Sexp_conv_error[23],error_source_051,sexp_052);
          else
           {var _bF8_=sexp_052[1];
            if(_bF8_)
             {var _bF9_=_bF8_[1];
              if(0 === _bF9_[0])
               {var sexp_args_047=_bF8_[2],atom_044$0=_bF9_[1];
                if(caml_string_notequal(atom_044$0,cst_Who_can_write$4))
                 var _bF$_=caml_call1(Sexplib0_Sexp_conv_error[19],0);
                else
                 {var switch$0=0;
                  if(sexp_args_047 && ! sexp_args_047[2])
                   var
                    arg0_049=sexp_args_047[1],
                    res0_050=t_of_sexp$0(arg0_049),
                    _bF$_=[0,271892623,res0_050];
                  else
                   switch$0 = 1;
                  if(switch$0)
                   var
                    _bF$_=
                     caml_call3
                      (Sexplib0_Sexp_conv_error[22],
                       error_source_051,
                       atom_044$0,
                       sexp_052)}}
              else
               var
                _bF$_=
                 caml_call2
                  (Sexplib0_Sexp_conv_error[24],error_source_051,sexp_052)}
            else
             var
              _bF$_=
               caml_call2
                (Sexplib0_Sexp_conv_error[25],error_source_051,sexp_052)}}
        return _bF$_}
      catch(_bGa_)
       {_bGa_ = caml_wrap_exception(_bGa_);
        if(_bGa_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[20],error_source_053,sexp_052);
        throw _bGa_}}
    function sexp_of_t$5(v_054)
     {if(typeof v_054 === "number")return sexp_of_t$3(v_054);
      var v_055=v_054[2];
      return [1,[0,_gd_,[0,sexp_of_t$1(v_055),0]]]}
    var
     _ge_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_45_8),
     _gf_=[0,caml_call2(Bin_prot_Shape[11],_ge_,bin_shape_t$2),0],
     _gg_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_44_8),
     _gh_=[0,caml_call2(Bin_prot_Shape[11],_gg_,bin_shape_t$1),_gf_],
     _gi_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_44_6),
     _gj_=caml_call2(Bin_prot_Shape[12],_gi_,_gh_),
     _gk_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$21),0,_gj_],0],
     _gl_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_43_4),
     group$5=caml_call2(Bin_prot_Shape[6],_gl_,_gk_),
     _gm_=caml_call1(Bin_prot_Shape[2][1],cst_t$22),
     bin_shape_t$4=caml_call1(caml_call2(Bin_prot_Shape[14],group$5,_gm_),0);
    function bin_size_t$13(v){return typeof v === "number"?4:bin_size_t$11(v)}
    function bin_write_t$13(buf,pos,v)
     {return typeof v === "number"
              ?bin_write_t$10(buf,pos,v)
              :bin_write_t$11(buf,pos,v)}
    var bin_writer_t$4=[0,bin_size_t$13,bin_write_t$13];
    function bin_read_t$27(buf,pos_ref,vint)
     {try
       {var _bF6_=bin_read_t$21(buf,pos_ref,vint);return _bF6_}
      catch(_bF7_)
       {_bF7_ = caml_wrap_exception(_bF7_);
        if(_bF7_ === Bin_prot_Common[13])
         return bin_read_t$23(buf,pos_ref,vint);
        throw _bF7_}}
    function bin_read_t$28(buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      try
       {var _bF4_=bin_read_t$27(buf,pos_ref,vint);return _bF4_}
      catch(_bF5_)
       {_bF5_ = caml_wrap_exception(_bF5_);
        if(_bF5_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$2,pos_ref[1]);
        throw _bF5_}}
    var
     bin_reader_t$4=[0,bin_read_t$28,bin_read_t$27],
     bin_t$4=[0,bin_shape_t$4,bin_writer_t$4,bin_reader_t$4];
    function compare$5(a_056,b_057)
     {if(caml_call2(Ppx_compare_lib[1],a_056,b_057))return 0;
      if(typeof a_056 === "number")
       {if(914388854 === b_057)return compare$2(a_056,b_057)}
      else
       if(typeof b_057 !== "number" && 271892623 === b_057[1])
        return compare$3(a_056,b_057);
      return caml_compare(a_056,b_057)}
    function hash_fold_t$5(hsv,arg)
     {return typeof arg === "number"
              ?hash_fold_t$2(hsv,arg)
              :hash_fold_t$3(hsv,arg)}
    function hash$4(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bF3_=hash_fold_t$5(hsv,x);
      return caml_call1(Base_Hash[9],_bF3_)}
    function t_of_sexp$7(sexp_063)
     {try
       {try
         {var _bFZ_=t_of_sexp$2(sexp_063),_bF0_=_bFZ_}
        catch(_bF2_)
         {_bF2_ = caml_wrap_exception(_bF2_);
          if(_bF2_ !== Sexplib0_Sexp_conv_error[18])throw _bF2_;
          var _bF0_=t_of_sexp$4(sexp_063)}
        return _bF0_}
      catch(_bF1_)
       {_bF1_ = caml_wrap_exception(_bF1_);
        if(_bF1_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[20],error_source_064,sexp_063);
        throw _bF1_}}
    function sexp_of_t$6(v_065)
     {return typeof v_065 === "number"?sexp_of_t$3(v_065):sexp_of_t$4(v_065)}
    var
     _gn_=caml_call1(Bin_prot_Shape[3][1],cst_a$1),
     _go_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_55_26),
     _gp_=[0,caml_call2(Bin_prot_Shape[15],_go_,_gn_)],
     _gq_=[0,caml_call2(Bin_prot_Shape[10],cst_Who_can_write$5,_gp_),0],
     _gr_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_54_8),
     _gs_=[0,caml_call2(Bin_prot_Shape[11],_gr_,bin_shape_t$1),_gq_],
     _gt_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_54_6),
     _gu_=caml_call2(Bin_prot_Shape[12],_gt_,_gs_),
     _gv_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$2),0],
     _gw_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$23),_gv_,_gu_],0],
     _gx_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_53_4),
     group$6=caml_call2(Bin_prot_Shape[6],_gx_,_gw_);
    function bin_shape_t$5(a)
     {var _bFY_=caml_call1(Bin_prot_Shape[2][1],cst_t$24);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$6,_bFY_),[0,a,0])}
    function bin_read_t$29(of_a,buf,pos_ref,vint)
     {try
       {var _bFW_=bin_read_t$21(buf,pos_ref,vint);return _bFW_}
      catch(_bFX_)
       {_bFX_ = caml_wrap_exception(_bFX_);
        if(_bFX_ === Bin_prot_Common[13])
         {if(271892623 === vint)
           {var arg_1=caml_call2(of_a,buf,pos_ref);return [0,271892623,arg_1]}
          throw Bin_prot_Common[13]}
        throw _bFX_}}
    function bin_read_t$30(of_a,buf,pos_ref)
     {var vint=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      try
       {var
         _bFR_=
          function(_bFT_,_bFU_,_bFV_)
            {return bin_read_t$29(of_a,_bFT_,_bFU_,_bFV_)}
           (buf,pos_ref,vint);
        return _bFR_}
      catch(_bFS_)
       {_bFS_ = caml_wrap_exception(_bFS_);
        if(_bFS_ === Bin_prot_Common[13])
         return caml_call2(Bin_prot_Common[18],err$3,pos_ref[1]);
        throw _bFS_}}
    function t_of_sexp$8(of_a_073,sexp_083)
     {try
       {try
         {var _bFN_=t_of_sexp$2(sexp_083),_bFO_=_bFN_}
        catch(_bFQ_)
         {_bFQ_ = caml_wrap_exception(_bFQ_);
          if(_bFQ_ !== Sexplib0_Sexp_conv_error[18])throw _bFQ_;
          if(0 === sexp_083[0])
           var
            atom_075=sexp_083[1],
            _bFO_=
             caml_string_notequal(atom_075,cst_Who_can_write$6)
              ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
              :caml_call2
                (Sexplib0_Sexp_conv_error[23],error_source_082,sexp_083);
          else
           {var _bFL_=sexp_083[1];
            if(_bFL_)
             {var _bFM_=_bFL_[1];
              if(0 === _bFM_[0])
               {var sexp_args_078=_bFL_[2],atom_075$0=_bFM_[1];
                if(caml_string_notequal(atom_075$0,cst_Who_can_write$7))
                 var _bFO_=caml_call1(Sexplib0_Sexp_conv_error[19],0);
                else
                 {var switch$0=0;
                  if(sexp_args_078 && ! sexp_args_078[2])
                   var
                    arg0_080=sexp_args_078[1],
                    res0_081=caml_call1(of_a_073,arg0_080),
                    _bFO_=[0,271892623,res0_081];
                  else
                   switch$0 = 1;
                  if(switch$0)
                   var
                    _bFO_=
                     caml_call3
                      (Sexplib0_Sexp_conv_error[22],
                       error_source_082,
                       atom_075$0,
                       sexp_083)}}
              else
               var
                _bFO_=
                 caml_call2
                  (Sexplib0_Sexp_conv_error[24],error_source_082,sexp_083)}
            else
             var
              _bFO_=
               caml_call2
                (Sexplib0_Sexp_conv_error[25],error_source_082,sexp_083)}}
        return _bFO_}
      catch(_bFP_)
       {_bFP_ = caml_wrap_exception(_bFP_);
        if(_bFP_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[20],error_source_084,sexp_083);
        throw _bFP_}}
    function Only_used_as_phantom_type1(Name)
     {function sexp_of_t(param,_bFK_)
       {return caml_call3(failwithf,_gz_,Name[1],0)}
      function t_of_sexp(param,_bFJ_)
       {return caml_call3(failwithf,_gA_,Name[1],0)}
      function compare(param,_bFI_,_bFH_)
       {return caml_call3(failwithf,_gB_,Name[1],0)}
      function hash_fold_t(param,_bFG_,_bFF_)
       {return caml_call3(failwithf,_gC_,Name[1],0)}
      function t_sexp_grammar(param)
       {return caml_call1(Sexplib_Sexp_grammar[1],Base_Nothing[2])}
      function to_binable(param){return caml_call3(failwithf,_gD_,Name[1],0)}
      function of_binable(param){return caml_call3(failwithf,_gE_,Name[1],0)}
      var
       _bFy_=caml_call1(Bin_prot_Shape[3][1],cst_a$3),
       _bFz_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_86_20),
       _bFA_=caml_call2(Bin_prot_Shape[15],_bFz_,_bFy_),
       _bFB_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$4),0],
       _bFC_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$25),_bFB_,_bFA_],0],
       _bFD_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_86_8),
       group=caml_call2(Bin_prot_Shape[6],_bFD_,_bFC_),
       _bFx_=[0,to_binable,of_binable];
      function bin_shape_t(a)
       {var _bFE_=caml_call1(Bin_prot_Shape[2][1],cst_t$26);
        return caml_call1(caml_call2(Bin_prot_Shape[14],group,_bFE_),[0,a,0])}
      function bin_size_t(size_of_a){return size_of_a}
      function bin_write_t(write_a){return write_a}
      function bin_read_t(of_a,buf,pos_ref,vint)
       {return caml_call2(Bin_prot_Common[18],_gF_,pos_ref[1])}
      function bin_read_t$0(of_a){return of_a}
      var
       include=
        caml_call1
         (caml_call1
           (_fq_,
            [0,bin_shape_t,bin_size_t,bin_write_t,bin_read_t$0,bin_read_t]),
          _bFx_),
       bin_shape_t$0=include[1],
       bin_size_t$0=include[2],
       bin_write_t$0=include[3],
       bin_read_t$1=include[4],
       bin_read_t$2=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_shape_t$0,
              bin_size_t$0,
              bin_write_t$0,
              bin_read_t$1,
              bin_read_t$2,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              hash_fold_t,
              t_of_sexp,
              sexp_of_t,
              t_sexp_grammar]}
    function Only_used_as_phantom_type0(T)
     {var
       M=Only_used_as_phantom_type1([0,T[14]]),
       _bFr_=caml_call1(M[1],T[5]),
       _bFs_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$27),0,_bFr_],0],
       _bFt_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_110_2),
       group=caml_call2(Bin_prot_Shape[6],_bFt_,_bFs_),
       _bFu_=caml_call1(Bin_prot_Shape[2][1],cst_t$28),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bFu_),0);
      function bin_size_t(v){return caml_call2(M[2],T[1],v)}
      function bin_write_t(buf,pos,v)
       {return caml_call3(caml_call1(M[3],T[2]),buf,pos,v)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call3(caml_call1(M[5],T[3]),buf,pos_ref,vint)}
      function bin_read_t$0(buf,pos_ref)
       {return caml_call2(caml_call1(M[4],T[3]),buf,pos_ref)}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function compare(a_088,b_089)
       {function _bFw_(a_090,b_091){return caml_call2(T[9],a_090,b_091)}
        return caml_call3(M[9],_bFw_,a_088,b_089)}
      function hash_fold_t(hsv,arg){return caml_call3(M[10],T[10],hsv,arg)}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_bFv_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_bFv_)}
      function t_of_sexp(x_093){return caml_call2(M[11],T[12],x_093)}
      function sexp_of_t(x_094){return caml_call2(M[12],T[13],x_094)}
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              hash_fold_t,
              hash,
              t_of_sexp,
              t_of_sexp,
              sexp_of_t]}
    var
     Nobody=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$8,
         bin_write_t$8,
         bin_read_t$18,
         bin_read_t$17,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t,
         compare$0,
         hash_fold_t$0,
         hash,
         t_of_sexp$0,
         sexp_of_t$1,
         name$0]),
     Me=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$9,
         bin_write_t$9,
         bin_read_t$20,
         bin_read_t$19,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         compare$1,
         hash_fold_t$1,
         hash$0,
         t_of_sexp$1,
         sexp_of_t$2,
         name$1]),
     Read=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$10,
         bin_write_t$10,
         bin_read_t$22,
         bin_read_t$21,
         bin_shape_t$1,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         compare$2,
         hash_fold_t$2,
         hash$1,
         t_of_sexp$3,
         sexp_of_t$3,
         name$2]),
     Write=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$11,
         bin_write_t$11,
         bin_read_t$24,
         bin_read_t$23,
         bin_shape_t$2,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2,
         compare$3,
         hash_fold_t$3,
         hash$2,
         t_of_sexp$5,
         sexp_of_t$4,
         name$3]),
     Read_write=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$13,
         bin_write_t$13,
         bin_read_t$28,
         bin_read_t$27,
         bin_shape_t$4,
         bin_writer_t$4,
         bin_reader_t$4,
         bin_t$4,
         compare$5,
         hash_fold_t$5,
         hash$4,
         t_of_sexp$7,
         sexp_of_t$6,
         name$5]),
     Immutable=
      Only_used_as_phantom_type0
       ([0,
         bin_size_t$12,
         bin_write_t$12,
         bin_read_t$26,
         bin_read_t$25,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3,
         compare$4,
         hash_fold_t$4,
         hash$3,
         t_of_sexp$6,
         sexp_of_t$5,
         name$4]),
     _gG_=Nobody[5],
     _gH_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_nobody),0,_gG_],0],
     _gI_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_124_4),
     group$7=caml_call2(Bin_prot_Shape[6],_gI_,_gH_),
     _gJ_=caml_call1(Bin_prot_Shape[2][1],cst_nobody$0),
     bin_shape_nobody=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$7,_gJ_),0),
     bin_size_nobody=Nobody[1],
     bin_write_nobody=Nobody[2],
     bin_writer_nobody=[0,bin_size_nobody,bin_write_nobody],
     bin_read_nobody=Nobody[4],
     bin_read_nobody$0=Nobody[3],
     bin_reader_nobody=[0,bin_read_nobody$0,bin_read_nobody],
     bin_nobody=[0,bin_shape_nobody,bin_writer_nobody,bin_reader_nobody],
     compare_nobody=Nobody[9],
     hash_fold_nobody=Nobody[10],
     func=Nobody[11];
    function hash_nobody(x){return caml_call1(func,x)}
    var
     nobody_of_sexp=Nobody[12],
     sexp_of_nobody=Nobody[14],
     _gK_=Me[5],
     _gL_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_me),0,_gK_],0],
     _gM_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_125_4),
     group$8=caml_call2(Bin_prot_Shape[6],_gM_,_gL_),
     _gN_=caml_call1(Bin_prot_Shape[2][1],cst_me$0),
     bin_shape_me=caml_call1(caml_call2(Bin_prot_Shape[14],group$8,_gN_),0),
     bin_size_me=Me[1],
     bin_write_me=Me[2],
     bin_writer_me=[0,bin_size_me,bin_write_me],
     bin_read_me=Me[4],
     bin_read_me$0=Me[3],
     bin_reader_me=[0,bin_read_me$0,bin_read_me],
     bin_me=[0,bin_shape_me,bin_writer_me,bin_reader_me],
     compare_me=Me[9],
     hash_fold_me=Me[10],
     func$0=Me[11];
    function hash_me(x){return caml_call1(func$0,x)}
    var
     me_of_sexp=Me[12],
     sexp_of_me=Me[14],
     M=Only_used_as_phantom_type1([0,name$6]),
     _gO_=caml_call1(Bin_prot_Shape[3][1],cst_a$5),
     _gP_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_130_18),
     _gQ_=bin_shape_t$5(caml_call2(Bin_prot_Shape[15],_gP_,_gO_)),
     _gR_=caml_call1(M[1],_gQ_),
     _gS_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$6),0],
     _gT_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$29),_gS_,_gR_],0],
     _gU_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_130_6),
     group$9=caml_call2(Bin_prot_Shape[6],_gU_,_gT_);
    function bin_shape_t$6(a)
     {var _bFq_=caml_call1(Bin_prot_Shape[2][1],cst_t$30);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$9,_bFq_),[0,a,0])}
    function bin_size_t$14(size_of_a,v)
     {function _bFp_(v)
       {if(typeof v === "number")return 4;
        var args=v[2],size_args=caml_call1(size_of_a,args);
        return caml_call2(Bin_prot_Common[23],size_args,4)}
      return caml_call2(M[2],_bFp_,v)}
    function bin_write_t$14(write_a,buf,pos,v)
     {function _bFo_(buf,pos$0,v)
       {if(typeof v === "number")return bin_write_t$10(buf,pos$0,v);
        var args=v[2],pos=caml_call3(Bin_prot_Write[30],buf,pos$0,271892623);
        return caml_call3(write_a,buf,pos,args)}
      return caml_call3(caml_call1(M[3],_bFo_),buf,pos,v)}
    function bin_writer_t$5(bin_writer_a)
     {function _bFk_(v)
       {var _bFl_=bin_writer_a[2];
        return function(_bFm_,_bFn_)
         {return bin_write_t$14(_bFl_,v,_bFm_,_bFn_)}}
      return [0,function(v){return bin_size_t$14(bin_writer_a[1],v)},_bFk_]}
    function bin_read_t$31(of_a,buf,pos_ref,vint)
     {function _bFh_(_bFi_,_bFj_){return bin_read_t$30(of_a,_bFi_,_bFj_)}
      return caml_call3(caml_call1(M[5],_bFh_),buf,pos_ref,vint)}
    function bin_read_t$32(of_a,buf,pos_ref)
     {function _bFe_(_bFf_,_bFg_){return bin_read_t$30(of_a,_bFf_,_bFg_)}
      return caml_call2(caml_call1(M[4],_bFe_),buf,pos_ref)}
    function bin_reader_t$5(bin_reader_a)
     {function _bFd_(buf,pos_ref,vtag)
       {return bin_read_t$31(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$32(bin_reader_a[1],buf,pos_ref)},
              _bFd_]}
    function bin_t$5(bin_a)
     {var _bFb_=bin_reader_t$5(bin_a[3]),_bFc_=bin_writer_t$5(bin_a[2]);
      return [0,bin_shape_t$6(bin_a[1]),_bFc_,_bFb_]}
    function compare$6(cmp_a,a_101,b_102)
     {function _bFa_(a_103,b_104)
       {if(caml_call2(Ppx_compare_lib[1],a_103,b_104))return 0;
        if(typeof a_103 === "number")
         {if(914388854 === b_104)return compare$2(a_103,b_104)}
        else
         if(typeof b_104 !== "number" && 271892623 === b_104[1])
          {var right_072=b_104[2],left_071=a_103[2];
           return caml_call2(cmp_a,left_071,right_072)}
        return caml_compare(a_103,b_104)}
      return caml_call3(M[9],_bFa_,a_101,b_102)}
    function hash_fold_perms(hash_fold_a,hsv,arg)
     {function _bE$_(hsv$0,arg)
       {if(typeof arg === "number")return hash_fold_t$2(hsv$0,arg);
        var v=arg[2],hsv=caml_call2(Base_Hash[3],hsv$0,271892623);
        return caml_call2(hash_fold_a,hsv,v)}
      return caml_call3(M[10],_bE$_,hsv,arg)}
    function perms_of_sexp(of_a_107,x_109)
     {function _bE9_(_bE__){return t_of_sexp$8(of_a_107,_bE__)}
      return caml_call2(M[11],_bE9_,x_109)}
    function sexp_of_perms(of_a_110,x_111)
     {function _bE8_(v_086)
       {if(typeof v_086 === "number")return sexp_of_t$3(v_086);
        var v_087=v_086[2];
        return [1,[0,_gy_,[0,caml_call1(of_a_110,v_087),0]]]}
      return caml_call2(M[12],_bE8_,x_111)}
    var
     _gV_=Read[5],
     _gW_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_read),0,_gV_],0],
     _gX_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_137_4),
     group$10=caml_call2(Bin_prot_Shape[6],_gX_,_gW_),
     _gY_=caml_call1(Bin_prot_Shape[2][1],cst_read$0),
     bin_shape_read=caml_call1(caml_call2(Bin_prot_Shape[14],group$10,_gY_),0),
     bin_size_read=Read[1],
     bin_write_read=Read[2],
     bin_writer_read=[0,bin_size_read,bin_write_read],
     bin_read_read=Read[4],
     bin_read_read$0=Read[3],
     bin_reader_read=[0,bin_read_read$0,bin_read_read],
     bin_read=[0,bin_shape_read,bin_writer_read,bin_reader_read],
     compare_read=Read[9],
     hash_fold_read=Read[10],
     func$1=Read[11];
    function hash_read(x){return caml_call1(func$1,x)}
    var
     read_of_sexp=Read[12],
     sexp_of_read=Read[14],
     compare_write=Write[9],
     hash_fold_write=Write[10],
     func$2=Write[11];
    function hash_write(x){return caml_call1(func$2,x)}
    var
     write_of_sexp=Write[12],
     sexp_of_write=Write[14],
     _gZ_=Immutable[5],
     _g0_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_immutable),0,_gZ_],0],
     _g1_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_139_4),
     group$11=caml_call2(Bin_prot_Shape[6],_g1_,_g0_),
     _g2_=caml_call1(Bin_prot_Shape[2][1],cst_immutable$0),
     bin_shape_immutable=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$11,_g2_),0),
     bin_size_immutable=Immutable[1],
     bin_write_immutable=Immutable[2],
     bin_writer_immutable=[0,bin_size_immutable,bin_write_immutable],
     bin_read_immutable=Immutable[4],
     bin_read_immutable$0=Immutable[3],
     bin_reader_immutable=[0,bin_read_immutable$0,bin_read_immutable],
     bin_immutable=
      [0,bin_shape_immutable,bin_writer_immutable,bin_reader_immutable],
     compare_immutable=Immutable[9],
     hash_fold_immutable=Immutable[10],
     func$3=Immutable[11];
    function hash_immutable(x){return caml_call1(func$3,x)}
    var
     immutable_of_sexp=Immutable[12],
     sexp_of_immutable=Immutable[14],
     _g3_=Read_write[5],
     _g4_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_read_write),0,_g3_],0],
     _g5_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_140_4),
     group$12=caml_call2(Bin_prot_Shape[6],_g5_,_g4_),
     _g6_=caml_call1(Bin_prot_Shape[2][1],cst_read_write$0),
     bin_shape_read_write=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$12,_g6_),0),
     bin_size_read_write=Read_write[1],
     bin_write_read_write=Read_write[2],
     bin_writer_read_write=[0,bin_size_read_write,bin_write_read_write],
     bin_read_read_write=Read_write[4],
     bin_read_read_write$0=Read_write[3],
     bin_reader_read_write=[0,bin_read_read_write$0,bin_read_read_write],
     bin_read_write=
      [0,bin_shape_read_write,bin_writer_read_write,bin_reader_read_write],
     compare_read_write=Read_write[9],
     hash_fold_read_write=Read_write[10],
     func$4=Read_write[11];
    function hash_read_write(x){return caml_call1(func$4,x)}
    var
     read_write_of_sexp=Read_write[12],
     sexp_of_read_write=Read_write[14],
     _g7_=caml_call1(Bin_prot_Shape[3][1],cst_a$7),
     _g8_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_141_20),
     _g9_=bin_shape_t$6(caml_call2(Bin_prot_Shape[15],_g8_,_g7_)),
     _g__=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$8),0],
     _g$_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_perms),_g__,_g9_],0],
     _ha_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_perms_ml_141_4),
     group$13=caml_call2(Bin_prot_Shape[6],_ha_,_g$_);
    function bin_shape_perms(a)
     {var _bE7_=caml_call1(Bin_prot_Shape[2][1],cst_perms$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$13,_bE7_),[0,a,0])}
    function bin_size_perms(size_of_a,v){return bin_size_t$14(size_of_a,v)}
    function bin_write_perms(write_a,buf,pos,v)
     {return bin_write_t$14(write_a,buf,pos,v)}
    function bin_writer_perms(bin_writer_a)
     {function _bE3_(v)
       {var _bE4_=bin_writer_a[2];
        return function(_bE5_,_bE6_)
         {return bin_write_perms(_bE4_,v,_bE5_,_bE6_)}}
      return [0,function(v){return bin_size_perms(bin_writer_a[1],v)},_bE3_]}
    function bin_read_perms(of_a,buf,pos_ref,vint)
     {return bin_read_t$31(of_a,buf,pos_ref,vint)}
    function bin_read_perms$0(of_a,buf,pos_ref)
     {return bin_read_t$32(of_a,buf,pos_ref)}
    function bin_reader_perms(bin_reader_a)
     {function _bE2_(buf,pos_ref,vtag)
       {return bin_read_perms(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_perms$0(bin_reader_a[1],buf,pos_ref)},
              _bE2_]}
    function bin_perms(bin_a)
     {var _bE0_=bin_reader_perms(bin_a[3]),_bE1_=bin_writer_perms(bin_a[2]);
      return [0,bin_shape_perms(bin_a[1]),_bE1_,_bE0_]}
    function compare_perms(cmp_a,a_124,b_125)
     {return compare$6
              (function(a_126,b_127){return caml_call2(cmp_a,a_126,b_127)},
               a_124,
               b_125)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$16);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Perms$0);
    var
     _hb_=
      [0,
       [0,
        bin_shape_nobody,
        bin_size_nobody,
        bin_write_nobody,
        bin_writer_nobody,
        bin_read_nobody$0,
        bin_read_nobody,
        bin_reader_nobody,
        bin_nobody,
        compare_nobody,
        hash_fold_nobody,
        hash_nobody,
        sexp_of_nobody,
        nobody_of_sexp,
        bin_shape_me,
        bin_size_me,
        bin_write_me,
        bin_writer_me,
        bin_read_me$0,
        bin_read_me,
        bin_reader_me,
        bin_me,
        compare_me,
        hash_fold_me,
        hash_me,
        sexp_of_me,
        me_of_sexp,
        [0,
         Read[1],
         Read[2],
         Read[3],
         Read[4],
         Read[5],
         Read[6],
         Read[7],
         Read[8],
         Read[9],
         Read[10],
         Read[11],
         Read[12],
         Read[14]],
        [0,
         Write[1],
         Write[2],
         Write[3],
         Write[4],
         Write[5],
         Write[6],
         Write[7],
         Write[8],
         Write[9],
         Write[10],
         Write[11],
         Write[12],
         Write[14]],
        [0,
         Immutable[1],
         Immutable[2],
         Immutable[3],
         Immutable[4],
         Immutable[5],
         Immutable[6],
         Immutable[7],
         Immutable[8],
         Immutable[9],
         Immutable[10],
         Immutable[11],
         Immutable[12],
         Immutable[14]],
        [0,
         Read_write[1],
         Read_write[2],
         Read_write[3],
         Read_write[4],
         Read_write[5],
         Read_write[6],
         Read_write[7],
         Read_write[8],
         Read_write[9],
         Read_write[10],
         Read_write[11],
         Read_write[12],
         Read_write[14]],
        [0,
         bin_shape_t$6,
         bin_size_t$14,
         bin_write_t$14,
         bin_read_t$32,
         bin_read_t$31,
         bin_writer_t$5,
         bin_reader_t$5,
         bin_t$5,
         compare$6,
         hash_fold_perms,
         perms_of_sexp,
         sexp_of_perms]],
       [0,
        bin_shape_read,
        bin_size_read,
        bin_write_read,
        bin_writer_read,
        bin_read_read$0,
        bin_read_read,
        bin_reader_read,
        bin_read,
        compare_read,
        hash_fold_read,
        hash_read,
        sexp_of_read,
        read_of_sexp,
        compare_write,
        hash_fold_write,
        hash_write,
        sexp_of_write,
        write_of_sexp,
        bin_shape_immutable,
        bin_size_immutable,
        bin_write_immutable,
        bin_writer_immutable,
        bin_read_immutable$0,
        bin_read_immutable,
        bin_reader_immutable,
        bin_immutable,
        compare_immutable,
        hash_fold_immutable,
        hash_immutable,
        sexp_of_immutable,
        immutable_of_sexp,
        bin_shape_read_write,
        bin_size_read_write,
        bin_write_read_write,
        bin_writer_read_write,
        bin_read_read_write$0,
        bin_read_read_write,
        bin_reader_read_write,
        bin_read_write,
        compare_read_write,
        hash_fold_read_write,
        hash_read_write,
        sexp_of_read_write,
        read_write_of_sexp,
        bin_shape_perms,
        bin_size_perms,
        bin_write_perms,
        bin_writer_perms,
        bin_read_perms$0,
        bin_read_perms,
        bin_reader_perms,
        bin_perms,
        compare_perms,
        hash_fold_perms,
        sexp_of_perms,
        perms_of_sexp]],
     _hc_=
      [0,
       bin_shape_read,
       bin_size_read,
       bin_write_read,
       bin_writer_read,
       bin_read_read$0,
       bin_read_read,
       bin_reader_read,
       bin_read,
       compare_read,
       hash_fold_read,
       hash_read,
       sexp_of_read,
       read_of_sexp,
       compare_write,
       hash_fold_write,
       hash_write,
       sexp_of_write,
       write_of_sexp,
       bin_shape_immutable,
       bin_size_immutable,
       bin_write_immutable,
       bin_writer_immutable,
       bin_read_immutable$0,
       bin_read_immutable,
       bin_reader_immutable,
       bin_immutable,
       compare_immutable,
       hash_fold_immutable,
       hash_immutable,
       sexp_of_immutable,
       immutable_of_sexp,
       bin_shape_read_write,
       bin_size_read_write,
       bin_write_read_write,
       bin_writer_read_write,
       bin_read_read_write$0,
       bin_read_read_write,
       bin_reader_read_write,
       bin_read_write,
       compare_read_write,
       hash_fold_read_write,
       hash_read_write,
       sexp_of_read_write,
       read_write_of_sexp,
       bin_shape_perms,
       bin_size_perms,
       bin_write_perms,
       bin_writer_perms,
       bin_read_perms$0,
       bin_read_perms,
       bin_reader_perms,
       bin_perms,
       compare_perms,
       hash_fold_perms,
       sexp_of_perms,
       perms_of_sexp],
     Core_Perms=
      [0,
       bin_shape_nobody,
       bin_size_nobody,
       bin_write_nobody,
       bin_writer_nobody,
       bin_read_nobody$0,
       bin_read_nobody,
       bin_reader_nobody,
       bin_nobody,
       compare_nobody,
       hash_fold_nobody,
       hash_nobody,
       sexp_of_nobody,
       nobody_of_sexp,
       bin_shape_me,
       bin_size_me,
       bin_write_me,
       bin_writer_me,
       bin_read_me$0,
       bin_read_me,
       bin_reader_me,
       bin_me,
       compare_me,
       hash_fold_me,
       hash_me,
       sexp_of_me,
       me_of_sexp,
       [0,
        Read[1],
        Read[2],
        Read[3],
        Read[4],
        Read[5],
        Read[6],
        Read[7],
        Read[8],
        Read[9],
        Read[10],
        Read[11],
        Read[14],
        Read[12],
        Read[13]],
       [0,
        Write[1],
        Write[2],
        Write[3],
        Write[4],
        Write[5],
        Write[6],
        Write[7],
        Write[8],
        Write[9],
        Write[10],
        Write[11],
        Write[14],
        Write[12],
        Write[13]],
       [0,
        Immutable[1],
        Immutable[2],
        Immutable[3],
        Immutable[4],
        Immutable[5],
        Immutable[6],
        Immutable[7],
        Immutable[8],
        Immutable[9],
        Immutable[10],
        Immutable[11],
        Immutable[14],
        Immutable[12],
        Immutable[13]],
       [0,
        Read_write[1],
        Read_write[2],
        Read_write[3],
        Read_write[4],
        Read_write[5],
        Read_write[6],
        Read_write[7],
        Read_write[8],
        Read_write[9],
        Read_write[10],
        Read_write[11],
        Read_write[14],
        Read_write[12],
        Read_write[13]],
       [0,
        bin_shape_t$6,
        bin_size_t$14,
        bin_write_t$14,
        bin_read_t$32,
        bin_read_t$31,
        bin_writer_t$5,
        bin_reader_t$5,
        bin_t$5,
        compare$6,
        hash_fold_perms,
        sexp_of_perms,
        perms_of_sexp,
        perms_of_sexp],
       _hc_,
       _hb_];
    caml_register_global(5207,Core_Perms,"Core__Perms");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Binary_searchable_int);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$17);
    caml_call1(Expect_test_collector[5][1],cst_core_src_binary_searchable);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$18,cst$6);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$19);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Binary_searchable_int$0);
    var Core_Binary_searchable_intf=[0];
    caml_register_global
     (5208,Core_Binary_searchable_intf,"Core__Binary_searchable_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Binary_searchable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$20);
    caml_call1(Expect_test_collector[5][1],cst_core_src_binary_searchable$0);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$21,cst$7);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$22);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Binary_searchable$0);
    var Core_Binary_searchable=[0];
    caml_register_global
     (5209,Core_Binary_searchable,"Core__Binary_searchable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Blit_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$23);
    caml_call1(Expect_test_collector[5][1],cst_core_src_blit_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$24,cst$8);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$25);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Blit_intf$0);
    var Core_Blit_intf=[0];
    caml_register_global(5210,Core_Blit_intf,"Core__Blit_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Blit);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$26);
    caml_call1(Expect_test_collector[5][1],cst_core_src_blit_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$27,cst$9);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$28);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Blit$0);
    var Core_Blit=[0];
    caml_register_global(5211,Core_Blit,"Core__Blit");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Comparator);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$29);
    caml_call1(Expect_test_collector[5][1],cst_core_src_comparator_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$30,cst$10);
    var
     make=include$5[1],
     Poly=include$5[2],
     Module=include$5[3],
     S_to_S1=include$5[4],
     Make=include$5[5],
     Make1=include$5[6],
     Derived=include$5[7],
     Derived2=include$5[8],
     Derived_phantom=include$5[9];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$31);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Comparator$0);
    var
     _hd_=[0,[0,make,Make,Make1]],
     Core_Comparator=
      [0,
       make,
       Poly,
       Module,
       S_to_S1,
       Make,
       Make1,
       Derived,
       Derived2,
       Derived_phantom,
       _hd_];
    caml_register_global(5213,Core_Comparator,"Core__Comparator");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Result);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$32);
    caml_call1(Expect_test_collector[5][1],cst_core_src_result_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$33,cst$11);
    var
     _he_=caml_call1(Bin_prot_Shape[3][1],cst_b),
     _hf_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_result_ml_8_17),
     _hg_=[0,[0,cst_Error,[0,caml_call2(Bin_prot_Shape[15],_hf_,_he_),0]],0],
     _hh_=caml_call1(Bin_prot_Shape[3][1],cst_a$9),
     _hi_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_result_ml_7_14),
     _hj_=[0,[0,cst_Ok,[0,caml_call2(Bin_prot_Shape[15],_hi_,_hh_),0]],_hg_],
     _hk_=caml_call1(Bin_prot_Shape[9],_hj_),
     _hl_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$0),0],
     _hm_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$10),_hl_],
     _hn_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$31),_hm_,_hk_],0],
     _ho_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_result_ml_6_4),
     group$14=caml_call2(Bin_prot_Shape[6],_ho_,_hn_);
    function bin_shape_t$7(a,b)
     {var _bEZ_=caml_call1(Bin_prot_Shape[2][1],cst_t$32);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$14,_bEZ_),[0,a,[0,b,0]])}
    function bin_size_t$15(size_of_a,size_of_b,param)
     {if(0 === param[0])
       {var v1=param[1],_bEX_=caml_call1(size_of_a,v1);
        return caml_call2(Bin_prot_Common[23],1,_bEX_)}
      var v1$0=param[1],_bEY_=caml_call1(size_of_b,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_bEY_)}
    function bin_write_t$15(write_a,write_b,buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
        return caml_call3(write_a,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,1);
      return caml_call3(write_b,buf,pos$1,v1$0)}
    function bin_writer_t$6(bin_writer_a,bin_writer_b)
     {function _bES_(v)
       {var _bET_=bin_writer_b[2],_bEU_=bin_writer_a[2];
        return function(_bEV_,_bEW_)
         {return bin_write_t$15(_bEU_,_bET_,v,_bEV_,_bEW_)}}
      return [0,
              function(v)
               {return bin_size_t$15(bin_writer_a[1],bin_writer_b[1],v)},
              _bES_]}
    function bin_read_t$33(of_a,of_b,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_result_ml_Stable_,pos_ref[1])}
    function bin_read_t$34(of_a,of_b,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(of_b,buf,pos_ref);return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_hp_,pos_ref[1])}
    function bin_reader_t$6(bin_reader_a,bin_reader_b)
     {function _bER_(buf,pos_ref,vtag)
       {return bin_read_t$33(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$34
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _bER_]}
    function bin_t$6(bin_a,bin_b)
     {var
       _bEP_=bin_reader_t$6(bin_a[3],bin_b[3]),
       _bEQ_=bin_writer_t$6(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$7(bin_a[1],bin_b[1]),_bEQ_,_bEP_]}
    function compare$7(cmp_a,cmp_b,a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      if(0 === a_001[0])
       {var _bEN_=a_001[1];
        if(0 === b_002[0])
         {var b_004=b_002[1];return caml_call2(cmp_a,_bEN_,b_004)}
        return -1}
      var _bEO_=a_001[1];
      if(0 === b_002[0])return 1;
      var b_006=b_002[1];
      return caml_call2(cmp_b,_bEO_,b_006)}
    function t_of_sexp$9(of_a_007,of_b_008,sexp_013)
     {if(0 === sexp_013[0])
       {var _bEJ_=sexp_013[1],switch$0=0;
        if(caml_string_notequal(_bEJ_,cst_Error$0))
         {var switch$1=0;
          if(caml_string_notequal(_bEJ_,cst_Ok$0))
           if(caml_string_notequal(_bEJ_,cst_error))
            {if(caml_string_notequal(_bEJ_,cst_ok)){switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_011,sexp_013)}
        if(! switch$0)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],error_source_011,sexp_013)}
      else
       {var _bEK_=sexp_013[1];
        if(! _bEK_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_011,sexp_013);
        var _bEL_=_bEK_[1];
        if(0 !== _bEL_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_011,sexp_013);
        var _bEM_=_bEL_[1],switch$2=0;
        if(caml_string_notequal(_bEM_,cst_Error$1))
         {var switch$3=0;
          if(caml_string_notequal(_bEM_,cst_Ok$1))
           if(caml_string_notequal(_bEM_,cst_error$0))
            {if(caml_string_notequal(_bEM_,cst_ok$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args_015=_bEK_[2];
            if(sexp_args_015 && ! sexp_args_015[2])
             {var
               arg0_016=sexp_args_015[1],
               res0_017=caml_call1(of_a_007,arg0_016);
              return [0,res0_017]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_011,
                     _bEM_,
                     sexp_013)}}
        if(! switch$2)
         {var sexp_args_020=_bEK_[2];
          if(sexp_args_020 && ! sexp_args_020[2])
           {var
             arg0_021=sexp_args_020[1],
             res0_022=caml_call1(of_b_008,arg0_021);
            return [1,res0_022]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_011,
                   _bEM_,
                   sexp_013)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_011,sexp_013)}
    function sexp_of_t$7(of_a_025,of_b_026,param)
     {if(0 === param[0])
       {var arg0_027=param[1],res0_028=caml_call1(of_a_025,arg0_027);
        return [1,[0,_hq_,[0,res0_028,0]]]}
      var arg0_029=param[1],res0_030=caml_call1(of_b_026,arg0_029);
      return [1,[0,_hr_,[0,res0_030,0]]]}
    function map(x,f1,f2)
     {if(0 === x[0]){var x$0=x[1];return [0,caml_call1(f1,x$0)]}
      var err=x[1];
      return [1,caml_call1(f2,err)]}
    var
     _hs_=0,
     _ht_=function(_bEI_){return bin_shape_t$7(_bV_,_bEI_)}(_b7_),
     _hu_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$33),0,_ht_],_hs_],
     _hv_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_result_ml_19_4),
     group$15=caml_call2(Bin_prot_Shape[6],_hv_,_hu_),
     _hw_=caml_call1(Bin_prot_Shape[2][1],cst_t$34),
     bin_shape_t$8=caml_call1(caml_call2(Bin_prot_Shape[14],group$15,_hw_),0);
    function bin_size_t$16(v)
     {return bin_size_t$15(bin_size_t$1,bin_size_t$3,v)}
    function bin_write_t$16(buf,pos,v)
     {return bin_write_t$15(bin_write_t$1,bin_write_t$3,buf,pos,v)}
    var bin_writer_t$7=[0,bin_size_t$16,bin_write_t$16];
    function bin_read_t$35(buf,pos_ref,vint)
     {return bin_read_t$33(bin_read_t$3,bin_read_t$7,buf,pos_ref,vint)}
    function bin_read_t$36(buf,pos_ref)
     {return bin_read_t$34(bin_read_t$3,bin_read_t$7,buf,pos_ref)}
    var
     bin_reader_t$7=[0,bin_read_t$36,bin_read_t$35],
     bin_t$7=[0,bin_shape_t$8,bin_writer_t$7,bin_reader_t$7];
    function t_of_sexp$10(x_040){return t_of_sexp$9(_as_,t_of_sexp,x_040)}
    function sexp_of_t$8(x_041){return sexp_of_t$7(_at_,sexp_of_t$0,x_041)}
    function equal(x_042,x_043)
     {function _bEH_(a_037,b_038){return caml_call2(compare,a_037,b_038)}
      var
       match=
        compare$7
         (function(a_035,b_036){return caml_call2(_ao_,a_035,b_036)},
          _bEH_,
          x_042,
          x_043);
      return 0 === match?1:0}
    var
     _hy_=include$6[2],
     _hA_=include$6[4],
     _hC_=include$6[6],
     _hR_=include$6[21],
     _hT_=include$6[23],
     _hU_=include$6[24],
     _h1_=include$6[31],
     _h9_=include$6[39],
     _h__=include$6[40],
     _hx_=include$6[1],
     _hz_=include$6[3],
     _hB_=include$6[5],
     _hD_=include$6[7],
     _hE_=include$6[8],
     _hF_=include$6[9],
     _hG_=include$6[10],
     _hH_=include$6[11],
     _hI_=include$6[12],
     _hJ_=include$6[13],
     _hK_=include$6[14],
     _hL_=include$6[15],
     _hM_=include$6[16],
     _hN_=include$6[17],
     _hO_=include$6[18],
     _hP_=include$6[19],
     _hQ_=include$6[20],
     _hS_=include$6[22],
     _hV_=include$6[25],
     _hW_=include$6[26],
     _hX_=include$6[27],
     _hY_=include$6[28],
     _hZ_=include$6[29],
     _h0_=include$6[30],
     _h2_=include$6[32],
     _h3_=include$6[33],
     _h4_=include$6[34],
     _h5_=include$6[35],
     _h6_=include$6[36],
     _h7_=include$6[37],
     _h8_=include$6[38];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$34);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Result$0);
    var
     _h$_=
      [0,
       [0,
        bin_shape_t$7,
        bin_size_t$15,
        bin_write_t$15,
        bin_read_t$34,
        bin_read_t$33,
        bin_writer_t$6,
        bin_reader_t$6,
        bin_t$6,
        compare$7,
        t_of_sexp$9,
        sexp_of_t$7,
        map],
       [0,
        t_of_sexp$10,
        sexp_of_t$8,
        bin_size_t$16,
        bin_write_t$16,
        bin_read_t$36,
        bin_read_t$35,
        bin_shape_t$8,
        bin_writer_t$7,
        bin_reader_t$7,
        bin_t$7,
        equal,
        tests]],
     Core_Result=
      [0,
       bin_shape_t$7,
       bin_size_t$15,
       bin_write_t$15,
       bin_read_t$34,
       bin_read_t$33,
       bin_writer_t$6,
       bin_reader_t$6,
       bin_t$6,
       _hx_,
       _hy_,
       _hz_,
       _hA_,
       _hB_,
       _hC_,
       _hD_,
       _hE_,
       _hF_,
       _hG_,
       _hH_,
       _hI_,
       _hJ_,
       _hK_,
       _hL_,
       _hM_,
       _hN_,
       _hO_,
       _hP_,
       _hQ_,
       _hR_,
       _hS_,
       _hT_,
       _hU_,
       _hV_,
       _hW_,
       _hX_,
       _hY_,
       _hZ_,
       _h0_,
       _h1_,
       _h2_,
       _h3_,
       _h4_,
       _h5_,
       _h6_,
       _h7_,
       _h8_,
       _h9_,
       _h__,
       _h$_];
    caml_register_global(5215,Core_Result,"Core__Result");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Stable_module_types);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$35);
    caml_call1(Expect_test_collector[5][1],cst_core_src_stable_module_typ);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$36,cst$12);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$37);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Stable_module_types$0);
    var Core_Stable_module_types=[0];
    caml_register_global
     (5216,Core_Stable_module_types,"Core__Stable_module_types");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Stable_unit_test_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$38);
    caml_call1(Expect_test_collector[5][1],cst_core_src_stable_unit_test_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$39,cst$13);
    var Unordered_container_test=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$40);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Stable_unit_test_intf$0);
    var Core_Stable_unit_test_intf=[0,Unordered_container_test];
    caml_register_global
     (5217,Core_Stable_unit_test_intf,"Core__Stable_unit_test_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Container_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$41);
    caml_call1(Expect_test_collector[5][1],cst_core_src_container_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$42,cst$14);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$43);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Container_intf$0);
    var Core_Container_intf=[0];
    caml_register_global(5218,Core_Container_intf,"Core__Container_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Container);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$44);
    caml_call1(Expect_test_collector[5][1],cst_core_src_container_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$45,cst$15);
    var
     _ib_=include$7[2],
     _ic_=include$7[3],
     _id_=include$7[4],
     _ig_=include$7[7],
     _ih_=include$7[8],
     _ii_=include$7[9],
     _ia_=include$7[1],
     _ie_=include$7[5],
     _if_=include$7[6],
     _ij_=include$7[10],
     _ik_=include$7[11],
     _il_=include$7[12],
     _im_=include$7[13],
     _in_=include$7[14],
     _io_=include$7[15];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$46);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Container$0);
    var
     Core_Container=
      [0,
       _ia_,
       _ib_,
       _ic_,
       _id_,
       _ie_,
       _if_,
       _ig_,
       _ih_,
       _ii_,
       _ij_,
       _ik_,
       _il_,
       _im_,
       _in_,
       _io_];
    caml_register_global(5220,Core_Container,"Core__Container");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Deprecate_pipe_bang);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$47);
    caml_call1(Expect_test_collector[5][1],cst_core_src_deprecate_pipe_ba);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$48,cst$16);
    function symbol(x,y){return caml_call1(y,x)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$49);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Deprecate_pipe_bang$0);
    var Core_Deprecate_pipe_bang=[0,symbol];
    caml_register_global
     (5221,Core_Deprecate_pipe_bang,"Core__Deprecate_pipe_bang");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Fn);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$50);
    caml_call1(Expect_test_collector[5][1],cst_core_src_fn_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$51,cst$17);
    var
     _ip_=Base_Fn[1],
     _it_=Base_Fn[5],
     _iq_=Base_Fn[2],
     _ir_=Base_Fn[3],
     _is_=Base_Fn[4],
     _iu_=Base_Fn[6];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$52);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Fn$0);
    var Core_Fn=[0,_ip_,_iq_,_ir_,_is_,_it_,_iu_,symbol];
    caml_register_global(5223,Core_Fn,"Core__Fn");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Ordered_collection_co);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$53);
    caml_call1(Expect_test_collector[5][1],cst_core_src_ordered_collectio);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$54,cst$18);
    var _iv_=include$8[1],_iw_=include$8[2],_ix_=include$8[4];
    function normalize(length_fun,t,i)
     {return 0 <= i?i:i + caml_call1(length_fun,t) | 0}
    function slice(length_fun,sub_fun,t,start,stop)
     {var
       stop$0=0 === stop?caml_call1(length_fun,t):stop,
       pos=normalize(length_fun,t,start),
       len=normalize(length_fun,t,stop$0) - pos | 0;
      return caml_call3(sub_fun,t,pos,len)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$55);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Ordered_collection_co$0);
    var Core_Ordered_collection_common=[0,_iv_,_iw_,_ix_,normalize,slice];
    caml_register_global
     (5225,Core_Ordered_collection_common,"Core__Ordered_collection_common");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Sequence);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$56);
    caml_call1(Expect_test_collector[5][1],cst_core_src_sequence_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$57,cst$19);
    var
     _iE_=include$9[7],
     _iF_=include$9[8],
     _iO_=include$9[17],
     _i2_=include$9[32],
     _i7_=include$9[38],
     _i__=include$9[41],
     _i$_=include$9[42],
     _jm_=include$9[55],
     _ju_=include$9[63],
     _jz_=include$9[68],
     _j1_=include$9[97],
     _j3_=include$9[99],
     _j4_=include$9[100],
     _j8_=include$9[104],
     _iy_=include$9[1],
     _iz_=include$9[2],
     _iA_=include$9[3],
     _iB_=include$9[4],
     _iC_=include$9[5],
     _iD_=include$9[6],
     _iG_=include$9[9],
     _iH_=include$9[10],
     _iI_=include$9[11],
     _iJ_=include$9[12],
     _iK_=include$9[13],
     _iL_=include$9[14],
     _iM_=include$9[15],
     _iN_=include$9[16],
     _iP_=include$9[18],
     _iQ_=include$9[19],
     _iR_=include$9[20],
     _iS_=include$9[21],
     _iT_=include$9[22],
     _iU_=include$9[23],
     _iV_=include$9[24],
     _iW_=include$9[25],
     _iX_=include$9[26],
     _iY_=include$9[27],
     _iZ_=include$9[28],
     _i0_=include$9[30],
     _i1_=include$9[31],
     _i3_=include$9[33],
     _i4_=include$9[34],
     _i5_=include$9[35],
     _i6_=include$9[36],
     _i8_=include$9[39],
     _i9_=include$9[40],
     _ja_=include$9[43],
     _jb_=include$9[44],
     _jc_=include$9[45],
     _jd_=include$9[46],
     _je_=include$9[47],
     _jf_=include$9[48],
     _jg_=include$9[49],
     _jh_=include$9[50],
     _ji_=include$9[51],
     _jj_=include$9[52],
     _jk_=include$9[53],
     _jl_=include$9[54],
     _jn_=include$9[56],
     _jo_=include$9[57],
     _jp_=include$9[58],
     _jq_=include$9[59],
     _jr_=include$9[60],
     _js_=include$9[61],
     _jt_=include$9[62],
     _jv_=include$9[64],
     _jw_=include$9[65],
     _jx_=include$9[66],
     _jy_=include$9[67],
     _jA_=include$9[69],
     _jB_=include$9[70],
     _jC_=include$9[71],
     _jD_=include$9[72],
     _jE_=include$9[73],
     _jF_=include$9[74],
     _jG_=include$9[75],
     _jH_=include$9[76],
     _jI_=include$9[77],
     _jJ_=include$9[78],
     _jK_=include$9[79],
     _jL_=include$9[80],
     _jM_=include$9[81],
     _jN_=include$9[82],
     _jO_=include$9[83],
     _jP_=include$9[84],
     _jQ_=include$9[85],
     _jR_=include$9[86],
     _jS_=include$9[87],
     _jT_=include$9[88],
     _jU_=include$9[89],
     _jV_=include$9[90],
     _jW_=include$9[91],
     _jX_=include$9[92],
     _jY_=include$9[94],
     _jZ_=include$9[95],
     _j0_=include$9[96],
     _j2_=include$9[98],
     _j5_=include$9[101],
     _j6_=include$9[102],
     _j7_=include$9[103],
     _j9_=include$9[105],
     _j__=include$9[106],
     _j$_=include$9[107],
     _ka_=include$9[108],
     _kb_=include$9[109],
     _kc_=include$9[110],
     _kd_=include$9[111],
     _ke_=include$9[113],
     _kf_=caml_call1(Bin_prot_Shape[3][1],cst_a$11),
     _kg_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sequence_ml_6_18),
     _kh_=caml_call1(_c4_,caml_call2(Bin_prot_Shape[15],_kg_,_kf_)),
     _ki_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$12),0],
     _kj_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$35),_ki_,_kh_],0],
     _kk_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sequence_ml_6_6),
     group$16=caml_call2(Bin_prot_Shape[6],_kk_,_kj_);
    function bin_shape_t$9(a)
     {var _bEG_=caml_call1(Bin_prot_Shape[2][1],cst_t$36);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$16,_bEG_),[0,a,0])}
    function bin_size_t$17(size_of_a,v){return caml_call2(_bm_,size_of_a,v)}
    function bin_write_t$17(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_c6_,write_a),buf,pos,v)}
    function bin_read_t$37(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_c9_,of_a),buf,pos_ref,vint)}
    function bin_read_t$38(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_c8_,of_a),buf,pos_ref)}
    var
     of_binable=include$9[104],
     to_binable=include$9[17],
     include$10=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         [0,
          bin_shape_t$9,
          bin_size_t$17,
          bin_write_t$17,
          bin_read_t$38,
          bin_read_t$37],
         to_binable,
         of_binable]),
     _kl_=include$10[1],
     _km_=include$10[2],
     _kn_=include$10[3],
     _ko_=include$10[4],
     _kp_=include$10[5],
     _kq_=include$10[6],
     _kr_=include$10[7],
     _ks_=include$10[8],
     _kt_=_i9_[1],
     _ku_=caml_call1(Bin_prot_Shape[3][1],cst_s),
     _kv_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sequence_ml_21_20),
     _kw_=[0,caml_call2(Bin_prot_Shape[15],_kv_,_ku_),0],
     _kx_=caml_call1(Bin_prot_Shape[3][1],cst_a$13),
     _ky_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sequence_ml_21_15),
     _kz_=
      [0,[0,cst_Yield,[0,caml_call2(Bin_prot_Shape[15],_ky_,_kx_),_kw_]],0],
     _kA_=caml_call1(Bin_prot_Shape[3][1],cst_s$0),
     _kB_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sequence_ml_20_14),
     _kD_=
      [0,
       _kC_,
       [0,[0,cst_Skip,[0,caml_call2(Bin_prot_Shape[15],_kB_,_kA_),0]],_kz_]],
     _kE_=caml_call1(Bin_prot_Shape[9],_kD_),
     _kF_=[0,caml_call1(Bin_prot_Shape[3][1],cst_s$1),0],
     _kG_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$14),_kF_],
     _kH_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$37),_kG_,_kE_],0],
     _kI_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sequence_ml_18_2),
     group$17=caml_call2(Bin_prot_Shape[6],_kI_,_kH_);
    function bin_shape_t$10(a,s)
     {var _bEF_=caml_call1(Bin_prot_Shape[2][1],cst_t$38);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$17,_bEF_),[0,a,[0,s,0]])}
    function bin_size_t$18(size_of_a,size_of_s,param)
     {if(typeof param === "number")
       return 1;
      else
       {if(0 === param[0])
         {var v1=param[1],_bEC_=caml_call1(size_of_s,v1);
          return caml_call2(Bin_prot_Common[23],1,_bEC_)}
        var
         v2=param[2],
         v1$0=param[1],
         _bED_=caml_call1(size_of_a,v1$0),
         size=caml_call2(Bin_prot_Common[23],1,_bED_),
         _bEE_=caml_call1(size_of_s,v2);
        return caml_call2(Bin_prot_Common[23],size,_bEE_)}}
    function bin_write_t$18(write_a,write_s,buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[31],buf,pos,0);
      else
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,1);
          return caml_call3(write_s,buf,pos$0,v1)}
        var
         v2=param[2],
         v1$0=param[1],
         pos$1=caml_call3(Bin_prot_Write[31],buf,pos,2),
         pos$2=caml_call3(write_a,buf,pos$1,v1$0);
        return caml_call3(write_s,buf,pos$2,v2)}}
    function bin_writer_t$8(bin_writer_a,bin_writer_s)
     {function _bEx_(v)
       {var _bEy_=bin_writer_s[2],_bEz_=bin_writer_a[2];
        return function(_bEA_,_bEB_)
         {return bin_write_t$18(_bEz_,_bEy_,v,_bEA_,_bEB_)}}
      return [0,
              function(v)
               {return bin_size_t$18(bin_writer_a[1],bin_writer_s[1],v)},
              _bEx_]}
    function bin_read_t$39(of_a,of_s,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_sequence_ml_Step_,pos_ref[1])}
    function bin_read_t$40(of_a,of_s,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_kJ_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:var arg_1=caml_call2(of_s,buf,pos_ref);return [0,arg_1];
        default:
         var
          arg_1$0=caml_call2(of_a,buf,pos_ref),
          arg_2=caml_call2(of_s,buf,pos_ref);
         return [1,arg_1$0,arg_2]}}
    function bin_reader_t$8(bin_reader_a,bin_reader_s)
     {function _bEw_(buf,pos_ref,vtag)
       {return bin_read_t$39(bin_reader_a[1],bin_reader_s[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$40
                        (bin_reader_a[1],bin_reader_s[1],buf,pos_ref)},
              _bEw_]}
    function bin_t$8(bin_a,bin_s)
     {var
       _bEu_=bin_reader_t$8(bin_a[3],bin_s[3]),
       _bEv_=bin_writer_t$8(bin_a[2],bin_s[2]);
      return [0,bin_shape_t$10(bin_a[1],bin_s[1]),_bEv_,_bEu_]}
    var
     _kK_=_jm_[1],
     _kL_=_jm_[2],
     _kM_=_jm_[3],
     _kN_=_jm_[4],
     _kO_=_jm_[5],
     _kP_=caml_call1(Bin_prot_Shape[3][1],cst_b$1),
     _kQ_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sequence_ml_31_19),
     _kR_=[0,caml_call2(Bin_prot_Shape[15],_kQ_,_kP_),0],
     _kS_=caml_call1(Bin_prot_Shape[3][1],cst_a$15),
     _kT_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sequence_ml_31_14),
     _kU_=[0,[0,cst_Both,[0,caml_call2(Bin_prot_Shape[15],_kT_,_kS_),_kR_]],0],
     _kV_=caml_call1(Bin_prot_Shape[3][1],cst_b$2),
     _kW_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sequence_ml_30_15),
     _kX_=
      [0,[0,cst_Right,[0,caml_call2(Bin_prot_Shape[15],_kW_,_kV_),0]],_kU_],
     _kY_=caml_call1(Bin_prot_Shape[3][1],cst_a$16),
     _kZ_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sequence_ml_29_14),
     _k0_=[0,[0,cst_Left,[0,caml_call2(Bin_prot_Shape[15],_kZ_,_kY_),0]],_kX_],
     _k1_=caml_call1(Bin_prot_Shape[9],_k0_),
     _k2_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$3),0],
     _k3_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$17),_k2_],
     _k4_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$39),_k3_,_k1_],0],
     _k5_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sequence_ml_28_2),
     group$18=caml_call2(Bin_prot_Shape[6],_k5_,_k4_);
    function bin_shape_t$11(a,b)
     {var _bEt_=caml_call1(Bin_prot_Shape[2][1],cst_t$40);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$18,_bEt_),[0,a,[0,b,0]])}
    function bin_size_t$19(size_of_a,size_of_b,param)
     {switch(param[0])
       {case 0:
         var v1=param[1],_bEp_=caml_call1(size_of_a,v1);
         return caml_call2(Bin_prot_Common[23],1,_bEp_);
        case 1:
         var v1$0=param[1],_bEq_=caml_call1(size_of_b,v1$0);
         return caml_call2(Bin_prot_Common[23],1,_bEq_);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          _bEr_=caml_call1(size_of_a,v1$1),
          size=caml_call2(Bin_prot_Common[23],1,_bEr_),
          _bEs_=caml_call1(size_of_b,v2);
         return caml_call2(Bin_prot_Common[23],size,_bEs_)}}
    function bin_write_t$19(write_a,write_b,buf,pos,param)
     {switch(param[0])
       {case 0:
         var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
         return caml_call3(write_a,buf,pos$0,v1);
        case 1:
         var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,1);
         return caml_call3(write_b,buf,pos$1,v1$0);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          pos$2=caml_call3(Bin_prot_Write[31],buf,pos,2),
          pos$3=caml_call3(write_a,buf,pos$2,v1$1);
         return caml_call3(write_b,buf,pos$3,v2)}}
    function bin_writer_t$9(bin_writer_a,bin_writer_b)
     {function _bEk_(v)
       {var _bEl_=bin_writer_b[2],_bEm_=bin_writer_a[2];
        return function(_bEn_,_bEo_)
         {return bin_write_t$19(_bEm_,_bEl_,v,_bEn_,_bEo_)}}
      return [0,
              function(v)
               {return bin_size_t$19(bin_writer_a[1],bin_writer_b[1],v)},
              _bEk_]}
    function bin_read_t$41(of_a,of_b,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_sequence_ml_Merge,pos_ref[1])}
    function bin_read_t$42(of_a,of_b,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_k6_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1];
        case 1:var arg_1$0=caml_call2(of_b,buf,pos_ref);return [1,arg_1$0];
        default:
         var
          arg_1$1=caml_call2(of_a,buf,pos_ref),
          arg_2=caml_call2(of_b,buf,pos_ref);
         return [2,arg_1$1,arg_2]}}
    function bin_reader_t$9(bin_reader_a,bin_reader_b)
     {function _bEj_(buf,pos_ref,vtag)
       {return bin_read_t$41(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$42
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _bEj_]}
    function bin_t$9(bin_a,bin_b)
     {var
       _bEh_=bin_reader_t$9(bin_a[3],bin_b[3]),
       _bEi_=bin_writer_t$9(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$11(bin_a[1],bin_b[1]),_bEi_,_bEh_]}
    function merge_all(Heap)
     {return function(seqs,compare)
       {function _bEe_(param)
         {var not_yet_in_heap=param[2],heap=param[1];
          if(not_yet_in_heap)
           {var
             not_yet_in_heap$0=not_yet_in_heap[2],
             seq=not_yet_in_heap[1],
             match=caml_call1(_ke_[1],seq);
            if(typeof match === "number")
             return [0,[0,heap,not_yet_in_heap$0]];
            else
             {if(0 === match[0])
               {var seq$0=match[1];
                return [0,[0,heap,[0,seq$0,not_yet_in_heap$0]]]}
              var seq$1=match[2],elt=match[1];
              return [0,
                      [0,caml_call2(Heap[2],heap,[0,elt,seq$1]),not_yet_in_heap$0]]}}
          var match$0=caml_call1(Heap[3],heap);
          if(match$0)
           {var
             _bEg_=match$0[1],
             heap$0=_bEg_[2],
             match$1=_bEg_[1],
             seq$2=match$1[2],
             elt$0=match$1[1];
            return [1,elt$0,[0,heap$0,[0,seq$2,0]]]}
          return 0}
        var _bEf_=caml_call2(Base_Comparable[2],compare,_a1_);
        return caml_call2(_i__,[0,caml_call1(Heap[1],_bEf_),seqs],_bEe_)}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$58);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Sequence$0);
    var
     _k7_=
      [0,
       bin_shape_t$11,
       bin_size_t$19,
       bin_write_t$19,
       bin_read_t$42,
       bin_read_t$41,
       bin_writer_t$9,
       bin_reader_t$9,
       bin_t$9,
       _kK_,
       _kL_,
       _kM_,
       _kN_,
       _kO_],
     Core_Sequence=
      [0,
       _kl_,
       _km_,
       _kn_,
       _ko_,
       _kp_,
       _kq_,
       _kr_,
       _ks_,
       [0,
        bin_shape_t$10,
        bin_size_t$18,
        bin_write_t$18,
        bin_read_t$40,
        bin_read_t$39,
        bin_writer_t$8,
        bin_reader_t$8,
        bin_t$8,
        _kt_],
       _k7_,
       _iy_,
       _iz_,
       _iA_,
       _iB_,
       _iC_,
       _iD_,
       _iE_,
       _iF_,
       _iG_,
       _iH_,
       _iI_,
       _iJ_,
       _iK_,
       _iL_,
       _iM_,
       _iN_,
       _iO_,
       _iP_,
       _iQ_,
       _iR_,
       _iS_,
       _iT_,
       _iU_,
       _iV_,
       _iW_,
       _iX_,
       _iY_,
       _iZ_,
       _i0_,
       _i1_,
       _i2_,
       _i3_,
       _i4_,
       _i5_,
       _i6_,
       _i7_,
       _i8_,
       _i__,
       _i$_,
       _ja_,
       _jb_,
       _jc_,
       _jd_,
       _je_,
       _jf_,
       _jg_,
       _jh_,
       _ji_,
       _jj_,
       _jk_,
       _jl_,
       _jn_,
       _jo_,
       _jp_,
       _jq_,
       _jr_,
       _js_,
       _jt_,
       _ju_,
       _jv_,
       _jw_,
       _jx_,
       _jy_,
       _jz_,
       _jA_,
       _jB_,
       _jC_,
       _jD_,
       _jE_,
       _jF_,
       _jG_,
       _jH_,
       _jI_,
       _jJ_,
       _jK_,
       _jL_,
       _jM_,
       _jN_,
       _jO_,
       _jP_,
       _jQ_,
       _jR_,
       _jS_,
       _jT_,
       _jU_,
       _jV_,
       _jW_,
       _jX_,
       _jY_,
       _jZ_,
       _j0_,
       _j1_,
       _j2_,
       _j3_,
       _j4_,
       _j5_,
       _j6_,
       _j7_,
       _j8_,
       _j9_,
       _j__,
       _j$_,
       _ka_,
       _kb_,
       _kc_,
       _kd_,
       merge_all];
    caml_register_global(5229,Core_Sequence,"Core__Sequence");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Array);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$59);
    caml_call1(Expect_test_collector[5][1],cst_core_src_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$60,cst$20);
    var
     _k8_=include$11[4],
     _k9_=include$11[1],
     sexp_of_array=include$11[3],
     array_of_sexp=include$11[2],
     _k__=caml_call1(Bin_prot_Shape[3][1],cst_a$18),
     _k$_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_array_ml_13_12),
     _la_=caml_call1(_c$_,caml_call2(Bin_prot_Shape[15],_k$_,_k__)),
     _lb_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$19),0],
     _lc_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$41),_lb_,_la_],0],
     _ld_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_array_ml_13_0),
     group$19=caml_call2(Bin_prot_Shape[6],_ld_,_lc_);
    function bin_shape_t$12(a)
     {var _bEd_=caml_call1(Bin_prot_Shape[2][1],cst_t$42);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$19,_bEd_),[0,a,0])}
    function bin_size_t$20(size_of_a,v){return caml_call2(_bn_,size_of_a,v)}
    function bin_write_t$20(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_db_,write_a),buf,pos,v)}
    function bin_writer_t$10(bin_writer_a)
     {function _bD$_(v)
       {var _bEa_=bin_writer_a[2];
        return function(_bEb_,_bEc_)
         {return bin_write_t$20(_bEa_,v,_bEb_,_bEc_)}}
      return [0,function(v){return bin_size_t$20(bin_writer_a[1],v)},_bD$_]}
    function bin_read_t$43(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_de_,of_a),buf,pos_ref,vint)}
    function bin_read_t$44(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dd_,of_a),buf,pos_ref)}
    function bin_reader_t$10(bin_reader_a)
     {function _bD__(buf,pos_ref,vtag)
       {return bin_read_t$43(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$44(bin_reader_a[1],buf,pos_ref)},
              _bD__]}
    function bin_t$10(bin_a)
     {var _bD8_=bin_reader_t$10(bin_a[3]),_bD9_=bin_writer_t$10(bin_a[2]);
      return [0,bin_shape_t$12(bin_a[1]),_bD9_,_bD8_]}
    function quickcheck_generator(generator_003)
     {return caml_call1(Base_quickcheck_Export[33],generator_003)}
    function quickcheck_observer(observer_002)
     {return caml_call1(Base_quickcheck_Export[38],observer_002)}
    function quickcheck_shrinker(shrinker_001)
     {return caml_call1(Base_quickcheck_Export[43],shrinker_001)}
    var
     Typename_of_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$7]),
     typename_of_t=Typename_of_t[2];
    function typerep_of_t(of_a)
     {var name_of_t=caml_call1(Typename_of_t[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_bD7_){return caml_call1(_eS_,of_a)}]]]]}
    var
     binary_search=include$11[5],
     binary_search_segmented=include$11[6],
     mem=include$11[7],
     is_empty=include$11[8],
     iter=include$11[9],
     fold=include$11[10],
     fold_result=include$11[11],
     fold_until=include$11[12],
     exists=include$11[13],
     for_all=include$11[14],
     count=include$11[15],
     sum=include$11[16],
     find=include$11[17],
     find_map=include$11[18],
     to_list=include$11[19],
     to_array=include$11[20],
     min_elt=include$11[21],
     max_elt=include$11[22],
     create=include$11[25],
     create_float_uninitialized=include$11[26],
     init=include$11[27],
     make_matrix=include$11[28],
     copy_matrix=include$11[29],
     append=include$11[30],
     concat=include$11[31],
     copy=include$11[32],
     fill=include$11[33],
     blit=include$11[34],
     blito=include$11[35],
     unsafe_blit=include$11[36],
     sub=include$11[37],
     subo=include$11[38],
     of_list=include$11[39],
     map$0=include$11[40],
     folding_map=include$11[41],
     folding_mapi=include$11[42],
     fold_map=include$11[43],
     fold_mapi=include$11[44],
     iteri=include$11[45],
     mapi=include$11[46],
     foldi=include$11[47],
     fold_right=include$11[48],
     sort=include$11[49],
     stable_sort=include$11[50],
     is_sorted=include$11[51],
     is_sorted_strictly=include$11[52],
     merge=include$11[53],
     concat_map=include$11[54],
     concat_mapi=include$11[55],
     partition_tf=include$11[56],
     partitioni_tf=include$11[57],
     cartesian_product=include$11[58],
     transpose=include$11[59],
     transpose_exn=include$11[60],
     filter_opt=include$11[61],
     filter_map=include$11[62],
     filter_mapi=include$11[63],
     for_alli=include$11[64],
     existsi=include$11[65],
     counti=include$11[66],
     iter2_exn=include$11[67],
     map2_exn=include$11[68],
     fold2_exn=include$11[69],
     for_all2_exn=include$11[70],
     exists2_exn=include$11[71],
     filter=include$11[72],
     filteri=include$11[73],
     swap=include$11[74],
     rev_inplace=include$11[75],
     rev=include$11[76],
     of_list_rev=include$11[77],
     of_list_map=include$11[78],
     of_list_mapi=include$11[79],
     of_list_rev_map=include$11[80],
     of_list_rev_mapi=include$11[81],
     map_inplace=include$11[82],
     find_exn=include$11[83],
     find_map_exn=include$11[84],
     findi=include$11[85],
     findi_exn=include$11[86],
     find_mapi=include$11[87],
     find_mapi_exn=include$11[88],
     find_consecutive_duplicate=include$11[89],
     reduce=include$11[90],
     reduce_exn=include$11[91],
     permute=include$11[92],
     random_element=include$11[93],
     random_element_exn=include$11[94],
     zip=include$11[95],
     zip_exn=include$11[96],
     unzip=include$11[97],
     sorted_copy=include$11[98],
     last=include$11[99],
     equal$0=include$11[100],
     to_sequence=include$11[101],
     to_sequence_mutable=include$11[102];
    function normalize$0(t,i)
     {return normalize(function(_bD6_){return _bD6_.length - 1},t,i)}
    function slice$0(t,start,stop)
     {return slice(function(_bD5_){return _bD5_.length - 1},sub,t,start,stop)}
    function nget(t,i)
     {var _bD4_=normalize$0(t,i);return caml_check_bound(t,_bD4_)[1 + _bD4_]}
    function nset(t,i,v)
     {var _bD3_=normalize$0(t,i);
      caml_check_bound(t,_bD3_)[1 + _bD3_] = v;
      return 0}
    function length(_bD2_){return _bD2_.length - 1}
    function get(_bD1_,_bD0_){return caml_check_bound(_bD1_,_bD0_)[1 + _bD0_]}
    function set(_bDZ_,_bDY_,_bDX_)
     {caml_check_bound(_bDZ_,_bDY_)[1 + _bDY_] = _bDX_;return 0}
    var
     _le_=caml_call1(_c$_,_b7_),
     _lf_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$43),0,_le_],0],
     _lg_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_array_ml_41_4),
     group$20=caml_call2(Bin_prot_Shape[6],_lg_,_lf_),
     _lh_=caml_call1(Bin_prot_Shape[2][1],cst_t$44),
     bin_shape_t$13=caml_call1(caml_call2(Bin_prot_Shape[14],group$20,_lh_),0);
    function bin_size_t$21(v){return caml_call2(_bn_,bin_size_t$3,v)}
    function bin_write_t$21(buf,pos,v)
     {return caml_call3(caml_call1(_db_,bin_write_t$3),buf,pos,v)}
    function bin_read_t$45(buf,pos_ref,vint)
     {return caml_call3(caml_call1(_de_,bin_read_t$7),buf,pos_ref,vint)}
    function bin_read_t$46(buf,pos_ref)
     {return caml_call2(caml_call1(_dd_,bin_read_t$7),buf,pos_ref)}
    function compare$8(a_004,b_005)
     {return caml_call3
              (_b_,
               function(a_006,b_007){return caml_call2(compare,a_006,b_007)},
               a_004,
               b_005)}
    function t_of_sexp$11(x_009){return caml_call2(_d_,t_of_sexp,x_009)}
    function sexp_of_t$9(x_010){return caml_call2(_e_,sexp_of_t$0,x_010)}
    function create$0(len){return caml_call2(create,len,0)}
    var
     _li_=
      [0,
       create$0,
       length,
       get,
       set,
       function(_bDW_,_bDV_,_bDU_,_bDT_,_bDS_)
        {return runtime.core_array_unsafe_int_blit
                 (_bDW_,_bDV_,_bDU_,_bDT_,_bDS_)}];
    function equal$1(_bDR_,_bDQ_){return _bDR_ === _bDQ_?1:0}
    function of_bool(b){return b?1:0}
    var
     include$12=
      caml_call1
       (caml_call1(Base_for_tests_Test_blit[5],[0,equal$1,of_bool]),_li_),
     blit$0=include$12[1],
     blito$0=include$12[2],
     sub$0=include$12[4],
     subo$0=include$12[5],
     _lj_=caml_call1(_c$_,_b$_),
     _lk_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$45),0,_lj_],0],
     _ll_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_array_ml_77_4),
     group$21=caml_call2(Bin_prot_Shape[6],_ll_,_lk_),
     _lm_=caml_call1(Bin_prot_Shape[2][1],cst_t$46),
     bin_shape_t$14=caml_call1(caml_call2(Bin_prot_Shape[14],group$21,_lm_),0);
    function bin_size_t$22(v){return caml_call2(_bn_,bin_size_t$4,v)}
    function bin_write_t$22(buf,pos,v)
     {return caml_call3(caml_call1(_db_,bin_write_t$4),buf,pos,v)}
    function bin_read_t$47(buf,pos_ref,vint)
     {return caml_call3(caml_call1(_de_,bin_read_t$9),buf,pos_ref,vint)}
    function bin_read_t$48(buf,pos_ref)
     {return caml_call2(caml_call1(_dd_,bin_read_t$9),buf,pos_ref)}
    function compare$9(a_011,b_012)
     {return caml_call3
              (_b_,
               function(a_013,b_014){return caml_call2(_u_,a_013,b_014)},
               a_011,
               b_012)}
    function t_of_sexp$12(x_016){return caml_call2(_d_,_y_,x_016)}
    function sexp_of_t$10(x_017){return caml_call2(_e_,_z_,x_017)}
    function create$1(len){return caml_call2(create,len,0.)}
    var
     _ln_=
      [0,
       create$1,
       length,
       get,
       set,
       function(_bDP_,_bDO_,_bDN_,_bDM_,_bDL_)
        {return runtime.core_array_unsafe_float_blit
                 (_bDP_,_bDO_,_bDN_,_bDM_,_bDL_)}],
     equal$2=include$13[15];
    function of_bool$0(b){return b?1.:0.}
    var
     include$14=
      caml_call1
       (caml_call1(Base_for_tests_Test_blit[5],[0,equal$2,of_bool$0]),_ln_),
     blit$1=include$14[1],
     blito$1=include$14[2],
     sub$1=include$14[4],
     subo$1=include$14[5],
     _lo_=caml_call1(Bin_prot_Shape[3][1],cst_a$20),
     _lp_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_array_ml_345_25),
     _lq_=caml_call1(_c$_,caml_call2(Bin_prot_Shape[15],_lp_,_lo_)),
     _lr_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$1),0],
     _ls_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$21),_lr_],
     _lt_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$47),_ls_,_lq_],0],
     _lu_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_array_ml_345_2),
     group$22=caml_call2(Bin_prot_Shape[6],_lu_,_lt_);
    function bin_shape_t$15(a,perms)
     {var _bDK_=caml_call1(Bin_prot_Shape[2][1],cst_t$48);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$22,_bDK_),
               [0,a,[0,perms,0]])}
    function bin_size_t$23(size_of_a,size_of_perms,v)
     {return caml_call2(_bn_,size_of_a,v)}
    function bin_write_t$23(write_a,write_perms,buf,pos,v)
     {return caml_call3(caml_call1(_db_,write_a),buf,pos,v)}
    function bin_writer_t$11(bin_writer_a,bin_writer_perms)
     {function _bDF_(v)
       {var _bDG_=bin_writer_perms[2],_bDH_=bin_writer_a[2];
        return function(_bDI_,_bDJ_)
         {return bin_write_t$23(_bDH_,_bDG_,v,_bDI_,_bDJ_)}}
      return [0,
              function(v)
               {return bin_size_t$23(bin_writer_a[1],bin_writer_perms[1],v)},
              _bDF_]}
    function bin_read_t$49(of_a,of_perms,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_de_,of_a),buf,pos_ref,vint)}
    function bin_read_t$50(of_a,of_perms,buf,pos_ref)
     {return caml_call2(caml_call1(_dd_,of_a),buf,pos_ref)}
    function bin_reader_t$11(bin_reader_a,bin_reader_perms)
     {function _bDE_(buf,pos_ref,vtag)
       {return bin_read_t$49
                (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$50
                        (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref)},
              _bDE_]}
    function bin_t$11(bin_a,bin_perms)
     {var
       _bDC_=bin_reader_t$11(bin_a[3],bin_perms[3]),
       _bDD_=bin_writer_t$11(bin_a[2],bin_perms[2]);
      return [0,bin_shape_t$15(bin_a[1],bin_perms[1]),_bDD_,_bDC_]}
    function compare$10(cmp_a,cmp_perms,a_018,b_019)
     {return caml_call3
              (_b_,
               function(a_020,b_021){return caml_call2(cmp_a,a_020,b_021)},
               a_018,
               b_019)}
    function t_of_sexp$13(of_a_022,of_perms_023,x_025)
     {return caml_call2(_d_,of_a_022,x_025)}
    function sexp_of_t$11(of_a_026,of_perms_027,x_028)
     {return caml_call2(_e_,of_a_026,x_028)}
    caml_call1(Typerep_lib_Make_typename[3],[0,name$8]);
    var
     _lv_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$2),0],
     _lw_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$49),_lv_,bin_shape_t$13],0],
     _lx_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_array_ml_350_4),
     group$23=caml_call2(Bin_prot_Shape[6],_lx_,_lw_);
    function bin_shape_t$16(perms)
     {var _bDB_=caml_call1(Bin_prot_Shape[2][1],cst_t$50);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$23,_bDB_),[0,perms,0])}
    function bin_size_t$24(size_of_perms){return bin_size_t$21}
    function bin_write_t$24(write_perms){return bin_write_t$21}
    function bin_writer_t$12(bin_writer_perms)
     {function _bDA_(v)
       {return caml_call1(bin_write_t$24(bin_writer_perms[2]),v)}
      return [0,
              function(v)
               {return caml_call1(bin_size_t$24(bin_writer_perms[1]),v)},
              _bDA_]}
    function bin_read_t$51(of_perms){return bin_read_t$45}
    function bin_read_t$52(of_perms){return bin_read_t$46}
    function bin_reader_t$12(bin_reader_perms)
     {function _bDz_(buf,pos_ref,vtag)
       {return caml_call3(bin_read_t$51(bin_reader_perms[1]),buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2
                        (bin_read_t$52(bin_reader_perms[1]),buf,pos_ref)},
              _bDz_]}
    function bin_t$12(bin_perms)
     {var
       _bDx_=bin_reader_t$12(bin_perms[3]),
       _bDy_=bin_writer_t$12(bin_perms[2]);
      return [0,bin_shape_t$16(bin_perms[1]),_bDy_,_bDx_]}
    function compare$11(cmp_perms,a_029,b_030){return compare$8(a_029,b_030)}
    function t_of_sexp$14(of_perms_031){return t_of_sexp$11}
    function sexp_of_t$12(of_perms_033){return sexp_of_t$9}
    var
     _ly_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$3),0],
     _lz_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$51),_ly_,bin_shape_t$14],0],
     _lA_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_array_ml_356_4),
     group$24=caml_call2(Bin_prot_Shape[6],_lA_,_lz_);
    function bin_shape_t$17(perms)
     {var _bDw_=caml_call1(Bin_prot_Shape[2][1],cst_t$52);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$24,_bDw_),[0,perms,0])}
    function bin_size_t$25(size_of_perms){return bin_size_t$22}
    function bin_write_t$25(write_perms){return bin_write_t$22}
    function bin_writer_t$13(bin_writer_perms)
     {function _bDv_(v)
       {return caml_call1(bin_write_t$25(bin_writer_perms[2]),v)}
      return [0,
              function(v)
               {return caml_call1(bin_size_t$25(bin_writer_perms[1]),v)},
              _bDv_]}
    function bin_read_t$53(of_perms){return bin_read_t$47}
    function bin_read_t$54(of_perms){return bin_read_t$48}
    function bin_reader_t$13(bin_reader_perms)
     {function _bDu_(buf,pos_ref,vtag)
       {return caml_call3(bin_read_t$53(bin_reader_perms[1]),buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2
                        (bin_read_t$54(bin_reader_perms[1]),buf,pos_ref)},
              _bDu_]}
    function bin_t$13(bin_perms)
     {var
       _bDs_=bin_reader_t$13(bin_perms[3]),
       _bDt_=bin_writer_t$13(bin_perms[2]);
      return [0,bin_shape_t$17(bin_perms[1]),_bDt_,_bDs_]}
    function compare$12(cmp_perms,a_034,b_035){return compare$9(a_034,b_035)}
    function t_of_sexp$15(of_perms_036){return t_of_sexp$12}
    function sexp_of_t$13(of_perms_038){return sexp_of_t$10}
    function to_array_id(_bDr_){return _bDr_}
    function of_array_id(_bDq_){return _bDq_}
    var
     _lB_=
      [0,
       bin_shape_t$17,
       bin_size_t$25,
       bin_write_t$25,
       bin_read_t$54,
       bin_read_t$53,
       bin_writer_t$13,
       bin_reader_t$13,
       bin_t$13,
       compare$12,
       t_of_sexp$15,
       sexp_of_t$13,
       blit$1,
       blito$1,
       sub$1,
       subo$1],
     _lC_=
      [0,
       bin_shape_t$16,
       bin_size_t$24,
       bin_write_t$24,
       bin_read_t$52,
       bin_read_t$51,
       bin_writer_t$12,
       bin_reader_t$12,
       bin_t$12,
       compare$11,
       t_of_sexp$14,
       sexp_of_t$12,
       blit$0,
       blito$0,
       sub$0,
       subo$0];
    function invariant(invariant_a,t){return caml_call2(iter,t,invariant_a)}
    var
     _lD_=include$15[13],
     _lE_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$53),0,bin_shape_t$13],0],
     _lF_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_array_ml_469_2),
     group$25=caml_call2(Bin_prot_Shape[6],_lF_,_lE_),
     _lG_=caml_call1(Bin_prot_Shape[2][1],cst_t$54),
     bin_shape_t$18=caml_call1(caml_call2(Bin_prot_Shape[14],group$25,_lG_),0),
     bin_writer_t$14=[0,bin_size_t$21,bin_write_t$21],
     bin_reader_t$14=[0,bin_read_t$46,bin_read_t$45],
     bin_t$14=[0,bin_shape_t$18,bin_writer_t$14,bin_reader_t$14],
     _lH_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$55),0,bin_shape_t$14],0],
     _lI_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_array_ml_475_2),
     group$26=caml_call2(Bin_prot_Shape[6],_lI_,_lH_),
     _lJ_=caml_call1(Bin_prot_Shape[2][1],cst_t$56),
     bin_shape_t$19=caml_call1(caml_call2(Bin_prot_Shape[14],group$26,_lJ_),0),
     bin_writer_t$15=[0,bin_size_t$22,bin_write_t$22],
     bin_reader_t$15=[0,bin_read_t$48,bin_read_t$47],
     bin_t$15=[0,bin_shape_t$19,bin_writer_t$15,bin_reader_t$15];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$61);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Array$0);
    var
     Core_Array=
      [0,
       bin_shape_t$12,
       bin_size_t$20,
       bin_write_t$20,
       bin_read_t$44,
       bin_read_t$43,
       bin_writer_t$10,
       bin_reader_t$10,
       bin_t$10,
       quickcheck_generator,
       quickcheck_observer,
       quickcheck_shrinker,
       typerep_of_t,
       typename_of_t,
       _k9_,
       array_of_sexp,
       sexp_of_array,
       _k8_,
       binary_search,
       binary_search_segmented,
       mem,
       is_empty,
       iter,
       fold,
       fold_result,
       fold_until,
       exists,
       for_all,
       count,
       sum,
       find,
       find_map,
       to_list,
       to_array,
       min_elt,
       max_elt,
       invariant,
       _lD_,
       create,
       create_float_uninitialized,
       init,
       make_matrix,
       copy_matrix,
       append,
       concat,
       copy,
       fill,
       blit,
       blito,
       unsafe_blit,
       sub,
       subo,
       of_list,
       map$0,
       folding_map,
       folding_mapi,
       fold_map,
       fold_mapi,
       iteri,
       mapi,
       foldi,
       fold_right,
       sort,
       stable_sort,
       is_sorted,
       is_sorted_strictly,
       merge,
       concat_map,
       concat_mapi,
       partition_tf,
       partitioni_tf,
       cartesian_product,
       transpose,
       transpose_exn,
       filter_opt,
       filter_map,
       filter_mapi,
       for_alli,
       existsi,
       counti,
       iter2_exn,
       map2_exn,
       fold2_exn,
       for_all2_exn,
       exists2_exn,
       filter,
       filteri,
       swap,
       rev_inplace,
       rev,
       of_list_rev,
       of_list_map,
       of_list_mapi,
       of_list_rev_map,
       of_list_rev_mapi,
       map_inplace,
       find_exn,
       find_map_exn,
       findi,
       findi_exn,
       find_mapi,
       find_mapi_exn,
       find_consecutive_duplicate,
       reduce,
       reduce_exn,
       permute,
       random_element,
       random_element_exn,
       zip,
       zip_exn,
       unzip,
       sorted_copy,
       last,
       equal$0,
       to_sequence,
       to_sequence_mutable,
       [0,
        bin_size_t$21,
        bin_write_t$21,
        bin_read_t$46,
        bin_read_t$45,
        bin_shape_t$18,
        bin_writer_t$14,
        bin_reader_t$14,
        bin_t$14,
        compare$8,
        t_of_sexp$11,
        sexp_of_t$9,
        blit$0,
        blito$0,
        sub$0,
        subo$0],
       [0,
        bin_size_t$22,
        bin_write_t$22,
        bin_read_t$48,
        bin_read_t$47,
        bin_shape_t$19,
        bin_writer_t$15,
        bin_reader_t$15,
        bin_t$15,
        compare$9,
        t_of_sexp$12,
        sexp_of_t$10,
        blit$1,
        blito$1,
        sub$1,
        subo$1],
       normalize$0,
       slice$0,
       nget,
       nset,
       [0,
        bin_shape_t$15,
        bin_size_t$23,
        bin_write_t$23,
        bin_read_t$50,
        bin_read_t$49,
        bin_writer_t$11,
        bin_reader_t$11,
        bin_t$11,
        compare$10,
        t_of_sexp$13,
        sexp_of_t$11,
        _lC_,
        _lB_,
        of_array_id,
        to_array_id,
        to_sequence_mutable,
        mem,
        iter,
        fold,
        fold_result,
        fold_until,
        exists,
        for_all,
        count,
        sum,
        find,
        find_map,
        to_list,
        copy,
        min_elt,
        max_elt,
        blit,
        blito,
        unsafe_blit,
        sub,
        subo,
        binary_search,
        binary_search_segmented,
        function(_bDp_){return _bDp_.length - 1},
        is_empty,
        create,
        create_float_uninitialized,
        init,
        make_matrix,
        copy_matrix,
        append,
        concat,
        copy,
        fill,
        of_list,
        map$0,
        mapi,
        folding_map,
        iteri,
        foldi,
        folding_mapi,
        fold_right,
        sort,
        stable_sort,
        is_sorted,
        is_sorted_strictly,
        merge,
        concat_map,
        concat_mapi,
        partition_tf,
        partitioni_tf,
        cartesian_product,
        transpose,
        transpose_exn,
        normalize$0,
        slice$0,
        nget,
        nset,
        filter_opt,
        filter_map,
        filter_mapi,
        for_alli,
        existsi,
        counti,
        iter2_exn,
        map2_exn,
        fold2_exn,
        for_all2_exn,
        exists2_exn,
        filter,
        filteri,
        swap,
        rev_inplace,
        of_list_rev,
        of_list_map,
        of_list_mapi,
        of_list_rev_map,
        of_list_rev_mapi,
        map_inplace,
        find_exn,
        find_map_exn,
        findi,
        findi_exn,
        find_mapi,
        find_mapi_exn,
        find_consecutive_duplicate,
        reduce,
        reduce_exn,
        permute,
        zip,
        zip_exn,
        unzip,
        sorted_copy,
        last,
        equal$0,
        to_sequence,
        to_sequence_mutable]];
    caml_register_global(5235,Core_Array,"Core__Array");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Either);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$62);
    caml_call1(Expect_test_collector[5][1],cst_core_src_either_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$63,cst$21);
    var
     _lK_=caml_call1(Bin_prot_Shape[3][1],cst_s$2),
     _lL_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_either_ml_5_18),
     _lM_=[0,[0,cst_Second,[0,caml_call2(Bin_prot_Shape[15],_lL_,_lK_),0]],0],
     _lN_=caml_call1(Bin_prot_Shape[3][1],cst_f),
     _lO_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_either_ml_4_17),
     _lP_=
      [0,[0,cst_First,[0,caml_call2(Bin_prot_Shape[15],_lO_,_lN_),0]],_lM_],
     _lQ_=caml_call1(Bin_prot_Shape[9],_lP_),
     _lR_=[0,caml_call1(Bin_prot_Shape[3][1],cst_s$3),0],
     _lS_=[0,caml_call1(Bin_prot_Shape[3][1],cst_f$0),_lR_],
     _lT_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$57),_lS_,_lQ_],0],
     _lU_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_either_ml_3_4),
     group$27=caml_call2(Bin_prot_Shape[6],_lU_,_lT_);
    function bin_shape_t$20(f,s)
     {var _bDo_=caml_call1(Bin_prot_Shape[2][1],cst_t$58);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$27,_bDo_),[0,f,[0,s,0]])}
    function bin_size_t$26(size_of_f,size_of_s,param)
     {if(0 === param[0])
       {var v1=param[1],_bDm_=caml_call1(size_of_f,v1);
        return caml_call2(Bin_prot_Common[23],1,_bDm_)}
      var v1$0=param[1],_bDn_=caml_call1(size_of_s,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_bDn_)}
    function bin_write_t$26(write_f,write_s,buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
        return caml_call3(write_f,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,1);
      return caml_call3(write_s,buf,pos$1,v1$0)}
    function bin_writer_t$16(bin_writer_f,bin_writer_s)
     {function _bDh_(v)
       {var _bDi_=bin_writer_s[2],_bDj_=bin_writer_f[2];
        return function(_bDk_,_bDl_)
         {return bin_write_t$26(_bDj_,_bDi_,v,_bDk_,_bDl_)}}
      return [0,
              function(v)
               {return bin_size_t$26(bin_writer_f[1],bin_writer_s[1],v)},
              _bDh_]}
    function bin_read_t$55(of_f,of_s,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_either_ml_Stable_,pos_ref[1])}
    function bin_read_t$56(of_f,of_s,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(of_f,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(of_s,buf,pos_ref);return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_lV_,pos_ref[1])}
    function bin_reader_t$16(bin_reader_f,bin_reader_s)
     {function _bDg_(buf,pos_ref,vtag)
       {return bin_read_t$55(bin_reader_f[1],bin_reader_s[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$56
                        (bin_reader_f[1],bin_reader_s[1],buf,pos_ref)},
              _bDg_]}
    function bin_t$16(bin_f,bin_s)
     {var
       _bDe_=bin_reader_t$16(bin_f[3],bin_s[3]),
       _bDf_=bin_writer_t$16(bin_f[2],bin_s[2]);
      return [0,bin_shape_t$20(bin_f[1],bin_s[1]),_bDf_,_bDe_]}
    function compare$13(cmp_f,cmp_s,a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      if(0 === a_001[0])
       {var _bDc_=a_001[1];
        if(0 === b_002[0])
         {var b_004=b_002[1];return caml_call2(cmp_f,_bDc_,b_004)}
        return -1}
      var _bDd_=a_001[1];
      if(0 === b_002[0])return 1;
      var b_006=b_002[1];
      return caml_call2(cmp_s,_bDd_,b_006)}
    function t_of_sexp$16(of_f_007,of_s_008,sexp_013)
     {if(0 === sexp_013[0])
       {var _bC__=sexp_013[1],switch$0=0;
        if(caml_string_notequal(_bC__,cst_First$0))
         {var switch$1=0;
          if(caml_string_notequal(_bC__,cst_Second$0))
           if(caml_string_notequal(_bC__,cst_first))
            {if(caml_string_notequal(_bC__,cst_second))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_011$0,sexp_013)}
        if(! switch$0)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],error_source_011$0,sexp_013)}
      else
       {var _bC$_=sexp_013[1];
        if(! _bC$_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_011$0,sexp_013);
        var _bDa_=_bC$_[1];
        if(0 !== _bDa_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_011$0,sexp_013);
        var _bDb_=_bDa_[1],switch$2=0;
        if(caml_string_notequal(_bDb_,cst_First$1))
         {var switch$3=0;
          if(caml_string_notequal(_bDb_,cst_Second$1))
           if(caml_string_notequal(_bDb_,cst_first$0))
            {if(caml_string_notequal(_bDb_,cst_second$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args_020=_bC$_[2];
            if(sexp_args_020 && ! sexp_args_020[2])
             {var
               arg0_021=sexp_args_020[1],
               res0_022=caml_call1(of_s_008,arg0_021);
              return [1,res0_022]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_011$0,
                     _bDb_,
                     sexp_013)}}
        if(! switch$2)
         {var sexp_args_015=_bC$_[2];
          if(sexp_args_015 && ! sexp_args_015[2])
           {var
             arg0_016=sexp_args_015[1],
             res0_017=caml_call1(of_f_007,arg0_016);
            return [0,res0_017]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_011$0,
                   _bDb_,
                   sexp_013)}}
      return caml_call2
              (Sexplib0_Sexp_conv_error[8],error_source_011$0,sexp_013)}
    function sexp_of_t$14(of_f_025,of_s_026,param)
     {if(0 === param[0])
       {var arg0_027=param[1],res0_028=caml_call1(of_f_025,arg0_027);
        return [1,[0,_lW_,[0,res0_028,0]]]}
      var arg0_029=param[1],res0_030=caml_call1(of_s_026,arg0_029);
      return [1,[0,_lX_,[0,res0_030,0]]]}
    var
     Typename_of_t$0=caml_call1(Typerep_lib_Make_typename[3],[0,name$9]),
     typename_of_t$0=Typename_of_t$0[2];
    function typerep_of_t$0(of_f,of_s)
     {var name_of_t=caml_call2(Typename_of_t$0[1],of_f,of_s);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_bC5_)
                  {var
                    _bC6_=[0,function(v0){return [0,v0]}],
                    _bC7_=
                     [0,
                      cst_First$2,
                      of_f,
                      1,
                      0,
                      0,
                      0,
                      caml_call2(Typerep_lib_Typename[1],0,0),
                      _bC6_],
                    tag0=caml_call1(Typerep_lib_Std[1][4][9],_bC7_),
                    _bC8_=[0,function(v0){return [1,v0]}],
                    _bC9_=
                     [0,
                      cst_Second$2,
                      of_s,
                      1,
                      0,
                      1,
                      1,
                      caml_call2(Typerep_lib_Typename[1],0,0),
                      _bC8_],
                    tag1=caml_call1(Typerep_lib_Std[1][4][9],_bC9_),
                    typename=caml_call1(Typerep_lib_Std[1][1][2],name_of_t),
                    tags=[0,[0,tag0],[0,tag1]],
                    polymorphic=0;
                   function value(param)
                    {if(0 === param[0]){var v0=param[1];return [0,tag0,v0]}
                     var v0$0=param[1];
                     return [0,tag1,v0$0]}
                   return [8,
                           caml_call1
                            (Typerep_lib_Std[1][6][7],
                             [0,typename,tags,polymorphic,value])]}]]]]}
    function map$1(x,f1,f2)
     {if(0 === x[0]){var x1=x[1];return [0,caml_call1(f1,x1)]}
      var x2=x[1];
      return [1,caml_call1(f2,x2)]}
    var
     _lY_=include$16[1],
     hash_fold_t$6=include$16[2],
     t_of_sexp$17=include$16[3],
     sexp_of_t$15=include$16[4],
     t_sexp_grammar=include$16[5],
     invariant$0=include$16[6],
     swap$0=include$16[7],
     value=include$16[8],
     iter$0=include$16[9],
     value_map=include$16[10],
     map$2=include$16[11],
     equal$3=include$16[12],
     is_first=include$16[15],
     is_second=include$16[16],
     first=include$16[17],
     second=include$16[18];
    function compare$14(cmp_a,cmp_b,a_036,b_037)
     {function _bC4_(a_040,b_041){return caml_call2(cmp_b,a_040,b_041)}
      return caml_call4
              (_lY_,
               function(a_038,b_039){return caml_call2(cmp_a,a_038,b_039)},
               _bC4_,
               a_036,
               b_037)}
    var
     include$17=caml_call1(Derived2,[0,compare$14,sexp_of_t$15]),
     _lZ_=include$17[1],
     _l0_=Base_quickcheck_Generator[18],
     _l1_=Base_quickcheck_Observer[20],
     _l2_=Base_quickcheck_Shrinker[20];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$64);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Either$0);
    var
     Core_Either=
      [0,
       bin_shape_t$20,
       bin_size_t$26,
       bin_write_t$26,
       bin_read_t$56,
       bin_read_t$55,
       bin_writer_t$16,
       bin_reader_t$16,
       bin_t$16,
       typerep_of_t$0,
       typename_of_t$0,
       _lY_,
       hash_fold_t$6,
       t_of_sexp$17,
       sexp_of_t$15,
       t_sexp_grammar,
       invariant$0,
       swap$0,
       value,
       iter$0,
       value_map,
       map$2,
       equal$3,
       is_first,
       is_second,
       first,
       second,
       _lZ_,
       _l0_,
       _l1_,
       _l2_,
       [0,
        [0,
         bin_shape_t$20,
         bin_size_t$26,
         bin_write_t$26,
         bin_read_t$56,
         bin_read_t$55,
         bin_writer_t$16,
         bin_reader_t$16,
         bin_t$16,
         compare$13,
         t_of_sexp$16,
         sexp_of_t$14,
         map$1]]];
    caml_register_global(5241,Core_Either,"Core__Either");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Info_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$65);
    caml_call1(Expect_test_collector[5][1],cst_core_src_info_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$66,cst$22);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$67);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Info_intf$0);
    var Core_Info_intf=[0];
    caml_register_global(5242,Core_Info_intf,"Core__Info_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Source_code_position0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$68);
    caml_call1(Expect_test_collector[5][1],cst_core_src_source_code_posit);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$69,cst$23);
    var
     _mf_=include$18[19],
     _mg_=include$18[21],
     _l3_=include$18[4],
     _l4_=include$18[5],
     _l5_=include$18[6],
     _l6_=include$18[7],
     _l7_=include$18[8],
     _l8_=include$18[9],
     _l9_=include$18[10],
     _l__=include$18[12],
     _l$_=include$18[13],
     _ma_=include$18[14],
     _mb_=include$18[15],
     _mc_=include$18[16],
     _md_=include$18[17],
     _me_=include$18[18],
     _mh_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_pos_fname,_bV_],
         [0,
          [0,cst_pos_lnum,_b7_],
          [0,[0,cst_pos_bol,_b7_],[0,[0,cst_pos_cnum,_b7_],0]]]]),
     _mi_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$59),0,_mh_],0],
     _mj_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_source_code_posit$0),
     group$28=caml_call2(Bin_prot_Shape[6],_mj_,_mi_),
     _mk_=caml_call1(Bin_prot_Shape[2][1],cst_t$60),
     bin_shape_t$21=caml_call1(caml_call2(Bin_prot_Shape[14],group$28,_mk_),0);
    function bin_size_t$27(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _bC0_=caml_call1(bin_size_t$1,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bC0_),
       _bC1_=caml_call1(bin_size_t$3,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_bC1_),
       _bC2_=caml_call1(bin_size_t$3,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_bC2_),
       _bC3_=caml_call1(bin_size_t$3,v4);
      return caml_call2(Bin_prot_Common[23],size$1,_bC3_)}
    function bin_write_t$27(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$1,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$3,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$3,buf,pos$1,v3);
      return caml_call3(bin_write_t$3,buf,pos$2,v4)}
    var bin_writer_t$17=[0,bin_size_t$27,bin_write_t$27];
    function bin_read_t$57(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_source_code_posit$1,
               pos_ref[1])}
    function bin_read_t$58(buf,pos_ref)
     {var
       v_pos_fname=caml_call2(bin_read_t$3,buf,pos_ref),
       v_pos_lnum=caml_call2(bin_read_t$7,buf,pos_ref),
       v_pos_bol=caml_call2(bin_read_t$7,buf,pos_ref),
       v_pos_cnum=caml_call2(bin_read_t$7,buf,pos_ref);
      return [0,v_pos_fname,v_pos_lnum,v_pos_bol,v_pos_cnum]}
    var
     bin_reader_t$17=[0,bin_read_t$58,bin_read_t$57],
     bin_t$17=[0,bin_shape_t$21,bin_writer_t$17,bin_reader_t$17];
    function compare$15(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_ao_,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(compare,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare,a_001[3],b_002[3]);
          return 0 === n$1?caml_call2(compare,a_001[4],b_002[4]):n$1}
        return n$0}
      return n}
    function pos_cnum(r){return r[4]}
    function pos_bol(r){return r[3]}
    function pos_lnum(r){return r[2]}
    function pos_fname(r){return r[1]}
    function _ml_(r,v){return [0,r[1],r[2],r[3],v]}
    var
     _mm_=0,
     pos_cnum$0=
      [0,function(param){return 0},cst_pos_cnum$0,_mm_,pos_cnum,_ml_];
    function _mn_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _mo_=0,
     pos_bol$0=[0,function(param){return 0},cst_pos_bol$0,_mo_,pos_bol,_mn_];
    function _mp_(r,v){return [0,r[1],v,r[3],r[4]]}
    var
     _mq_=0,
     pos_lnum$0=
      [0,function(param){return 0},cst_pos_lnum$0,_mq_,pos_lnum,_mp_];
    function _mr_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _ms_=0,
     pos_fname$0=
      [0,function(param){return 0},cst_pos_fname$0,_ms_,pos_fname,_mr_];
    function make_creator
     (pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun,compile_acc)
     {var
       match=caml_call2(pos_fname_fun,pos_fname$0,compile_acc),
       compile_acc$0=match[2],
       pos_fname_gen=match[1],
       match$0=caml_call2(pos_lnum_fun,pos_lnum$0,compile_acc$0),
       compile_acc$1=match$0[2],
       pos_lnum_gen=match$0[1],
       match$1=caml_call2(pos_bol_fun,pos_bol$0,compile_acc$1),
       compile_acc$2=match$1[2],
       pos_bol_gen=match$1[1],
       match$2=caml_call2(pos_cnum_fun,pos_cnum$0,compile_acc$2),
       compile_acc$3=match$2[2],
       pos_cnum_gen=match$2[1];
      return [0,
              function(acc)
               {var
                 pos_fname=caml_call1(pos_fname_gen,acc),
                 pos_lnum=caml_call1(pos_lnum_gen,acc),
                 pos_bol=caml_call1(pos_bol_gen,acc),
                 pos_cnum=caml_call1(pos_cnum_gen,acc);
                return [0,pos_fname,pos_lnum,pos_bol,pos_cnum]},
              compile_acc$3]}
    function create$2(pos_fname,pos_lnum,pos_bol,pos_cnum)
     {return [0,pos_fname,pos_lnum,pos_bol,pos_cnum]}
    function map$3(pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {var
       _bCX_=caml_call1(pos_cnum_fun,pos_cnum$0),
       _bCY_=caml_call1(pos_bol_fun,pos_bol$0),
       _bCZ_=caml_call1(pos_lnum_fun,pos_lnum$0);
      return [0,caml_call1(pos_fname_fun,pos_fname$0),_bCZ_,_bCY_,_bCX_]}
    function iter$1(pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {caml_call1(pos_fname_fun,pos_fname$0);
      caml_call1(pos_lnum_fun,pos_lnum$0);
      caml_call1(pos_bol_fun,pos_bol$0);
      return caml_call1(pos_cnum_fun,pos_cnum$0)}
    function fold$0(init,pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {return caml_call2
              (pos_cnum_fun,
               caml_call2
                (pos_bol_fun,
                 caml_call2
                  (pos_lnum_fun,
                   caml_call2(pos_fname_fun,init,pos_fname$0),
                   pos_lnum$0),
                 pos_bol$0),
               pos_cnum$0)}
    function map_poly(record)
     {var
       _bCU_=[0,caml_call1(record[1],pos_cnum$0),0],
       _bCV_=[0,caml_call1(record[1],pos_bol$0),_bCU_],
       _bCW_=[0,caml_call1(record[1],pos_lnum$0),_bCV_];
      return [0,caml_call1(record[1],pos_fname$0),_bCW_]}
    function for_all$0(pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {var
       _bCR_=caml_call1(pos_fname_fun,pos_fname$0),
       _bCS_=_bCR_?caml_call1(pos_lnum_fun,pos_lnum$0):_bCR_,
       _bCT_=_bCS_?caml_call1(pos_bol_fun,pos_bol$0):_bCS_;
      return _bCT_?caml_call1(pos_cnum_fun,pos_cnum$0):_bCT_}
    function exists$0(pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {var
       _bCQ_=caml_call1(pos_fname_fun,pos_fname$0),
       _bCO_=_bCQ_ || caml_call1(pos_lnum_fun,pos_lnum$0),
       _bCP_=_bCO_ || caml_call1(pos_bol_fun,pos_bol$0);
      return _bCP_?_bCP_:caml_call1(pos_cnum_fun,pos_cnum$0)}
    function to_list$0(pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {var
       _bCL_=[0,caml_call1(pos_cnum_fun,pos_cnum$0),0],
       _bCM_=[0,caml_call1(pos_bol_fun,pos_bol$0),_bCL_],
       _bCN_=[0,caml_call1(pos_lnum_fun,pos_lnum$0),_bCM_];
      return [0,caml_call1(pos_fname_fun,pos_fname$0),_bCN_]}
    function iter$2
     (record,pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {caml_call3(pos_fname_fun,pos_fname$0,record,record[1]);
      caml_call3(pos_lnum_fun,pos_lnum$0,record,record[2]);
      caml_call3(pos_bol_fun,pos_bol$0,record,record[3]);
      return caml_call3(pos_cnum_fun,pos_cnum$0,record,record[4])}
    function fold$1
     (record,init,pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {var _bCI_=record[4],_bCJ_=record[3],_bCK_=record[2];
      return caml_call4
              (pos_cnum_fun,
               caml_call4
                (pos_bol_fun,
                 caml_call4
                  (pos_lnum_fun,
                   caml_call4(pos_fname_fun,init,pos_fname$0,record,record[1]),
                   pos_lnum$0,
                   record,
                   _bCK_),
                 pos_bol$0,
                 record,
                 _bCJ_),
               pos_cnum$0,
               record,
               _bCI_)}
    function for_all$1
     (record,pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {var
       _bCF_=caml_call3(pos_fname_fun,pos_fname$0,record,record[1]),
       _bCG_=_bCF_?caml_call3(pos_lnum_fun,pos_lnum$0,record,record[2]):_bCF_,
       _bCH_=_bCG_?caml_call3(pos_bol_fun,pos_bol$0,record,record[3]):_bCG_;
      return _bCH_?caml_call3(pos_cnum_fun,pos_cnum$0,record,record[4]):_bCH_}
    function exists$1
     (record,pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {var
       _bCE_=caml_call3(pos_fname_fun,pos_fname$0,record,record[1]),
       _bCC_=_bCE_ || caml_call3(pos_lnum_fun,pos_lnum$0,record,record[2]),
       _bCD_=_bCC_ || caml_call3(pos_bol_fun,pos_bol$0,record,record[3]);
      return _bCD_?_bCD_:caml_call3(pos_cnum_fun,pos_cnum$0,record,record[4])}
    function to_list$1
     (record,pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {var
       _bCz_=[0,caml_call3(pos_cnum_fun,pos_cnum$0,record,record[4]),0],
       _bCA_=[0,caml_call3(pos_bol_fun,pos_bol$0,record,record[3]),_bCz_],
       _bCB_=[0,caml_call3(pos_lnum_fun,pos_lnum$0,record,record[2]),_bCA_];
      return [0,caml_call3(pos_fname_fun,pos_fname$0,record,record[1]),_bCB_]}
    function map$4(record,pos_fname_fun,pos_lnum_fun,pos_bol_fun,pos_cnum_fun)
     {var
       _bCw_=caml_call3(pos_cnum_fun,pos_cnum$0,record,record[4]),
       _bCx_=caml_call3(pos_bol_fun,pos_bol$0,record,record[3]),
       _bCy_=caml_call3(pos_lnum_fun,pos_lnum$0,record,record[2]);
      return [0,
              caml_call3(pos_fname_fun,pos_fname$0,record,record[1]),
              _bCy_,
              _bCx_,
              _bCw_]}
    function set_all_mutable_fields(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct=
      [0,
       iter$2,
       fold$1,
       for_all$1,
       exists$1,
       to_list$1,
       map$4,
       set_all_mutable_fields];
    function hash_fold_t$7(hsv,arg)
     {var
       hsv$0=caml_call2(_aq_,hsv,arg[1]),
       hsv$1=caml_call2(hash_fold_t,hsv$0,arg[2]),
       hsv$2=caml_call2(hash_fold_t,hsv$1,arg[3]);
      return caml_call2(hash_fold_t,hsv$2,arg[4])}
    function hash$5(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bCv_=hash_fold_t$7(hsv,x);
      return caml_call1(Base_Hash[9],_bCv_)}
    function t_of_sexp$18(sexp_004)
     {if(0 === sexp_004[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_023,sexp_004);
      var
       field_sexps_005=sexp_004[1],
       pos_fname_006=[0,0],
       pos_lnum_008=[0,0],
       pos_bol_010=[0,0],
       pos_cnum_012=[0,0],
       duplicates_014=[0,0],
       extra_015=[0,0],
       param=field_sexps_005;
      for(;;)
       {if(param)
         {var _bCl_=param[1];
          if(1 === _bCl_[0])
           {var _bCm_=_bCl_[1];
            if(_bCm_)
             {var _bCn_=_bCm_[1];
              if(0 === _bCn_[0])
               {var _bCo_=_bCm_[2],_bCp_=_bCn_[1],switch$0=0;
                if(! _bCo_ || ! _bCo_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_025=param[2],
                   field_sexp_017$4=
                    function(_bCu_)
                     {function field_sexp_017(param)
                       {if(_bCu_)
                         {if(_bCu_[2])throw [0,Assert_failure,_mt_];
                          var x_026=_bCu_[1];
                          return x_026}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_023,sexp_004)}
                      return field_sexp_017},
                   field_sexp_017=field_sexp_017$4(_bCo_);
                  if(caml_string_notequal(_bCp_,cst_pos_bol$1))
                   if(caml_string_notequal(_bCp_,cst_pos_cnum$1))
                    if(caml_string_notequal(_bCp_,cst_pos_fname$1))
                     if(caml_string_notequal(_bCp_,cst_pos_lnum$1))
                      {if(Sexplib0_Sexp_conv[26][1])
                        extra_015[1] = [0,_bCp_,extra_015[1]]}
                     else
                      if(pos_lnum_008[1])
                       duplicates_014[1] = [0,_bCp_,duplicates_014[1]];
                      else
                       {var
                         field_sexp_017$0=field_sexp_017(0),
                         fvalue_021=caml_call1(t_of_sexp,field_sexp_017$0);
                        pos_lnum_008[1] = [0,fvalue_021]}
                    else
                     if(pos_fname_006[1])
                      duplicates_014[1] = [0,_bCp_,duplicates_014[1]];
                     else
                      {var
                        field_sexp_017$1=field_sexp_017(0),
                        fvalue_022=caml_call1(_as_,field_sexp_017$1);
                       pos_fname_006[1] = [0,fvalue_022]}
                   else
                    if(pos_cnum_012[1])
                     duplicates_014[1] = [0,_bCp_,duplicates_014[1]];
                    else
                     {var
                       field_sexp_017$2=field_sexp_017(0),
                       fvalue_019=caml_call1(t_of_sexp,field_sexp_017$2);
                      pos_cnum_012[1] = [0,fvalue_019]}
                  else
                   if(pos_bol_010[1])
                    duplicates_014[1] = [0,_bCp_,duplicates_014[1]];
                   else
                    {var
                      field_sexp_017$3=field_sexp_017(0),
                      fvalue_020=caml_call1(t_of_sexp,field_sexp_017$3);
                     pos_bol_010[1] = [0,fvalue_020]}
                  var param=tail_025;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_023,_bCl_)}
        if(duplicates_014[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_023,
                  duplicates_014[1],
                  sexp_004);
        if(extra_015[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_023,
                  extra_015[1],
                  sexp_004);
        var
         _bCq_=pos_fname_006[1],
         _bCr_=pos_lnum_008[1],
         _bCs_=pos_bol_010[1],
         _bCt_=pos_cnum_012[1];
        if(_bCq_ && _bCr_ && _bCs_ && _bCt_)
         {var
           pos_cnum_013=_bCt_[1],
           pos_bol_011=_bCs_[1],
           pos_lnum_009=_bCr_[1],
           pos_fname_007=_bCq_[1];
          return [0,pos_fname_007,pos_lnum_009,pos_bol_011,pos_cnum_013]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_023,
                 sexp_004,
                 [0,
                  [0,0 === pos_fname_006[1]?1:0,cst_pos_fname$2],
                  [0,
                   [0,0 === pos_lnum_008[1]?1:0,cst_pos_lnum$2],
                   [0,
                    [0,0 === pos_bol_010[1]?1:0,cst_pos_bol$2],
                    [0,[0,0 === pos_cnum_012[1]?1:0,cst_pos_cnum$2],0]]]])}}
    function sexp_of_t$16(param)
     {var
       pos_cnum_034=param[4],
       pos_bol_032=param[3],
       pos_lnum_030=param[2],
       pos_fname_028=param[1],
       arg_035=caml_call1(sexp_of_t$0,pos_cnum_034),
       bnds_027=[0,[1,[0,_mu_,[0,arg_035,0]]],0],
       arg_033=caml_call1(sexp_of_t$0,pos_bol_032),
       bnds_027$0=[0,[1,[0,_mv_,[0,arg_033,0]]],bnds_027],
       arg_031=caml_call1(sexp_of_t$0,pos_lnum_030),
       bnds_027$1=[0,[1,[0,_mw_,[0,arg_031,0]]],bnds_027$0],
       arg_029=caml_call1(_at_,pos_fname_028),
       bnds_027$2=[0,[1,[0,_mx_,[0,arg_029,0]]],bnds_027$1];
      return [1,bnds_027$2]}
    var _my_=include$18[20],_mz_=include$18[3];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$70);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Source_code_position0$0);
    var
     Stable$1=
      [0,
       [0,
        bin_size_t$27,
        bin_write_t$27,
        bin_read_t$58,
        bin_read_t$57,
        bin_shape_t$21,
        bin_writer_t$17,
        bin_reader_t$17,
        bin_t$17,
        compare$15,
        hash_fold_t$7,
        hash$5,
        t_of_sexp$18,
        sexp_of_t$16,
        _mf_]],
     Fields=
      [0,
       names,
       pos_cnum$0,
       pos_bol$0,
       pos_lnum$0,
       pos_fname$0,
       fold$0,
       make_creator,
       create$2,
       map$3,
       iter$1,
       for_all$0,
       exists$0,
       to_list$0,
       map_poly,
       Direct],
     Core_Source_code_position0=
      [0,
       _l3_,
       _l4_,
       _l5_,
       _l6_,
       _l7_,
       _l8_,
       _l9_,
       _l__,
       _l$_,
       _ma_,
       _mb_,
       _mc_,
       _md_,
       _me_,
       _mf_,
       _my_,
       _mg_,
       bin_size_t$27,
       bin_write_t$27,
       bin_read_t$58,
       bin_read_t$57,
       bin_shape_t$21,
       bin_writer_t$17,
       bin_reader_t$17,
       bin_t$17,
       compare$15,
       pos_cnum,
       pos_bol,
       pos_lnum,
       pos_fname,
       Fields,
       hash_fold_t$7,
       hash$5,
       t_of_sexp$18,
       _mz_,
       Stable$1];
    caml_register_global
     (5244,Core_Source_code_position0,"Core__Source_code_position0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Info);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$71);
    caml_call1(Expect_test_collector[5][1],cst_core_src_info_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$72,cst$24);
    var
     _mA_=include$19[60],
     _mB_=include$19[61],
     _mC_=caml_call1(Bin_prot_Shape[2][1],cst_t$61),
     _mD_=
      [0,
       [0,cst_Atom$1,[0,_bV_,0]],
       [0,
        [0,
         cst_List$1,
         [0,
          caml_call1(_c4_,caml_call1(caml_call1(Bin_prot_Shape[13],_mC_),0)),
          0]],
        0]],
     _mE_=caml_call1(Bin_prot_Shape[9],_mD_),
     _mF_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$62),0,_mE_],0],
     _mG_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_info_ml_18_4),
     group$29=caml_call2(Bin_prot_Shape[6],_mG_,_mF_),
     _mH_=caml_call1(Bin_prot_Shape[2][1],cst_t$63),
     bin_shape_t$22=caml_call1(caml_call2(Bin_prot_Shape[14],group$29,_mH_),0);
    function bin_size_t$28(param)
     {if(0 === param[0])
       {var v1=param[1],_bCj_=caml_call1(bin_size_t$1,v1);
        return caml_call2(Bin_prot_Common[23],1,_bCj_)}
      var v1$0=param[1],_bCk_=caml_call2(_bm_,bin_size_t$28,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_bCk_)}
    function bin_write_t$28(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
        return caml_call3(bin_write_t$1,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,1);
      return caml_call3(caml_call1(_c6_,bin_write_t$28),buf,pos$1,v1$0)}
    function bin_read_t$59(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_info_ml_Sexp_t,pos_ref[1])}
    function bin_read_t$60(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(0 === match)
       {var arg_1=caml_call2(bin_read_t$3,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(caml_call1(_c8_,bin_read_t$60),buf,pos_ref);
        return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_mI_,pos_ref[1])}
    var
     hash_fold_t$8=function _bCi_(_bCg_,_bCh_){return _bCi_.fun(_bCg_,_bCh_)},
     hash$6=function _bCf_(_bCe_){return _bCf_.fun(_bCe_)};
    caml_update_dummy
     (hash_fold_t$8,
      function(hsv,arg)
       {if(0 === arg[0])
         {var a0=arg[1],hsv$0=caml_call2(Base_Hash[3],hsv,0);
          return caml_call2(_aq_,hsv$0,a0)}
        var a0$0=arg[1],hsv$1=caml_call2(Base_Hash[3],hsv,1);
        return caml_call3(_U_,hash_fold_t$8,hsv$1,a0$0)});
    caml_update_dummy
     (hash$6,
      function(x)
       {var
         hsv=caml_call2(Base_Hash[11],0,0),
         _bCd_=caml_call2(hash_fold_t$8,hsv,x);
        return caml_call1(Base_Hash[9],_bCd_)});
    function to_binable$0(t){return caml_call1(sexp_of_t,t)}
    var
     of_binable$0=Base_Exn[5],
     include$20=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$22,
           bin_size_t$28,
           bin_write_t$28,
           bin_read_t$60,
           bin_read_t$59]),
        [0,to_binable$0,of_binable$0]),
     bin_size_t$29=include$20[1],
     bin_write_t$29=include$20[2],
     bin_read_t$61=include$20[3],
     bin_shape_t$23=include$20[5];
    function Extend(Info)
     {var
       _bBb_=Info[1],
       _bBc_=Info[2],
       _bBd_=Info[3],
       _bBe_=Info[4],
       _bBf_=Info[5],
       _bBg_=Info[6],
       _bBh_=Info[7],
       _bBi_=Info[8],
       _bBj_=Info[9],
       _bBk_=Info[10],
       _bBl_=Info[11],
       _bBm_=Info[12],
       _bBn_=Info[13],
       _bBo_=Info[14],
       _bBp_=Info[15],
       _bBq_=Info[16],
       _bBr_=Info[17],
       _bBs_=Info[18],
       _bBt_=Info[19],
       _bBu_=Info[20],
       _bBv_=Info[21],
       _bBw_=Info[22],
       _bBx_=Info[23],
       _bBy_=Info[24],
       _bBz_=Info[25],
       _bBA_=Info[26],
       _bBB_=Info[27],
       _bBC_=Stable$1[1][5],
       _bBD_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$64),0,_bBC_],0],
       _bBE_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_info_ml_60_10),
       group=caml_call2(Bin_prot_Shape[6],_bBE_,_bBD_),
       _bBF_=caml_call1(Bin_prot_Shape[2][1],cst_t$65),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bBF_),0),
       bin_size_t=Stable$1[1][1],
       bin_write_t=Stable$1[1][2],
       bin_writer_t=[0,bin_size_t,bin_write_t],
       bin_read_t=Stable$1[1][4],
       bin_read_t$0=Stable$1[1][3],
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t],
       V1=
        [0,
         bin_shape_t,
         bin_size_t,
         bin_write_t,
         bin_writer_t,
         bin_read_t,
         bin_read_t$0,
         bin_reader_t,
         bin_t,
         _mz_],
       Source_code_position=[0,V1],
       _bBG_=caml_call1(Bin_prot_Shape[2][1],cst_t$66),
       _bBH_=
        [0,
         [0,
          cst_With_backtrace,
          [0,caml_call1(caml_call1(Bin_prot_Shape[13],_bBG_),0),[0,_bV_,0]]],
         0],
       _bBI_=caml_call1(Bin_prot_Shape[2][1],cst_t$67),
       _bBJ_=
        [0,
         caml_call1(_c4_,caml_call1(caml_call1(Bin_prot_Shape[13],_bBI_),0)),
         0],
       _bBK_=[0,[0,cst_Of_list,[0,caml_call1(_cX_,_b7_),_bBJ_]],_bBH_],
       _bBL_=caml_call1(Bin_prot_Shape[2][1],cst_t$68),
       _bBM_=
        [0,
         [0,
          cst_Tag_arg,
          [0,
           _bV_,
           [0,
            bin_shape_t$22,
            [0,caml_call1(caml_call1(Bin_prot_Shape[13],_bBL_),0),0]]]],
         _bBK_],
       _bBN_=caml_call1(Bin_prot_Shape[2][1],cst_t$69),
       _bBO_=
        [0,
         [0,
          cst_Tag_t,
          [0,_bV_,[0,caml_call1(caml_call1(Bin_prot_Shape[13],_bBN_),0),0]]],
         _bBM_],
       _bBP_=
        [0,
         [0,cst_Could_not_construct,[0,bin_shape_t$22,0]],
         [0,
          [0,cst_String,[0,_bV_,0]],
          [0,
           [0,cst_Exn,[0,bin_shape_t$23,0]],
           [0,
            [0,cst_Sexp,[0,bin_shape_t$22,0]],
            [0,
             [0,
              cst_Tag_sexp,
              [0,
               _bV_,
               [0,
                bin_shape_t$22,
                [0,caml_call1(_cX_,Source_code_position[1][1]),0]]]],
             _bBO_]]]]],
       _bBQ_=caml_call1(Bin_prot_Shape[9],_bBP_),
       _bBR_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$70),0,_bBQ_],0],
       _bBS_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_info_ml_70_8),
       group$0=caml_call2(Bin_prot_Shape[6],_bBS_,_bBR_),
       _bBT_=caml_call1(Bin_prot_Shape[2][1],cst_t$71),
       bin_shape_t$0=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_bBT_),0);
      function bin_size_t$0(param)
       {switch(param[0])
         {case 0:
           var v1=param[1],_bBZ_=bin_size_t$28(v1);
           return caml_call2(Bin_prot_Common[23],1,_bBZ_);
          case 1:
           var v1$0=param[1],_bB0_=caml_call1(bin_size_t$1,v1$0);
           return caml_call2(Bin_prot_Common[23],1,_bB0_);
          case 2:
           var v1$1=param[1],_bB1_=caml_call1(bin_size_t$29,v1$1);
           return caml_call2(Bin_prot_Common[23],1,_bB1_);
          case 3:
           var v1$2=param[1],_bB2_=bin_size_t$28(v1$2);
           return caml_call2(Bin_prot_Common[23],1,_bB2_);
          case 4:
           var
            v3=param[3],
            v2=param[2],
            v1$3=param[1],
            _bB3_=caml_call1(bin_size_t$1,v1$3),
            size=caml_call2(Bin_prot_Common[23],1,_bB3_),
            _bB4_=bin_size_t$28(v2),
            size$0=caml_call2(Bin_prot_Common[23],size,_bB4_),
            _bB5_=caml_call2(_bj_,Source_code_position[1][2],v3);
           return caml_call2(Bin_prot_Common[23],size$0,_bB5_);
          case 5:
           var
            v2$0=param[2],
            v1$4=param[1],
            _bB6_=caml_call1(bin_size_t$1,v1$4),
            size$1=caml_call2(Bin_prot_Common[23],1,_bB6_),
            _bB7_=bin_size_t$0(v2$0);
           return caml_call2(Bin_prot_Common[23],size$1,_bB7_);
          case 6:
           var
            v3$0=param[3],
            v2$1=param[2],
            v1$5=param[1],
            _bB8_=caml_call1(bin_size_t$1,v1$5),
            size$2=caml_call2(Bin_prot_Common[23],1,_bB8_),
            _bB9_=bin_size_t$28(v2$1),
            size$3=caml_call2(Bin_prot_Common[23],size$2,_bB9_),
            _bB__=bin_size_t$0(v3$0);
           return caml_call2(Bin_prot_Common[23],size$3,_bB__);
          case 7:
           var
            v2$2=param[2],
            v1$6=param[1],
            _bB$_=caml_call2(_bj_,bin_size_t$3,v1$6),
            size$4=caml_call2(Bin_prot_Common[23],1,_bB$_),
            _bCa_=caml_call2(_bm_,bin_size_t$0,v2$2);
           return caml_call2(Bin_prot_Common[23],size$4,_bCa_);
          default:
           var
            v2$3=param[2],
            v1$7=param[1],
            _bCb_=bin_size_t$0(v1$7),
            size$5=caml_call2(Bin_prot_Common[23],1,_bCb_),
            _bCc_=caml_call1(bin_size_t$1,v2$3);
           return caml_call2(Bin_prot_Common[23],size$5,_bCc_)}}
      function bin_write_t$0(buf,pos,param)
       {var pos$0=pos,param$0=param;
        for(;;)
         switch(param$0[0])
          {case 0:
            var
             v1=param$0[1],
             pos$1=caml_call3(Bin_prot_Write[31],buf,pos$0,0);
            return bin_write_t$28(buf,pos$1,v1);
           case 1:
            var
             v1$0=param$0[1],
             pos$2=caml_call3(Bin_prot_Write[31],buf,pos$0,1);
            return caml_call3(bin_write_t$1,buf,pos$2,v1$0);
           case 2:
            var
             v1$1=param$0[1],
             pos$3=caml_call3(Bin_prot_Write[31],buf,pos$0,2);
            return caml_call3(bin_write_t$29,buf,pos$3,v1$1);
           case 3:
            var
             v1$2=param$0[1],
             pos$4=caml_call3(Bin_prot_Write[31],buf,pos$0,3);
            return bin_write_t$28(buf,pos$4,v1$2);
           case 4:
            var
             v3=param$0[3],
             v2=param$0[2],
             v1$3=param$0[1],
             pos$5=caml_call3(Bin_prot_Write[31],buf,pos$0,4),
             pos$6=caml_call3(bin_write_t$1,buf,pos$5,v1$3),
             pos$7=bin_write_t$28(buf,pos$6,v2);
            return caml_call3
                    (caml_call1(_cZ_,Source_code_position[1][3]),buf,pos$7,v3);
           case 5:
            var
             v2$0=param$0[2],
             v1$4=param$0[1],
             pos$8=caml_call3(Bin_prot_Write[31],buf,pos$0,5),
             pos$9=caml_call3(bin_write_t$1,buf,pos$8,v1$4),
             pos$0=pos$9,
             param$0=v2$0;
            continue;
           case 6:
            var
             v3$0=param$0[3],
             v2$1=param$0[2],
             v1$5=param$0[1],
             pos$10=caml_call3(Bin_prot_Write[31],buf,pos$0,6),
             pos$11=caml_call3(bin_write_t$1,buf,pos$10,v1$5),
             pos$12=bin_write_t$28(buf,pos$11,v2$1),
             pos$0=pos$12,
             param$0=v3$0;
            continue;
           case 7:
            var
             v2$2=param$0[2],
             v1$6=param$0[1],
             pos$13=caml_call3(Bin_prot_Write[31],buf,pos$0,7),
             pos$14=caml_call3(caml_call1(_cZ_,bin_write_t$3),buf,pos$13,v1$6);
            return caml_call3(caml_call1(_c6_,bin_write_t$0),buf,pos$14,v2$2);
           default:
            var
             v2$3=param$0[2],
             v1$7=param$0[1],
             pos$15=caml_call3(Bin_prot_Write[31],buf,pos$0,8),
             pos$16=bin_write_t$0(buf,pos$15,v1$7);
            return caml_call3(bin_write_t$1,buf,pos$16,v2$3)}}
      var bin_writer_t$0=[0,bin_size_t$0,bin_write_t$0];
      function bin_read_t$1(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_core_src_info_ml_Extend_In,
                 pos_ref[1])}
      function bin_read_t$2(buf,pos_ref)
       {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
        if(8 < match >>> 0)
         return caml_call2(Bin_prot_Common[18],_mJ_,pos_ref[1]);
        switch(match)
         {case 0:var arg_1=bin_read_t$60(buf,pos_ref);return [0,arg_1];
          case 1:
           var arg_1$0=caml_call2(bin_read_t$3,buf,pos_ref);
           return [1,arg_1$0];
          case 2:
           var arg_1$1=caml_call2(bin_read_t$61,buf,pos_ref);
           return [2,arg_1$1];
          case 3:var arg_1$2=bin_read_t$60(buf,pos_ref);return [3,arg_1$2];
          case 4:
           var
            arg_1$3=caml_call2(bin_read_t$3,buf,pos_ref),
            arg_2=bin_read_t$60(buf,pos_ref),
            arg_3=
             caml_call2
              (caml_call1(_c1_,Source_code_position[1][6]),buf,pos_ref);
           return [4,arg_1$3,arg_2,arg_3];
          case 5:
           var
            arg_1$4=caml_call2(bin_read_t$3,buf,pos_ref),
            arg_2$0=bin_read_t$2(buf,pos_ref);
           return [5,arg_1$4,arg_2$0];
          case 6:
           var
            arg_1$5=caml_call2(bin_read_t$3,buf,pos_ref),
            arg_2$1=bin_read_t$60(buf,pos_ref),
            arg_3$0=bin_read_t$2(buf,pos_ref);
           return [6,arg_1$5,arg_2$1,arg_3$0];
          case 7:
           var
            arg_1$6=caml_call2(caml_call1(_c1_,bin_read_t$7),buf,pos_ref),
            arg_2$2=caml_call2(caml_call1(_c8_,bin_read_t$2),buf,pos_ref);
           return [7,arg_1$6,arg_2$2];
          default:
           var
            arg_1$7=bin_read_t$2(buf,pos_ref),
            arg_2$3=caml_call2(bin_read_t$3,buf,pos_ref);
           return [8,arg_1$7,arg_2$3]}}
      var
       bin_reader_t$0=[0,bin_read_t$2,bin_read_t$1],
       bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0];
      function sexp_of_t$1(param)
       {switch(param[0])
         {case 0:
           var arg0_009=param[1],res0_010=caml_call1(_mA_,arg0_009);
           return [1,[0,_mK_,[0,res0_010,0]]];
          case 1:
           var arg0_011=param[1],res0_012=caml_call1(_at_,arg0_011);
           return [1,[0,_mL_,[0,res0_012,0]]];
          case 2:
           var arg0_013=param[1],res0_014=caml_call1(sexp_of_t,arg0_013);
           return [1,[0,_mM_,[0,res0_014,0]]];
          case 3:
           var arg0_015=param[1],res0_016=caml_call1(_mA_,arg0_015);
           return [1,[0,_mN_,[0,res0_016,0]]];
          case 4:
           var
            arg2_019=param[3],
            arg1_018=param[2],
            arg0_017=param[1],
            res0_020=caml_call1(_at_,arg0_017),
            res1_021=caml_call1(_mA_,arg1_018),
            res2_022=caml_call2(_ah_,Source_code_position[1][9],arg2_019);
           return [1,[0,_mO_,[0,res0_020,[0,res1_021,[0,res2_022,0]]]]];
          case 5:
           var
            arg1_024=param[2],
            arg0_023=param[1],
            res0_025=caml_call1(_at_,arg0_023),
            res1_026=sexp_of_t$1(arg1_024);
           return [1,[0,_mP_,[0,res0_025,[0,res1_026,0]]]];
          case 6:
           var
            arg2_029=param[3],
            arg1_028=param[2],
            arg0_027=param[1],
            res0_030=caml_call1(_at_,arg0_027),
            res1_031=caml_call1(_mA_,arg1_028),
            res2_032=sexp_of_t$1(arg2_029);
           return [1,[0,_mQ_,[0,res0_030,[0,res1_031,[0,res2_032,0]]]]];
          case 7:
           var
            arg1_034=param[2],
            arg0_033=param[1],
            res0_035=caml_call2(_ah_,sexp_of_t$0,arg0_033),
            res1_036=caml_call2(_W_,sexp_of_t$1,arg1_034);
           return [1,[0,_mR_,[0,res0_035,[0,res1_036,0]]]];
          default:
           var
            arg1_038=param[2],
            arg0_037=param[1],
            res0_039=sexp_of_t$1(arg0_037),
            res1_040=caml_call1(_at_,arg1_038);
           return [1,[0,_mS_,[0,res0_039,[0,res1_040,0]]]]}}
      var
       V2=
        [0,
         bin_shape_t$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_writer_t$0,
         bin_read_t$1,
         bin_read_t$2,
         bin_reader_t$0,
         bin_t$0,
         sexp_of_t$1],
       Stable$2=[0,Source_code_position,V2],
       include=Stable$2[2],
       bin_shape_t$1=include[1],
       bin_size_t$2=include[2],
       bin_write_t$2=include[3],
       bin_writer_t$1=include[4],
       bin_read_t$4=include[5],
       bin_read_t$5=include[6],
       bin_reader_t$1=include[7],
       bin_t$1=include[8],
       sexp_of_t$2=include[9],
       to_info=Info[28][3],
       of_info=Info[28][2],
       Internal_repr=
        [0,
         Stable$2,
         bin_shape_t$1,
         bin_size_t$2,
         bin_write_t$2,
         bin_writer_t$1,
         bin_read_t$4,
         bin_read_t$5,
         bin_reader_t$1,
         bin_t$1,
         sexp_of_t$2,
         to_info,
         of_info],
       t_of_sexp=Info[5],
       sexp_of_t$3=Info[6],
       compare=Info[1],
       hash_fold_t=Info[3],
       func=Info[4];
      function hash(x){return caml_call1(func,x)}
      var
       T=[0,t_of_sexp,sexp_of_t$3,compare,hash_fold_t,hash],
       t_of_sexp$0=T[1],
       sexp_of_t$4=T[2],
       compare$0=T[3],
       hash_fold_t$0=T[4],
       hash$0=T[5],
       include$0=caml_call1(_hd_[1][2],[0,T[3],T[2]]),
       comparator=include$0[1],
       to_binable=Info[28][2],
       of_binable=Info[28][3],
       _bBU_=Internal_repr[1][2],
       include$1=
        caml_call1
         (caml_call1
           (Stable$0[1][1],[0,_bBU_[1],_bBU_[2],_bBU_[3],_bBU_[6],_bBU_[5]]),
          [0,to_binable,of_binable]),
       bin_size_t$4=include$1[1],
       bin_write_t$4=include$1[2],
       bin_read_t$6=include$1[3],
       bin_read_t$8=include$1[4],
       bin_shape_t$2=include$1[5],
       bin_writer_t$2=include$1[6],
       bin_reader_t$2=include$1[7],
       bin_t$2=include$1[8],
       V2$0=
        [0,
         T,
         t_of_sexp$0,
         sexp_of_t$4,
         compare$0,
         hash_fold_t$0,
         hash$0,
         comparator,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$6,
         bin_read_t$8,
         bin_shape_t$2,
         bin_writer_t$2,
         bin_reader_t$2,
         bin_t$2],
       compare$1=Info[1],
       to_sexpable=Info[6],
       of_sexpable=Info[5],
       include$2=
        caml_call1
         (caml_call1(Stable[1][1],[0,_mB_,_mA_]),[0,to_sexpable,of_sexpable]),
       t_of_sexp$1=include$2[1],
       sexp_of_t$5=include$2[2],
       T$0=[0,t_of_sexp$1,sexp_of_t$5,compare$1],
       t_of_sexp$2=T$0[1],
       sexp_of_t$6=T$0[2],
       compare$2=T$0[3],
       include$3=caml_call1(_hd_[1][2],[0,T$0[3],T$0[2]]),
       comparator$0=include$3[1],
       include$4=
        caml_call1
         (caml_call1
           (Stable$0[1][1],
            [0,
             bin_shape_t$22,
             bin_size_t$28,
             bin_write_t$28,
             bin_read_t$60,
             bin_read_t$59]),
          [0,sexp_of_t$6,t_of_sexp$2]),
       bin_size_t$5=include$4[1],
       bin_write_t$5=include$4[2],
       bin_read_t$9=include$4[3],
       bin_read_t$10=include$4[4],
       bin_shape_t$3=include$4[5],
       bin_writer_t$3=include$4[6],
       bin_reader_t$3=include$4[7],
       bin_t$3=include$4[8],
       V1$0=
        [0,
         T$0,
         t_of_sexp$2,
         sexp_of_t$6,
         compare$2,
         comparator$0,
         bin_size_t$5,
         bin_write_t$5,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$3,
         bin_writer_t$3,
         bin_reader_t$3,
         bin_t$3],
       Stable$3=[0,V2$0,V1$0],
       _bBV_=Stable$3[1][12],
       _bBW_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$72),0,_bBV_],0],
       _bBX_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_info_ml_142_2),
       group$1=caml_call2(Bin_prot_Shape[6],_bBX_,_bBW_),
       _bBY_=caml_call1(Bin_prot_Shape[2][1],cst_t$73),
       bin_shape_t$4=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_bBY_),0),
       bin_size_t$6=Stable$3[1][8],
       bin_write_t$6=Stable$3[1][9],
       bin_writer_t$4=[0,bin_size_t$6,bin_write_t$6],
       bin_read_t$11=Stable$3[1][11],
       bin_read_t$12=Stable$3[1][10],
       bin_reader_t$4=[0,bin_read_t$12,bin_read_t$11],
       bin_t$4=[0,bin_shape_t$4,bin_writer_t$4,bin_reader_t$4];
      return [0,
              _bBb_,
              _bBc_,
              _bBd_,
              _bBe_,
              _bBf_,
              _bBg_,
              _bBh_,
              _bBi_,
              _bBj_,
              _bBk_,
              _bBl_,
              _bBm_,
              _bBn_,
              _bBo_,
              _bBp_,
              _bBq_,
              _bBr_,
              _bBs_,
              _bBt_,
              _bBu_,
              _bBv_,
              _bBw_,
              _bBx_,
              _bBy_,
              _bBz_,
              _bBA_,
              _bBB_,
              Internal_repr,
              Stable$3,
              bin_shape_t$4,
              bin_size_t$6,
              bin_write_t$6,
              bin_writer_t$4,
              bin_read_t$11,
              bin_read_t$12,
              bin_reader_t$4,
              bin_t$4]}
    var
     include$21=Extend(Base_Info),
     _mY_=include$21[6],
     _m4_=include$21[12],
     _ni_=include$21[28],
     _nj_=include$21[29],
     _mT_=include$21[1],
     _mU_=include$21[2],
     _mV_=include$21[3],
     _mW_=include$21[4],
     _mX_=include$21[5],
     _mZ_=include$21[7],
     _m0_=include$21[8],
     _m1_=include$21[9],
     _m2_=include$21[10],
     _m3_=include$21[11],
     _m5_=include$21[13],
     _m6_=include$21[14],
     _m7_=include$21[15],
     _m8_=include$21[16],
     _m9_=include$21[17],
     _m__=include$21[18],
     _m$_=include$21[19],
     _na_=include$21[20],
     _nb_=include$21[21],
     _nc_=include$21[22],
     _nd_=include$21[23],
     _ne_=include$21[24],
     _nf_=include$21[25],
     _ng_=include$21[26],
     _nh_=include$21[27],
     _nk_=include$21[30],
     _nl_=include$21[31],
     _nm_=include$21[32],
     _nn_=include$21[33],
     _no_=include$21[34],
     _np_=include$21[35],
     _nq_=include$21[36],
     _nr_=include$21[37];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$73);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Info$0);
    function _ns_(_bA8_)
     {var _bA9_=Extend(_bA8_),_bA__=_bA9_[29],_bA$_=_bA__[1],_bBa_=_bA__[2];
      return [0,
              _bA9_[31],
              _bA9_[32],
              _bA9_[35],
              _bA9_[34],
              _bA9_[30],
              _bA9_[33],
              _bA9_[36],
              _bA9_[37],
              [0,
               [0,
                _bBa_[6],
                _bBa_[7],
                _bBa_[8],
                _bBa_[9],
                _bBa_[10],
                _bBa_[11],
                _bBa_[12],
                _bBa_[13],
                _bBa_[4],
                _bBa_[2],
                _bBa_[3],
                _bBa_[5]],
               [0,
                _bA$_[5],
                _bA$_[6],
                _bA$_[8],
                _bA$_[9],
                _bA$_[10],
                _bA$_[11],
                _bA$_[12],
                _bA$_[13],
                _bA$_[14],
                _bA$_[15],
                _bA$_[4],
                _bA$_[2],
                _bA$_[3],
                _bA$_[7]]]]}
    var
     _nt_=_nj_[1],
     _nu_=_nj_[2],
     Core_Info=
      [0,
       _mT_,
       _mU_,
       _mV_,
       _mW_,
       _mX_,
       _mY_,
       _mZ_,
       _m0_,
       _m1_,
       _m2_,
       _m3_,
       _m4_,
       _m5_,
       _m6_,
       _m7_,
       _m8_,
       _m9_,
       _m__,
       _m$_,
       _na_,
       _nb_,
       _nc_,
       _nd_,
       _ne_,
       _nf_,
       _ng_,
       _nh_,
       [0,_ni_[10],_ni_[12],_ni_[11]],
       _nl_,
       _nm_,
       _np_,
       _no_,
       _nk_,
       _nn_,
       _nq_,
       _nr_,
       [0,
        [0,
         _nu_[6],
         _nu_[7],
         _nu_[8],
         _nu_[9],
         _nu_[10],
         _nu_[11],
         _nu_[12],
         _nu_[13],
         _nu_[4],
         _nu_[2],
         _nu_[3],
         _nu_[5]],
        [0,
         _nt_[5],
         _nt_[6],
         _nt_[8],
         _nt_[9],
         _nt_[10],
         _nt_[11],
         _nt_[12],
         _nt_[13],
         _nt_[14],
         _nt_[15],
         _nt_[4],
         _nt_[2],
         _nt_[3],
         _nt_[7]]],
       _ns_];
    caml_register_global(5248,Core_Info,"Core__Info");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Error);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$74);
    caml_call1(Expect_test_collector[5][1],cst_core_src_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$75,cst$25);
    var
     _nv_=Base_Error[1],
     _nx_=Base_Error[3],
     _nA_=Base_Error[6],
     _nE_=Base_Error[10],
     _nG_=Base_Error[12],
     _nL_=Base_Error[17],
     _nO_=Base_Error[20],
     _nT_=Base_Error[25],
     _nW_=Base_Error[29],
     _nX_=Base_Error[30],
     _nw_=Base_Error[2],
     _ny_=Base_Error[4],
     _nz_=Base_Error[5],
     _nB_=Base_Error[7],
     _nC_=Base_Error[8],
     _nD_=Base_Error[9],
     _nF_=Base_Error[11],
     _nH_=Base_Error[13],
     _nI_=Base_Error[14],
     _nJ_=Base_Error[15],
     _nK_=Base_Error[16],
     _nM_=Base_Error[18],
     _nN_=Base_Error[19],
     _nP_=Base_Error[21],
     _nQ_=Base_Error[22],
     _nR_=Base_Error[23],
     _nS_=Base_Error[24],
     _nU_=Base_Error[26],
     _nV_=Base_Error[27],
     _nY_=Base_Error[31],
     _nZ_=Base_Error[32],
     include$22=
      _ns_
       ([0,
         Base_Error[1],
         Base_Error[2],
         Base_Error[3],
         Base_Error[4],
         Base_Error[5],
         Base_Error[6],
         Base_Error[7],
         Base_Error[8],
         Base_Error[9],
         Base_Error[10],
         Base_Error[11],
         Base_Error[12],
         Base_Error[13],
         Base_Error[14],
         Base_Error[15],
         Base_Error[16],
         Base_Error[17],
         Base_Error[18],
         Base_Error[19],
         Base_Error[20],
         Base_Error[21],
         Base_Error[22],
         Base_Error[23],
         Base_Error[24],
         Base_Error[25],
         Base_Error[26],
         Base_Error[27],
         Base_Error[28]]),
     _n0_=include$22[1],
     _n1_=include$22[2],
     _n2_=include$22[3],
     _n4_=include$22[5],
     _n8_=include$22[9],
     _n3_=include$22[4],
     _n5_=include$22[6],
     _n6_=include$22[7],
     _n7_=include$22[8];
    function failwiths(strict,here,message,a,sexp_of_a)
     {return caml_call1
              (_nW_,caml_call5(_nL_,[0,here],strict,message,a,sexp_of_a))}
    function failwithp(strict,here,message,a,sexp_of_a)
     {return caml_call1
              (_nW_,caml_call5(_nL_,[0,here],strict,message,a,sexp_of_a))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$76);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Error$0);
    var
     Core_Error=
      [0,
       _nv_,
       _nw_,
       _nx_,
       _ny_,
       _nz_,
       _nA_,
       _nB_,
       _nC_,
       _nD_,
       _nE_,
       _nF_,
       _nG_,
       _nH_,
       _nI_,
       _nJ_,
       _nK_,
       _nL_,
       _nM_,
       _nN_,
       _nO_,
       _nP_,
       _nQ_,
       _nR_,
       _nS_,
       _nT_,
       _nU_,
       _nV_,
       _nW_,
       _nX_,
       _nY_,
       _nZ_,
       _n0_,
       _n1_,
       _n2_,
       _n3_,
       _n4_,
       _n5_,
       _n6_,
       _n7_,
       _n8_,
       failwiths,
       failwithp];
    caml_register_global(5250,Core_Error,"Core__Error");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Or_error);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$77);
    caml_call1(Expect_test_collector[5][1],cst_core_src_or_error_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$78,cst$26);
    var
     _ov_=include$23[28],
     _oy_=include$23[31],
     _oA_=include$23[33],
     _oB_=include$23[34],
     _oC_=include$23[35],
     _oD_=include$23[36],
     _oI_=include$23[41],
     _oK_=include$23[43],
     _oN_=include$23[46],
     _oO_=include$23[47],
     _n9_=include$23[1],
     _n__=include$23[2],
     _n$_=include$23[3],
     _oa_=include$23[4],
     _ob_=include$23[5],
     _oc_=include$23[6],
     _od_=include$23[7],
     _oe_=include$23[8],
     _of_=include$23[9],
     _og_=include$23[10],
     _oh_=include$23[11],
     _oi_=include$23[12],
     _oj_=include$23[13],
     _ok_=include$23[15],
     _ol_=include$23[16],
     _om_=include$23[17],
     _on_=include$23[19],
     _oo_=include$23[20],
     _op_=include$23[21],
     _oq_=include$23[22],
     _or_=include$23[23],
     _os_=include$23[24],
     _ot_=include$23[26],
     _ou_=include$23[27],
     _ow_=include$23[29],
     _ox_=include$23[30],
     _oz_=include$23[32],
     _oE_=include$23[37],
     _oF_=include$23[38],
     _oG_=include$23[39],
     _oH_=include$23[40],
     _oJ_=include$23[42],
     _oL_=include$23[44],
     _oM_=include$23[45],
     _oP_=include$23[48],
     _oQ_=include$23[49],
     _oR_=include$23[50],
     _oT_=caml_call1(Bin_prot_Shape[3][1],cst_a$22),
     _oU_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_or_error_ml_4_13),
     _oS_=0,
     _oV_=caml_call2(Bin_prot_Shape[15],_oU_,_oT_),
     _oW_=function(_bA7_){return bin_shape_t$7(_oV_,_bA7_)}(_n4_),
     _oX_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$23),0],
     _oY_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$74),_oX_,_oW_],_oS_],
     _oZ_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_or_error_ml_4_0),
     group$30=caml_call2(Bin_prot_Shape[6],_oZ_,_oY_);
    function bin_shape_t$24(a)
     {var _bA6_=caml_call1(Bin_prot_Shape[2][1],cst_t$75);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$30,_bA6_),[0,a,0])}
    function bin_size_t$30(size_of_a,v)
     {return bin_size_t$15(size_of_a,_n0_,v)}
    function bin_write_t$30(write_a,buf,pos,v)
     {return bin_write_t$15(write_a,_n1_,buf,pos,v)}
    function bin_writer_t$18(bin_writer_a)
     {function _bA2_(v)
       {var _bA3_=bin_writer_a[2];
        return function(_bA4_,_bA5_)
         {return bin_write_t$30(_bA3_,v,_bA4_,_bA5_)}}
      return [0,function(v){return bin_size_t$30(bin_writer_a[1],v)},_bA2_]}
    function bin_read_t$62(of_a,buf,pos_ref,vint)
     {return bin_read_t$33(of_a,_n2_,buf,pos_ref,vint)}
    function bin_read_t$63(of_a,buf,pos_ref)
     {return bin_read_t$34(of_a,_n2_,buf,pos_ref)}
    function bin_reader_t$18(bin_reader_a)
     {function _bA1_(buf,pos_ref,vtag)
       {return bin_read_t$62(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$63(bin_reader_a[1],buf,pos_ref)},
              _bA1_]}
    function bin_t$18(bin_a)
     {var _bAZ_=bin_reader_t$18(bin_a[3]),_bA0_=bin_writer_t$18(bin_a[2]);
      return [0,bin_shape_t$24(bin_a[1]),_bA0_,_bAZ_]}
    var
     include$24=Expect_test_config[2],
     return$0=include$24[1],
     bind=include$24[2];
    function to_run(t){return caml_call1(include$23[20],t)}
    var IO_flush=[0,return$0,bind,to_run];
    function run(f){return caml_call1(_oy_,caml_call1(f,0))}
    function sanitize(s){return s}
    function flushed(param){return 1}
    var
     upon_unreleasable_issue=Expect_test_config[6],
     bind$0=include$23[19],
     return$1=include$23[20];
    function to_run$0(t){return t}
    function run$0(f){return caml_call1(_oy_,caml_call1(f,0))}
    function flushed$0(param){return 1}
    var upon_unreleasable_issue$0=Expect_test_config[6];
    function sanitize$0(s){return s}
    var
     _o0_=_n8_[1][5],
     _o1_=caml_call1(Bin_prot_Shape[3][1],cst_a$24),
     _o2_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_or_error_ml_39_17),
     _o3_=caml_call2(Bin_prot_Shape[15],_o2_,_o1_),
     _o4_=caml_call1(caml_call1(_h$_[1][1],_o3_),_o0_),
     _o5_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$25),0],
     _o6_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$76),_o5_,_o4_],0],
     _o7_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_or_error_ml_39_4),
     group$31=caml_call2(Bin_prot_Shape[6],_o7_,_o6_);
    function bin_shape_t$25(a)
     {var _bAY_=caml_call1(Bin_prot_Shape[2][1],cst_t$77);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$31,_bAY_),[0,a,0])}
    function bin_size_t$31(size_of_a,v)
     {return caml_call3(_h$_[1][2],size_of_a,_n8_[1][1],v)}
    function bin_write_t$31(write_a,buf,pos,v)
     {return caml_call3(caml_call2(_h$_[1][3],write_a,_n8_[1][2]),buf,pos,v)}
    function bin_writer_t$19(bin_writer_a)
     {function _bAU_(v)
       {var _bAV_=bin_writer_a[2];
        return function(_bAW_,_bAX_)
         {return bin_write_t$31(_bAV_,v,_bAW_,_bAX_)}}
      return [0,function(v){return bin_size_t$31(bin_writer_a[1],v)},_bAU_]}
    function bin_read_t$64(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call2(_h$_[1][5],of_a,_n8_[1][3]),buf,pos_ref,vint)}
    function bin_read_t$65(of_a,buf,pos_ref)
     {return caml_call2(caml_call2(_h$_[1][4],of_a,_n8_[1][3]),buf,pos_ref)}
    function bin_reader_t$19(bin_reader_a)
     {function _bAT_(buf,pos_ref,vtag)
       {return bin_read_t$64(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$65(bin_reader_a[1],buf,pos_ref)},
              _bAT_]}
    function bin_t$19(bin_a)
     {var _bAR_=bin_reader_t$19(bin_a[3]),_bAS_=bin_writer_t$19(bin_a[2]);
      return [0,bin_shape_t$25(bin_a[1]),_bAS_,_bAR_]}
    function compare$16(cmp_a,a_001,b_002)
     {function _bAP_(a_005,b_006){return caml_call2(_n8_[1][9],a_005,b_006)}
      function _bAQ_(a_003,b_004){return caml_call2(cmp_a,a_003,b_004)}
      return caml_call4(_h$_[1][9],_bAQ_,_bAP_,a_001,b_002)}
    function t_of_sexp$19(of_a_007,x_009)
     {return caml_call3(_h$_[1][10],of_a_007,_n8_[1][10],x_009)}
    function sexp_of_t$17(of_a_010,x_011)
     {return caml_call3(_h$_[1][11],of_a_010,_n8_[1][11],x_011)}
    function map$5(x,f)
     {function _bAN_(_bAO_){return _bAO_}
      return caml_call3(_h$_[1][12],x,f,_bAN_)}
    var
     _o8_=_n8_[2][7],
     _o9_=caml_call1(Bin_prot_Shape[3][1],cst_a$26),
     _o__=caml_call1(Bin_prot_Shape[4][1],cst_core_src_or_error_ml_46_17),
     _o$_=caml_call2(Bin_prot_Shape[15],_o__,_o9_),
     _pa_=caml_call1(caml_call1(_h$_[1][1],_o$_),_o8_),
     _pb_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$27),0],
     _pc_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$78),_pb_,_pa_],0],
     _pd_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_or_error_ml_46_4),
     group$32=caml_call2(Bin_prot_Shape[6],_pd_,_pc_);
    function bin_shape_t$26(a)
     {var _bAM_=caml_call1(Bin_prot_Shape[2][1],cst_t$79);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$32,_bAM_),[0,a,0])}
    function bin_size_t$32(size_of_a,v)
     {return caml_call3(_h$_[1][2],size_of_a,_n8_[2][3],v)}
    function bin_write_t$32(write_a,buf,pos,v)
     {return caml_call3(caml_call2(_h$_[1][3],write_a,_n8_[2][4]),buf,pos,v)}
    function bin_writer_t$20(bin_writer_a)
     {function _bAI_(v)
       {var _bAJ_=bin_writer_a[2];
        return function(_bAK_,_bAL_)
         {return bin_write_t$32(_bAJ_,v,_bAK_,_bAL_)}}
      return [0,function(v){return bin_size_t$32(bin_writer_a[1],v)},_bAI_]}
    function bin_read_t$66(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call2(_h$_[1][5],of_a,_n8_[2][5]),buf,pos_ref,vint)}
    function bin_read_t$67(of_a,buf,pos_ref)
     {return caml_call2(caml_call2(_h$_[1][4],of_a,_n8_[2][5]),buf,pos_ref)}
    function bin_reader_t$20(bin_reader_a)
     {function _bAH_(buf,pos_ref,vtag)
       {return bin_read_t$66(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$67(bin_reader_a[1],buf,pos_ref)},
              _bAH_]}
    function bin_t$20(bin_a)
     {var _bAF_=bin_reader_t$20(bin_a[3]),_bAG_=bin_writer_t$20(bin_a[2]);
      return [0,bin_shape_t$26(bin_a[1]),_bAG_,_bAF_]}
    function compare$17(cmp_a,a_012,b_013)
     {function _bAD_(a_016,b_017){return caml_call2(_n8_[2][11],a_016,b_017)}
      function _bAE_(a_014,b_015){return caml_call2(cmp_a,a_014,b_015)}
      return caml_call4(_h$_[1][9],_bAE_,_bAD_,a_012,b_013)}
    function t_of_sexp$20(of_a_018,x_020)
     {return caml_call3(_h$_[1][10],of_a_018,_n8_[2][12],x_020)}
    function sexp_of_t$18(of_a_021,x_022)
     {return caml_call3(_h$_[1][11],of_a_021,_n8_[2][13],x_022)}
    function map$6(x,f)
     {function _bAB_(_bAC_){return _bAC_}
      return caml_call3(_h$_[1][12],x,f,_bAB_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$79);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Or_error$0);
    var
     Core_Or_error=
      [0,
       bin_shape_t$24,
       bin_size_t$30,
       bin_write_t$30,
       bin_read_t$63,
       bin_read_t$62,
       bin_writer_t$18,
       bin_reader_t$18,
       bin_t$18,
       _n9_,
       _n__,
       _n$_,
       _oa_,
       _ob_,
       _oc_,
       _od_,
       _oe_,
       _of_,
       _og_,
       _oh_,
       _oi_,
       _oj_,
       _ok_,
       _ol_,
       _om_,
       _on_,
       _oo_,
       _op_,
       _oq_,
       _or_,
       _os_,
       _ot_,
       _ou_,
       _ov_,
       _ow_,
       _ox_,
       _oy_,
       _oz_,
       _oA_,
       _oB_,
       _oC_,
       _oD_,
       _oE_,
       _oF_,
       _oG_,
       _oH_,
       _oI_,
       _oJ_,
       _oK_,
       _oL_,
       _oM_,
       _oN_,
       _oO_,
       _oP_,
       _oQ_,
       _oR_,
       [0,
        [0],
        [0,return$1,bind$0,to_run$0],
        run$0,
        flushed$0,
        sanitize$0,
        upon_unreleasable_issue$0],
       [0,[0],IO_flush,run,flushed,sanitize,upon_unreleasable_issue],
       [0,
        [0,
         bin_shape_t$25,
         bin_size_t$31,
         bin_write_t$31,
         bin_read_t$65,
         bin_read_t$64,
         bin_writer_t$19,
         bin_reader_t$19,
         bin_t$19,
         compare$16,
         t_of_sexp$19,
         sexp_of_t$17,
         map$5],
        [0,
         bin_shape_t$26,
         bin_size_t$32,
         bin_write_t$32,
         bin_read_t$67,
         bin_read_t$66,
         bin_writer_t$20,
         bin_reader_t$20,
         bin_t$20,
         compare$17,
         t_of_sexp$20,
         sexp_of_t$18,
         map$6]]];
    caml_register_global(5253,Core_Or_error,"Core__Or_error");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Quickcheck_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$80);
    caml_call1(Expect_test_collector[5][1],cst_core_src_quickcheck_intf_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$81,cst$27);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$82);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Quickcheck_intf$0);
    var Core_Quickcheck_intf=[0];
    caml_register_global(5254,Core_Quickcheck_intf,"Core__Quickcheck_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Quickcheck);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$83);
    caml_call1(Expect_test_collector[5][1],cst_core_src_quickcheck_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$84,cst$28);
    function variant2(generator_012,generator_013)
     {var _bAw_=0;
      function _bAx_(size_016,random_017)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_013,
                  size_016,
                  random_017)]}
      var
       _bAy_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bAx_)],_bAw_];
      function _bAz_(size_014,random_015)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_012,
                  size_014,
                  random_015)]}
      var
       _bAA_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bAz_)],_bAy_];
      return caml_call1(Base_quickcheck_Generator[60],_bAA_)}
    function variant2$0(observer_005,observer_006)
     {function _bAv_(x_007,size_008,hash_009)
       {if(66 <= x_007[1])
         {var
           x_011=x_007[2],
           hash_009$0=caml_call2(Base[116],hash_009,66),
           hash_009$1=
            caml_call4
             (Base_quickcheck_Observer[37],
              observer_006,
              x_011,
              size_008,
              hash_009$0);
          return hash_009$1}
        var
         x_010=x_007[2],
         hash_009$2=caml_call2(Base[116],hash_009,65),
         hash_009$3=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_005,
            x_010,
            size_008,
            hash_009$2);
        return hash_009$3}
      return caml_call1(Base_quickcheck_Observer[36],_bAv_)}
    function variant2$1(shrinker_001,shrinker_002)
     {function _bAm_(param)
       {if(66 <= param[1])
         {var
           x_004=param[2],
           _bAn_=0,
           _bAo_=function(x_004){return [0,66,x_004]},
           _bAp_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_002,x_004),
           _bAq_=[0,caml_call2(include$9[32],_bAp_,_bAo_),_bAn_];
          return caml_call1(include$9[68],_bAq_)}
        var x_003=param[2],_bAr_=0;
        function _bAs_(x_003){return [0,65,x_003]}
        var
         _bAt_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_001,x_003),
         _bAu_=[0,caml_call2(include$9[32],_bAt_,_bAs_),_bAr_];
        return caml_call1(include$9[68],_bAu_)}
      return caml_call1(Base_quickcheck_Shrinker[36],_bAm_)}
    function variant3(generator_033,generator_034,generator_035)
     {var _bAf_=0;
      function _bAg_(size_040,random_041)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_035,
                  size_040,
                  random_041)]}
      var
       _bAh_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bAg_)],_bAf_];
      function _bAi_(size_038,random_039)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_034,
                  size_038,
                  random_039)]}
      var
       _bAj_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bAi_)],_bAh_];
      function _bAk_(size_036,random_037)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_033,
                  size_036,
                  random_037)]}
      var
       _bAl_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bAk_)],_bAj_];
      return caml_call1(Base_quickcheck_Generator[60],_bAl_)}
    function variant3$0(observer_024,observer_025,observer_026)
     {function _bAe_(x_027,size_028,hash_029)
       {switch(x_027[1] - 65 | 0)
         {case 0:
           var
            x_030=x_027[2],
            hash_029$0=caml_call2(Base[116],hash_029,65),
            hash_029$1=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_024,
               x_030,
               size_028,
               hash_029$0);
           return hash_029$1;
          case 1:
           var
            x_031=x_027[2],
            hash_029$2=caml_call2(Base[116],hash_029,66),
            hash_029$3=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_025,
               x_031,
               size_028,
               hash_029$2);
           return hash_029$3;
          default:
           var
            x_032=x_027[2],
            hash_029$4=caml_call2(Base[116],hash_029,67),
            hash_029$5=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_026,
               x_032,
               size_028,
               hash_029$4);
           return hash_029$5}}
      return caml_call1(Base_quickcheck_Observer[36],_bAe_)}
    function variant3$1(shrinker_018,shrinker_019,shrinker_020)
     {function _bz3_(param)
       {switch(param[1] - 65 | 0)
         {case 0:
           var
            x_021=param[2],
            _bz4_=0,
            _bz5_=function(x_021){return [0,65,x_021]},
            _bz6_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_018,x_021),
            _bz7_=[0,caml_call2(include$9[32],_bz6_,_bz5_),_bz4_];
           return caml_call1(include$9[68],_bz7_);
          case 1:
           var
            x_022=param[2],
            _bz8_=0,
            _bz9_=function(x_022){return [0,66,x_022]},
            _bz__=caml_call2(Base_quickcheck_Shrinker[37],shrinker_019,x_022),
            _bz$_=[0,caml_call2(include$9[32],_bz__,_bz9_),_bz8_];
           return caml_call1(include$9[68],_bz$_);
          default:
           var
            x_023=param[2],
            _bAa_=0,
            _bAb_=function(x_023){return [0,67,x_023]},
            _bAc_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_020,x_023),
            _bAd_=[0,caml_call2(include$9[32],_bAc_,_bAb_),_bAa_];
           return caml_call1(include$9[68],_bAd_)}}
      return caml_call1(Base_quickcheck_Shrinker[36],_bz3_)}
    function variant4(generator_061,generator_062,generator_063,generator_064)
     {var _bzU_=0;
      function _bzV_(size_071,random_072)
       {return [0,
                68,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_064,
                  size_071,
                  random_072)]}
      var
       _bzW_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bzV_)],_bzU_];
      function _bzX_(size_069,random_070)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_063,
                  size_069,
                  random_070)]}
      var
       _bzY_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bzX_)],_bzW_];
      function _bzZ_(size_067,random_068)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_062,
                  size_067,
                  random_068)]}
      var
       _bz0_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bzZ_)],_bzY_];
      function _bz1_(size_065,random_066)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_061,
                  size_065,
                  random_066)]}
      var
       _bz2_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bz1_)],_bz0_];
      return caml_call1(Base_quickcheck_Generator[60],_bz2_)}
    function variant4$0(observer_050,observer_051,observer_052,observer_053)
     {function _bzT_(x_054,size_055,hash_056)
       {switch(x_054[1] - 65 | 0)
         {case 0:
           var
            x_057=x_054[2],
            hash_056$0=caml_call2(Base[116],hash_056,65),
            hash_056$1=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_050,
               x_057,
               size_055,
               hash_056$0);
           return hash_056$1;
          case 1:
           var
            x_058=x_054[2],
            hash_056$2=caml_call2(Base[116],hash_056,66),
            hash_056$3=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_051,
               x_058,
               size_055,
               hash_056$2);
           return hash_056$3;
          case 2:
           var
            x_059=x_054[2],
            hash_056$4=caml_call2(Base[116],hash_056,67),
            hash_056$5=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_052,
               x_059,
               size_055,
               hash_056$4);
           return hash_056$5;
          default:
           var
            x_060=x_054[2],
            hash_056$6=caml_call2(Base[116],hash_056,68),
            hash_056$7=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_053,
               x_060,
               size_055,
               hash_056$6);
           return hash_056$7}}
      return caml_call1(Base_quickcheck_Observer[36],_bzT_)}
    function variant4$1(shrinker_042,shrinker_043,shrinker_044,shrinker_045)
     {function _bzC_(param)
       {switch(param[1] - 65 | 0)
         {case 0:
           var
            x_046=param[2],
            _bzD_=0,
            _bzE_=function(x_046){return [0,65,x_046]},
            _bzF_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_042,x_046),
            _bzG_=[0,caml_call2(include$9[32],_bzF_,_bzE_),_bzD_];
           return caml_call1(include$9[68],_bzG_);
          case 1:
           var
            x_047=param[2],
            _bzH_=0,
            _bzI_=function(x_047){return [0,66,x_047]},
            _bzJ_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_043,x_047),
            _bzK_=[0,caml_call2(include$9[32],_bzJ_,_bzI_),_bzH_];
           return caml_call1(include$9[68],_bzK_);
          case 2:
           var
            x_048=param[2],
            _bzL_=0,
            _bzM_=function(x_048){return [0,67,x_048]},
            _bzN_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_044,x_048),
            _bzO_=[0,caml_call2(include$9[32],_bzN_,_bzM_),_bzL_];
           return caml_call1(include$9[68],_bzO_);
          default:
           var
            x_049=param[2],
            _bzP_=0,
            _bzQ_=function(x_049){return [0,68,x_049]},
            _bzR_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_045,x_049),
            _bzS_=[0,caml_call2(include$9[32],_bzR_,_bzQ_),_bzP_];
           return caml_call1(include$9[68],_bzS_)}}
      return caml_call1(Base_quickcheck_Shrinker[36],_bzC_)}
    function variant5
     (generator_096,generator_097,generator_098,generator_099,generator_100)
     {var _bzr_=0;
      function _bzs_(size_109,random_110)
       {return [0,
                69,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_100,
                  size_109,
                  random_110)]}
      var
       _bzt_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bzs_)],_bzr_];
      function _bzu_(size_107,random_108)
       {return [0,
                68,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_099,
                  size_107,
                  random_108)]}
      var
       _bzv_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bzu_)],_bzt_];
      function _bzw_(size_105,random_106)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_098,
                  size_105,
                  random_106)]}
      var
       _bzx_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bzw_)],_bzv_];
      function _bzy_(size_103,random_104)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_097,
                  size_103,
                  random_104)]}
      var
       _bzz_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bzy_)],_bzx_];
      function _bzA_(size_101,random_102)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_096,
                  size_101,
                  random_102)]}
      var
       _bzB_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bzA_)],_bzz_];
      return caml_call1(Base_quickcheck_Generator[60],_bzB_)}
    function variant5$0
     (observer_083,observer_084,observer_085,observer_086,observer_087)
     {function _bzq_(x_088,size_089,hash_090)
       {switch(x_088[1] - 65 | 0)
         {case 0:
           var
            x_091=x_088[2],
            hash_090$0=caml_call2(Base[116],hash_090,65),
            hash_090$1=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_083,
               x_091,
               size_089,
               hash_090$0);
           return hash_090$1;
          case 1:
           var
            x_092=x_088[2],
            hash_090$2=caml_call2(Base[116],hash_090,66),
            hash_090$3=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_084,
               x_092,
               size_089,
               hash_090$2);
           return hash_090$3;
          case 2:
           var
            x_093=x_088[2],
            hash_090$4=caml_call2(Base[116],hash_090,67),
            hash_090$5=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_085,
               x_093,
               size_089,
               hash_090$4);
           return hash_090$5;
          case 3:
           var
            x_094=x_088[2],
            hash_090$6=caml_call2(Base[116],hash_090,68),
            hash_090$7=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_086,
               x_094,
               size_089,
               hash_090$6);
           return hash_090$7;
          default:
           var
            x_095=x_088[2],
            hash_090$8=caml_call2(Base[116],hash_090,69),
            hash_090$9=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_087,
               x_095,
               size_089,
               hash_090$8);
           return hash_090$9}}
      return caml_call1(Base_quickcheck_Observer[36],_bzq_)}
    function variant5$1
     (shrinker_073,shrinker_074,shrinker_075,shrinker_076,shrinker_077)
     {function _by7_(param)
       {switch(param[1] - 65 | 0)
         {case 0:
           var
            x_078=param[2],
            _by8_=0,
            _by9_=function(x_078){return [0,65,x_078]},
            _by__=caml_call2(Base_quickcheck_Shrinker[37],shrinker_073,x_078),
            _by$_=[0,caml_call2(include$9[32],_by__,_by9_),_by8_];
           return caml_call1(include$9[68],_by$_);
          case 1:
           var
            x_079=param[2],
            _bza_=0,
            _bzb_=function(x_079){return [0,66,x_079]},
            _bzc_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_074,x_079),
            _bzd_=[0,caml_call2(include$9[32],_bzc_,_bzb_),_bza_];
           return caml_call1(include$9[68],_bzd_);
          case 2:
           var
            x_080=param[2],
            _bze_=0,
            _bzf_=function(x_080){return [0,67,x_080]},
            _bzg_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_075,x_080),
            _bzh_=[0,caml_call2(include$9[32],_bzg_,_bzf_),_bze_];
           return caml_call1(include$9[68],_bzh_);
          case 3:
           var
            x_081=param[2],
            _bzi_=0,
            _bzj_=function(x_081){return [0,68,x_081]},
            _bzk_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_076,x_081),
            _bzl_=[0,caml_call2(include$9[32],_bzk_,_bzj_),_bzi_];
           return caml_call1(include$9[68],_bzl_);
          default:
           var
            x_082=param[2],
            _bzm_=0,
            _bzn_=function(x_082){return [0,69,x_082]},
            _bzo_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_077,x_082),
            _bzp_=[0,caml_call2(include$9[32],_bzo_,_bzn_),_bzm_];
           return caml_call1(include$9[68],_bzp_)}}
      return caml_call1(Base_quickcheck_Shrinker[36],_by7_)}
    function variant6
     (generator_138,
      generator_139,
      generator_140,
      generator_141,
      generator_142,
      generator_143)
     {var _byU_=0;
      function _byV_(size_154,random_155)
       {return [0,
                70,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_143,
                  size_154,
                  random_155)]}
      var
       _byW_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_byV_)],_byU_];
      function _byX_(size_152,random_153)
       {return [0,
                69,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_142,
                  size_152,
                  random_153)]}
      var
       _byY_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_byX_)],_byW_];
      function _byZ_(size_150,random_151)
       {return [0,
                68,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_141,
                  size_150,
                  random_151)]}
      var
       _by0_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_byZ_)],_byY_];
      function _by1_(size_148,random_149)
       {return [0,
                67,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_140,
                  size_148,
                  random_149)]}
      var
       _by2_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_by1_)],_by0_];
      function _by3_(size_146,random_147)
       {return [0,
                66,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_139,
                  size_146,
                  random_147)]}
      var
       _by4_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_by3_)],_by2_];
      function _by5_(size_144,random_145)
       {return [0,
                65,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_138,
                  size_144,
                  random_145)]}
      var
       _by6_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_by5_)],_by4_];
      return caml_call1(Base_quickcheck_Generator[60],_by6_)}
    function variant6$0
     (observer_123,
      observer_124,
      observer_125,
      observer_126,
      observer_127,
      observer_128)
     {function _byT_(x_129,size_130,hash_131)
       {switch(x_129[1] - 65 | 0)
         {case 0:
           var
            x_132=x_129[2],
            hash_131$0=caml_call2(Base[116],hash_131,65),
            hash_131$1=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_123,
               x_132,
               size_130,
               hash_131$0);
           return hash_131$1;
          case 1:
           var
            x_133=x_129[2],
            hash_131$2=caml_call2(Base[116],hash_131,66),
            hash_131$3=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_124,
               x_133,
               size_130,
               hash_131$2);
           return hash_131$3;
          case 2:
           var
            x_134=x_129[2],
            hash_131$4=caml_call2(Base[116],hash_131,67),
            hash_131$5=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_125,
               x_134,
               size_130,
               hash_131$4);
           return hash_131$5;
          case 3:
           var
            x_135=x_129[2],
            hash_131$6=caml_call2(Base[116],hash_131,68),
            hash_131$7=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_126,
               x_135,
               size_130,
               hash_131$6);
           return hash_131$7;
          case 4:
           var
            x_136=x_129[2],
            hash_131$8=caml_call2(Base[116],hash_131,69),
            hash_131$9=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_127,
               x_136,
               size_130,
               hash_131$8);
           return hash_131$9;
          default:
           var
            x_137=x_129[2],
            hash_131$10=caml_call2(Base[116],hash_131,70),
            hash_131$11=
             caml_call4
              (Base_quickcheck_Observer[37],
               observer_128,
               x_137,
               size_130,
               hash_131$10);
           return hash_131$11}}
      return caml_call1(Base_quickcheck_Observer[36],_byT_)}
    function variant6$1
     (shrinker_111,
      shrinker_112,
      shrinker_113,
      shrinker_114,
      shrinker_115,
      shrinker_116)
     {function _byu_(param)
       {switch(param[1] - 65 | 0)
         {case 0:
           var
            x_117=param[2],
            _byv_=0,
            _byw_=function(x_117){return [0,65,x_117]},
            _byx_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_111,x_117),
            _byy_=[0,caml_call2(include$9[32],_byx_,_byw_),_byv_];
           return caml_call1(include$9[68],_byy_);
          case 1:
           var
            x_118=param[2],
            _byz_=0,
            _byA_=function(x_118){return [0,66,x_118]},
            _byB_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_112,x_118),
            _byC_=[0,caml_call2(include$9[32],_byB_,_byA_),_byz_];
           return caml_call1(include$9[68],_byC_);
          case 2:
           var
            x_119=param[2],
            _byD_=0,
            _byE_=function(x_119){return [0,67,x_119]},
            _byF_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_113,x_119),
            _byG_=[0,caml_call2(include$9[32],_byF_,_byE_),_byD_];
           return caml_call1(include$9[68],_byG_);
          case 3:
           var
            x_120=param[2],
            _byH_=0,
            _byI_=function(x_120){return [0,68,x_120]},
            _byJ_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_114,x_120),
            _byK_=[0,caml_call2(include$9[32],_byJ_,_byI_),_byH_];
           return caml_call1(include$9[68],_byK_);
          case 4:
           var
            x_121=param[2],
            _byL_=0,
            _byM_=function(x_121){return [0,69,x_121]},
            _byN_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_115,x_121),
            _byO_=[0,caml_call2(include$9[32],_byN_,_byM_),_byL_];
           return caml_call1(include$9[68],_byO_);
          default:
           var
            x_122=param[2],
            _byP_=0,
            _byQ_=function(x_122){return [0,70,x_122]},
            _byR_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_116,x_122),
            _byS_=[0,caml_call2(include$9[32],_byR_,_byQ_),_byP_];
           return caml_call1(include$9[68],_byS_)}}
      return caml_call1(Base_quickcheck_Shrinker[36],_byu_)}
    function tuple2(generator_166,generator_167)
     {function _bys_(size_168,random_169)
       {var
         _byt_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_167,size_168,random_169);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_166,
                  size_168,
                  random_169),
                _byt_]}
      return caml_call1(Base_quickcheck_Generator[117],_bys_)}
    function tuple2$0(observer_160,observer_161)
     {function _byr_(param,size_164,hash_165)
       {var
         x_163=param[2],
         x_162=param[1],
         hash_165$0=
          caml_call4
           (Base_quickcheck_Observer[37],observer_160,x_162,size_164,hash_165),
         hash_165$1=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_161,
            x_163,
            size_164,
            hash_165$0);
        return hash_165$1}
      return caml_call1(Base_quickcheck_Observer[36],_byr_)}
    function tuple2$1(shrinker_156,shrinker_157)
     {function _byj_(param)
       {var x_159=param[2],x_158=param[1],_byk_=0;
        function _byl_(x_159){return [0,x_158,x_159]}
        var
         _bym_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_157,x_159),
         _byn_=[0,caml_call2(include$9[32],_bym_,_byl_),_byk_];
        function _byo_(x_158){return [0,x_158,x_159]}
        var
         _byp_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_156,x_158),
         _byq_=[0,caml_call2(include$9[32],_byp_,_byo_),_byn_];
        return caml_call1(include$9[68],_byq_)}
      return caml_call1(Base_quickcheck_Shrinker[36],_byj_)}
    function tuple3(generator_184,generator_185,generator_186)
     {function _byg_(size_187,random_188)
       {var
         _byh_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_186,size_187,random_188),
         _byi_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_185,size_187,random_188);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_184,
                  size_187,
                  random_188),
                _byi_,
                _byh_]}
      return caml_call1(Base_quickcheck_Generator[117],_byg_)}
    function tuple3$0(observer_176,observer_177,observer_178)
     {function _byf_(param,size_182,hash_183)
       {var
         x_181=param[3],
         x_180=param[2],
         x_179=param[1],
         hash_183$0=
          caml_call4
           (Base_quickcheck_Observer[37],observer_176,x_179,size_182,hash_183),
         hash_183$1=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_177,
            x_180,
            size_182,
            hash_183$0),
         hash_183$2=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_178,
            x_181,
            size_182,
            hash_183$1);
        return hash_183$2}
      return caml_call1(Base_quickcheck_Observer[36],_byf_)}
    function tuple3$1(shrinker_170,shrinker_171,shrinker_172)
     {function _bx6_(param)
       {var x_175=param[3],x_174=param[2],x_173=param[1],_bx7_=0;
        function _bx8_(x_175){return [0,x_173,x_174,x_175]}
        var
         _bx9_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_172,x_175),
         _bx__=[0,caml_call2(include$9[32],_bx9_,_bx8_),_bx7_];
        function _bx$_(x_174){return [0,x_173,x_174,x_175]}
        var
         _bya_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_171,x_174),
         _byb_=[0,caml_call2(include$9[32],_bya_,_bx$_),_bx__];
        function _byc_(x_173){return [0,x_173,x_174,x_175]}
        var
         _byd_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_170,x_173),
         _bye_=[0,caml_call2(include$9[32],_byd_,_byc_),_byb_];
        return caml_call1(include$9[68],_bye_)}
      return caml_call1(Base_quickcheck_Shrinker[36],_bx6_)}
    function tuple4(generator_207,generator_208,generator_209,generator_210)
     {function _bx2_(size_211,random_212)
       {var
         _bx3_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_210,size_211,random_212),
         _bx4_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_209,size_211,random_212),
         _bx5_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_208,size_211,random_212);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_207,
                  size_211,
                  random_212),
                _bx5_,
                _bx4_,
                _bx3_]}
      return caml_call1(Base_quickcheck_Generator[117],_bx2_)}
    function tuple4$0(observer_197,observer_198,observer_199,observer_200)
     {function _bx1_(param,size_205,hash_206)
       {var
         x_204=param[4],
         x_203=param[3],
         x_202=param[2],
         x_201=param[1],
         hash_206$0=
          caml_call4
           (Base_quickcheck_Observer[37],observer_197,x_201,size_205,hash_206),
         hash_206$1=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_198,
            x_202,
            size_205,
            hash_206$0),
         hash_206$2=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_199,
            x_203,
            size_205,
            hash_206$1),
         hash_206$3=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_200,
            x_204,
            size_205,
            hash_206$2);
        return hash_206$3}
      return caml_call1(Base_quickcheck_Observer[36],_bx1_)}
    function tuple4$1(shrinker_189,shrinker_190,shrinker_191,shrinker_192)
     {function _bxN_(param)
       {var
         x_196=param[4],
         x_195=param[3],
         x_194=param[2],
         x_193=param[1],
         _bxO_=0;
        function _bxP_(x_196){return [0,x_193,x_194,x_195,x_196]}
        var
         _bxQ_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_192,x_196),
         _bxR_=[0,caml_call2(include$9[32],_bxQ_,_bxP_),_bxO_];
        function _bxS_(x_195){return [0,x_193,x_194,x_195,x_196]}
        var
         _bxT_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_191,x_195),
         _bxU_=[0,caml_call2(include$9[32],_bxT_,_bxS_),_bxR_];
        function _bxV_(x_194){return [0,x_193,x_194,x_195,x_196]}
        var
         _bxW_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_190,x_194),
         _bxX_=[0,caml_call2(include$9[32],_bxW_,_bxV_),_bxU_];
        function _bxY_(x_193){return [0,x_193,x_194,x_195,x_196]}
        var
         _bxZ_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_189,x_193),
         _bx0_=[0,caml_call2(include$9[32],_bxZ_,_bxY_),_bxX_];
        return caml_call1(include$9[68],_bx0_)}
      return caml_call1(Base_quickcheck_Shrinker[36],_bxN_)}
    function tuple5
     (generator_235,generator_236,generator_237,generator_238,generator_239)
     {function _bxI_(size_240,random_241)
       {var
         _bxJ_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_239,size_240,random_241),
         _bxK_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_238,size_240,random_241),
         _bxL_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_237,size_240,random_241),
         _bxM_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_236,size_240,random_241);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_235,
                  size_240,
                  random_241),
                _bxM_,
                _bxL_,
                _bxK_,
                _bxJ_]}
      return caml_call1(Base_quickcheck_Generator[117],_bxI_)}
    function tuple5$0
     (observer_223,observer_224,observer_225,observer_226,observer_227)
     {function _bxH_(param,size_233,hash_234)
       {var
         x_232=param[5],
         x_231=param[4],
         x_230=param[3],
         x_229=param[2],
         x_228=param[1],
         hash_234$0=
          caml_call4
           (Base_quickcheck_Observer[37],observer_223,x_228,size_233,hash_234),
         hash_234$1=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_224,
            x_229,
            size_233,
            hash_234$0),
         hash_234$2=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_225,
            x_230,
            size_233,
            hash_234$1),
         hash_234$3=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_226,
            x_231,
            size_233,
            hash_234$2),
         hash_234$4=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_227,
            x_232,
            size_233,
            hash_234$3);
        return hash_234$4}
      return caml_call1(Base_quickcheck_Observer[36],_bxH_)}
    function tuple5$1
     (shrinker_213,shrinker_214,shrinker_215,shrinker_216,shrinker_217)
     {function _bxq_(param)
       {var
         x_222=param[5],
         x_221=param[4],
         x_220=param[3],
         x_219=param[2],
         x_218=param[1],
         _bxr_=0;
        function _bxs_(x_222){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _bxt_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_217,x_222),
         _bxu_=[0,caml_call2(include$9[32],_bxt_,_bxs_),_bxr_];
        function _bxv_(x_221){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _bxw_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_216,x_221),
         _bxx_=[0,caml_call2(include$9[32],_bxw_,_bxv_),_bxu_];
        function _bxy_(x_220){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _bxz_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_215,x_220),
         _bxA_=[0,caml_call2(include$9[32],_bxz_,_bxy_),_bxx_];
        function _bxB_(x_219){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _bxC_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_214,x_219),
         _bxD_=[0,caml_call2(include$9[32],_bxC_,_bxB_),_bxA_];
        function _bxE_(x_218){return [0,x_218,x_219,x_220,x_221,x_222]}
        var
         _bxF_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_213,x_218),
         _bxG_=[0,caml_call2(include$9[32],_bxF_,_bxE_),_bxD_];
        return caml_call1(include$9[68],_bxG_)}
      return caml_call1(Base_quickcheck_Shrinker[36],_bxq_)}
    function tuple6
     (generator_268,
      generator_269,
      generator_270,
      generator_271,
      generator_272,
      generator_273)
     {function _bxk_(size_274,random_275)
       {var
         _bxl_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_273,size_274,random_275),
         _bxm_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_272,size_274,random_275),
         _bxn_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_271,size_274,random_275),
         _bxo_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_270,size_274,random_275),
         _bxp_=
          caml_call3
           (Base_quickcheck_Generator[118],generator_269,size_274,random_275);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_268,
                  size_274,
                  random_275),
                _bxp_,
                _bxo_,
                _bxn_,
                _bxm_,
                _bxl_]}
      return caml_call1(Base_quickcheck_Generator[117],_bxk_)}
    function tuple6$0
     (observer_254,
      observer_255,
      observer_256,
      observer_257,
      observer_258,
      observer_259)
     {function _bxj_(param,size_266,hash_267)
       {var
         x_265=param[6],
         x_264=param[5],
         x_263=param[4],
         x_262=param[3],
         x_261=param[2],
         x_260=param[1],
         hash_267$0=
          caml_call4
           (Base_quickcheck_Observer[37],observer_254,x_260,size_266,hash_267),
         hash_267$1=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_255,
            x_261,
            size_266,
            hash_267$0),
         hash_267$2=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_256,
            x_262,
            size_266,
            hash_267$1),
         hash_267$3=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_257,
            x_263,
            size_266,
            hash_267$2),
         hash_267$4=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_258,
            x_264,
            size_266,
            hash_267$3),
         hash_267$5=
          caml_call4
           (Base_quickcheck_Observer[37],
            observer_259,
            x_265,
            size_266,
            hash_267$4);
        return hash_267$5}
      return caml_call1(Base_quickcheck_Observer[36],_bxj_)}
    function tuple6$1
     (shrinker_242,
      shrinker_243,
      shrinker_244,
      shrinker_245,
      shrinker_246,
      shrinker_247)
     {function _bw1_(param)
       {var
         x_253=param[6],
         x_252=param[5],
         x_251=param[4],
         x_250=param[3],
         x_249=param[2],
         x_248=param[1],
         _bw2_=0;
        function _bw3_(x_253){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bw4_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_247,x_253),
         _bw5_=[0,caml_call2(include$9[32],_bw4_,_bw3_),_bw2_];
        function _bw6_(x_252){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bw7_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_246,x_252),
         _bw8_=[0,caml_call2(include$9[32],_bw7_,_bw6_),_bw5_];
        function _bw9_(x_251){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bw__=caml_call2(Base_quickcheck_Shrinker[37],shrinker_245,x_251),
         _bw$_=[0,caml_call2(include$9[32],_bw__,_bw9_),_bw8_];
        function _bxa_(x_250){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bxb_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_244,x_250),
         _bxc_=[0,caml_call2(include$9[32],_bxb_,_bxa_),_bw$_];
        function _bxd_(x_249){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bxe_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_243,x_249),
         _bxf_=[0,caml_call2(include$9[32],_bxe_,_bxd_),_bxc_];
        function _bxg_(x_248){return [0,x_248,x_249,x_250,x_251,x_252,x_253]}
        var
         _bxh_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_242,x_248),
         _bxi_=[0,caml_call2(include$9[32],_bxh_,_bxg_),_bxf_];
        return caml_call1(include$9[68],_bxi_)}
      return caml_call1(Base_quickcheck_Shrinker[36],_bw1_)}
    function fn2(observer_282,observer_283,generator_284)
     {var
       _bw0_=
        caml_call2(Base_quickcheck_Generator[25],observer_283,generator_284);
      return caml_call2(Base_quickcheck_Generator[25],observer_282,_bw0_)}
    function fn3(observer_293,observer_294,observer_295,generator_296)
     {var
       _bwY_=
        caml_call2(Base_quickcheck_Generator[25],observer_295,generator_296),
       _bwZ_=caml_call2(Base_quickcheck_Generator[25],observer_294,_bwY_);
      return caml_call2(Base_quickcheck_Generator[25],observer_293,_bwZ_)}
    function fn4
     (observer_307,observer_308,observer_309,observer_310,generator_311)
     {var
       _bwV_=
        caml_call2(Base_quickcheck_Generator[25],observer_310,generator_311),
       _bwW_=caml_call2(Base_quickcheck_Generator[25],observer_309,_bwV_),
       _bwX_=caml_call2(Base_quickcheck_Generator[25],observer_308,_bwW_);
      return caml_call2(Base_quickcheck_Generator[25],observer_307,_bwX_)}
    function fn5
     (observer_324,
      observer_325,
      observer_326,
      observer_327,
      observer_328,
      generator_329)
     {var
       _bwR_=
        caml_call2(Base_quickcheck_Generator[25],observer_328,generator_329),
       _bwS_=caml_call2(Base_quickcheck_Generator[25],observer_327,_bwR_),
       _bwT_=caml_call2(Base_quickcheck_Generator[25],observer_326,_bwS_),
       _bwU_=caml_call2(Base_quickcheck_Generator[25],observer_325,_bwT_);
      return caml_call2(Base_quickcheck_Generator[25],observer_324,_bwU_)}
    function fn6
     (observer_344,
      observer_345,
      observer_346,
      observer_347,
      observer_348,
      observer_349,
      generator_350)
     {var
       _bwM_=
        caml_call2(Base_quickcheck_Generator[25],observer_349,generator_350),
       _bwN_=caml_call2(Base_quickcheck_Generator[25],observer_348,_bwM_),
       _bwO_=caml_call2(Base_quickcheck_Generator[25],observer_347,_bwN_),
       _bwP_=caml_call2(Base_quickcheck_Generator[25],observer_346,_bwO_),
       _bwQ_=caml_call2(Base_quickcheck_Generator[25],observer_345,_bwP_);
      return caml_call2(Base_quickcheck_Generator[25],observer_344,_bwQ_)}
    var
     opaque=Base_quickcheck_Observer[1],
     bool=Base_quickcheck_Observer[3],
     char$0=Base_quickcheck_Observer[4],
     int$0=Base_quickcheck_Observer[7],
     fn=Base_quickcheck_Observer[27],
     of_hash_fold=Base_quickcheck_Observer[32],
     unmap=Base_quickcheck_Observer[33],
     fixed_point=Base_quickcheck_Observer[34],
     create$3=Base_quickcheck_Observer[36],
     observe=Base_quickcheck_Observer[37];
    function of_hash(M){return caml_call1(of_hash_fold,M[1])}
    function of_predicate(a,b,f)
     {function _bwL_(x){return caml_call1(f,x)?[0,65,x]:[0,66,x]}
      return caml_call2(unmap,variant2$0(a,b),_bwL_)}
    function singleton(param){return opaque}
    function doubleton(f)
     {var _bwK_=singleton(0);return of_predicate(singleton(0),_bwK_,f)}
    function enum$0(param,f){return caml_call2(unmap,int$0,f)}
    function of_list$0(list,equal)
     {function f(x)
       {function _bwJ_(param,y){return caml_call2(equal,x,y)}
        var match=caml_call2(include$25[69],list,_bwJ_);
        if(match){var match$0=match[1],i=match$0[1];return i}
        return caml_call1(_a3_,cst_Quickcheck_Observer_of_lis)}
      return enum$0(caml_call1(include$25[7],list),f)}
    function of_fun(f)
     {return caml_call1
              (create$3,
               function(x,size,hash)
                {return caml_call4(observe,caml_call1(f,0),x,size,hash)})}
    function comparison(compare,eq,lt,gt)
     {function _bwI_(x)
       {var c=caml_call2(compare,x,eq);
        return 0 <= c?0 < c?[0,67,x]:[0,66,x]:[0,65,x]}
      return caml_call2(unmap,variant3$0(lt,singleton(0),gt),_bwI_)}
    var
     bool$0=Base_quickcheck_Generator[2],
     char$1=Base_quickcheck_Generator[3],
     int$1=Base_quickcheck_Generator[6],
     list=Base_quickcheck_Generator[14],
     fn$0=Base_quickcheck_Generator[25],
     of_list$1=Base_quickcheck_Generator[30],
     union=Base_quickcheck_Generator[31],
     both=Base_quickcheck_Generator[32],
     symbol$0=Base_quickcheck_Generator[33],
     symbol$1=Base_quickcheck_Generator[34],
     symbol$2=Base_quickcheck_Generator[35],
     apply=Base_quickcheck_Generator[36],
     map2=Base_quickcheck_Generator[37],
     map3=Base_quickcheck_Generator[38],
     Applicative_infix=Base_quickcheck_Generator[39],
     symbol_bind=Base_quickcheck_Generator[40],
     symbol_map=Base_quickcheck_Generator[41],
     include$26=Base_quickcheck_Generator[42],
     bind$1=Base_quickcheck_Generator[43],
     return$2=Base_quickcheck_Generator[44],
     map$7=Base_quickcheck_Generator[45],
     join=Base_quickcheck_Generator[46],
     ignore_m=Base_quickcheck_Generator[47],
     all=Base_quickcheck_Generator[48],
     all_unit=Base_quickcheck_Generator[49],
     Let_syntax=Base_quickcheck_Generator[50],
     size=Base_quickcheck_Generator[51],
     with_size=Base_quickcheck_Generator[52],
     filter$0=Base_quickcheck_Generator[54],
     filter_map$0=Base_quickcheck_Generator[55],
     recursive_union=Base_quickcheck_Generator[56],
     fixed_point$0=Base_quickcheck_Generator[57],
     weighted_union=Base_quickcheck_Generator[60],
     weighted_recursive_union=Base_quickcheck_Generator[61],
     small_non_negative_int=Base_quickcheck_Generator[62],
     small_positive_int=Base_quickcheck_Generator[63],
     char_lowercase=Base_quickcheck_Generator[98],
     char_uppercase=Base_quickcheck_Generator[99],
     char_digit=Base_quickcheck_Generator[100],
     char_alpha=Base_quickcheck_Generator[101],
     char_alphanum=Base_quickcheck_Generator[102],
     char_whitespace=Base_quickcheck_Generator[103],
     char_print=Base_quickcheck_Generator[104],
     list_non_empty=Base_quickcheck_Generator[112],
     create$4=Base_quickcheck_Generator[117],
     generate=Base_quickcheck_Generator[118],
     singleton$0=Let_syntax[1],
     _pe_=Base_quickcheck_Generator[113];
    function doubleton$0(x,y)
     {return caml_call1
              (create$4,
               function(param,random)
                {return caml_call1(Splittable_random[2],random)?x:y})}
    function of_fun$0(f)
     {return caml_call1
              (create$4,
               function(size,random)
                {return caml_call3(generate,caml_call1(f,0),size,random)})}
    function of_sequence(p,seq)
     {var
       _bwD_=caml_call2(include$13[10],p,0.),
       _bwE_=_bwD_ || caml_call2(include$13[12],p,1.);
      if(_bwE_)caml_call1(_a3_,caml_call2(_fx_,_pf_,p));
      function _bwF_(param)
       {return caml_call1(_a3_,cst_Generator_of_sequence_ran_)}
      return caml_call4
              (_j4_,
               seq,
               0,
               function(param,x,k)
                {var
                  _bwG_=of_fun$0(k),
                  _bwH_=[0,[0,caml_call2(_aU_,1.,p),_bwG_],0];
                 return caml_call1
                         (weighted_union,[0,[0,p,caml_call1(singleton$0,x)],_bwH_])},
               _bwF_)}
    function bounded_geometric(p,maximum,init)
     {if(init === maximum)return caml_call1(singleton$0,maximum);
      var
       _bwA_=0,
       _bwB_=
        of_fun$0
         (function(param){return bounded_geometric(p,maximum,init + 1 | 0)}),
       _bwC_=[0,[0,caml_call2(_aU_,1.,p),_bwB_],_bwA_];
      return caml_call1
              (weighted_union,[0,[0,p,caml_call1(singleton$0,init)],_bwC_])}
    function geometric(p,init)
     {return bounded_geometric(p,include$27[60],init)}
    function list_with_length(length,t){return caml_call2(_pe_,t,length)}
    function compare_fn(dom)
     {function _bwy_(get_index,x,y)
       {var b_352=caml_call1(get_index,y),a_351=caml_call1(get_index,x);
        return caml_call2(compare,a_351,b_352)}
      var _bwz_=caml_call2(fn$0,dom,int$1);
      return caml_call2(Let_syntax[3],_bwz_,_bwy_)}
    function equal_fn(dom)
     {function _bww_(cmp,x,y){return 0 === caml_call2(cmp,x,y)?1:0}
      var _bwx_=compare_fn(dom);
      return caml_call2(Let_syntax[3],_bwx_,_bww_)}
    var
     atomic=Base_quickcheck_Shrinker[1],
     bool$1=Base_quickcheck_Shrinker[3],
     char$2=Base_quickcheck_Shrinker[4],
     map$8=Base_quickcheck_Shrinker[31],
     filter$1=Base_quickcheck_Shrinker[32],
     filter_map$1=Base_quickcheck_Shrinker[33],
     fixed_point$1=Base_quickcheck_Shrinker[34],
     create$5=Base_quickcheck_Shrinker[36],
     shrink=Base_quickcheck_Shrinker[37];
    function empty(param){return atomic}
    var symbol_bind$0=include$26[1],symbol_map$0=include$26[2];
    function Configure(Config)
     {var
       default_seed=Config[1],
       default_sizes=Config[2],
       default_trial_count=Config[3],
       default_can_generate_trial_cou=Config[4],
       default_shrink_attempts=Config[5],
       nondeterministic_state=
        [246,function(_bwv_){return caml_call2(Base_Random[18][3],0,0)}];
      function random_state_of_seed(seed)
       {if(typeof seed === "number")
         {var
           _bws_=caml_obj_tag(nondeterministic_state),
           _bwt_=
            250 === _bws_
             ?nondeterministic_state[1]
             :246 === _bws_
               ?caml_call1(CamlinternalLazy[2],nondeterministic_state)
               :nondeterministic_state;
          return caml_call1(Splittable_random[1][1],_bwt_)}
        var str=seed[2],_bwu_=caml_call1(_ar_,str);
        return caml_call1(Splittable_random[1][2],_bwu_)}
      function make_seed(seed)
       {if(typeof seed === "number")return 0;
        var string=seed[2];
        return [0,string]}
      function make_shrink_count(param)
       {if(typeof param === "number")return include$27[60];
        var n=param[2];
        return n}
      function make_config(seed,sizes,trials,shrink_attempts)
       {var
         _bwp_=caml_call2(include$28[27],sizes,default_sizes),
         _bwq_=
          make_shrink_count
           (caml_call2(include$28[27],shrink_attempts,default_shrink_attempts)),
         _bwr_=caml_call2(include$28[27],trials,default_trial_count);
        return [0,
                make_seed(caml_call2(include$28[27],seed,default_seed)),
                _bwr_,
                _bwq_,
                _bwp_]}
      function make_test_m(quickcheck_generator,shrinker,sexp_of)
       {var quickcheck_shrinker=caml_call2(include$28[27],shrinker,atomic);
        function _bwo_(param){return _pg_}
        var sexp_of_t=caml_call2(include$28[27],sexp_of,_bwo_);
        return [0,sexp_of_t,quickcheck_generator,quickcheck_shrinker]}
      function random_value(opt,_bwn_,gen)
       {if(opt)var sth=opt[1],seed=sth;else var seed=default_seed;
        if(_bwn_)var sth$0=_bwn_[1],size=sth$0;else var size=30;
        var random=random_state_of_seed(seed);
        return caml_call3(generate,gen,size,random)}
      function random_sequence(seed,sizes,gen)
       {var
         config=make_config(seed,sizes,[0,include$27[60]],0),
         return$0=[0,_i7_],
         _bwk_=0,
         _bwl_=[0,config];
        function _bwm_(sequence){return$0[1] = sequence;return 0}
        caml_call4(Base_quickcheck_Test[7],_bwm_,_bwl_,_bwk_,gen);
        return return$0[1]}
      function iter(seed,sizes,trials,gen,f)
       {var config=make_config(seed,sizes,trials,0),_bwh_=0,_bwi_=[0,config];
        function _bwj_(sequence){return caml_call2(_iE_,sequence,f)}
        return caml_call4(Base_quickcheck_Test[7],_bwj_,_bwi_,_bwh_,gen)}
      function test
       (seed,sizes,trials,shrinker,shrink_attempts,sexp_of,examples,gen,f)
       {var
         config=make_config(seed,sizes,trials,shrink_attempts),
         test_m=make_test_m(gen,shrinker,sexp_of);
        return caml_call4
                (Base_quickcheck_Test[4],f,[0,config],examples,test_m)}
      function test_or_error
       (seed,sizes,trials,shrinker,shrink_attempts,sexp_of,examples,gen,f)
       {var
         config=make_config(seed,sizes,trials,shrink_attempts),
         test_m=make_test_m(gen,shrinker,sexp_of);
        return caml_call4
                (Base_quickcheck_Test[3],f,[0,config],examples,test_m)}
      function test_distinct_values
       (seed,sizes,sexp_of,gen,trials,distinct_values,compare)
       {var S=caml_call1(Stdlib_Set[1],[0,compare]);
        return caml_call1
                (_e7_,
                 function(r)
                  {var set=[0,S[1]];
                   iter
                    (seed,
                     sizes,
                     [0,trials],
                     gen,
                     function(elt)
                      {set[1] = caml_call2(S[4],elt,set[1]);
                       var _bwg_=distinct_values <= caml_call1(S[22],set[1])?1:0;
                       return _bwg_?caml_call1(r,0):_bwg_});
                   var _bwf_=set[1],actual_count=caml_call1(S[22],_bwf_);
                   if(sexp_of)
                    var
                     sexp_of_elt=sexp_of[1],
                     x_353=caml_call1(S[23],_bwf_),
                     values=[0,caml_call2(_W_,sexp_of_elt,x_353)];
                   else
                    var values=0;
                   var match=0;
                   if(values)
                    var
                     v=values[1],
                     _bwa_=[0,[1,[0,_ph_,[0,caml_call1(Base[84][4],v),0]]],match];
                   else
                    var _bwa_=match;
                   var
                    _bwb_=
                     [0,
                      [1,[0,_pi_,[0,caml_call1(sexp_of_t$0,actual_count),0]]],
                      _bwa_],
                    _bwc_=
                     [0,
                      [1,[0,_pj_,[0,caml_call1(sexp_of_t$0,distinct_values),0]]],
                      _bwb_],
                    _bwd_=
                     [0,[1,[0,_pk_,[0,caml_call1(sexp_of_t$0,trials),0]]],_bwc_],
                    res=
                     [0,
                      caml_call1
                       (Sexplib0_Sexp_conv[7],cst_insufficient_distinct_valu),
                      _bwd_];
                   if(res[2])var _bwe_=[1,res];else var h=res[1],_bwe_=h;
                   return caml_call1(_a5_,_bwe_)})}
      function test_can_generate(seed,sizes,opt,sexp_of,gen,f)
       {if(opt)
         var sth=opt[1],trials=sth;
        else
         var trials=default_can_generate_trial_cou;
        var r=[0,0];
        function _bv__(return$0)
         {iter
           (seed,
            sizes,
            [0,trials],
            gen,
            function(x)
             {return caml_call1(f,x)
                      ?caml_call1(return$0,-895996764)
                      :(r[1] = [0,x,r[1]],0)});
          return 501585681}
        var match=caml_call1(Base_With_return[1],_bv__);
        if(501585681 <= match)
         {if(sexp_of)
           {var
             sexp_of_value=sexp_of[1],
             _bv$_=[0,[1,[0,_pl_,[0,caml_call2(_W_,sexp_of_value,r[1]),0]]],0];
            return caml_call1
                    (_nX_,
                     [1,
                      [0,
                       caml_call1(Sexplib0_Sexp_conv[7],cst_cannot_generate),
                       _bv$_]])}
          return caml_call1(_a3_,cst_cannot_generate$0)}
        return 0}
      return [0,
              default_seed,
              default_sizes,
              default_trial_count,
              default_can_generate_trial_cou,
              default_shrink_attempts,
              nondeterministic_state,
              random_state_of_seed,
              make_seed,
              make_shrink_count,
              make_config,
              make_test_m,
              random_value,
              random_sequence,
              iter,
              test,
              test_or_error,
              test_distinct_values,
              test_can_generate]}
    var
     _pm_=Base_Word_size[3]?10000:1000,
     default_sizes=caml_call1(_j1_,caml_call5(include$25[121],0,0,_pn_,0,30)),
     include$29=
      Configure
       ([0,default_seed,default_sizes,_pm_,10000,default_shrink_attempts]),
     _pw_=include$29[15],
     _po_=include$29[1],
     _pp_=include$29[2],
     _pq_=include$29[3],
     _pr_=include$29[4],
     _ps_=include$29[5],
     _pt_=include$29[12],
     _pu_=include$29[13],
     _pv_=include$29[14],
     _px_=include$29[16],
     _py_=include$29[17],
     _pz_=include$29[18];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$85);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Quickcheck$0);
    var
     _pA_=
      [0,
       return$2,
       symbol_bind$0,
       symbol_map$0,
       [0,
        return$2,
        bind$1,
        map$7,
        both,
        [0,
         create$4,
         generate,
         symbol_bind,
         include$26,
         bind$1,
         join,
         ignore_m,
         return$2,
         map$7,
         both,
         symbol$0,
         symbol$1,
         symbol$2,
         symbol_map,
         apply,
         map2,
         map3,
         all,
         all_unit,
         Applicative_infix,
         size,
         with_size,
         bool$0,
         char$1,
         char_digit,
         char_lowercase,
         char_uppercase,
         char_alpha,
         char_alphanum,
         char_print,
         char_whitespace,
         singleton$0,
         doubleton$0,
         of_list$1,
         union,
         of_sequence,
         tuple2,
         tuple3,
         tuple4,
         tuple5,
         tuple6,
         variant2,
         variant3,
         variant4,
         variant5,
         variant6,
         geometric,
         small_non_negative_int,
         small_positive_int,
         fn$0,
         fn2,
         fn3,
         fn4,
         fn5,
         fn6,
         compare_fn,
         equal_fn,
         filter_map$0,
         filter$0,
         recursive_union,
         weighted_recursive_union,
         fixed_point$0,
         weighted_union,
         of_fun$0,
         list,
         list_non_empty,
         list_with_length]]],
     _pB_=
      [0,
       shrink,
       create$5,
       empty,
       bool$1,
       char$2,
       map$8,
       filter$1,
       filter_map$1,
       tuple2$1,
       tuple3$1,
       tuple4$1,
       tuple5$1,
       tuple6$1,
       variant2$1,
       variant3$1,
       variant4$1,
       variant5$1,
       variant6$1,
       fixed_point$1],
     _pC_=
      [0,
       create$3,
       observe,
       of_hash,
       bool,
       char$0,
       doubleton,
       enum$0,
       of_list$0,
       fixed_point,
       variant2$0,
       variant3$0,
       variant4$0,
       variant5$0,
       variant6$0,
       of_predicate,
       comparison,
       singleton,
       unmap,
       tuple2$0,
       tuple3$0,
       tuple4$0,
       tuple5$0,
       tuple6$0,
       fn,
       of_fun],
     _pD_=
      [0,
       create$4,
       generate,
       symbol_bind,
       include$26,
       bind$1,
       join,
       ignore_m,
       Let_syntax,
       return$2,
       map$7,
       both,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol_map,
       apply,
       map2,
       map3,
       all,
       all_unit,
       Applicative_infix,
       size,
       with_size,
       bool$0,
       char$1,
       char_digit,
       char_lowercase,
       char_uppercase,
       char_alpha,
       char_alphanum,
       char_print,
       char_whitespace,
       singleton$0,
       doubleton$0,
       of_list$1,
       union,
       of_sequence,
       tuple2,
       tuple3,
       tuple4,
       tuple5,
       tuple6,
       variant2,
       variant3,
       variant4,
       variant5,
       variant6,
       geometric,
       small_non_negative_int,
       small_positive_int,
       fn$0,
       fn2,
       fn3,
       fn4,
       fn5,
       fn6,
       compare_fn,
       equal_fn,
       filter_map$0,
       filter$0,
       recursive_union,
       weighted_recursive_union,
       fixed_point$0,
       weighted_union,
       of_fun$0,
       list,
       list_non_empty,
       list_with_length],
     Core_Quickcheck=
      [0,
       _pD_,
       _pC_,
       _pB_,
       _pA_,
       _po_,
       _pp_,
       _pq_,
       _pr_,
       _ps_,
       _pt_,
       _pv_,
       _pw_,
       _px_,
       _pz_,
       _py_,
       _pu_,
       function(_bv8_)
        {var _bv9_=Configure(_bv8_);
         return [0,
                 _bv9_[1],
                 _bv9_[2],
                 _bv9_[3],
                 _bv9_[4],
                 _bv9_[5],
                 _bv9_[12],
                 _bv9_[14],
                 _bv9_[15],
                 _bv9_[16],
                 _bv9_[18],
                 _bv9_[17],
                 _bv9_[13]]}];
    caml_register_global(5264,Core_Quickcheck,"Core__Quickcheck");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_T);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$86);
    caml_call1(Expect_test_collector[5][1],cst_core_src_t_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$87,cst$29);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$88);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_T$0);
    var Core_T=[0];
    caml_register_global(5265,Core_T,"Core__T");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Hashtbl_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$89);
    caml_call1(Expect_test_collector[5][1],cst_core_src_hashtbl_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$90,cst$30);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$91);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Hashtbl_intf$0);
    var Core_Hashtbl_intf=[0];
    caml_register_global(5266,Core_Hashtbl_intf,"Core__Hashtbl_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_List0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$92);
    caml_call1(Expect_test_collector[5][1],cst_core_src_list0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$93,cst$31);
    var
     _pE_=include$25[1],
     hash_fold_list=include$25[2],
     list_of_sexp=include$25[3],
     sexp_of_list=include$25[4],
     _pF_=include$25[5],
     _pG_=include$25[6],
     length$0=include$25[7],
     is_empty$0=include$25[8],
     _pH_=include$25[9],
     _pI_=include$25[10],
     _pJ_=include$25[11],
     _pK_=include$25[12],
     _pL_=include$25[13],
     _pM_=include$25[14],
     _pN_=include$25[15],
     _pO_=include$25[16],
     _pP_=include$25[17],
     _pQ_=include$25[18],
     _pR_=include$25[19],
     _pS_=include$25[20],
     _pT_=include$25[21],
     _pU_=include$25[22],
     _pV_=include$25[24],
     _pW_=include$25[25],
     _pX_=include$25[27],
     _pY_=include$25[28],
     _pZ_=include$25[29],
     _p0_=include$25[30],
     _p1_=include$25[31],
     _p2_=include$25[32],
     _p3_=include$25[35],
     _p4_=include$25[36],
     _p5_=include$25[37],
     parts=include$25[38],
     _p6_=include$25[39],
     _p7_=include$25[40],
     _p8_=include$25[41],
     _p9_=include$25[42],
     _p__=include$25[43],
     _p$_=include$25[44],
     _qa_=include$25[45],
     _qb_=include$25[46],
     _qc_=include$25[47],
     _qd_=include$25[48],
     _qe_=include$25[49],
     _qf_=include$25[50],
     _qg_=include$25[51],
     _qh_=include$25[52],
     _qi_=include$25[53],
     _qj_=include$25[54],
     _qk_=include$25[55],
     _ql_=include$25[56],
     _qm_=include$25[57],
     _qn_=include$25[58],
     _qo_=include$25[59],
     _qp_=include$25[60],
     _qq_=include$25[61],
     _qr_=include$25[62],
     _qs_=include$25[63],
     _qt_=include$25[64],
     _qu_=include$25[65],
     _qv_=include$25[66],
     _qw_=include$25[67],
     _qx_=include$25[68],
     _qy_=include$25[69],
     _qz_=include$25[70],
     _qA_=include$25[71],
     _qB_=include$25[72],
     _qC_=include$25[73],
     _qD_=include$25[74],
     _qE_=include$25[75],
     _qF_=include$25[76],
     _qG_=include$25[77],
     _qH_=include$25[78],
     _qI_=include$25[79],
     _qJ_=include$25[80],
     _qK_=include$25[81],
     _qL_=include$25[82],
     _qM_=include$25[83],
     _qN_=include$25[84],
     _qO_=include$25[85],
     _qP_=include$25[86],
     _qQ_=include$25[87],
     _qR_=include$25[88],
     _qS_=include$25[89],
     _qT_=include$25[90],
     _qU_=include$25[91],
     _qV_=include$25[92],
     _qW_=include$25[93],
     _qX_=include$25[94],
     _qY_=include$25[95],
     _qZ_=include$25[96],
     _q0_=include$25[97],
     _q1_=include$25[98],
     _q2_=include$25[99],
     _q3_=include$25[100],
     _q4_=include$25[101],
     _q5_=include$25[102],
     _q6_=include$25[103],
     _q7_=include$25[104],
     _q8_=include$25[105],
     _q9_=include$25[106],
     _q__=include$25[107],
     _q$_=include$25[108],
     _ra_=include$25[109],
     _rb_=include$25[110],
     _rc_=include$25[111],
     _rd_=include$25[112],
     _re_=include$25[113],
     _rf_=include$25[114],
     _rg_=include$25[115],
     _rh_=include$25[116],
     _ri_=include$25[117],
     _rj_=include$25[118],
     _rk_=include$25[119],
     _rl_=include$25[120],
     _rm_=include$25[121],
     _rn_=include$25[122],
     _ro_=include$25[123],
     _rp_=include$25[124],
     _rq_=include$25[125],
     _rr_=include$25[126],
     _rs_=include$25[127],
     _rt_=include$25[128],
     _ru_=include$25[129],
     _rv_=include$25[130],
     _rw_=include$25[131],
     _rx_=include$25[132],
     _ry_=include$25[133],
     _rz_=include$25[134],
     _rA_=include$25[135],
     _rB_=include$25[136],
     _rC_=include$25[137],
     _rD_=include$25[138],
     _rE_=include$25[139],
     _rF_=include$25[140],
     _rG_=include$25[141],
     _rH_=include$25[142],
     _rI_=include$25[143],
     _rJ_=include$25[144],
     _rK_=include$25[145],
     _rL_=include$25[146],
     _rM_=include$25[147],
     _rN_=include$25[149],
     _rO_=include$25[150],
     _rP_=include$25[151],
     _rQ_=caml_call1(Bin_prot_Shape[3][1],cst_a$28),
     _rR_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_list0_ml_5_12),
     _rS_=caml_call1(_c4_,caml_call2(Bin_prot_Shape[15],_rR_,_rQ_)),
     _rT_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$29),0],
     _rU_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$80),_rT_,_rS_],0],
     _rV_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_list0_ml_5_0),
     group$33=caml_call2(Bin_prot_Shape[6],_rV_,_rU_);
    function bin_shape_t$27(a)
     {var _bv7_=caml_call1(Bin_prot_Shape[2][1],cst_t$81);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$33,_bv7_),[0,a,0])}
    function bin_size_t$33(size_of_a,v){return caml_call2(_bm_,size_of_a,v)}
    function bin_write_t$33(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_c6_,write_a),buf,pos,v)}
    function bin_writer_t$21(bin_writer_a)
     {function _bv3_(v)
       {var _bv4_=bin_writer_a[2];
        return function(_bv5_,_bv6_)
         {return bin_write_t$33(_bv4_,v,_bv5_,_bv6_)}}
      return [0,function(v){return bin_size_t$33(bin_writer_a[1],v)},_bv3_]}
    function bin_read_t$68(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_c9_,of_a),buf,pos_ref,vint)}
    function bin_read_t$69(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_c8_,of_a),buf,pos_ref)}
    function bin_reader_t$21(bin_reader_a)
     {function _bv2_(buf,pos_ref,vtag)
       {return bin_read_t$68(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$69(bin_reader_a[1],buf,pos_ref)},
              _bv2_]}
    function bin_t$21(bin_a)
     {var _bv0_=bin_reader_t$21(bin_a[3]),_bv1_=bin_writer_t$21(bin_a[2]);
      return [0,bin_shape_t$27(bin_a[1]),_bv1_,_bv0_]}
    var
     Typename_of_t$1=caml_call1(Typerep_lib_Make_typename[2],[0,name$10]),
     typename_of_t$1=Typename_of_t$1[2];
    function typerep_of_t$1(of_a)
     {var name_of_t=caml_call1(Typename_of_t$1[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_bvZ_){return caml_call1(Typerep_lib_Std[15],of_a)}]]]]}
    var
     _rW_=_ru_[1],
     _rX_=_ru_[2],
     _rY_=_ru_[3],
     _rZ_=_ru_[4],
     _r0_=_ru_[5],
     _r1_=_ru_[6],
     _r2_=_ru_[7],
     _r3_=_ru_[8],
     _r4_=_ru_[9],
     _r5_=_ru_[10],
     _r6_=_ru_[11],
     _r7_=_ru_[12],
     _r8_=caml_call1(Bin_prot_Shape[3][1],cst_b$4),
     _r9_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_list0_ml_10_26),
     _r__=[0,caml_call2(Bin_prot_Shape[15],_r9_,_r8_),0],
     _r$_=caml_call1(Bin_prot_Shape[3][1],cst_a$30),
     _sa_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_list0_ml_10_21),
     _sb_=[0,caml_call2(Bin_prot_Shape[15],_sa_,_r$_),_r__],
     _sc_=caml_call1(_c4_,caml_call1(Bin_prot_Shape[7],_sb_)),
     _sd_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$5),0],
     _se_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$31),_sd_],
     _sf_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$82),_se_,_sc_],0],
     _sg_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_list0_ml_10_2),
     group$34=caml_call2(Bin_prot_Shape[6],_sg_,_sf_);
    function bin_shape_t$28(a,b)
     {var _bvY_=caml_call1(Bin_prot_Shape[2][1],cst_t$83);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$34,_bvY_),[0,a,[0,b,0]])}
    function bin_size_t$34(size_of_a,size_of_b,v)
     {return caml_call2
              (_bm_,
               function(param)
                {var
                  v2=param[2],
                  v1=param[1],
                  _bvW_=caml_call1(size_of_a,v1),
                  size=caml_call2(Bin_prot_Common[23],0,_bvW_),
                  _bvX_=caml_call1(size_of_b,v2);
                 return caml_call2(Bin_prot_Common[23],size,_bvX_)},
               v)}
    function bin_write_t$34(write_a,write_b,buf,pos,v)
     {return caml_call3
              (caml_call1
                (_c6_,
                 function(buf,pos,param)
                  {var
                    v2=param[2],
                    v1=param[1],
                    pos$0=caml_call3(write_a,buf,pos,v1);
                   return caml_call3(write_b,buf,pos$0,v2)}),
               buf,
               pos,
               v)}
    function bin_writer_t$22(bin_writer_a,bin_writer_b)
     {function _bvR_(v)
       {var _bvS_=bin_writer_b[2],_bvT_=bin_writer_a[2];
        return function(_bvU_,_bvV_)
         {return bin_write_t$34(_bvT_,_bvS_,v,_bvU_,_bvV_)}}
      return [0,
              function(v)
               {return bin_size_t$34(bin_writer_a[1],bin_writer_b[1],v)},
              _bvR_]}
    function bin_read_t$70(of_a,of_b,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1
                (_c9_,
                 function(buf,pos_ref)
                  {var
                    v1=caml_call2(of_a,buf,pos_ref),
                    v2=caml_call2(of_b,buf,pos_ref);
                   return [0,v1,v2]}),
               buf,
               pos_ref,
               vint)}
    function bin_read_t$71(of_a,of_b,buf,pos_ref)
     {return caml_call2
              (caml_call1
                (_c8_,
                 function(buf,pos_ref)
                  {var
                    v1=caml_call2(of_a,buf,pos_ref),
                    v2=caml_call2(of_b,buf,pos_ref);
                   return [0,v1,v2]}),
               buf,
               pos_ref)}
    function bin_reader_t$22(bin_reader_a,bin_reader_b)
     {function _bvQ_(buf,pos_ref,vtag)
       {return bin_read_t$70(bin_reader_a[1],bin_reader_b[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$71
                        (bin_reader_a[1],bin_reader_b[1],buf,pos_ref)},
              _bvQ_]}
    function bin_t$22(bin_a,bin_b)
     {var
       _bvO_=bin_reader_t$22(bin_a[3],bin_b[3]),
       _bvP_=bin_writer_t$22(bin_a[2],bin_b[2]);
      return [0,bin_shape_t$28(bin_a[1],bin_b[1]),_bvP_,_bvO_]}
    function compare$18(compare_a,compare_b,a_001,b_002)
     {return caml_call3
              (_S_,
               function(a_003,b_004)
                {var
                  t_006=a_003[2],
                  t_005=a_003[1],
                  t_008=b_004[2],
                  t_007=b_004[1],
                  n=caml_call2(compare_a,t_005,t_007);
                 return 0 === n?caml_call2(compare_b,t_006,t_008):n},
               a_001,
               b_002)}
    function to_string(f,t)
     {var
       _bvM_=caml_call2(_qF_,t,f),
       _bvN_=caml_call2(sexp_of_list,function(x){return [0,x]},_bvM_);
      return caml_call1(include$19[53],_bvN_)}
    function compare$19(cmp_a,a_011,b_012)
     {return caml_call3
              (_pE_,
               function(a_013,b_014){return caml_call2(cmp_a,a_013,b_014)},
               a_011,
               b_012)}
    var
     include$30=caml_call1(Derived,[0,compare$19,sexp_of_list]),
     _sh_=include$30[1],
     _si_=Base_quickcheck_Generator[14],
     _sj_=Base_quickcheck_Generator[112];
    function gen_with_length(length,quickcheck_generator)
     {return caml_call2
              (Base_quickcheck_Generator[113],quickcheck_generator,length)}
    var
     _sk_=Base_quickcheck_Generator[114],
     _sl_=Base_quickcheck_Generator[115],
     _sm_=Base_quickcheck_Observer[15],
     _sn_=Base_quickcheck_Shrinker[15];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$94);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_List0$0);
    var
     Assoc=
      [0,
       _rW_,
       _rX_,
       _rY_,
       _rZ_,
       _r0_,
       _r1_,
       _r2_,
       _r3_,
       _r4_,
       _r5_,
       _r6_,
       _r7_,
       bin_shape_t$28,
       bin_size_t$34,
       bin_write_t$34,
       bin_read_t$71,
       bin_read_t$70,
       bin_writer_t$22,
       bin_reader_t$22,
       bin_t$22,
       compare$18],
     include$31=
      [0,
       _pE_,
       hash_fold_list,
       list_of_sexp,
       sexp_of_list,
       _pF_,
       _pG_,
       length$0,
       is_empty$0,
       _pH_,
       _pI_,
       _pJ_,
       _pK_,
       _pL_,
       _pM_,
       _pN_,
       _pO_,
       _pP_,
       _pQ_,
       _pR_,
       _pS_,
       _pT_,
       _pU_,
       _pV_,
       _pW_,
       _pX_,
       _pY_,
       _pZ_,
       _p0_,
       _p1_,
       _p2_,
       _p3_,
       _p4_,
       _p5_,
       parts,
       _p6_,
       _p7_,
       _p8_,
       _p9_,
       _p__,
       _p$_,
       _qa_,
       _qb_,
       _qc_,
       _qd_,
       _qe_,
       _qf_,
       _qg_,
       _qh_,
       _qi_,
       _qj_,
       _qk_,
       _ql_,
       _qm_,
       _qn_,
       _qo_,
       _qp_,
       _qq_,
       _qr_,
       _qs_,
       _qt_,
       _qu_,
       _qv_,
       _qw_,
       _qx_,
       _qy_,
       _qz_,
       _qA_,
       _qB_,
       _qC_,
       _qD_,
       _qE_,
       _qF_,
       _qG_,
       _qH_,
       _qI_,
       _qJ_,
       _qK_,
       _qL_,
       _qM_,
       _qN_,
       _qO_,
       _qP_,
       _qQ_,
       _qR_,
       _qS_,
       _qT_,
       _qU_,
       _qV_,
       _qW_,
       _qX_,
       _qY_,
       _qZ_,
       _q0_,
       _q1_,
       _q2_,
       _q3_,
       _q4_,
       _q5_,
       _q6_,
       _q7_,
       _q8_,
       _q9_,
       _q__,
       _q$_,
       _ra_,
       _rb_,
       _rc_,
       _rd_,
       _re_,
       _rf_,
       _rg_,
       _rh_,
       _ri_,
       _rj_,
       _rk_,
       _rl_,
       _rm_,
       _rn_,
       _ro_,
       _rp_,
       _rq_,
       _rr_,
       _rs_,
       _rt_,
       _rv_,
       _rw_,
       _rx_,
       _ry_,
       _rz_,
       _rA_,
       _rB_,
       _rC_,
       _rD_,
       _rE_,
       _rF_,
       _rG_,
       _rH_,
       _rI_,
       _rJ_,
       _rK_,
       _rL_,
       _rM_,
       _rN_,
       _rO_,
       _rP_,
       bin_shape_t$27,
       bin_size_t$33,
       bin_write_t$33,
       bin_read_t$69,
       bin_read_t$68,
       bin_writer_t$21,
       bin_reader_t$21,
       bin_t$21,
       typerep_of_t$1,
       typename_of_t$1,
       _sh_,
       _si_,
       _sm_,
       _sn_,
       to_string,
       _sj_,
       gen_with_length,
       _sk_,
       _sl_,
       Assoc];
    caml_register_global(5267,include$31,"Core__List0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Quickcheckable_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$95);
    caml_call1(Expect_test_collector[5][1],cst_core_src_quickcheckable_in);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$96,cst$32);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$97);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Quickcheckable_intf$0);
    var Core_Quickcheckable_intf=[0];
    caml_register_global
     (5268,Core_Quickcheckable_intf,"Core__Quickcheckable_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Quickcheckable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$98);
    caml_call1(Expect_test_collector[5][1],cst_core_src_quickcheckable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$99,cst$33);
    function Of_quickcheckable(Quickcheckable,Conv)
     {var
       quickcheck_generator=caml_call2(_pD_[10],Quickcheckable[1],Conv[1]),
       quickcheck_observer=caml_call2(_pC_[18],Quickcheckable[2],Conv[2]),
       quickcheck_shrinker=
        caml_call3(_pB_[6],Quickcheckable[3],Conv[1],Conv[2]);
      return [0,quickcheck_generator,quickcheck_observer,quickcheck_shrinker]}
    function Of_quickcheckable1(Quickcheckable,Conv)
     {function quickcheck_generator(generate_a)
       {var _bvK_=Conv[1],_bvL_=caml_call1(Quickcheckable[1],generate_a);
        return caml_call2(_pD_[10],_bvL_,_bvK_)}
      function quickcheck_observer(observe_a)
       {var _bvI_=Conv[2],_bvJ_=caml_call1(Quickcheckable[2],observe_a);
        return caml_call2(_pC_[18],_bvJ_,_bvI_)}
      function quickcheck_shrinker(shrink_a)
       {var
         _bvF_=Conv[2],
         _bvG_=Conv[1],
         _bvH_=caml_call1(Quickcheckable[3],shrink_a);
        return caml_call3(_pB_[6],_bvH_,_bvG_,_bvF_)}
      return [0,quickcheck_generator,quickcheck_observer,quickcheck_shrinker]}
    function Of_quickcheckable_filtered(Quickcheckable,Conv)
     {var
       quickcheck_generator=caml_call2(_pD_[59],Quickcheckable[1],Conv[1]),
       quickcheck_observer=caml_call2(_pC_[18],Quickcheckable[2],Conv[2]),
       quickcheck_shrinker=
        caml_call3(_pB_[8],Quickcheckable[3],Conv[1],Conv[2]);
      return [0,quickcheck_generator,quickcheck_observer,quickcheck_shrinker]}
    function Of_quickcheckable_filtered1(Quickcheckable,Conv)
     {function quickcheck_generator(generate_a)
       {var _bvD_=Conv[1],_bvE_=caml_call1(Quickcheckable[1],generate_a);
        return caml_call2(_pD_[59],_bvE_,_bvD_)}
      function quickcheck_observer(observe_a)
       {var _bvB_=Conv[2],_bvC_=caml_call1(Quickcheckable[2],observe_a);
        return caml_call2(_pC_[18],_bvC_,_bvB_)}
      function quickcheck_shrinker(shrink_a)
       {var
         _bvy_=Conv[2],
         _bvz_=Conv[1],
         _bvA_=caml_call1(Quickcheckable[3],shrink_a);
        return caml_call3(_pB_[8],_bvA_,_bvz_,_bvy_)}
      return [0,quickcheck_generator,quickcheck_observer,quickcheck_shrinker]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$100);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Quickcheckable$0);
    var
     Core_Quickcheckable=
      [0,
       Of_quickcheckable,
       Of_quickcheckable1,
       Of_quickcheckable_filtered,
       Of_quickcheckable_filtered1];
    caml_register_global(5269,Core_Quickcheckable,"Core__Quickcheckable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Hashtbl);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$101);
    caml_call1(Expect_test_collector[5][1],cst_core_src_hashtbl_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$102,cst$34);
    var
     invariant$1=Base_Hashtbl[82],
     hashable_s=Base_Hashtbl[81],
     find_multi=Base_Hashtbl[80],
     remove_multi=Base_Hashtbl[79],
     add_multi=Base_Hashtbl[78],
     decr=Base_Hashtbl[77],
     incr=Base_Hashtbl[76],
     to_alist=Base_Hashtbl[75],
     similar=Base_Hashtbl[74],
     equal$4=Base_Hashtbl[73],
     filter_mapi_inplace=Base_Hashtbl[72],
     filter_map_inplace=Base_Hashtbl[71],
     mapi_inplace=Base_Hashtbl[70],
     map_inplace$0=Base_Hashtbl[69],
     filteri_inplace=Base_Hashtbl[68],
     filter_inplace=Base_Hashtbl[67],
     filter_keys_inplace=Base_Hashtbl[66],
     data=Base_Hashtbl[65],
     keys=Base_Hashtbl[64],
     merge_into=Base_Hashtbl[63],
     merge$0=Base_Hashtbl[62],
     find_and_remove=Base_Hashtbl[61],
     findi_and_call2=Base_Hashtbl[60],
     findi_and_call1=Base_Hashtbl[59],
     findi_and_call=Base_Hashtbl[58],
     find_and_call2=Base_Hashtbl[57],
     find_and_call1=Base_Hashtbl[56],
     find_and_call=Base_Hashtbl[55],
     find_exn$0=Base_Hashtbl[54],
     find$0=Base_Hashtbl[53],
     findi_or_add=Base_Hashtbl[52],
     find_or_add=Base_Hashtbl[51],
     partitioni_tf$0=Base_Hashtbl[50],
     partition_tf$0=Base_Hashtbl[49],
     partition_mapi=Base_Hashtbl[48],
     partition_map=Base_Hashtbl[47],
     filteri$0=Base_Hashtbl[46],
     filter$2=Base_Hashtbl[45],
     filter_keys=Base_Hashtbl[44],
     filter_mapi$0=Base_Hashtbl[43],
     filter_map$2=Base_Hashtbl[42],
     mapi$0=Base_Hashtbl[41],
     map$9=Base_Hashtbl[40],
     update_and_return=Base_Hashtbl[39],
     update=Base_Hashtbl[38],
     change=Base_Hashtbl[37],
     add_exn=Base_Hashtbl[36],
     add=Base_Hashtbl[35],
     set$0=Base_Hashtbl[34],
     choose_exn=Base_Hashtbl[33],
     choose=Base_Hashtbl[32],
     remove=Base_Hashtbl[31],
     mem$0=Base_Hashtbl[30],
     is_empty$1=Base_Hashtbl[29],
     length$1=Base_Hashtbl[28],
     count$0=Base_Hashtbl[27],
     counti$0=Base_Hashtbl[26],
     for_all$2=Base_Hashtbl[25],
     for_alli$0=Base_Hashtbl[24],
     exists$2=Base_Hashtbl[23],
     existsi$0=Base_Hashtbl[22],
     iteri$0=Base_Hashtbl[21],
     iter$3=Base_Hashtbl[20],
     iter_keys=Base_Hashtbl[19],
     fold$2=Base_Hashtbl[18],
     copy$0=Base_Hashtbl[17],
     clear=Base_Hashtbl[16],
     sexp_of_key=Base_Hashtbl[15],
     group$35=Base_Hashtbl[14],
     create_with_key_exn=Base_Hashtbl[13],
     create_with_key_or_error=Base_Hashtbl[12],
     create_with_key=Base_Hashtbl[11],
     create_mapped=Base_Hashtbl[10],
     of_alist_multi=Base_Hashtbl[9],
     of_alist_exn=Base_Hashtbl[8],
     of_alist_or_error=Base_Hashtbl[7],
     of_alist_report_all_dups=Base_Hashtbl[6],
     of_alist=Base_Hashtbl[5],
     create$6=Base_Hashtbl[4],
     sexp_of_t$19=Base_Hashtbl[3],
     hash_param=Base_Hashtbl[2],
     hash$7=Base_Hashtbl[1];
    function validate(name,f,t)
     {var _bvx_=caml_call1(to_alist,t);
      return caml_call3(Validate[32],name,f,_bvx_)}
    function create$7(growth_allowed,size,hashable,param)
     {return caml_call3
              (create$6,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable))}
    function of_alist$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (of_alist,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_report_all_dups$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (of_alist_report_all_dups,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_or_error$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (of_alist_or_error,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_exn$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (of_alist_exn,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function of_alist_multi$0(growth_allowed,size,hashable,l)
     {return caml_call4
              (of_alist_multi,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    function create_mapped$0(growth_allowed,size,hashable,get_key,get_data,l)
     {return caml_call6
              (create_mapped,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               get_data,
               l)}
    function create_with_key$0(growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (create_with_key,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function create_with_key_or_error$0
     (growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (create_with_key_or_error,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function create_with_key_exn$0(growth_allowed,size,hashable,get_key,l)
     {return caml_call5
              (create_with_key_exn,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               l)}
    function group$36(growth_allowed,size,hashable,get_key,get_data,combine,l)
     {return caml_call7
              (group$35,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               get_key,
               get_data,
               combine,
               l)}
    var
     _so_=Base_Hashtbl[84],
     _sq_=_so_[2],
     _su_=_so_[6],
     _sL_=_so_[23],
     _sS_=_so_[30],
     _sY_=_so_[36],
     _tf_=_so_[55],
     _sp_=_so_[1],
     _sr_=_so_[3],
     _ss_=_so_[4],
     _st_=_so_[5],
     _sv_=_so_[7],
     _sw_=_so_[8],
     _sx_=_so_[9],
     _sy_=_so_[10],
     _sz_=_so_[11],
     _sA_=_so_[12],
     _sB_=_so_[13],
     _sC_=_so_[14],
     _sD_=_so_[15],
     _sE_=_so_[16],
     _sF_=_so_[17],
     _sG_=_so_[18],
     _sH_=_so_[19],
     _sI_=_so_[20],
     _sJ_=_so_[21],
     _sK_=_so_[22],
     _sM_=_so_[24],
     _sN_=_so_[25],
     _sO_=_so_[26],
     _sP_=_so_[27],
     _sQ_=_so_[28],
     _sR_=_so_[29],
     _sT_=_so_[31],
     _sU_=_so_[32],
     _sV_=_so_[33],
     _sW_=_so_[34],
     _sX_=_so_[35],
     _sZ_=_so_[37],
     _s0_=_so_[38],
     _s1_=_so_[39],
     _s2_=_so_[40],
     _s3_=_so_[41],
     _s4_=_so_[42],
     _s5_=_so_[43],
     _s6_=_so_[44],
     _s7_=_so_[45],
     _s8_=_so_[46],
     _s9_=_so_[47],
     _s__=_so_[48],
     _s$_=_so_[49],
     _ta_=_so_[50],
     _tb_=_so_[51],
     _tc_=_so_[52],
     _td_=_so_[53],
     _te_=_so_[54],
     _tg_=_so_[56],
     _th_=_so_[57],
     _ti_=_so_[58],
     _tj_=_so_[59],
     _tk_=_so_[60],
     _tl_=_so_[61],
     _tm_=_so_[62],
     _tn_=_so_[63],
     _to_=_so_[64],
     _tp_=_so_[65],
     _tq_=_so_[66],
     _tr_=_so_[67],
     _ts_=_so_[68],
     _tt_=_so_[69],
     _tu_=_so_[70],
     _tv_=_so_[71],
     _tw_=_so_[72],
     _tx_=_so_[73],
     _ty_=_so_[74],
     _tz_=_so_[75],
     _tA_=_so_[76],
     _tB_=_so_[77],
     _tC_=_so_[78],
     _tD_=_so_[79],
     _tE_=_so_[80],
     _tF_=_so_[81],
     _tG_=_so_[82],
     _tH_=caml_call1(Bin_prot_Shape[3][1],cst_b$6),
     _tI_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_hashtbl_ml_101_30),
     _tJ_=[0,caml_call2(Bin_prot_Shape[15],_tI_,_tH_),0],
     _tK_=caml_call1(Bin_prot_Shape[3][1],cst_a$32),
     _tL_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_hashtbl_ml_101_25),
     _tM_=[0,caml_call2(Bin_prot_Shape[15],_tL_,_tK_),_tJ_],
     _tN_=caml_call1(Bin_prot_Shape[7],_tM_),
     _tO_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$7),0],
     _tP_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$33),_tO_],
     _tQ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el),_tP_,_tN_],0],
     _tR_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_hashtbl_ml_101_6),
     group$37=caml_call2(Bin_prot_Shape[6],_tR_,_tQ_);
    function bin_shape_el(a,b)
     {var _bvw_=caml_call1(Bin_prot_Shape[2][1],cst_el$0);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$37,_bvw_),[0,a,[0,b,0]])}
    function bin_size_el(size_of_a,size_of_b,param)
     {var
       v2=param[2],
       v1=param[1],
       _bvu_=caml_call1(size_of_a,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bvu_),
       _bvv_=caml_call1(size_of_b,v2);
      return caml_call2(Bin_prot_Common[23],size,_bvv_)}
    function bin_write_el(write_a,write_b,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(write_b,buf,pos$0,v2)}
    function bin_read_el(of_a,of_b,buf,pos_ref)
     {var v1=caml_call2(of_a,buf,pos_ref),v2=caml_call2(of_b,buf,pos_ref);
      return [0,v1,v2]}
    var
     caller_identity=
      caml_call1(Bin_prot_Shape[5][1],cst_8f3e445c_4992_11e6_a279_37);
    function iter$4(t,f)
     {return caml_call2
              (_sL_,t,function(key,data){return caml_call1(f,[0,key,data])})}
    function init$0(len,next)
     {var t=caml_call3(_su_,0,[0,len],0),_bvs_=len - 1 | 0,_bvr_=0;
      if(! (_bvs_ < 0))
       {var i=_bvr_;
        for(;;)
         {var
           match=caml_call1(next,0),
           data=match[2],
           key=match[1],
           match$0=caml_call2(_tf_,t,key);
          if(match$0)
           caml_call1(_a3_,cst_Core_hashtbl_bin_read_t_du);
          else
           caml_call3(_sY_,t,key,data);
          var _bvt_=i + 1 | 0;
          if(_bvs_ !== i){var i=_bvt_;continue}
          break}}
      return t}
    var
     include$32=
      caml_call1
       (Bin_prot_Utils[17],
        [0,
         caller_identity,
         module_name,
         _sS_,
         iter$4,
         init$0,
         bin_size_el,
         bin_write_el,
         bin_read_el,
         bin_shape_el]),
     bin_shape_t$29=include$32[1],
     bin_size_t$35=include$32[2],
     bin_write_t$35=include$32[3],
     bin_read_t$72=include$32[4],
     bin_read_t$73=include$32[5],
     bin_writer_t$23=include$32[6],
     bin_reader_t$23=include$32[7],
     bin_t$23=include$32[8];
    function Make_plain_with_hashable(T)
     {var
       hashable=T[2],
       _bvb_=caml_call1(Base_Hashtbl[83],[0,hashable]),
       t_of_sexp=_bvb_[1],
       create=_bvb_[2],
       of_alist=_bvb_[3],
       of_alist_report_all_dups=_bvb_[4],
       of_alist_or_error=_bvb_[5],
       of_alist_exn=_bvb_[6],
       of_alist_multi=_bvb_[7],
       create_mapped=_bvb_[8],
       create_with_key=_bvb_[9],
       create_with_key_or_error=_bvb_[10],
       create_with_key_exn=_bvb_[11],
       group=_bvb_[12],
       find_multi=Base_Hashtbl[80],
       remove_multi=Base_Hashtbl[79],
       add_multi=Base_Hashtbl[78],
       decr=Base_Hashtbl[77],
       incr=Base_Hashtbl[76],
       to_alist=Base_Hashtbl[75],
       similar=Base_Hashtbl[74],
       equal=Base_Hashtbl[73],
       filter_mapi_inplace=Base_Hashtbl[72],
       filter_map_inplace=Base_Hashtbl[71],
       mapi_inplace=Base_Hashtbl[70],
       map_inplace=Base_Hashtbl[69],
       filteri_inplace=Base_Hashtbl[68],
       filter_inplace=Base_Hashtbl[67],
       filter_keys_inplace=Base_Hashtbl[66],
       data=Base_Hashtbl[65],
       keys=Base_Hashtbl[64],
       merge_into=Base_Hashtbl[63],
       merge=Base_Hashtbl[62],
       find_and_remove=Base_Hashtbl[61],
       findi_and_call2=Base_Hashtbl[60],
       findi_and_call1=Base_Hashtbl[59],
       findi_and_call=Base_Hashtbl[58],
       find_and_call2=Base_Hashtbl[57],
       find_and_call1=Base_Hashtbl[56],
       find_and_call=Base_Hashtbl[55],
       find_exn=Base_Hashtbl[54],
       find=Base_Hashtbl[53],
       findi_or_add=Base_Hashtbl[52],
       find_or_add=Base_Hashtbl[51],
       partitioni_tf=Base_Hashtbl[50],
       partition_tf=Base_Hashtbl[49],
       partition_mapi=Base_Hashtbl[48],
       partition_map=Base_Hashtbl[47],
       filteri=Base_Hashtbl[46],
       filter=Base_Hashtbl[45],
       filter_keys=Base_Hashtbl[44],
       filter_mapi=Base_Hashtbl[43],
       filter_map=Base_Hashtbl[42],
       mapi=Base_Hashtbl[41],
       map=Base_Hashtbl[40],
       update_and_return=Base_Hashtbl[39],
       update=Base_Hashtbl[38],
       change=Base_Hashtbl[37],
       add_exn=Base_Hashtbl[36],
       add=Base_Hashtbl[35],
       set=Base_Hashtbl[34],
       choose_exn=Base_Hashtbl[33],
       choose=Base_Hashtbl[32],
       remove=Base_Hashtbl[31],
       mem=Base_Hashtbl[30],
       is_empty=Base_Hashtbl[29],
       length=Base_Hashtbl[28],
       count=Base_Hashtbl[27],
       counti=Base_Hashtbl[26],
       for_all=Base_Hashtbl[25],
       for_alli=Base_Hashtbl[24],
       exists=Base_Hashtbl[23],
       existsi=Base_Hashtbl[22],
       iteri=Base_Hashtbl[21],
       iter=Base_Hashtbl[20],
       iter_keys=Base_Hashtbl[19],
       fold=Base_Hashtbl[18],
       copy=Base_Hashtbl[17],
       clear=Base_Hashtbl[16],
       sexp_of_key=Base_Hashtbl[15],
       _bvc_=Base_Hashtbl[82];
      function invariant(invariant_key,t)
       {return caml_call3(_bvc_,function(_bvq_){return 0},invariant_key,t)}
      function sexp_of_t(sexp_of_v,t)
       {return caml_call3(_sq_,T[1][2],sexp_of_v,t)}
      function Provide_of_sexp(Key)
       {function t_of_sexp$0(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp,Key[1],v_of_sexp,sexp)}
        return [0,t_of_sexp$0]}
      function Provide_bin_io(Key)
       {var
         sexp_of_t=T[1][2],
         bin_size_t=Key[1],
         bin_write_t=Key[2],
         bin_read_t=Key[3],
         bin_shape_t=Key[5],
         _bvd_=caml_call1(Bin_prot_Shape[3][1],cst_a$34),
         _bve_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_hashtbl_ml_183_27),
         _bvf_=
          [0,bin_shape_t,[0,caml_call2(Bin_prot_Shape[15],_bve_,_bvd_),0]],
         _bvg_=caml_call1(Bin_prot_Shape[7],_bvf_),
         _bvh_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$35),0],
         _bvi_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$1),_bvh_,_bvg_],0],
         _bvj_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_hashtbl_ml_183_6),
         group=caml_call2(Bin_prot_Shape[6],_bvj_,_bvi_);
        function bin_shape_el(a)
         {var _bvp_=caml_call1(Bin_prot_Shape[2][1],cst_el$2);
          return caml_call1
                  (caml_call2(Bin_prot_Shape[14],group,_bvp_),[0,a,0])}
        function bin_size_el(size_of_a,param)
         {var
           v2=param[2],
           v1=param[1],
           _bvn_=caml_call1(bin_size_t,v1),
           size=caml_call2(Bin_prot_Common[23],0,_bvn_),
           _bvo_=caml_call1(size_of_a,v2);
          return caml_call2(Bin_prot_Common[23],size,_bvo_)}
        function bin_write_el(write_a,buf,pos,param)
         {var
           v2=param[2],
           v1=param[1],
           pos$0=caml_call3(bin_write_t,buf,pos,v1);
          return caml_call3(write_a,buf,pos$0,v2)}
        function bin_read_el(of_a,buf,pos_ref)
         {var
           v1=caml_call2(bin_read_t,buf,pos_ref),
           v2=caml_call2(of_a,buf,pos_ref);
          return [0,v1,v2]}
        var
         caller_identity=
          caml_call1(Bin_prot_Shape[5][1],cst_8fabab0a_4992_11e6_8cca_9b);
        function iter(t,f)
         {return caml_call2
                  (iteri,
                   t,
                   function(key,data){return caml_call1(f,[0,key,data])})}
        function init(len,next)
         {var t=caml_call3(create,0,[0,len],0),_bvl_=len - 1 | 0,_bvk_=0;
          if(! (_bvl_ < 0))
           {var i=_bvk_;
            for(;;)
             {var
               match=caml_call1(next,0),
               data=match[2],
               key=match[1],
               match$0=caml_call2(find,t,key);
              if(match$0)
               failwiths(0,_tS_,cst_Hashtbl_bin_read_t_duplica,key,sexp_of_t);
              else
               caml_call3(set,t,key,data);
              var _bvm_=i + 1 | 0;
              if(_bvl_ !== i){var i=_bvm_;continue}
              break}}
          return t}
        return caml_call1
                (Bin_prot_Utils[16],
                 [0,
                  caller_identity,
                  module_name$0,
                  length,
                  iter,
                  init,
                  bin_size_el,
                  bin_write_el,
                  bin_read_el,
                  bin_shape_el])}
      return [0,
              hashable,
              t_of_sexp,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              choose,
              choose_exn,
              set,
              add,
              add_exn,
              change,
              update,
              update_and_return,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              find_and_call1,
              find_and_call2,
              findi_and_call,
              findi_and_call1,
              findi_and_call2,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              validate,
              invariant,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io]}
    function Make_with_hashable(T)
     {var
       _bu$_=T[1],
       _bva_=Make_plain_with_hashable([0,[0,_bu$_[2],_bu$_[3],_bu$_[4]],T[2]]),
       hashable=_bva_[1],
       create=_bva_[3],
       of_alist=_bva_[4],
       of_alist_report_all_dups=_bva_[5],
       of_alist_or_error=_bva_[6],
       of_alist_exn=_bva_[7],
       of_alist_multi=_bva_[8],
       create_mapped=_bva_[9],
       create_with_key=_bva_[10],
       create_with_key_or_error=_bva_[11],
       create_with_key_exn=_bva_[12],
       group=_bva_[13],
       sexp_of_key=_bva_[14],
       clear=_bva_[15],
       copy=_bva_[16],
       fold=_bva_[17],
       iter_keys=_bva_[18],
       iter=_bva_[19],
       iteri=_bva_[20],
       existsi=_bva_[21],
       exists=_bva_[22],
       for_alli=_bva_[23],
       for_all=_bva_[24],
       counti=_bva_[25],
       count=_bva_[26],
       length=_bva_[27],
       is_empty=_bva_[28],
       mem=_bva_[29],
       remove=_bva_[30],
       choose=_bva_[31],
       choose_exn=_bva_[32],
       set=_bva_[33],
       add=_bva_[34],
       add_exn=_bva_[35],
       change=_bva_[36],
       update=_bva_[37],
       update_and_return=_bva_[38],
       map=_bva_[39],
       mapi=_bva_[40],
       filter_map=_bva_[41],
       filter_mapi=_bva_[42],
       filter_keys=_bva_[43],
       filter=_bva_[44],
       filteri=_bva_[45],
       partition_map=_bva_[46],
       partition_mapi=_bva_[47],
       partition_tf=_bva_[48],
       partitioni_tf=_bva_[49],
       find_or_add=_bva_[50],
       findi_or_add=_bva_[51],
       find=_bva_[52],
       find_exn=_bva_[53],
       find_and_call=_bva_[54],
       find_and_call1=_bva_[55],
       find_and_call2=_bva_[56],
       findi_and_call=_bva_[57],
       findi_and_call1=_bva_[58],
       findi_and_call2=_bva_[59],
       find_and_remove=_bva_[60],
       merge=_bva_[61],
       merge_into=_bva_[62],
       keys=_bva_[63],
       data=_bva_[64],
       filter_keys_inplace=_bva_[65],
       filter_inplace=_bva_[66],
       filteri_inplace=_bva_[67],
       map_inplace=_bva_[68],
       mapi_inplace=_bva_[69],
       filter_map_inplace=_bva_[70],
       filter_mapi_inplace=_bva_[71],
       equal=_bva_[72],
       similar=_bva_[73],
       to_alist=_bva_[74],
       incr=_bva_[75],
       decr=_bva_[76],
       add_multi=_bva_[77],
       remove_multi=_bva_[78],
       find_multi=_bva_[79],
       validate=_bva_[80],
       invariant=_bva_[81],
       sexp_of_t=_bva_[82],
       Provide_of_sexp=_bva_[83],
       Provide_bin_io=_bva_[84],
       include=caml_call1(Provide_of_sexp,[0,T[1][1]]),
       t_of_sexp=include[1];
      return [0,
              hashable,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              choose,
              choose_exn,
              set,
              add,
              add_exn,
              change,
              update,
              update_and_return,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              find_and_call1,
              find_and_call2,
              findi_and_call,
              findi_and_call1,
              findi_and_call2,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              validate,
              invariant,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp]}
    function Make_plain(Key)
     {var hashable=[0,Key[3],Key[1],Key[2]];
      return Make_plain_with_hashable([0,Key,hashable])}
    function Make$0(Key)
     {var
       _bu__=Make_plain([0,Key[2],Key[3],Key[4]]),
       hashable=_bu__[1],
       create=_bu__[3],
       of_alist=_bu__[4],
       of_alist_report_all_dups=_bu__[5],
       of_alist_or_error=_bu__[6],
       of_alist_exn=_bu__[7],
       of_alist_multi=_bu__[8],
       create_mapped=_bu__[9],
       create_with_key=_bu__[10],
       create_with_key_or_error=_bu__[11],
       create_with_key_exn=_bu__[12],
       group=_bu__[13],
       sexp_of_key=_bu__[14],
       clear=_bu__[15],
       copy=_bu__[16],
       fold=_bu__[17],
       iter_keys=_bu__[18],
       iter=_bu__[19],
       iteri=_bu__[20],
       existsi=_bu__[21],
       exists=_bu__[22],
       for_alli=_bu__[23],
       for_all=_bu__[24],
       counti=_bu__[25],
       count=_bu__[26],
       length=_bu__[27],
       is_empty=_bu__[28],
       mem=_bu__[29],
       remove=_bu__[30],
       choose=_bu__[31],
       choose_exn=_bu__[32],
       set=_bu__[33],
       add=_bu__[34],
       add_exn=_bu__[35],
       change=_bu__[36],
       update=_bu__[37],
       update_and_return=_bu__[38],
       map=_bu__[39],
       mapi=_bu__[40],
       filter_map=_bu__[41],
       filter_mapi=_bu__[42],
       filter_keys=_bu__[43],
       filter=_bu__[44],
       filteri=_bu__[45],
       partition_map=_bu__[46],
       partition_mapi=_bu__[47],
       partition_tf=_bu__[48],
       partitioni_tf=_bu__[49],
       find_or_add=_bu__[50],
       findi_or_add=_bu__[51],
       find=_bu__[52],
       find_exn=_bu__[53],
       find_and_call=_bu__[54],
       find_and_call1=_bu__[55],
       find_and_call2=_bu__[56],
       findi_and_call=_bu__[57],
       findi_and_call1=_bu__[58],
       findi_and_call2=_bu__[59],
       find_and_remove=_bu__[60],
       merge=_bu__[61],
       merge_into=_bu__[62],
       keys=_bu__[63],
       data=_bu__[64],
       filter_keys_inplace=_bu__[65],
       filter_inplace=_bu__[66],
       filteri_inplace=_bu__[67],
       map_inplace=_bu__[68],
       mapi_inplace=_bu__[69],
       filter_map_inplace=_bu__[70],
       filter_mapi_inplace=_bu__[71],
       equal=_bu__[72],
       similar=_bu__[73],
       to_alist=_bu__[74],
       incr=_bu__[75],
       decr=_bu__[76],
       add_multi=_bu__[77],
       remove_multi=_bu__[78],
       find_multi=_bu__[79],
       validate=_bu__[80],
       invariant=_bu__[81],
       sexp_of_t=_bu__[82],
       Provide_of_sexp=_bu__[83],
       Provide_bin_io=_bu__[84],
       include=caml_call1(Provide_of_sexp,[0,Key[1]]),
       t_of_sexp=include[1];
      return [0,
              hashable,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              choose,
              choose_exn,
              set,
              add,
              add_exn,
              change,
              update,
              update_and_return,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              find_and_call1,
              find_and_call2,
              findi_and_call,
              findi_and_call1,
              findi_and_call2,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              incr,
              decr,
              add_multi,
              remove_multi,
              find_multi,
              validate,
              invariant,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp]}
    var
     equal_m_t=Base_Hashtbl[89],
     m_t_sexp_grammar=Base_Hashtbl[88],
     m_t_of_sexp=Base_Hashtbl[87],
     sexp_of_m_t=Base_Hashtbl[86];
    function of_alist_option(m,alist)
     {return caml_call1(_hT_,caml_call4(of_alist_or_error,0,0,m,alist))}
    function quickcheck_generator_m_t(Key)
     {return function(quickcheck_generator_data)
       {var _bu4_=[0,Key[1],Key[7],Key[3]];
        function _bu5_(_bu9_){return of_alist_option(_bu4_,_bu9_)}
        function _bu6_(size_004,random_005)
         {var
           _bu8_=
            caml_call3
             (Base_quickcheck_Generator[118],
              quickcheck_generator_data,
              size_004,
              random_005);
          return [0,
                  caml_call3
                   (Base_quickcheck_Generator[118],Key[4],size_004,random_005),
                  _bu8_]}
        var
         _bu7_=
          caml_call1(_si_,caml_call1(Base_quickcheck_Generator[117],_bu6_));
        return caml_call2(_pD_[59],_bu7_,_bu5_)}}
    function quickcheck_observer_m_t(Key)
     {return function(quickcheck_observer_data)
       {function _bu2_(param,size_008,hash_009)
         {var
           x_007=param[2],
           x_006=param[1],
           hash_009$0=
            caml_call4
             (Base_quickcheck_Observer[37],Key[5],x_006,size_008,hash_009),
           hash_009$1=
            caml_call4
             (Base_quickcheck_Observer[37],
              quickcheck_observer_data,
              x_007,
              size_008,
              hash_009$0);
          return hash_009$1}
        var
         _bu3_=
          caml_call1(_sm_,caml_call1(Base_quickcheck_Observer[36],_bu2_));
        return caml_call2(_pC_[18],_bu3_,to_alist)}}
    function quickcheck_shrinker_m_t(Key)
     {return function(quickcheck_shrinker_data)
       {var _buQ_=[0,Key[1],Key[7],Key[3]];
        function _buR_(_bu1_){return of_alist_option(_buQ_,_bu1_)}
        function _buS_(param)
         {var x_011=param[2],x_010=param[1],_buU_=0;
          function _buV_(x_011){return [0,x_010,x_011]}
          var
           _buW_=
            caml_call2
             (Base_quickcheck_Shrinker[37],quickcheck_shrinker_data,x_011),
           _buX_=[0,caml_call2(include$9[32],_buW_,_buV_),_buU_];
          function _buY_(x_010){return [0,x_010,x_011]}
          var
           _buZ_=caml_call2(Base_quickcheck_Shrinker[37],Key[6],x_010),
           _bu0_=[0,caml_call2(include$9[32],_buZ_,_buY_),_buX_];
          return caml_call1(include$9[68],_bu0_)}
        var
         _buT_=
          caml_call1(_sn_,caml_call1(Base_quickcheck_Shrinker[36],_buS_));
        return caml_call3(_pB_[8],_buT_,_buR_,to_alist)}}
    var _tT_=Base_Hashtbl[90][1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$103);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Hashtbl$0);
    var _tU_=Base_Hashtbl[85];
    function _tV_(T)
     {var
       _buN_=T[1],
       _buO_=
        Make_with_hashable
         ([0,[0,_buN_[9],_buN_[10],_buN_[11],_buN_[12]],T[2]]),
       hashable=_buO_[1],
       create=_buO_[2],
       of_alist=_buO_[3],
       of_alist_report_all_dups=_buO_[4],
       of_alist_or_error=_buO_[5],
       of_alist_exn=_buO_[6],
       of_alist_multi=_buO_[7],
       create_mapped=_buO_[8],
       create_with_key=_buO_[9],
       create_with_key_or_error=_buO_[10],
       create_with_key_exn=_buO_[11],
       group=_buO_[12],
       sexp_of_key=_buO_[13],
       clear=_buO_[14],
       copy=_buO_[15],
       fold=_buO_[16],
       iter_keys=_buO_[17],
       iter=_buO_[18],
       iteri=_buO_[19],
       existsi=_buO_[20],
       exists=_buO_[21],
       for_alli=_buO_[22],
       for_all=_buO_[23],
       counti=_buO_[24],
       count=_buO_[25],
       length=_buO_[26],
       is_empty=_buO_[27],
       mem=_buO_[28],
       remove=_buO_[29],
       choose=_buO_[30],
       choose_exn=_buO_[31],
       set=_buO_[32],
       add=_buO_[33],
       add_exn=_buO_[34],
       change=_buO_[35],
       update=_buO_[36],
       update_and_return=_buO_[37],
       map=_buO_[38],
       mapi=_buO_[39],
       filter_map=_buO_[40],
       filter_mapi=_buO_[41],
       filter_keys=_buO_[42],
       filter=_buO_[43],
       filteri=_buO_[44],
       partition_map=_buO_[45],
       partition_mapi=_buO_[46],
       partition_tf=_buO_[47],
       partitioni_tf=_buO_[48],
       find_or_add=_buO_[49],
       findi_or_add=_buO_[50],
       find=_buO_[51],
       find_exn=_buO_[52],
       find_and_call=_buO_[53],
       find_and_call1=_buO_[54],
       find_and_call2=_buO_[55],
       findi_and_call=_buO_[56],
       findi_and_call1=_buO_[57],
       findi_and_call2=_buO_[58],
       find_and_remove=_buO_[59],
       merge=_buO_[60],
       merge_into=_buO_[61],
       keys=_buO_[62],
       data=_buO_[63],
       filter_keys_inplace=_buO_[64],
       filter_inplace=_buO_[65],
       filteri_inplace=_buO_[66],
       map_inplace=_buO_[67],
       mapi_inplace=_buO_[68],
       filter_map_inplace=_buO_[69],
       filter_mapi_inplace=_buO_[70],
       equal=_buO_[71],
       similar=_buO_[72],
       to_alist=_buO_[73],
       incr=_buO_[74],
       decr=_buO_[75],
       add_multi=_buO_[76],
       remove_multi=_buO_[77],
       find_multi=_buO_[78],
       validate=_buO_[79],
       invariant=_buO_[80],
       sexp_of_t=_buO_[81],
       Provide_of_sexp=_buO_[82],
       Provide_bin_io=_buO_[83],
       t_of_sexp=_buO_[84],
       _buP_=T[1],
       include=
        caml_call1
         (Provide_bin_io,
          [0,
           _buP_[1],
           _buP_[2],
           _buP_[3],
           _buP_[4],
           _buP_[5],
           _buP_[6],
           _buP_[7],
           _buP_[8]]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              sexp_of_t,
              hashable,
              invariant,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              choose,
              choose_exn,
              set,
              add,
              add_exn,
              change,
              update,
              update_and_return,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              find_and_call1,
              find_and_call2,
              findi_and_call,
              findi_and_call1,
              findi_and_call2,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              incr,
              decr,
              validate,
              add_multi,
              remove_multi,
              find_multi,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _tW_(_buL_)
     {var _buM_=Make_with_hashable(_buL_);
      return [0,
              _buM_[81],
              _buM_[1],
              _buM_[80],
              _buM_[2],
              _buM_[3],
              _buM_[4],
              _buM_[5],
              _buM_[6],
              _buM_[7],
              _buM_[8],
              _buM_[9],
              _buM_[10],
              _buM_[11],
              _buM_[12],
              _buM_[13],
              _buM_[14],
              _buM_[15],
              _buM_[16],
              _buM_[17],
              _buM_[18],
              _buM_[19],
              _buM_[20],
              _buM_[21],
              _buM_[22],
              _buM_[23],
              _buM_[24],
              _buM_[25],
              _buM_[26],
              _buM_[27],
              _buM_[28],
              _buM_[29],
              _buM_[30],
              _buM_[31],
              _buM_[32],
              _buM_[33],
              _buM_[34],
              _buM_[35],
              _buM_[36],
              _buM_[37],
              _buM_[38],
              _buM_[39],
              _buM_[40],
              _buM_[41],
              _buM_[42],
              _buM_[43],
              _buM_[44],
              _buM_[45],
              _buM_[46],
              _buM_[47],
              _buM_[48],
              _buM_[49],
              _buM_[50],
              _buM_[51],
              _buM_[52],
              _buM_[53],
              _buM_[54],
              _buM_[55],
              _buM_[56],
              _buM_[57],
              _buM_[58],
              _buM_[59],
              _buM_[60],
              _buM_[61],
              _buM_[62],
              _buM_[63],
              _buM_[64],
              _buM_[65],
              _buM_[66],
              _buM_[67],
              _buM_[68],
              _buM_[69],
              _buM_[70],
              _buM_[71],
              _buM_[72],
              _buM_[73],
              _buM_[74],
              _buM_[75],
              _buM_[79],
              _buM_[76],
              _buM_[77],
              _buM_[78],
              _buM_[82],
              _buM_[83],
              _buM_[84]]}
    function _tX_(_buJ_)
     {var _buK_=Make_plain_with_hashable(_buJ_);
      return [0,
              _buK_[82],
              _buK_[1],
              _buK_[81],
              _buK_[3],
              _buK_[4],
              _buK_[5],
              _buK_[6],
              _buK_[7],
              _buK_[8],
              _buK_[9],
              _buK_[10],
              _buK_[11],
              _buK_[12],
              _buK_[13],
              _buK_[14],
              _buK_[15],
              _buK_[16],
              _buK_[17],
              _buK_[18],
              _buK_[19],
              _buK_[20],
              _buK_[21],
              _buK_[22],
              _buK_[23],
              _buK_[24],
              _buK_[25],
              _buK_[26],
              _buK_[27],
              _buK_[28],
              _buK_[29],
              _buK_[30],
              _buK_[31],
              _buK_[32],
              _buK_[33],
              _buK_[34],
              _buK_[35],
              _buK_[36],
              _buK_[37],
              _buK_[38],
              _buK_[39],
              _buK_[40],
              _buK_[41],
              _buK_[42],
              _buK_[43],
              _buK_[44],
              _buK_[45],
              _buK_[46],
              _buK_[47],
              _buK_[48],
              _buK_[49],
              _buK_[50],
              _buK_[51],
              _buK_[52],
              _buK_[53],
              _buK_[54],
              _buK_[55],
              _buK_[56],
              _buK_[57],
              _buK_[58],
              _buK_[59],
              _buK_[60],
              _buK_[61],
              _buK_[62],
              _buK_[63],
              _buK_[64],
              _buK_[65],
              _buK_[66],
              _buK_[67],
              _buK_[68],
              _buK_[69],
              _buK_[70],
              _buK_[71],
              _buK_[72],
              _buK_[73],
              _buK_[74],
              _buK_[75],
              _buK_[76],
              _buK_[80],
              _buK_[77],
              _buK_[78],
              _buK_[79],
              _buK_[83],
              _buK_[84]]}
    function _tY_(Key)
     {var
       _buI_=Make$0([0,Key[9],Key[10],Key[11],Key[12]]),
       hashable=_buI_[1],
       create=_buI_[2],
       of_alist=_buI_[3],
       of_alist_report_all_dups=_buI_[4],
       of_alist_or_error=_buI_[5],
       of_alist_exn=_buI_[6],
       of_alist_multi=_buI_[7],
       create_mapped=_buI_[8],
       create_with_key=_buI_[9],
       create_with_key_or_error=_buI_[10],
       create_with_key_exn=_buI_[11],
       group=_buI_[12],
       sexp_of_key=_buI_[13],
       clear=_buI_[14],
       copy=_buI_[15],
       fold=_buI_[16],
       iter_keys=_buI_[17],
       iter=_buI_[18],
       iteri=_buI_[19],
       existsi=_buI_[20],
       exists=_buI_[21],
       for_alli=_buI_[22],
       for_all=_buI_[23],
       counti=_buI_[24],
       count=_buI_[25],
       length=_buI_[26],
       is_empty=_buI_[27],
       mem=_buI_[28],
       remove=_buI_[29],
       choose=_buI_[30],
       choose_exn=_buI_[31],
       set=_buI_[32],
       add=_buI_[33],
       add_exn=_buI_[34],
       change=_buI_[35],
       update=_buI_[36],
       update_and_return=_buI_[37],
       map=_buI_[38],
       mapi=_buI_[39],
       filter_map=_buI_[40],
       filter_mapi=_buI_[41],
       filter_keys=_buI_[42],
       filter=_buI_[43],
       filteri=_buI_[44],
       partition_map=_buI_[45],
       partition_mapi=_buI_[46],
       partition_tf=_buI_[47],
       partitioni_tf=_buI_[48],
       find_or_add=_buI_[49],
       findi_or_add=_buI_[50],
       find=_buI_[51],
       find_exn=_buI_[52],
       find_and_call=_buI_[53],
       find_and_call1=_buI_[54],
       find_and_call2=_buI_[55],
       findi_and_call=_buI_[56],
       findi_and_call1=_buI_[57],
       findi_and_call2=_buI_[58],
       find_and_remove=_buI_[59],
       merge=_buI_[60],
       merge_into=_buI_[61],
       keys=_buI_[62],
       data=_buI_[63],
       filter_keys_inplace=_buI_[64],
       filter_inplace=_buI_[65],
       filteri_inplace=_buI_[66],
       map_inplace=_buI_[67],
       mapi_inplace=_buI_[68],
       filter_map_inplace=_buI_[69],
       filter_mapi_inplace=_buI_[70],
       equal=_buI_[71],
       similar=_buI_[72],
       to_alist=_buI_[73],
       incr=_buI_[74],
       decr=_buI_[75],
       add_multi=_buI_[76],
       remove_multi=_buI_[77],
       find_multi=_buI_[78],
       validate=_buI_[79],
       invariant=_buI_[80],
       sexp_of_t=_buI_[81],
       Provide_of_sexp=_buI_[82],
       Provide_bin_io=_buI_[83],
       t_of_sexp=_buI_[84],
       include=
        caml_call1
         (Provide_bin_io,
          [0,Key[1],Key[2],Key[3],Key[4],Key[5],Key[6],Key[7],Key[8]]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              sexp_of_t,
              hashable,
              invariant,
              create,
              of_alist,
              of_alist_report_all_dups,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              create_mapped,
              create_with_key,
              create_with_key_or_error,
              create_with_key_exn,
              group,
              sexp_of_key,
              clear,
              copy,
              fold,
              iter_keys,
              iter,
              iteri,
              existsi,
              exists,
              for_alli,
              for_all,
              counti,
              count,
              length,
              is_empty,
              mem,
              remove,
              choose,
              choose_exn,
              set,
              add,
              add_exn,
              change,
              update,
              update_and_return,
              map,
              mapi,
              filter_map,
              filter_mapi,
              filter_keys,
              filter,
              filteri,
              partition_map,
              partition_mapi,
              partition_tf,
              partitioni_tf,
              find_or_add,
              findi_or_add,
              find,
              find_exn,
              find_and_call,
              find_and_call1,
              find_and_call2,
              findi_and_call,
              findi_and_call1,
              findi_and_call2,
              find_and_remove,
              merge,
              merge_into,
              keys,
              data,
              filter_keys_inplace,
              filter_inplace,
              filteri_inplace,
              map_inplace,
              mapi_inplace,
              filter_map_inplace,
              filter_mapi_inplace,
              equal,
              similar,
              to_alist,
              incr,
              decr,
              validate,
              add_multi,
              remove_multi,
              find_multi,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _tZ_(_buG_)
     {var _buH_=Make$0(_buG_);
      return [0,
              _buH_[81],
              _buH_[1],
              _buH_[80],
              _buH_[2],
              _buH_[3],
              _buH_[4],
              _buH_[5],
              _buH_[6],
              _buH_[7],
              _buH_[8],
              _buH_[9],
              _buH_[10],
              _buH_[11],
              _buH_[12],
              _buH_[13],
              _buH_[14],
              _buH_[15],
              _buH_[16],
              _buH_[17],
              _buH_[18],
              _buH_[19],
              _buH_[20],
              _buH_[21],
              _buH_[22],
              _buH_[23],
              _buH_[24],
              _buH_[25],
              _buH_[26],
              _buH_[27],
              _buH_[28],
              _buH_[29],
              _buH_[30],
              _buH_[31],
              _buH_[32],
              _buH_[33],
              _buH_[34],
              _buH_[35],
              _buH_[36],
              _buH_[37],
              _buH_[38],
              _buH_[39],
              _buH_[40],
              _buH_[41],
              _buH_[42],
              _buH_[43],
              _buH_[44],
              _buH_[45],
              _buH_[46],
              _buH_[47],
              _buH_[48],
              _buH_[49],
              _buH_[50],
              _buH_[51],
              _buH_[52],
              _buH_[53],
              _buH_[54],
              _buH_[55],
              _buH_[56],
              _buH_[57],
              _buH_[58],
              _buH_[59],
              _buH_[60],
              _buH_[61],
              _buH_[62],
              _buH_[63],
              _buH_[64],
              _buH_[65],
              _buH_[66],
              _buH_[67],
              _buH_[68],
              _buH_[69],
              _buH_[70],
              _buH_[71],
              _buH_[72],
              _buH_[73],
              _buH_[74],
              _buH_[75],
              _buH_[79],
              _buH_[76],
              _buH_[77],
              _buH_[78],
              _buH_[82],
              _buH_[83],
              _buH_[84]]}
    var
     Core_Hashtbl=
      [0,
       hash$7,
       hash_param,
       sexp_of_t$19,
       create$6,
       of_alist,
       of_alist_report_all_dups,
       of_alist_or_error,
       of_alist_exn,
       of_alist_multi,
       create_mapped,
       create_with_key,
       create_with_key_or_error,
       create_with_key_exn,
       group$35,
       sexp_of_key,
       clear,
       copy$0,
       fold$2,
       iter_keys,
       iter$3,
       iteri$0,
       existsi$0,
       exists$2,
       for_alli$0,
       for_all$2,
       counti$0,
       count$0,
       length$1,
       is_empty$1,
       mem$0,
       remove,
       choose,
       choose_exn,
       set$0,
       add,
       add_exn,
       change,
       update,
       update_and_return,
       map$9,
       mapi$0,
       filter_map$2,
       filter_mapi$0,
       filter_keys,
       filter$2,
       filteri$0,
       partition_map,
       partition_mapi,
       partition_tf$0,
       partitioni_tf$0,
       find_or_add,
       findi_or_add,
       find$0,
       find_exn$0,
       find_and_call,
       find_and_call1,
       find_and_call2,
       findi_and_call,
       findi_and_call1,
       findi_and_call2,
       find_and_remove,
       merge$0,
       merge_into,
       keys,
       data,
       filter_keys_inplace,
       filter_inplace,
       filteri_inplace,
       map_inplace$0,
       mapi_inplace,
       filter_map_inplace,
       filter_mapi_inplace,
       equal$4,
       similar,
       to_alist,
       incr,
       decr,
       add_multi,
       remove_multi,
       find_multi,
       hashable_s,
       invariant$1,
       validate,
       [0,
        create$7,
        of_alist$0,
        of_alist_report_all_dups$0,
        of_alist_or_error$0,
        of_alist_exn$0,
        of_alist_multi$0,
        create_mapped$0,
        create_with_key$0,
        create_with_key_or_error$0,
        create_with_key_exn$0,
        group$36],
       [0,
        bin_shape_t$29,
        bin_size_t$35,
        bin_write_t$35,
        bin_read_t$72,
        bin_read_t$73,
        bin_writer_t$23,
        bin_reader_t$23,
        bin_t$23,
        _sp_,
        _sq_,
        _sr_,
        _ss_,
        _st_,
        _su_,
        _sv_,
        _sw_,
        _sx_,
        _sy_,
        _sz_,
        _sA_,
        _sB_,
        _sC_,
        _sD_,
        _sE_,
        _sF_,
        _sG_,
        _sH_,
        _sI_,
        _sJ_,
        _sK_,
        _sL_,
        _sM_,
        _sN_,
        _sO_,
        _sP_,
        _sQ_,
        _sR_,
        _sS_,
        _sT_,
        _sU_,
        _sV_,
        _sW_,
        _sX_,
        _sY_,
        _sZ_,
        _s0_,
        _s1_,
        _s2_,
        _s3_,
        _s4_,
        _s5_,
        _s6_,
        _s7_,
        _s8_,
        _s9_,
        _s__,
        _s$_,
        _ta_,
        _tb_,
        _tc_,
        _td_,
        _te_,
        _tf_,
        _tg_,
        _th_,
        _ti_,
        _tj_,
        _tk_,
        _tl_,
        _tm_,
        _tn_,
        _to_,
        _tp_,
        _tq_,
        _tr_,
        _ts_,
        _tt_,
        _tu_,
        _tv_,
        _tw_,
        _tx_,
        _ty_,
        _tz_,
        _tA_,
        _tB_,
        _tC_,
        _tD_,
        _tE_,
        _tF_,
        _tG_,
        validate],
       function(_buE_)
        {var _buF_=Make_plain(_buE_);
         return [0,
                 _buF_[82],
                 _buF_[1],
                 _buF_[81],
                 _buF_[3],
                 _buF_[4],
                 _buF_[5],
                 _buF_[6],
                 _buF_[7],
                 _buF_[8],
                 _buF_[9],
                 _buF_[10],
                 _buF_[11],
                 _buF_[12],
                 _buF_[13],
                 _buF_[14],
                 _buF_[15],
                 _buF_[16],
                 _buF_[17],
                 _buF_[18],
                 _buF_[19],
                 _buF_[20],
                 _buF_[21],
                 _buF_[22],
                 _buF_[23],
                 _buF_[24],
                 _buF_[25],
                 _buF_[26],
                 _buF_[27],
                 _buF_[28],
                 _buF_[29],
                 _buF_[30],
                 _buF_[31],
                 _buF_[32],
                 _buF_[33],
                 _buF_[34],
                 _buF_[35],
                 _buF_[36],
                 _buF_[37],
                 _buF_[38],
                 _buF_[39],
                 _buF_[40],
                 _buF_[41],
                 _buF_[42],
                 _buF_[43],
                 _buF_[44],
                 _buF_[45],
                 _buF_[46],
                 _buF_[47],
                 _buF_[48],
                 _buF_[49],
                 _buF_[50],
                 _buF_[51],
                 _buF_[52],
                 _buF_[53],
                 _buF_[54],
                 _buF_[55],
                 _buF_[56],
                 _buF_[57],
                 _buF_[58],
                 _buF_[59],
                 _buF_[60],
                 _buF_[61],
                 _buF_[62],
                 _buF_[63],
                 _buF_[64],
                 _buF_[65],
                 _buF_[66],
                 _buF_[67],
                 _buF_[68],
                 _buF_[69],
                 _buF_[70],
                 _buF_[71],
                 _buF_[72],
                 _buF_[73],
                 _buF_[74],
                 _buF_[75],
                 _buF_[76],
                 _buF_[80],
                 _buF_[77],
                 _buF_[78],
                 _buF_[79],
                 _buF_[83],
                 _buF_[84]]},
       _tZ_,
       _tY_,
       _tX_,
       _tW_,
       _tV_,
       _tU_,
       _tT_,
       sexp_of_m_t,
       m_t_of_sexp,
       m_t_sexp_grammar,
       equal_m_t,
       quickcheck_generator_m_t,
       quickcheck_observer_m_t,
       quickcheck_shrinker_m_t];
    caml_register_global(5273,Core_Hashtbl,"Core__Hashtbl");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Hash_set_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$104);
    caml_call1(Expect_test_collector[5][1],cst_core_src_hash_set_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$105,cst$35);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$106);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Hash_set_intf$0);
    var Core_Hash_set_intf=[0];
    caml_register_global(5274,Core_Hash_set_intf,"Core__Hash_set_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Hash_set);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$107);
    caml_call1(Expect_test_collector[5][1],cst_core_src_hash_set_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$108,cst$36);
    var
     sexp_of_t$20=include$33[1],
     _t0_=include$33[2],
     _t1_=include$33[3],
     length$2=include$33[4],
     is_empty$2=include$33[5],
     iter$5=include$33[6],
     fold$3=include$33[7],
     fold_result$0=include$33[8],
     fold_until$0=include$33[9],
     exists$3=include$33[10],
     for_all$3=include$33[11],
     count$1=include$33[12],
     sum$0=include$33[13],
     find$1=include$33[14],
     find_map$0=include$33[15],
     to_list$2=include$33[16],
     to_array$0=include$33[17],
     min_elt$0=include$33[18],
     max_elt$0=include$33[19],
     mem$1=include$33[20],
     copy$1=include$33[21],
     add$0=include$33[22],
     strict_add=include$33[23],
     strict_add_exn=include$33[24],
     remove$0=include$33[25],
     strict_remove=include$33[26],
     strict_remove_exn=include$33[27],
     clear$0=include$33[28],
     equal$5=include$33[29],
     filter$3=include$33[30],
     filter_inplace$0=include$33[31],
     inter=include$33[32],
     union$0=include$33[33],
     diff=include$33[34],
     of_hashtbl_keys=include$33[35],
     to_hashtbl=include$33[36],
     Poly$0=include$33[38],
     Creators=include$33[39],
     M$0=include$33[40],
     sexp_of_m_t$0=include$33[41],
     m_t_of_sexp$0=include$33[42],
     m_t_sexp_grammar$0=include$33[43],
     equal_m_t$0=include$33[44],
     Private=include$33[45];
    function Make_plain_with_hashable$0(T)
     {var
       hashable=T[2],
       include=caml_call1(Creators,[0,hashable]),
       t_of_sexp=include[1],
       create=include[2],
       of_list=include[3];
      function sexp_of_t(t){return caml_call2(Poly$0[2],T[1][2],t)}
      function Provide_of_sexp(X)
       {function t_of_sexp$0(sexp){return caml_call2(t_of_sexp,X[1],sexp)}
        return [0,t_of_sexp$0]}
      function Provide_bin_io(X)
       {var
         bin_size_el=X[1],
         bin_write_el=X[2],
         bin_read_el=X[3],
         bin_shape_t=X[5],
         _buy_=
          [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$3),0,bin_shape_t],0],
         _buz_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_hash_set_ml_52_6),
         group=caml_call2(Bin_prot_Shape[6],_buz_,_buy_),
         _buA_=caml_call1(Bin_prot_Shape[2][1],cst_el$4),
         bin_shape_el=caml_call1(caml_call2(Bin_prot_Shape[14],group,_buA_),0),
         caller_identity=
          caml_call1(Bin_prot_Shape[5][1],cst_ad381672_4992_11e6_9e36_b7);
        function init(len,next)
         {var t=caml_call3(create,0,[0,len],0),_buC_=len - 1 | 0,_buB_=0;
          if(! (_buC_ < 0))
           {var i=_buB_;
            for(;;)
             {var v=caml_call1(next,0);
              caml_call2(add$0,t,v);
              var _buD_=i + 1 | 0;
              if(_buC_ !== i){var i=_buD_;continue}
              break}}
          return t}
        return caml_call1
                (Bin_prot_Utils[15],
                 [0,
                  caller_identity,
                  module_name$1,
                  length$2,
                  iter$5,
                  init,
                  bin_size_el,
                  bin_write_el,
                  bin_read_el,
                  bin_shape_el])}
      return [0,
              equal$5,
              t_of_sexp,
              create,
              of_list,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io]}
    function Make_with_hashable$0(T)
     {var
       _buw_=T[1],
       _bux_=
        Make_plain_with_hashable$0([0,[0,_buw_[2],_buw_[3],_buw_[4]],T[2]]),
       equal=_bux_[1],
       create=_bux_[3],
       of_list=_bux_[4],
       sexp_of_t=_bux_[5],
       Provide_of_sexp=_bux_[6],
       Provide_bin_io=_bux_[7],
       include=caml_call1(Provide_of_sexp,[0,T[1][1]]),
       t_of_sexp=include[1];
      return [0,
              equal,
              create,
              of_list,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp]}
    function Make_plain$0(Elt)
     {var hashable=caml_call1(Base_Hashable[3],Elt);
      return Make_plain_with_hashable$0([0,Elt,hashable])}
    function Make$1(Elt)
     {var
       _buv_=Make_plain$0([0,Elt[2],Elt[3],Elt[4]]),
       equal=_buv_[1],
       create=_buv_[3],
       of_list=_buv_[4],
       sexp_of_t=_buv_[5],
       Provide_of_sexp=_buv_[6],
       Provide_bin_io=_buv_[7],
       include=caml_call1(Provide_of_sexp,[0,Elt[1]]),
       t_of_sexp=include[1];
      return [0,
              equal,
              create,
              of_list,
              sexp_of_t,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp]}
    function create$8(growth_allowed,size,hashable,param)
     {return caml_call3
              (_t0_,growth_allowed,size,caml_call1(Base_Hashable[4],hashable))}
    function of_list$2(growth_allowed,size,hashable,l)
     {return caml_call4
              (_t1_,
               growth_allowed,
               size,
               caml_call1(Base_Hashable[4],hashable),
               l)}
    var Using_hashable=[0,create$8,of_list$2],_t2_=Private[1];
    function create$9(growth_allowed,size,m)
     {return caml_call3(_t0_,growth_allowed,size,m)}
    function quickcheck_generator_m_t$0(Key)
     {var
       _but_=caml_call3(_t1_,0,0,[0,Key[1],Key[7],Key[3]]),
       _buu_=caml_call1(_si_,Key[4]);
      return caml_call2(_pD_[10],_buu_,_but_)}
    function quickcheck_observer_m_t$0(Key)
     {var _bus_=caml_call1(_sm_,Key[5]);
      return caml_call2(_pC_[18],_bus_,to_list$2)}
    function quickcheck_shrinker_m_t$0(Key)
     {var
       _buq_=caml_call3(_t1_,0,0,[0,Key[1],Key[7],Key[3]]),
       _bur_=caml_call1(_sn_,Key[6]);
      return caml_call3(_pB_[6],_bur_,_buq_,to_list$2)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$109);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Hash_set$0);
    function _t3_(T)
     {var
       _bun_=T[1],
       _buo_=
        Make_with_hashable$0
         ([0,[0,_bun_[9],_bun_[10],_bun_[11],_bun_[12]],T[2]]),
       equal=_buo_[1],
       create=_buo_[2],
       of_list=_buo_[3],
       sexp_of_t=_buo_[4],
       Provide_of_sexp=_buo_[5],
       Provide_bin_io=_buo_[6],
       t_of_sexp=_buo_[7],
       _bup_=T[1],
       include=
        caml_call1
         (Provide_bin_io,
          [0,
           _bup_[1],
           _bup_[2],
           _bup_[3],
           _bup_[4],
           _bup_[5],
           _bup_[6],
           _bup_[7],
           _bup_[8]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              equal,
              sexp_of_t,
              create,
              of_list,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _t4_(_bul_)
     {var _bum_=Make_with_hashable$0(_bul_);
      return [0,
              _bum_[1],
              _bum_[4],
              _bum_[2],
              _bum_[3],
              _bum_[5],
              _bum_[6],
              _bum_[7]]}
    function _t5_(_buj_)
     {var _buk_=Make_plain_with_hashable$0(_buj_);
      return [0,_buk_[1],_buk_[5],_buk_[3],_buk_[4],_buk_[6],_buk_[7]]}
    function _t6_(Elt)
     {var
       _bui_=Make$1([0,Elt[9],Elt[10],Elt[11],Elt[12]]),
       equal=_bui_[1],
       create=_bui_[2],
       of_list=_bui_[3],
       sexp_of_t=_bui_[4],
       Provide_of_sexp=_bui_[5],
       Provide_bin_io=_bui_[6],
       t_of_sexp=_bui_[7],
       include=
        caml_call1
         (Provide_bin_io,
          [0,Elt[1],Elt[2],Elt[3],Elt[4],Elt[5],Elt[6],Elt[7],Elt[8]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              equal,
              sexp_of_t,
              create,
              of_list,
              Provide_of_sexp,
              Provide_bin_io,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _t7_(_bug_)
     {var _buh_=Make$1(_bug_);
      return [0,
              _buh_[1],
              _buh_[4],
              _buh_[2],
              _buh_[3],
              _buh_[5],
              _buh_[6],
              _buh_[7]]}
    function _t8_(_bue_)
     {var _buf_=Make_plain$0(_bue_);
      return [0,_buf_[1],_buf_[5],_buf_[3],_buf_[4],_buf_[6],_buf_[7]]}
    var
     Core_Hash_set=
      [0,
       sexp_of_t$20,
       create$9,
       _t1_,
       length$2,
       is_empty$2,
       iter$5,
       fold$3,
       fold_result$0,
       fold_until$0,
       exists$3,
       for_all$3,
       count$1,
       sum$0,
       find$1,
       find_map$0,
       to_list$2,
       to_array$0,
       min_elt$0,
       max_elt$0,
       mem$1,
       copy$1,
       add$0,
       strict_add,
       strict_add_exn,
       remove$0,
       strict_remove,
       strict_remove_exn,
       clear$0,
       equal$5,
       filter$3,
       filter_inplace$0,
       inter,
       union$0,
       diff,
       of_hashtbl_keys,
       to_hashtbl,
       _t2_,
       Using_hashable,
       [0,
        Poly$0[1],
        Poly$0[2],
        Poly$0[4],
        Poly$0[5],
        Poly$0[6],
        Poly$0[7],
        Poly$0[8],
        Poly$0[9],
        Poly$0[10],
        Poly$0[11],
        Poly$0[12],
        Poly$0[13],
        Poly$0[14],
        Poly$0[15],
        Poly$0[16],
        Poly$0[17],
        Poly$0[18],
        Poly$0[19],
        Poly$0[20],
        Poly$0[21],
        Poly$0[22],
        Poly$0[23],
        Poly$0[24],
        Poly$0[25],
        Poly$0[26],
        Poly$0[27],
        Poly$0[28],
        Poly$0[29],
        Poly$0[30],
        Poly$0[31],
        Poly$0[32],
        Poly$0[33],
        Poly$0[34],
        Poly$0[35],
        Poly$0[36],
        Poly$0[37],
        Poly$0[38]],
       _t8_,
       _t7_,
       _t6_,
       _t5_,
       _t4_,
       _t3_,
       M$0,
       sexp_of_m_t$0,
       m_t_of_sexp$0,
       m_t_sexp_grammar$0,
       equal_m_t$0,
       quickcheck_generator_m_t$0,
       quickcheck_observer_m_t$0,
       quickcheck_shrinker_m_t$0];
    caml_register_global(5276,Core_Hash_set,"Core__Hash_set");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Map_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$110);
    caml_call1(Expect_test_collector[5][1],cst_core_src_map_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$111,cst$37);
    var Key_bin_io=[0];
    function Check_accessors(T,Tree,Key,Cmp,Options,symbol){return [0]}
    function Check_accessors1(M){return [0]}
    function Check_accessors2(M){return [0]}
    function Check_accessors3(M){return [0]}
    function Check_accessors3_with_comparat(M){return [0]}
    function Check_creators(T,Tree,Key,Cmp,Options,symbol){return [0]}
    function Check_creators1(M){return [0]}
    function Check_creators2(M){return [0]}
    function Check_creators3_with_comparato(M){return [0]}
    function Make_S_plain_tree(Key){return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$112);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Map_intf$0);
    var
     Core_Map_intf=
      [0,
       Key_bin_io,
       Check_accessors,
       Check_accessors1,
       Check_accessors2,
       Check_accessors3,
       Check_accessors3_with_comparat,
       Check_creators,
       Check_creators1,
       Check_creators2,
       Check_creators3_with_comparato,
       Make_S_plain_tree];
    caml_register_global(5278,Core_Map_intf,"Core__Map_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Map);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$113);
    caml_call1(Expect_test_collector[5][1],cst_core_src_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$114,cst$38);
    var
     _t9_=caml_call1(Bin_prot_Shape[3][1],cst_v),
     _t__=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_8_77),
     _t$_=[0,caml_call2(Bin_prot_Shape[15],_t__,_t9_),0],
     _ua_=caml_call1(Bin_prot_Shape[3][1],cst_v$0),
     _ub_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_8_72),
     _uc_=[0,caml_call2(Bin_prot_Shape[15],_ub_,_ua_),_t$_],
     _ud_=[0,caml_call1(Bin_prot_Shape[7],_uc_)],
     _ue_=[0,caml_call2(Bin_prot_Shape[10],cst_Unequal,_ud_),0],
     _uf_=caml_call1(Bin_prot_Shape[3][1],cst_v$1),
     _ug_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_8_55),
     _uh_=[0,caml_call2(Bin_prot_Shape[15],_ug_,_uf_)],
     _ui_=[0,caml_call2(Bin_prot_Shape[10],cst_Right$0,_uh_),_ue_],
     _uj_=caml_call1(Bin_prot_Shape[3][1],cst_v$2),
     _uk_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_8_40),
     _ul_=[0,caml_call2(Bin_prot_Shape[15],_uk_,_uj_)],
     _um_=[0,caml_call2(Bin_prot_Shape[10],cst_Left$0,_ul_),_ui_],
     _un_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_8_29),
     _uo_=[0,caml_call2(Bin_prot_Shape[12],_un_,_um_),0],
     _up_=caml_call1(Bin_prot_Shape[3][1],cst_k),
     _uq_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_8_24),
     _ur_=[0,caml_call2(Bin_prot_Shape[15],_uq_,_up_),_uo_],
     _us_=caml_call1(Bin_prot_Shape[7],_ur_),
     _ut_=[0,caml_call1(Bin_prot_Shape[3][1],cst_v$3),0],
     _uu_=[0,caml_call1(Bin_prot_Shape[3][1],cst_k$0),_ut_],
     _uv_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$84),_uu_,_us_],0],
     _uw_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_8_6),
     group$38=caml_call2(Bin_prot_Shape[6],_uw_,_uv_);
    function bin_shape_t$30(k,v)
     {var _bud_=caml_call1(Bin_prot_Shape[2][1],cst_t$85);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$38,_bud_),[0,k,[0,v,0]])}
    function bin_size_t$36(size_of_k,size_of_v,param)
     {var
       v2=param[2],
       v1=param[1],
       _bt__=caml_call1(size_of_k,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bt__),
       _bt$_=v2[1];
      if(847852583 === _bt$_)
       var
        args=v2[2],
        size_args=caml_call1(size_of_v,args),
        _bua_=caml_call2(Bin_prot_Common[23],size_args,4);
      else
       if(1013247643 <= _bt$_)
        var
         args$0=v2[2],
         v2$0=args$0[2],
         v1$0=args$0[1],
         _bub_=caml_call1(size_of_v,v1$0),
         size$0=caml_call2(Bin_prot_Common[23],0,_bub_),
         _buc_=caml_call1(size_of_v,v2$0),
         size_args$0=caml_call2(Bin_prot_Common[23],size$0,_buc_),
         _bua_=caml_call2(Bin_prot_Common[23],size_args$0,4);
       else
        var
         args$1=v2[2],
         size_args$1=caml_call1(size_of_v,args$1),
         _bua_=caml_call2(Bin_prot_Common[23],size_args$1,4);
      return caml_call2(Bin_prot_Common[23],size,_bua_)}
    function bin_write_t$36(write_k,write_v,buf,pos,param)
     {var
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(write_k,buf,pos,v1),
       _bt9_=v2[1];
      if(847852583 === _bt9_)
       {var
         args=v2[2],
         pos$1=caml_call3(Bin_prot_Write[30],buf,pos$0,847852583);
        return caml_call3(write_v,buf,pos$1,args)}
      if(1013247643 <= _bt9_)
       {var
         args$0=v2[2],
         pos$2=caml_call3(Bin_prot_Write[30],buf,pos$0,1013247643),
         v2$0=args$0[2],
         v1$0=args$0[1],
         pos$3=caml_call3(write_v,buf,pos$2,v1$0);
        return caml_call3(write_v,buf,pos$3,v2$0)}
      var
       args$1=v2[2],
       pos$4=caml_call3(Bin_prot_Write[30],buf,pos$0,-57574468);
      return caml_call3(write_v,buf,pos$4,args$1)}
    function bin_writer_t$24(bin_writer_k,bin_writer_v)
     {function _bt4_(v)
       {var _bt5_=bin_writer_v[2],_bt6_=bin_writer_k[2];
        return function(_bt7_,_bt8_)
         {return bin_write_t$36(_bt6_,_bt5_,v,_bt7_,_bt8_)}}
      return [0,
              function(v)
               {return bin_size_t$36(bin_writer_k[1],bin_writer_v[1],v)},
              _bt4_]}
    function bin_read_t$74(of_k,of_v,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_map_ml_Symmetric_,pos_ref[1])}
    function bin_read_t$75(of_k,of_v,buf,pos_ref)
     {var
       v1=caml_call2(of_k,buf,pos_ref),
       vint=caml_call2(Bin_prot_Read[29],buf,pos_ref);
      try
       {if(-57574468 === vint)
         var arg_1=caml_call2(of_v,buf,pos_ref),_bt2_=[0,-57574468,arg_1];
        else
         if(847852583 === vint)
          var
           arg_1$0=caml_call2(of_v,buf,pos_ref),
           _bt2_=[0,847852583,arg_1$0];
         else
          {if(1013247643 !== vint)throw Bin_prot_Common[13];
           var
            v1$0=caml_call2(of_v,buf,pos_ref),
            v2$0=caml_call2(of_v,buf,pos_ref),
            arg_1$1=[0,v1$0,v2$0],
            _bt2_=[0,1013247643,arg_1$1]}
        var v2=_bt2_}
      catch(_bt3_)
       {_bt3_ = caml_wrap_exception(_bt3_);
        if(_bt3_ !== Bin_prot_Common[13])throw _bt3_;
        var
         v2=
          caml_call2
           (Bin_prot_Common[19],cst_core_src_map_ml_Symmetric_$0,pos_ref[1])}
      return [0,v1,v2]}
    function bin_reader_t$24(bin_reader_k,bin_reader_v)
     {function _bt1_(buf,pos_ref,vtag)
       {return bin_read_t$74(bin_reader_k[1],bin_reader_v[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$75
                        (bin_reader_k[1],bin_reader_v[1],buf,pos_ref)},
              _bt1_]}
    function bin_t$24(bin_k,bin_v)
     {var
       _btZ_=bin_reader_t$24(bin_k[3],bin_v[3]),
       _bt0_=bin_writer_t$24(bin_k[2],bin_v[2]);
      return [0,bin_shape_t$30(bin_k[1],bin_v[1]),_bt0_,_btZ_]}
    function compare$20(cmp_k,cmp_v,a_001,b_002)
     {var
       t_004=a_001[2],
       t_003=a_001[1],
       t_006=b_002[2],
       t_005=b_002[1],
       n=caml_call2(cmp_k,t_003,t_005);
      if(0 === n)
       {if(caml_call2(Ppx_compare_lib[1],t_004,t_006))return 0;
        var _btY_=t_004[1];
        if(847852583 === _btY_)
         {if(typeof t_006 !== "number" && 847852583 === t_006[1])
           {var right_008=t_006[2],left_007=t_004[2];
            return caml_call2(cmp_v,left_007,right_008)}}
        else
         if(1013247643 <= _btY_)
          {if(typeof t_006 !== "number" && 1013247643 === t_006[1])
            {var
              right_012=t_006[2],
              left_011=t_004[2],
              t_014=left_011[2],
              t_013=left_011[1],
              t_016=right_012[2],
              t_015=right_012[1],
              n$0=caml_call2(cmp_v,t_013,t_015);
             return 0 === n$0?caml_call2(cmp_v,t_014,t_016):n$0}}
         else
          if(typeof t_006 !== "number" && -57574468 === t_006[1])
           {var right_010=t_006[2],left_009=t_004[2];
            return caml_call2(cmp_v,left_009,right_010)}
        return caml_compare(t_004,t_006)}
      return n}
    function t_of_sexp$21(of_k_017,of_v_018,sexp_045)
     {if(1 === sexp_045[0])
       {var _btJ_=sexp_045[1];
        if(_btJ_)
         {var _btK_=_btJ_[2];
          if(_btK_ && ! _btK_[2])
           {var
             arg1_042=_btK_[1],
             arg0_041=_btJ_[1],
             res0_043=caml_call1(of_k_017,arg0_041);
            try
             {if(0 === arg1_042[0])
               var
                atom_021=arg1_042[1],
                _btL_=
                 caml_string_notequal(atom_021,cst_Left$1)
                  ?caml_string_notequal(atom_021,cst_Right$1)
                    ?caml_string_notequal(atom_021,cst_Unequal$0)
                      ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                      :caml_call2
                        (Sexplib0_Sexp_conv_error[23],error_source_031,arg1_042)
                    :caml_call2
                      (Sexplib0_Sexp_conv_error[23],error_source_031,arg1_042)
                  :caml_call2
                    (Sexplib0_Sexp_conv_error[23],error_source_031,arg1_042),
                _btM_=_btL_;
              else
               {var _btN_=arg1_042[1];
                if(_btN_)
                 {var _btO_=_btN_[1];
                  if(0 === _btO_[0])
                   {var sexp_args_024=_btN_[2],atom_021$0=_btO_[1];
                    if(caml_string_notequal(atom_021$0,cst_Left$2))
                     if(caml_string_notequal(atom_021$0,cst_Right$2))
                      if(caml_string_notequal(atom_021$0,cst_Unequal$1))
                       var _btP_=caml_call1(Sexplib0_Sexp_conv_error[19],0);
                      else
                       {var switch$0=0;
                        if(sexp_args_024 && ! sexp_args_024[2])
                         {var arg0_032=sexp_args_024[1],switch$1=0;
                          if(1 === arg0_032[0])
                           {var _btT_=arg0_032[1];
                            if(_btT_)
                             {var _btU_=_btT_[2];
                              if(_btU_ && ! _btU_[2])
                               {var
                                 arg1_027=_btU_[1],
                                 arg0_026=_btT_[1],
                                 res0_028=caml_call1(of_v_018,arg0_026),
                                 res1_029=caml_call1(of_v_018,arg1_027),
                                 res0_033=[0,res0_028,res1_029];
                                switch$1 = 1}}}
                          if(! switch$1)
                           var
                            res0_033=
                             caml_call3
                              (Sexplib0_Sexp_conv_error[2],error_source_031,2,arg0_032);
                          var _btS_=[0,1013247643,res0_033];
                          switch$0 = 1}
                        if(! switch$0)
                         var
                          _btS_=
                           caml_call3
                            (Sexplib0_Sexp_conv_error[22],
                             error_source_031,
                             atom_021$0,
                             arg1_042);
                        var _btP_=_btS_}
                     else
                      {var switch$2=0;
                       if(sexp_args_024 && ! sexp_args_024[2])
                        {var
                          arg0_035=sexp_args_024[1],
                          res0_036=caml_call1(of_v_018,arg0_035),
                          _btV_=[0,-57574468,res0_036];
                         switch$2 = 1}
                       if(! switch$2)
                        var
                         _btV_=
                          caml_call3
                           (Sexplib0_Sexp_conv_error[22],
                            error_source_031,
                            atom_021$0,
                            arg1_042);
                       var _btP_=_btV_}
                    else
                     {var switch$3=0;
                      if(sexp_args_024 && ! sexp_args_024[2])
                       {var
                         arg0_038=sexp_args_024[1],
                         res0_039=caml_call1(of_v_018,arg0_038),
                         _btW_=[0,847852583,res0_039];
                        switch$3 = 1}
                      if(! switch$3)
                       var
                        _btW_=
                         caml_call3
                          (Sexplib0_Sexp_conv_error[22],
                           error_source_031,
                           atom_021$0,
                           arg1_042);
                      var _btP_=_btW_}
                    var _btQ_=_btP_}
                  else
                   var
                    _btQ_=
                     caml_call2
                      (Sexplib0_Sexp_conv_error[24],error_source_031,arg1_042);
                  var _btR_=_btQ_}
                else
                 var
                  _btR_=
                   caml_call2
                    (Sexplib0_Sexp_conv_error[25],error_source_031,arg1_042);
                var _btM_=_btR_}
              var res1_044=_btM_}
            catch(_btX_)
             {_btX_ = caml_wrap_exception(_btX_);
              if(_btX_ !== Sexplib0_Sexp_conv_error[18])throw _btX_;
              var
               res1_044=
                caml_call2
                 (Sexplib0_Sexp_conv_error[20],error_source_031,arg1_042)}
            return [0,res0_043,res1_044]}}}
      return caml_call3
              (Sexplib0_Sexp_conv_error[2],error_source_031,2,sexp_045)}
    function sexp_of_t$21(of_k_046,of_v_047,param)
     {var
       arg1_056=param[2],
       arg0_055=param[1],
       res0_057=caml_call1(of_k_046,arg0_055),
       _btI_=arg1_056[1];
      if(847852583 === _btI_)
       var
        v_048=arg1_056[2],
        res1_058=[1,[0,_ux_,[0,caml_call1(of_v_047,v_048),0]]];
      else
       if(1013247643 <= _btI_)
        var
         v_050=arg1_056[2],
         arg1_052=v_050[2],
         arg0_051=v_050[1],
         res0_053=caml_call1(of_v_047,arg0_051),
         res1_054=caml_call1(of_v_047,arg1_052),
         res1_058=[1,[0,_uy_,[0,[1,[0,res0_053,[0,res1_054,0]]],0]]];
       else
        var
         v_049=arg1_056[2],
         res1_058=[1,[0,_uz_,[0,caml_call1(of_v_047,v_049),0]]];
      return [1,[0,res0_057,[0,res1_058,0]]]}
    var
     Expect_test_collector$0=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _uA_(param)
     {var
       _btH_=bin_shape_t$30(_b7_,_bV_),
       _btF_=caml_call1(Bin_prot_Shape[21],_btH_);
      caml_call1(_bd_,caml_call1(Bin_prot_Shape[18][4],_btF_));
      var
       _btG_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_core_src_map_ml$0),
         13,
         339,
         349,
         355];
      return caml_call1(Expect_test_collector$0[1],_btG_)}
    var
     _uB_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_map_ml$1),
       13,
       339,
       356,
       394],
     _uE_=
      [0,
       [0,
        _uD_,
        _uC_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_core_src_map_ml$2),
         13,
         339,
         349,
         355],
        _uB_],
       0],
     _uF_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_map_ml$4),
       11,
       259,
       265,
       395],
     _uG_=
      caml_call1(Expect_test_common_File[4][3],cst_e4dcb9b11591631796da652c14);
    caml_call9
     (Expect_test_collector$0[3],
      _uG_,
      _uF_,
      cst_core_src_map_ml$3,
      0,
      0,
      _uE_,
      0,
      Inline_test_config,
      _uA_);
    function map$10(param,f1,f2)
     {var diff=param[2],k=param[1],k$0=caml_call1(f1,k),_btD_=diff[1];
      if(847852583 === _btD_)
       var v=diff[2],diff$0=[0,847852583,caml_call1(f2,v)];
      else
       if(1013247643 <= _btD_)
        var
         match=diff[2],
         v2=match[2],
         v1=match[1],
         _btE_=caml_call1(f2,v2),
         diff$0=[0,1013247643,[0,caml_call1(f2,v1),_btE_]];
       else
        var v$0=diff[2],diff$0=[0,-57574468,caml_call1(f2,v$0)];
      return [0,k$0,diff$0]}
    function map_data(t,f){return map$10(t,function(_btC_){return _btC_},f)}
    function left(param)
     {var diff=param[2],_btB_=diff[1];
      if(847852583 === _btB_)
       var x=diff[2];
      else
       {if(! (1013247643 <= _btB_))return 0;var x=diff[2][1]}
      return [0,x]}
    function right(param)
     {var diff=param[2],_btA_=diff[1];
      if(847852583 === _btA_)return 0;
      var x=1013247643 <= _btA_?diff[2][2]:diff[2];
      return [0,x]}
    function gen_tree(comparator,k_gen,v_gen)
     {return caml_call3(Base_quickcheck_Generator[28],comparator,k_gen,v_gen)}
    function quickcheck_generator$0(comparator,k_gen,v_gen)
     {return caml_call3
              (Base_quickcheck_Generator[26],[0,comparator],k_gen,v_gen)}
    function obs_tree(k_obs,v_obs)
     {return caml_call2(Base_quickcheck_Observer[30],k_obs,v_obs)}
    function shr_tree(comparator,k_shr,v_shr)
     {return caml_call3(Base_quickcheck_Shrinker[29],comparator,k_shr,v_shr)}
    var
     quickcheck_generator$1=Base_quickcheck_Generator[26],
     quickcheck_observer$0=Base_quickcheck_Observer[28],
     quickcheck_shrinker$0=Base_quickcheck_Shrinker[27],
     _uH_=Base_Map[104],
     sexp_of_t$22=_uH_[1],
     t_of_sexp_direct=_uH_[2],
     keys$0=_uH_[42],
     to_tree=_uH_[68],
     empty$0=_uH_[73],
     singleton$1=_uH_[74],
     map_keys=_uH_[75],
     map_keys_exn=_uH_[76],
     of_alist$1=_uH_[77],
     of_alist_or_error$1=_uH_[78],
     of_alist_exn$1=_uH_[79],
     of_alist_multi$1=_uH_[80],
     of_alist_fold=_uH_[81],
     of_alist_reduce=_uH_[82],
     of_sorted_array=_uH_[83],
     of_sorted_array_unchecked=_uH_[84],
     of_increasing_iterator_uncheck=_uH_[85],
     of_increasing_sequence=_uH_[86],
     of_sequence$0=_uH_[87],
     of_sequence_or_error=_uH_[88],
     of_sequence_exn=_uH_[89],
     of_sequence_multi=_uH_[90],
     of_sequence_fold=_uH_[91],
     of_sequence_reduce=_uH_[92],
     of_iteri=_uH_[93],
     of_iteri_exn=_uH_[94],
     of_tree=_uH_[95],
     comparator=_uH_[96],
     hash_fold_direct=_uH_[97],
     Empty_without_value_restrictio=_uH_[98];
    function of_hashtbl_exn(comparator,hashtbl)
     {var
       match=
        caml_call2(of_iteri,comparator,caml_call1(Core_Hashtbl[21],hashtbl));
      if(17724 <= match[1]){var map=match[2];return map}
      var key=match[2];
      return failwiths
              (0,_uI_,cst_Map_of_hashtbl_exn_duplica,key,comparator[2])}
    function of_hashtbl_exn$0(comparator,hashtbl)
     {return caml_call1(to_tree,of_hashtbl_exn(comparator,hashtbl))}
    function key_set(comparator,t)
     {var _btz_=caml_call1(_pR_,caml_call1(keys$0,t));
      return caml_call2(Base_Set[74][59],comparator,_btz_)}
    function key_set$0(comparator,t)
     {return key_set(comparator,caml_call2(of_tree,comparator,t))}
    function to_map(key_set,f)
     {function _btx_(key){return [0,key,caml_call1(f,key)]}
      var _bty_=caml_call2(map$0,caml_call1(Base_Set[36],key_set),_btx_);
      return caml_call2
              (of_sorted_array_unchecked,
               caml_call1(Base_Set[4],key_set),
               _bty_)}
    function of_key_set(key_set,f)
     {return caml_call1(to_tree,to_map(key_set,f))}
    var
     _uJ_=Base_Map[104],
     binary_search_subrange=_uJ_[72],
     binary_search_segmented$0=_uJ_[71],
     binary_search$0=_uJ_[70],
     to_sequence$0=_uJ_[69],
     to_tree$0=_uJ_[68],
     rank=_uJ_[67],
     nth_exn=_uJ_[66],
     nth=_uJ_[65],
     closest_key=_uJ_[64],
     range_to_alist=_uJ_[63],
     fold_range_inclusive=_uJ_[62],
     subrange=_uJ_[61],
     append$0=_uJ_[60],
     split=_uJ_[59],
     counti$1=_uJ_[58],
     count$2=_uJ_[57],
     existsi$1=_uJ_[56],
     exists$4=_uJ_[55],
     for_alli$1=_uJ_[54],
     for_all$4=_uJ_[53],
     max_elt_exn=_uJ_[52],
     max_elt$1=_uJ_[51],
     min_elt_exn=_uJ_[50],
     min_elt$1=_uJ_[49],
     fold_symmetric_diff=_uJ_[48],
     symmetric_diff=_uJ_[47],
     merge_skewed=_uJ_[46],
     merge$1=_uJ_[45],
     to_alist$0=_uJ_[44],
     data$0=_uJ_[43],
     keys$1=_uJ_[42],
     equal$6=_uJ_[41],
     compare_direct=_uJ_[40],
     combine_errors=_uJ_[39],
     partition_tf$1=_uJ_[38],
     partitioni_tf$1=_uJ_[37],
     partition_map$0=_uJ_[36],
     partition_mapi$0=_uJ_[35],
     filter_mapi$1=_uJ_[34],
     filter_map$3=_uJ_[33],
     filteri$1=_uJ_[32],
     filter$4=_uJ_[31],
     filter_keys$0=_uJ_[30],
     fold2=_uJ_[29],
     fold_right$0=_uJ_[28],
     fold_until$1=_uJ_[27],
     fold$4=_uJ_[26],
     mapi$1=_uJ_[25],
     map$11=_uJ_[24],
     iter2=_uJ_[23],
     iteri_until=_uJ_[22],
     iteri$1=_uJ_[21],
     iter$6=_uJ_[20],
     iter_keys$0=_uJ_[19],
     mem$2=_uJ_[18],
     remove$1=_uJ_[17],
     find_exn$1=_uJ_[16],
     find$2=_uJ_[15],
     update$0=_uJ_[14],
     change$0=_uJ_[13],
     find_multi$0=_uJ_[12],
     remove_multi$0=_uJ_[11],
     add_multi$0=_uJ_[10],
     set$1=_uJ_[9],
     add_exn$0=_uJ_[8],
     add$1=_uJ_[7],
     length$3=_uJ_[6],
     is_empty$3=_uJ_[5],
     invariants=_uJ_[4];
    function validate$0(name,f,t)
     {var _btw_=caml_call2(to_alist$0,0,t);
      return caml_call3(Validate[32],name,f,_btw_)}
    function validatei(name,f,t)
     {var _btu_=caml_call2(to_alist$0,0,t),_btv_=caml_call2(_it_,name,_a1_);
      return caml_call3(Validate[29],_btv_,f,_btu_)}
    function quickcheck_observer$1(k,v)
     {return caml_call2(quickcheck_observer$0,k,v)}
    function quickcheck_shrinker$1(k,v)
     {return caml_call2(quickcheck_shrinker$0,k,v)}
    function key_set$1(t){return key_set(caml_call1(comparator,t),t)}
    function of_map_keys(t){return key_set(caml_call1(comparator,t),t)}
    var
     comparator_s=Base_Map[4],
     invariants$0=Base_Map[3],
     empty$1=Base_Map[6],
     singleton$2=Base_Map[7],
     of_alist$2=Base_Map[8],
     of_alist_or_error$2=Base_Map[9],
     of_alist_exn$2=Base_Map[10],
     of_alist_multi$2=Base_Map[11],
     of_alist_fold$0=Base_Map[12],
     of_alist_reduce$0=Base_Map[13],
     of_iteri$0=Base_Map[14],
     of_iteri_exn$0=Base_Map[15],
     of_sorted_array$0=Base_Map[16],
     of_sorted_array_unchecked$0=Base_Map[17],
     of_increasing_iterator_uncheck$0=Base_Map[18],
     of_increasing_sequence$0=Base_Map[19],
     of_sequence$1=Base_Map[20],
     of_sequence_or_error$0=Base_Map[21],
     of_sequence_exn$0=Base_Map[22],
     of_sequence_multi$0=Base_Map[23],
     of_sequence_fold$0=Base_Map[24],
     of_sequence_reduce$0=Base_Map[25],
     is_empty$4=Base_Map[26],
     length$4=Base_Map[27],
     set$2=Base_Map[28],
     add$2=Base_Map[29],
     add_exn$1=Base_Map[30],
     add_multi$1=Base_Map[31],
     remove_multi$1=Base_Map[32],
     find_multi$1=Base_Map[33],
     change$1=Base_Map[34],
     update$1=Base_Map[35],
     find$3=Base_Map[36],
     find_exn$2=Base_Map[37],
     remove$2=Base_Map[38],
     mem$3=Base_Map[39],
     iter_keys$1=Base_Map[40],
     iter$7=Base_Map[41],
     iteri$2=Base_Map[42],
     iteri_until$0=Base_Map[43],
     iter2$0=Base_Map[44],
     map$12=Base_Map[45],
     mapi$2=Base_Map[46],
     map_keys$0=Base_Map[47],
     map_keys_exn$0=Base_Map[48],
     fold$5=Base_Map[49],
     fold_until$2=Base_Map[50],
     fold_right$1=Base_Map[51],
     fold2$0=Base_Map[52],
     filter_keys$1=Base_Map[53],
     filter$5=Base_Map[54],
     filteri$2=Base_Map[55],
     filter_map$4=Base_Map[56],
     filter_mapi$2=Base_Map[57],
     partition_mapi$1=Base_Map[58],
     partition_map$1=Base_Map[59],
     partitioni_tf$2=Base_Map[60],
     partition_tf$2=Base_Map[61],
     combine_errors$0=Base_Map[62],
     compare_direct$0=Base_Map[63],
     equal$7=Base_Map[65],
     keys$2=Base_Map[66],
     data$1=Base_Map[67],
     to_alist$1=Base_Map[68],
     merge$2=Base_Map[69],
     symmetric_diff$0=Base_Map[72],
     fold_symmetric_diff$0=Base_Map[73],
     min_elt$2=Base_Map[74],
     min_elt_exn$0=Base_Map[75],
     max_elt$2=Base_Map[76],
     max_elt_exn$0=Base_Map[77],
     for_all$5=Base_Map[78],
     for_alli$2=Base_Map[79],
     exists$5=Base_Map[80],
     existsi$2=Base_Map[81],
     count$3=Base_Map[82],
     counti$2=Base_Map[83],
     split$0=Base_Map[84],
     append$1=Base_Map[85],
     subrange$0=Base_Map[86],
     fold_range_inclusive$0=Base_Map[87],
     range_to_alist$0=Base_Map[88],
     closest_key$0=Base_Map[89],
     nth$0=Base_Map[90],
     nth_exn$0=Base_Map[91],
     rank$0=Base_Map[92],
     to_sequence$1=Base_Map[93],
     binary_search$1=Base_Map[94],
     binary_search_segmented$1=Base_Map[95],
     binary_search_subrange$0=Base_Map[96];
    function validate$1(name,f,t)
     {var _btt_=caml_call2(to_alist$1,0,t);
      return caml_call3(Validate[32],name,f,_btt_)}
    function validatei$0(name,f,t)
     {var _btr_=caml_call2(to_alist$1,0,t),_bts_=caml_call2(_it_,name,_a1_);
      return caml_call3(Validate[29],_bts_,f,_btr_)}
    function of_tree$0(m){return caml_call1(Base_Map[104][95],m[1])}
    var to_tree$1=Base_Map[104][68];
    function find_or_error(t,key)
     {var
       comparator$0=caml_call1(comparator,t),
       match=caml_call2(find$3,t,key);
      if(match){var data=match[1];return [0,data]}
      var sexp_of_key=comparator$0[2],_btq_=[0,caml_call1(sexp_of_key,key),0];
      return caml_call1
              (_oC_,
               [1,
                [0,caml_call1(Sexplib0_Sexp_conv[7],cst_key_not_found),_btq_]])}
    var _uK_=Base_Map[70];
    function of_hashtbl_exn$1(m,t){return of_hashtbl_exn(m[1],t)}
    function Creators$0(Key)
     {var
       comparator=Key[1],
       M_empty=caml_call1(Empty_without_value_restrictio,Key),
       empty=M_empty[1];
      function of_tree$0(tree){return caml_call2(of_tree,comparator,tree)}
      function singleton(k,v){return caml_call3(singleton$1,comparator,k,v)}
      function of_sorted_array_unchecked$0(array)
       {return caml_call2(of_sorted_array_unchecked,comparator,array)}
      function of_sorted_array$0(array)
       {return caml_call2(of_sorted_array,comparator,array)}
      function of_increasing_iterator_uncheck$0(len,f)
       {return caml_call3(of_increasing_iterator_uncheck,comparator,len,f)}
      function of_increasing_sequence$0(seq)
       {return caml_call2(of_increasing_sequence,comparator,seq)}
      function of_sequence(seq)
       {return caml_call2(of_sequence$0,comparator,seq)}
      function of_sequence_or_error$0(seq)
       {return caml_call2(of_sequence_or_error,comparator,seq)}
      function of_sequence_exn$0(seq)
       {return caml_call2(of_sequence_exn,comparator,seq)}
      function of_sequence_multi$0(seq)
       {return caml_call2(of_sequence_multi,comparator,seq)}
      function of_sequence_fold$0(seq,init,f)
       {return caml_call4(of_sequence_fold,comparator,seq,init,f)}
      function of_sequence_reduce$0(seq,f)
       {return caml_call3(of_sequence_reduce,comparator,seq,f)}
      function of_alist(alist){return caml_call2(of_alist$1,comparator,alist)}
      function of_alist_or_error(alist)
       {return caml_call2(of_alist_or_error$1,comparator,alist)}
      function of_alist_exn(alist)
       {return caml_call2(of_alist_exn$1,comparator,alist)}
      function of_hashtbl_exn$0(hashtbl)
       {return of_hashtbl_exn(comparator,hashtbl)}
      function of_alist_multi(alist)
       {return caml_call2(of_alist_multi$1,comparator,alist)}
      function of_alist_fold$0(alist,init,f)
       {return caml_call4(of_alist_fold,comparator,alist,init,f)}
      function of_alist_reduce$0(alist,f)
       {return caml_call3(of_alist_reduce,comparator,alist,f)}
      function of_iteri$0(iteri){return caml_call2(of_iteri,comparator,iteri)}
      function of_iteri_exn$0(iteri)
       {return caml_call2(of_iteri_exn,comparator,iteri)}
      function t_of_sexp(k_of_sexp,v_of_sexp,sexp)
       {return caml_call4
                (t_of_sexp_direct,comparator,k_of_sexp,v_of_sexp,sexp)}
      function of_key_set(key_set,f){return to_map(key_set,f)}
      function map_keys$0(t,f){return caml_call3(map_keys,comparator,t,f)}
      function map_keys_exn$0(t,f)
       {return caml_call3(map_keys_exn,comparator,t,f)}
      function quickcheck_generator(gen_k,gen_v)
       {return quickcheck_generator$0(comparator,gen_k,gen_v)}
      return [0,
              t_of_sexp,
              empty,
              singleton,
              map_keys$0,
              map_keys_exn$0,
              of_sorted_array$0,
              of_sorted_array_unchecked$0,
              of_increasing_iterator_uncheck$0,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold$0,
              of_alist_reduce$0,
              of_increasing_sequence$0,
              of_sequence,
              of_sequence_or_error$0,
              of_sequence_exn$0,
              of_sequence_multi$0,
              of_sequence_fold$0,
              of_sequence_reduce$0,
              of_iteri$0,
              of_iteri_exn$0,
              of_tree$0,
              of_hashtbl_exn$0,
              of_key_set,
              quickcheck_generator]}
    function Make_tree_S1(Key)
     {var comparator=Key[1],sexp_of_t=Base_Map[104][3][1];
      function t_of_sexp(a,b,c)
       {return caml_call4(Base_Map[104][3][2],comparator,a,b,c)}
      var empty=Base_Map[104][3][95];
      function of_tree(tree){return tree}
      function singleton(a)
       {return caml_call2(Base_Map[104][3][4],comparator,a)}
      function of_sorted_array_unchecked(a)
       {return caml_call2(Base_Map[104][3][14],comparator,a)}
      function of_sorted_array(a)
       {return caml_call2(Base_Map[104][3][13],comparator,a)}
      function of_increasing_iterator_uncheck(len,f)
       {return caml_call3(Base_Map[104][3][15],comparator,len,f)}
      function of_increasing_sequence(seq)
       {return caml_call2(Base_Map[104][3][16],comparator,seq)}
      function of_sequence(s)
       {return caml_call2(Base_Map[104][3][17],comparator,s)}
      function of_sequence_or_error(s)
       {return caml_call2(Base_Map[104][3][18],comparator,s)}
      function of_sequence_exn(s)
       {return caml_call2(Base_Map[104][3][19],comparator,s)}
      function of_sequence_multi(s)
       {return caml_call2(Base_Map[104][3][20],comparator,s)}
      function of_sequence_fold(s,init,f)
       {return caml_call4(Base_Map[104][3][21],comparator,s,init,f)}
      function of_sequence_reduce(s,f)
       {return caml_call3(Base_Map[104][3][22],comparator,s,f)}
      function of_alist(a)
       {return caml_call2(Base_Map[104][3][7],comparator,a)}
      function of_alist_or_error(a)
       {return caml_call2(Base_Map[104][3][8],comparator,a)}
      function of_alist_exn(a)
       {return caml_call2(Base_Map[104][3][9],comparator,a)}
      function of_hashtbl_exn(a){return of_hashtbl_exn$0(comparator,a)}
      function of_alist_multi(a)
       {return caml_call2(Base_Map[104][3][10],comparator,a)}
      function of_alist_fold(a,init,f)
       {return caml_call4(Base_Map[104][3][11],comparator,a,init,f)}
      function of_alist_reduce(a,f)
       {return caml_call3(Base_Map[104][3][12],comparator,a,f)}
      function of_iteri(iteri)
       {return caml_call2(Base_Map[104][3][23],comparator,iteri)}
      function of_iteri_exn(iteri)
       {return caml_call2(Base_Map[104][3][24],comparator,iteri)}
      function to_tree(t){return t}
      function invariants(a)
       {return caml_call2(Base_Map[104][3][26],comparator,a)}
      function is_empty(a){return caml_call1(Base_Map[104][3][27],a)}
      function length(a){return caml_call1(Base_Map[104][3][28],a)}
      function set(a,key,data)
       {return caml_call4(Base_Map[104][3][31],comparator,a,key,data)}
      function add(a,key,data)
       {return caml_call4(Base_Map[104][3][29],comparator,a,key,data)}
      function add_exn(a,key,data)
       {return caml_call4(Base_Map[104][3][30],comparator,a,key,data)}
      function add_multi(a,key,data)
       {return caml_call4(Base_Map[104][3][32],comparator,a,key,data)}
      function remove_multi(a,b)
       {return caml_call3(Base_Map[104][3][33],comparator,a,b)}
      function find_multi(a,b)
       {return caml_call3(Base_Map[104][3][34],comparator,a,b)}
      function change(a,b,f)
       {return caml_call4(Base_Map[104][3][35],comparator,a,b,f)}
      function update(a,b,f)
       {return caml_call4(Base_Map[104][3][36],comparator,a,b,f)}
      function find_exn(a,b)
       {return caml_call3(Base_Map[104][3][38],comparator,a,b)}
      function find(a,b)
       {return caml_call3(Base_Map[104][3][37],comparator,a,b)}
      function remove(a,b)
       {return caml_call3(Base_Map[104][3][39],comparator,a,b)}
      function mem(a,b)
       {return caml_call3(Base_Map[104][3][40],comparator,a,b)}
      var
       iter_keys=Base_Map[104][3][41],
       iter=Base_Map[104][3][42],
       iteri=Base_Map[104][3][43],
       iteri_until=Base_Map[104][3][44];
      function iter2(a,b,f)
       {return caml_call4(Base_Map[104][3][45],comparator,a,b,f)}
      var
       map=Base_Map[104][3][46],
       mapi=Base_Map[104][3][47],
       fold=Base_Map[104][3][48],
       fold_until=Base_Map[104][3][49],
       fold_right=Base_Map[104][3][50];
      function fold2(a,b,init,f)
       {return caml_call5(Base_Map[104][3][51],comparator,a,b,init,f)}
      function filter_keys(a,f)
       {return caml_call3(Base_Map[104][3][52],comparator,a,f)}
      function filter(a,f)
       {return caml_call3(Base_Map[104][3][53],comparator,a,f)}
      function filteri(a,f)
       {return caml_call3(Base_Map[104][3][54],comparator,a,f)}
      function filter_map(a,f)
       {return caml_call3(Base_Map[104][3][55],comparator,a,f)}
      function filter_mapi(a,f)
       {return caml_call3(Base_Map[104][3][56],comparator,a,f)}
      function partition_mapi(t,f)
       {return caml_call3(Base_Map[104][3][57],comparator,t,f)}
      function partition_map(t,f)
       {return caml_call3(Base_Map[104][3][58],comparator,t,f)}
      function partitioni_tf(t,f)
       {return caml_call3(Base_Map[104][3][59],comparator,t,f)}
      function partition_tf(t,f)
       {return caml_call3(Base_Map[104][3][60],comparator,t,f)}
      function combine_errors(t)
       {return caml_call2(Base_Map[104][3][61],comparator,t)}
      function compare_direct(a,b,c)
       {return caml_call4(Base_Map[104][3][62],comparator,a,b,c)}
      function equal(a,b,c)
       {return caml_call4(Base_Map[104][3][63],comparator,a,b,c)}
      var
       keys=Base_Map[104][3][64],
       data=Base_Map[104][3][65],
       to_alist=Base_Map[104][3][66];
      function validate(name,f,t)
       {var _btp_=caml_call2(to_alist,0,t);
        return caml_call3(Validate[32],name,f,_btp_)}
      function validatei(name,f,t)
       {var _btn_=caml_call2(to_alist,0,t),_bto_=caml_call2(_it_,name,_a1_);
        return caml_call3(Validate[29],_bto_,f,_btn_)}
      function symmetric_diff(a,b,data_equal)
       {return caml_call4(Base_Map[104][3][69],comparator,a,b,data_equal)}
      function fold_symmetric_diff(a,b,data_equal,init,f)
       {return caml_call6
                (Base_Map[104][3][70],comparator,a,b,data_equal,init,f)}
      function merge(a,b,f)
       {return caml_call4(Base_Map[104][3][67],comparator,a,b,f)}
      function merge_skewed(a,b,combine)
       {return caml_call4(Base_Map[104][3][68],comparator,a,b,combine)}
      var
       min_elt=Base_Map[104][3][71],
       min_elt_exn=Base_Map[104][3][72],
       max_elt=Base_Map[104][3][73],
       max_elt_exn=Base_Map[104][3][74],
       for_all=Base_Map[104][3][75],
       for_alli=Base_Map[104][3][76],
       exists=Base_Map[104][3][77],
       existsi=Base_Map[104][3][78],
       count=Base_Map[104][3][79],
       counti=Base_Map[104][3][80];
      function split(a,b)
       {return caml_call3(Base_Map[104][3][81],comparator,a,b)}
      function append(lower_part,upper_part)
       {return caml_call3
                (Base_Map[104][3][82],comparator,lower_part,upper_part)}
      function subrange(t,lower_bound,upper_bound)
       {return caml_call4
                (Base_Map[104][3][83],comparator,t,lower_bound,upper_bound)}
      function fold_range_inclusive(t,min,max,init,f)
       {return caml_call6(Base_Map[104][3][84],comparator,t,min,max,init,f)}
      function range_to_alist(t,min,max)
       {return caml_call4(Base_Map[104][3][85],comparator,t,min,max)}
      function closest_key(a,b,c)
       {return caml_call4(Base_Map[104][3][86],comparator,a,b,c)}
      var nth=Base_Map[104][3][87],nth_exn=Base_Map[104][3][88];
      function rank(a,b)
       {return caml_call3(Base_Map[104][3][89],comparator,a,b)}
      function to_sequence
       (order,keys_greater_or_equal_to,keys_less_or_equal_to,t)
       {return caml_call5
                (Base_Map[104][3][91],
                 comparator,
                 order,
                 keys_greater_or_equal_to,
                 keys_less_or_equal_to,
                 t)}
      function binary_search(t,compare,how,v)
       {return caml_call5(Base_Map[104][3][92],comparator,t,compare,how,v)}
      function binary_search_segmented(t,segment_of,how)
       {return caml_call4(Base_Map[104][3][93],comparator,t,segment_of,how)}
      function binary_search_subrange(t,compare,lower_bound,upper_bound)
       {return caml_call5
                (Base_Map[104][3][94],
                 comparator,
                 t,
                 compare,
                 lower_bound,
                 upper_bound)}
      function key_set(t){return key_set$0(comparator,t)}
      function map_keys(t,f)
       {return caml_call3(Base_Map[104][3][5],comparator,t,f)}
      function map_keys_exn(t,f)
       {return caml_call3(Base_Map[104][3][6],comparator,t,f)}
      function quickcheck_generator(k,v){return gen_tree(comparator,k,v)}
      function quickcheck_observer(k,v){return obs_tree(k,v)}
      function quickcheck_shrinker(k,v){return shr_tree(comparator,k,v)}
      return [0,
              comparator,
              sexp_of_t,
              t_of_sexp,
              empty,
              of_tree,
              singleton,
              of_sorted_array_unchecked,
              of_sorted_array,
              of_increasing_iterator_uncheck,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_hashtbl_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_iteri,
              of_iteri_exn,
              of_key_set,
              to_tree,
              invariants,
              is_empty,
              length,
              set,
              add,
              add_exn,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find_exn,
              find,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iteri_until,
              iter2,
              map,
              mapi,
              fold,
              fold_until,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              combine_errors,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              validate,
              validatei,
              symmetric_diff,
              fold_symmetric_diff,
              merge,
              merge_skewed,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_sequence,
              binary_search,
              binary_search_segmented,
              binary_search_subrange,
              key_set,
              map_keys,
              map_keys_exn,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker]}
    function Make_tree_plain(Key)
     {var
       Key_S1=caml_call1(S_to_S1,[0,Key[2]]),
       include=Make_tree_S1(Key_S1),
       comparator=include[1],
       t_of_sexp=include[3],
       empty=include[4],
       of_tree=include[5],
       singleton=include[6],
       of_sorted_array_unchecked=include[7],
       of_sorted_array=include[8],
       of_increasing_iterator_uncheck=include[9],
       of_increasing_sequence=include[10],
       of_sequence=include[11],
       of_sequence_or_error=include[12],
       of_sequence_exn=include[13],
       of_sequence_multi=include[14],
       of_sequence_fold=include[15],
       of_sequence_reduce=include[16],
       of_alist=include[17],
       of_alist_or_error=include[18],
       of_alist_exn=include[19],
       of_hashtbl_exn=include[20],
       of_alist_multi=include[21],
       of_alist_fold=include[22],
       of_alist_reduce=include[23],
       of_iteri=include[24],
       of_iteri_exn=include[25],
       of_key_set=include[26],
       to_tree=include[27],
       invariants=include[28],
       is_empty=include[29],
       length=include[30],
       set=include[31],
       add=include[32],
       add_exn=include[33],
       add_multi=include[34],
       remove_multi=include[35],
       find_multi=include[36],
       change=include[37],
       update=include[38],
       find_exn=include[39],
       find=include[40],
       remove=include[41],
       mem=include[42],
       iter_keys=include[43],
       iter=include[44],
       iteri=include[45],
       iteri_until=include[46],
       iter2=include[47],
       map=include[48],
       mapi=include[49],
       fold=include[50],
       fold_until=include[51],
       fold_right=include[52],
       fold2=include[53],
       filter_keys=include[54],
       filter=include[55],
       filteri=include[56],
       filter_map=include[57],
       filter_mapi=include[58],
       partition_mapi=include[59],
       partition_map=include[60],
       partitioni_tf=include[61],
       partition_tf=include[62],
       combine_errors=include[63],
       compare_direct=include[64],
       equal=include[65],
       keys=include[66],
       data=include[67],
       to_alist=include[68],
       validate=include[69],
       validatei=include[70],
       symmetric_diff=include[71],
       fold_symmetric_diff=include[72],
       merge=include[73],
       merge_skewed=include[74],
       min_elt=include[75],
       min_elt_exn=include[76],
       max_elt=include[77],
       max_elt_exn=include[78],
       for_all=include[79],
       for_alli=include[80],
       exists=include[81],
       existsi=include[82],
       count=include[83],
       counti=include[84],
       split=include[85],
       append=include[86],
       subrange=include[87],
       fold_range_inclusive=include[88],
       range_to_alist=include[89],
       closest_key=include[90],
       nth=include[91],
       nth_exn=include[92],
       rank=include[93],
       to_sequence=include[94],
       binary_search=include[95],
       binary_search_segmented=include[96],
       binary_search_subrange=include[97],
       key_set=include[98],
       map_keys=include[99],
       map_keys_exn=include[100],
       quickcheck_generator=include[101],
       quickcheck_observer=include[102],
       quickcheck_shrinker=include[103],
       _btl_=include[2];
      function sexp_of_t(sexp_of_v,t)
       {function _btm_(param){return _uL_}
        return caml_call4(_btl_,Key[1],sexp_of_v,_btm_,t)}
      function Provide_of_sexp(X)
       {function t_of_sexp$0(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp,X[1],v_of_sexp,sexp)}
        return [0,t_of_sexp$0]}
      return [0,
              Key_S1,
              comparator,
              t_of_sexp,
              empty,
              of_tree,
              singleton,
              of_sorted_array_unchecked,
              of_sorted_array,
              of_increasing_iterator_uncheck,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_hashtbl_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_iteri,
              of_iteri_exn,
              of_key_set,
              to_tree,
              invariants,
              is_empty,
              length,
              set,
              add,
              add_exn,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find_exn,
              find,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iteri_until,
              iter2,
              map,
              mapi,
              fold,
              fold_until,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              combine_errors,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              validate,
              validatei,
              symmetric_diff,
              fold_symmetric_diff,
              merge,
              merge_skewed,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_sequence,
              binary_search,
              binary_search_segmented,
              binary_search_subrange,
              key_set,
              map_keys,
              map_keys_exn,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker,
              sexp_of_t,
              Provide_of_sexp]}
    function init_for_bin_prot(len,f,comparator)
     {var map=caml_call3(of_increasing_iterator_uncheck,comparator,len,f);
      if(caml_call1(invariants$0,map))return map;
      var match=caml_call2(of_iteri,comparator,caml_call1(iteri$2,map));
      if(17724 <= match[1]){var map$0=match[2];return map$0}
      return caml_call1(_a3_,cst_Map_bin_read_t_duplicate_e)}
    var
     _uM_=Creators$0(Poly),
     _uN_=_uM_[1],
     _uO_=_uM_[2],
     _uP_=_uM_[3],
     _uQ_=_uM_[4],
     _uR_=_uM_[5],
     _uS_=_uM_[6],
     _uT_=_uM_[7],
     _uU_=_uM_[8],
     _uV_=_uM_[9],
     _uW_=_uM_[10],
     _uX_=_uM_[11],
     _uY_=_uM_[12],
     _uZ_=_uM_[13],
     _u0_=_uM_[14],
     _u1_=_uM_[15],
     _u2_=_uM_[16],
     _u3_=_uM_[17],
     _u4_=_uM_[18],
     _u5_=_uM_[19],
     _u6_=_uM_[20],
     _u7_=_uM_[21],
     _u8_=_uM_[22],
     _u9_=_uM_[23],
     _u__=_uM_[24],
     _u$_=_uM_[25],
     _va_=_uM_[26],
     _vb_=_uM_[27];
    function compare$21(param,cmpv,t1,t2)
     {return caml_call3(compare_direct,cmpv,t1,t2)}
    function sexp_of_t$23(sexp_of_k,sexp_of_v,t)
     {return caml_call4
              (sexp_of_t$22,
               sexp_of_k,
               sexp_of_v,
               function(param){return _vc_},
               t)}
    function t_sexp_grammar$0(k_grammar,v_grammar)
     {var _btk_=caml_call2(Assoc[3],k_grammar,v_grammar);
      return caml_call1(Sexplib_Sexp_grammar[1],_btk_)}
    var
     _vd_=caml_call1(Bin_prot_Shape[3][1],cst_b$8),
     _ve_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_473_30),
     _vf_=[0,caml_call2(Bin_prot_Shape[15],_ve_,_vd_),0],
     _vg_=caml_call1(Bin_prot_Shape[3][1],cst_a$36),
     _vh_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_473_25),
     _vi_=[0,caml_call2(Bin_prot_Shape[15],_vh_,_vg_),_vf_],
     _vj_=caml_call1(Bin_prot_Shape[7],_vi_),
     _vk_=[0,caml_call1(Bin_prot_Shape[3][1],cst_b$9),0],
     _vl_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$37),_vk_],
     _vm_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$5),_vl_,_vj_],0],
     _vn_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_473_6),
     group$39=caml_call2(Bin_prot_Shape[6],_vn_,_vm_);
    function bin_shape_el$0(a,b)
     {var _btj_=caml_call1(Bin_prot_Shape[2][1],cst_el$6);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$39,_btj_),[0,a,[0,b,0]])}
    function bin_size_el$0(size_of_a,size_of_b,param)
     {var
       v2=param[2],
       v1=param[1],
       _bth_=caml_call1(size_of_a,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bth_),
       _bti_=caml_call1(size_of_b,v2);
      return caml_call2(Bin_prot_Common[23],size,_bti_)}
    function bin_write_el$0(write_a,write_b,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(write_b,buf,pos$0,v2)}
    function bin_read_el$0(of_a,of_b,buf,pos_ref)
     {var v1=caml_call2(of_a,buf,pos_ref),v2=caml_call2(of_b,buf,pos_ref);
      return [0,v1,v2]}
    var
     caller_identity$0=
      caml_call1(Bin_prot_Shape[5][1],cst_b7d7b1a0_4992_11e6_8a32_bb);
    function iter$8(t,f)
     {return caml_call2
              (iteri$1,
               t,
               function(key,data){return caml_call1(f,[0,key,data])})}
    function init$1(len,next)
     {var _btg_=Poly[1];
      return init_for_bin_prot
              (len,function(param){return caml_call1(next,0)},_btg_)}
    var
     include$34=
      caml_call1
       (Bin_prot_Utils[17],
        [0,
         caller_identity$0,
         module_name$2,
         length$3,
         iter$8,
         init$1,
         bin_size_el$0,
         bin_write_el$0,
         bin_read_el$0,
         bin_shape_el$0]),
     bin_shape_t$31=include$34[1],
     bin_size_t$37=include$34[2],
     bin_write_t$37=include$34[3],
     bin_read_t$76=include$34[4],
     bin_read_t$77=include$34[5],
     bin_writer_t$25=include$34[6],
     bin_reader_t$25=include$34[7],
     bin_t$25=include$34[8],
     include$35=Make_tree_S1(Poly),
     t_of_sexp$22=include$35[3],
     empty$2=include$35[4],
     of_tree$1=include$35[5],
     singleton$3=include$35[6],
     of_sorted_array_unchecked$1=include$35[7],
     of_sorted_array$1=include$35[8],
     of_increasing_iterator_uncheck$1=include$35[9],
     of_increasing_sequence$1=include$35[10],
     of_sequence$2=include$35[11],
     of_sequence_or_error$1=include$35[12],
     of_sequence_exn$1=include$35[13],
     of_sequence_multi$1=include$35[14],
     of_sequence_fold$1=include$35[15],
     of_sequence_reduce$1=include$35[16],
     of_alist$3=include$35[17],
     of_alist_or_error$3=include$35[18],
     of_alist_exn$3=include$35[19],
     of_hashtbl_exn$2=include$35[20],
     of_alist_multi$3=include$35[21],
     of_alist_fold$1=include$35[22],
     of_alist_reduce$1=include$35[23],
     of_iteri$1=include$35[24],
     of_iteri_exn$1=include$35[25],
     of_key_set$0=include$35[26],
     to_tree$2=include$35[27],
     invariants$1=include$35[28],
     is_empty$5=include$35[29],
     length$5=include$35[30],
     set$3=include$35[31],
     add$3=include$35[32],
     add_exn$2=include$35[33],
     add_multi$2=include$35[34],
     remove_multi$2=include$35[35],
     find_multi$2=include$35[36],
     change$2=include$35[37],
     update$2=include$35[38],
     find_exn$3=include$35[39],
     find$4=include$35[40],
     remove$3=include$35[41],
     mem$4=include$35[42],
     iter_keys$2=include$35[43],
     iter$9=include$35[44],
     iteri$3=include$35[45],
     iteri_until$1=include$35[46],
     iter2$1=include$35[47],
     map$13=include$35[48],
     mapi$3=include$35[49],
     fold$6=include$35[50],
     fold_until$3=include$35[51],
     fold_right$2=include$35[52],
     fold2$1=include$35[53],
     filter_keys$2=include$35[54],
     filter$6=include$35[55],
     filteri$3=include$35[56],
     filter_map$5=include$35[57],
     filter_mapi$3=include$35[58],
     partition_mapi$2=include$35[59],
     partition_map$2=include$35[60],
     partitioni_tf$3=include$35[61],
     partition_tf$3=include$35[62],
     combine_errors$1=include$35[63],
     compare_direct$1=include$35[64],
     equal$8=include$35[65],
     keys$3=include$35[66],
     data$2=include$35[67],
     to_alist$2=include$35[68],
     validate$2=include$35[69],
     validatei$1=include$35[70],
     symmetric_diff$1=include$35[71],
     fold_symmetric_diff$1=include$35[72],
     merge$3=include$35[73],
     merge_skewed$0=include$35[74],
     min_elt$3=include$35[75],
     min_elt_exn$1=include$35[76],
     max_elt$3=include$35[77],
     max_elt_exn$1=include$35[78],
     for_all$6=include$35[79],
     for_alli$3=include$35[80],
     exists$6=include$35[81],
     existsi$3=include$35[82],
     count$4=include$35[83],
     counti$3=include$35[84],
     split$1=include$35[85],
     append$2=include$35[86],
     subrange$1=include$35[87],
     fold_range_inclusive$1=include$35[88],
     range_to_alist$1=include$35[89],
     closest_key$1=include$35[90],
     nth$1=include$35[91],
     nth_exn$1=include$35[92],
     rank$1=include$35[93],
     to_sequence$2=include$35[94],
     binary_search$2=include$35[95],
     binary_search_segmented$2=include$35[96],
     binary_search_subrange$1=include$35[97],
     key_set$2=include$35[98],
     map_keys$1=include$35[99],
     map_keys_exn$1=include$35[100],
     quickcheck_generator$2=include$35[101],
     quickcheck_observer$2=include$35[102],
     quickcheck_shrinker$2=include$35[103],
     _vo_=include$35[2];
    function sexp_of_t$24(sexp_of_k,sexp_of_v,t)
     {return caml_call4
              (_vo_,sexp_of_k,sexp_of_v,function(param){return _vp_},t)}
    function t_sexp_grammar$1(k_grammar,v_grammar)
     {var _btf_=caml_call2(Assoc[3],k_grammar,v_grammar);
      return caml_call1(Sexplib_Sexp_grammar[1],_btf_)}
    function Provide_bin_io(Key)
     {var
       _bs6_=caml_call1(Bin_prot_Shape[3][1],cst_v$4),
       _bs7_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_519_25),
       _bs8_=[0,caml_call2(Bin_prot_Shape[15],_bs7_,_bs6_),0],
       _bs9_=caml_call1(Bin_prot_Shape[7],[0,Key[5],_bs8_]),
       _bs__=[0,caml_call1(Bin_prot_Shape[3][1],cst_v$5),0],
       _bs$_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$7),_bs__,_bs9_],0],
       _bta_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_map_ml_519_4),
       group=caml_call2(Bin_prot_Shape[6],_bta_,_bs$_);
      function bin_shape_el(v)
       {var _bte_=caml_call1(Bin_prot_Shape[2][1],cst_el$8);
        return caml_call1(caml_call2(Bin_prot_Shape[14],group,_bte_),[0,v,0])}
      function bin_size_el(size_of_v,param)
       {var
         v2=param[2],
         v1=param[1],
         _btc_=caml_call1(Key[1],v1),
         size=caml_call2(Bin_prot_Common[23],0,_btc_),
         _btd_=caml_call1(size_of_v,v2);
        return caml_call2(Bin_prot_Common[23],size,_btd_)}
      function bin_write_el(write_v,buf,pos,param)
       {var v2=param[2],v1=param[1],pos$0=caml_call3(Key[2],buf,pos,v1);
        return caml_call3(write_v,buf,pos$0,v2)}
      function bin_read_el(of_v,buf,pos_ref)
       {var v1=caml_call2(Key[3],buf,pos_ref),v2=caml_call2(of_v,buf,pos_ref);
        return [0,v1,v2]}
      var
       caller_identity=
        caml_call1(Bin_prot_Shape[5][1],cst_dfb300f8_4992_11e6_9c15_73);
      function iter(t,f)
       {return caml_call2
                (iteri$2,
                 t,
                 function(key,data){return caml_call1(f,[0,key,data])})}
      function init(len,next)
       {var _btb_=Key[9];
        return init_for_bin_prot
                (len,function(param){return caml_call1(next,0)},_btb_)}
      return caml_call1
              (Bin_prot_Utils[16],
               [0,
                caller_identity,
                module_name$3,
                length$4,
                iter,
                init,
                bin_size_el,
                bin_write_el,
                bin_read_el,
                bin_shape_el])}
    function Make_plain_using_comparator(Key)
     {var
       Key_S1=caml_call1(S_to_S1,[0,Key[2]]),
       _bs4_=Creators$0(Key_S1),
       t_of_sexp=_bs4_[1],
       empty=_bs4_[2],
       singleton=_bs4_[3],
       map_keys=_bs4_[4],
       map_keys_exn=_bs4_[5],
       of_sorted_array=_bs4_[6],
       of_sorted_array_unchecked=_bs4_[7],
       of_increasing_iterator_uncheck=_bs4_[8],
       of_alist=_bs4_[9],
       of_alist_or_error=_bs4_[10],
       of_alist_exn=_bs4_[11],
       of_alist_multi=_bs4_[12],
       of_alist_fold=_bs4_[13],
       of_alist_reduce=_bs4_[14],
       of_increasing_sequence=_bs4_[15],
       of_sequence=_bs4_[16],
       of_sequence_or_error=_bs4_[17],
       of_sequence_exn=_bs4_[18],
       of_sequence_multi=_bs4_[19],
       of_sequence_fold=_bs4_[20],
       of_sequence_reduce=_bs4_[21],
       of_iteri=_bs4_[22],
       of_iteri_exn=_bs4_[23],
       of_tree=_bs4_[24],
       of_hashtbl_exn=_bs4_[25],
       of_key_set=_bs4_[26],
       quickcheck_generator=_bs4_[27];
      function compare(cmpv,t1,t2)
       {return caml_call3(compare_direct,cmpv,t1,t2)}
      function sexp_of_t(sexp_of_v,t)
       {function _bs5_(param){return _vq_}
        return caml_call4(sexp_of_t$22,Key[1],sexp_of_v,_bs5_,t)}
      function Provide_of_sexp(Key)
       {function t_of_sexp$0(v_of_sexp,sexp)
         {return caml_call3(t_of_sexp,Key[1],v_of_sexp,sexp)}
        return [0,t_of_sexp$0]}
      function Provide_hash(Key)
       {function hash_fold_t(hash_fold_data,state,t)
         {return caml_call4(hash_fold_direct,Key[1],hash_fold_data,state,t)}
        return [0,hash_fold_t]}
      function Provide_bin_io$0(Key$0)
       {var
         comparator=Key[2],
         bin_size_t=Key$0[1],
         bin_write_t=Key$0[2],
         bin_read_t=Key$0[3],
         bin_read_t$0=Key$0[4],
         bin_shape_t=Key$0[5],
         bin_writer_t=Key$0[6],
         bin_reader_t=Key$0[7],
         bin_t=Key$0[8];
        return Provide_bin_io
                ([0,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t,
                  bin_read_t$0,
                  bin_shape_t,
                  bin_writer_t,
                  bin_reader_t,
                  bin_t,
                  comparator])}
      return [0,
              Key,
              Key_S1,
              t_of_sexp,
              empty,
              singleton,
              map_keys,
              map_keys_exn,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_iteri,
              of_iteri_exn,
              of_tree,
              of_hashtbl_exn,
              of_key_set,
              quickcheck_generator,
              invariants,
              is_empty$3,
              length$3,
              add$1,
              add_exn$0,
              set$1,
              add_multi$0,
              remove_multi$0,
              find_multi$0,
              change$0,
              update$0,
              find$2,
              find_exn$1,
              remove$1,
              mem$2,
              iter_keys$0,
              iter$6,
              iteri$1,
              iteri_until,
              iter2,
              map$11,
              mapi$1,
              fold$4,
              fold_until$1,
              fold_right$0,
              fold2,
              filter_keys$0,
              filter$4,
              filteri$1,
              filter_map$3,
              filter_mapi$1,
              partition_mapi$0,
              partition_map$0,
              partitioni_tf$1,
              partition_tf$1,
              combine_errors,
              compare_direct,
              equal$6,
              keys$1,
              data$0,
              to_alist$0,
              merge$1,
              merge_skewed,
              symmetric_diff,
              fold_symmetric_diff,
              min_elt$1,
              min_elt_exn,
              max_elt$1,
              max_elt_exn,
              for_all$4,
              for_alli$1,
              exists$4,
              existsi$1,
              count$2,
              counti$1,
              split,
              append$0,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree$0,
              to_sequence$0,
              binary_search$0,
              binary_search_segmented$0,
              binary_search_subrange,
              validate$0,
              validatei,
              quickcheck_observer$1,
              quickcheck_shrinker$1,
              key_set$1,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io$0]}
    function Make_using_comparator(Key_sexp)
     {var
       _bs3_=Make_plain_using_comparator([0,Key_sexp[2],Key_sexp[3]]),
       Key_S1=_bs3_[2],
       empty=_bs3_[4],
       singleton=_bs3_[5],
       map_keys=_bs3_[6],
       map_keys_exn=_bs3_[7],
       of_sorted_array=_bs3_[8],
       of_sorted_array_unchecked=_bs3_[9],
       of_increasing_iterator_uncheck=_bs3_[10],
       of_alist=_bs3_[11],
       of_alist_or_error=_bs3_[12],
       of_alist_exn=_bs3_[13],
       of_alist_multi=_bs3_[14],
       of_alist_fold=_bs3_[15],
       of_alist_reduce=_bs3_[16],
       of_increasing_sequence=_bs3_[17],
       of_sequence=_bs3_[18],
       of_sequence_or_error=_bs3_[19],
       of_sequence_exn=_bs3_[20],
       of_sequence_multi=_bs3_[21],
       of_sequence_fold=_bs3_[22],
       of_sequence_reduce=_bs3_[23],
       of_iteri=_bs3_[24],
       of_iteri_exn=_bs3_[25],
       of_tree=_bs3_[26],
       of_hashtbl_exn=_bs3_[27],
       of_key_set=_bs3_[28],
       quickcheck_generator=_bs3_[29],
       invariants=_bs3_[30],
       is_empty=_bs3_[31],
       length=_bs3_[32],
       add=_bs3_[33],
       add_exn=_bs3_[34],
       set=_bs3_[35],
       add_multi=_bs3_[36],
       remove_multi=_bs3_[37],
       find_multi=_bs3_[38],
       change=_bs3_[39],
       update=_bs3_[40],
       find=_bs3_[41],
       find_exn=_bs3_[42],
       remove=_bs3_[43],
       mem=_bs3_[44],
       iter_keys=_bs3_[45],
       iter=_bs3_[46],
       iteri=_bs3_[47],
       iteri_until=_bs3_[48],
       iter2=_bs3_[49],
       map=_bs3_[50],
       mapi=_bs3_[51],
       fold=_bs3_[52],
       fold_until=_bs3_[53],
       fold_right=_bs3_[54],
       fold2=_bs3_[55],
       filter_keys=_bs3_[56],
       filter=_bs3_[57],
       filteri=_bs3_[58],
       filter_map=_bs3_[59],
       filter_mapi=_bs3_[60],
       partition_mapi=_bs3_[61],
       partition_map=_bs3_[62],
       partitioni_tf=_bs3_[63],
       partition_tf=_bs3_[64],
       combine_errors=_bs3_[65],
       compare_direct=_bs3_[66],
       equal=_bs3_[67],
       keys=_bs3_[68],
       data=_bs3_[69],
       to_alist=_bs3_[70],
       merge=_bs3_[71],
       merge_skewed=_bs3_[72],
       symmetric_diff=_bs3_[73],
       fold_symmetric_diff=_bs3_[74],
       min_elt=_bs3_[75],
       min_elt_exn=_bs3_[76],
       max_elt=_bs3_[77],
       max_elt_exn=_bs3_[78],
       for_all=_bs3_[79],
       for_alli=_bs3_[80],
       exists=_bs3_[81],
       existsi=_bs3_[82],
       count=_bs3_[83],
       counti=_bs3_[84],
       split=_bs3_[85],
       append=_bs3_[86],
       subrange=_bs3_[87],
       fold_range_inclusive=_bs3_[88],
       range_to_alist=_bs3_[89],
       closest_key=_bs3_[90],
       nth=_bs3_[91],
       nth_exn=_bs3_[92],
       rank=_bs3_[93],
       to_tree=_bs3_[94],
       to_sequence=_bs3_[95],
       binary_search=_bs3_[96],
       binary_search_segmented=_bs3_[97],
       binary_search_subrange=_bs3_[98],
       validate=_bs3_[99],
       validatei=_bs3_[100],
       quickcheck_observer=_bs3_[101],
       quickcheck_shrinker=_bs3_[102],
       key_set=_bs3_[103],
       compare=_bs3_[104],
       sexp_of_t=_bs3_[105],
       Provide_of_sexp=_bs3_[106],
       Provide_hash=_bs3_[107],
       Provide_bin_io=_bs3_[108],
       include=caml_call1(Provide_of_sexp,[0,Key_sexp[1]]),
       t_of_sexp=include[1];
      caml_call1(Provide_of_sexp,[0,Key_sexp[1]]);
      return [0,
              Key_S1,
              empty,
              singleton,
              map_keys,
              map_keys_exn,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_iteri,
              of_iteri_exn,
              of_tree,
              of_hashtbl_exn,
              of_key_set,
              quickcheck_generator,
              invariants,
              is_empty,
              length,
              add,
              add_exn,
              set,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find,
              find_exn,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iteri_until,
              iter2,
              map,
              mapi,
              fold,
              fold_until,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              combine_errors,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              merge,
              merge_skewed,
              symmetric_diff,
              fold_symmetric_diff,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              binary_search_subrange,
              validate,
              validatei,
              quickcheck_observer,
              quickcheck_shrinker,
              key_set,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              Key_sexp,
              t_of_sexp]}
    function Make_binable_using_comparator(Key_bin_sexp)
     {var
       _bs2_=
        Make_using_comparator
         ([0,Key_bin_sexp[9],Key_bin_sexp[10],Key_bin_sexp[11]]),
       Key_S1=_bs2_[1],
       empty=_bs2_[2],
       singleton=_bs2_[3],
       map_keys=_bs2_[4],
       map_keys_exn=_bs2_[5],
       of_sorted_array=_bs2_[6],
       of_sorted_array_unchecked=_bs2_[7],
       of_increasing_iterator_uncheck=_bs2_[8],
       of_alist=_bs2_[9],
       of_alist_or_error=_bs2_[10],
       of_alist_exn=_bs2_[11],
       of_alist_multi=_bs2_[12],
       of_alist_fold=_bs2_[13],
       of_alist_reduce=_bs2_[14],
       of_increasing_sequence=_bs2_[15],
       of_sequence=_bs2_[16],
       of_sequence_or_error=_bs2_[17],
       of_sequence_exn=_bs2_[18],
       of_sequence_multi=_bs2_[19],
       of_sequence_fold=_bs2_[20],
       of_sequence_reduce=_bs2_[21],
       of_iteri=_bs2_[22],
       of_iteri_exn=_bs2_[23],
       of_tree=_bs2_[24],
       of_hashtbl_exn=_bs2_[25],
       of_key_set=_bs2_[26],
       quickcheck_generator=_bs2_[27],
       invariants=_bs2_[28],
       is_empty=_bs2_[29],
       length=_bs2_[30],
       add=_bs2_[31],
       add_exn=_bs2_[32],
       set=_bs2_[33],
       add_multi=_bs2_[34],
       remove_multi=_bs2_[35],
       find_multi=_bs2_[36],
       change=_bs2_[37],
       update=_bs2_[38],
       find=_bs2_[39],
       find_exn=_bs2_[40],
       remove=_bs2_[41],
       mem=_bs2_[42],
       iter_keys=_bs2_[43],
       iter=_bs2_[44],
       iteri=_bs2_[45],
       iteri_until=_bs2_[46],
       iter2=_bs2_[47],
       map=_bs2_[48],
       mapi=_bs2_[49],
       fold=_bs2_[50],
       fold_until=_bs2_[51],
       fold_right=_bs2_[52],
       fold2=_bs2_[53],
       filter_keys=_bs2_[54],
       filter=_bs2_[55],
       filteri=_bs2_[56],
       filter_map=_bs2_[57],
       filter_mapi=_bs2_[58],
       partition_mapi=_bs2_[59],
       partition_map=_bs2_[60],
       partitioni_tf=_bs2_[61],
       partition_tf=_bs2_[62],
       combine_errors=_bs2_[63],
       compare_direct=_bs2_[64],
       equal=_bs2_[65],
       keys=_bs2_[66],
       data=_bs2_[67],
       to_alist=_bs2_[68],
       merge=_bs2_[69],
       merge_skewed=_bs2_[70],
       symmetric_diff=_bs2_[71],
       fold_symmetric_diff=_bs2_[72],
       min_elt=_bs2_[73],
       min_elt_exn=_bs2_[74],
       max_elt=_bs2_[75],
       max_elt_exn=_bs2_[76],
       for_all=_bs2_[77],
       for_alli=_bs2_[78],
       exists=_bs2_[79],
       existsi=_bs2_[80],
       count=_bs2_[81],
       counti=_bs2_[82],
       split=_bs2_[83],
       append=_bs2_[84],
       subrange=_bs2_[85],
       fold_range_inclusive=_bs2_[86],
       range_to_alist=_bs2_[87],
       closest_key=_bs2_[88],
       nth=_bs2_[89],
       nth_exn=_bs2_[90],
       rank=_bs2_[91],
       to_tree=_bs2_[92],
       to_sequence=_bs2_[93],
       binary_search=_bs2_[94],
       binary_search_segmented=_bs2_[95],
       binary_search_subrange=_bs2_[96],
       validate=_bs2_[97],
       validatei=_bs2_[98],
       quickcheck_observer=_bs2_[99],
       quickcheck_shrinker=_bs2_[100],
       key_set=_bs2_[101],
       compare=_bs2_[102],
       sexp_of_t=_bs2_[103],
       Provide_of_sexp=_bs2_[104],
       Provide_hash=_bs2_[105],
       Provide_bin_io=_bs2_[106],
       t_of_sexp=_bs2_[108],
       include=
        caml_call1
         (Provide_bin_io,
          [0,
           Key_bin_sexp[1],
           Key_bin_sexp[2],
           Key_bin_sexp[3],
           Key_bin_sexp[4],
           Key_bin_sexp[5],
           Key_bin_sexp[6],
           Key_bin_sexp[7],
           Key_bin_sexp[8]]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              Key_S1,
              empty,
              singleton,
              map_keys,
              map_keys_exn,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_iteri,
              of_iteri_exn,
              of_tree,
              of_hashtbl_exn,
              of_key_set,
              quickcheck_generator,
              invariants,
              is_empty,
              length,
              add,
              add_exn,
              set,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find,
              find_exn,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iteri_until,
              iter2,
              map,
              mapi,
              fold,
              fold_until,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              combine_errors,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              merge,
              merge_skewed,
              symmetric_diff,
              fold_symmetric_diff,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              binary_search_subrange,
              validate,
              validatei,
              quickcheck_observer,
              quickcheck_shrinker,
              key_set,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              t_of_sexp,
              Key_bin_sexp,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function bin_shape_m_t(m){return Provide_bin_io(m)[1]}
    function bin_size_m_t(m){return Provide_bin_io(m)[2]}
    function bin_write_m_t(m){return Provide_bin_io(m)[3]}
    function bin_read_m_t(m){return Provide_bin_io(m)[4]}
    function bin_read_m_t$0(m){return Provide_bin_io(m)[5]}
    function quickcheck_generator_m_t$1(Key)
     {return function(v_generator)
       {return caml_call3
                (quickcheck_generator$1,[0,Key[1]],Key[2],v_generator)}}
    function quickcheck_observer_m_t$1(Key)
     {return function(v_observer)
       {return caml_call2(quickcheck_observer$0,Key[2],v_observer)}}
    function quickcheck_shrinker_m_t$1(Key)
     {return function(v_shrinker)
       {return caml_call2(quickcheck_shrinker$0,Key[2],v_shrinker)}}
    var
     hash_fold_m_t=Base_Map[103],
     equal_m_t$1=Base_Map[102],
     compare_m_t=Base_Map[101],
     m_t_sexp_grammar$1=Base_Map[100],
     m_t_of_sexp$1=Base_Map[99],
     sexp_of_m_t$1=Base_Map[98],
     include$36=Base_Map[104][3],
     sexp_of_t$25=include$36[1],
     empty$3=include$36[3],
     singleton$4=include$36[4],
     map_keys$2=include$36[5],
     map_keys_exn$2=include$36[6],
     of_alist$4=include$36[7],
     of_alist_or_error$4=include$36[8],
     of_alist_exn$4=include$36[9],
     of_alist_multi$4=include$36[10],
     of_alist_fold$2=include$36[11],
     of_alist_reduce$2=include$36[12],
     of_sorted_array$2=include$36[13],
     of_sorted_array_unchecked$2=include$36[14],
     of_increasing_iterator_uncheck$2=include$36[15],
     of_increasing_sequence$2=include$36[16],
     of_sequence$3=include$36[17],
     of_sequence_or_error$2=include$36[18],
     of_sequence_exn$2=include$36[19],
     of_sequence_multi$2=include$36[20],
     of_sequence_fold$2=include$36[21],
     of_sequence_reduce$2=include$36[22],
     of_iteri$2=include$36[23],
     of_iteri_exn$2=include$36[24],
     of_tree$2=include$36[25],
     invariants$2=include$36[26],
     is_empty$6=include$36[27],
     length$6=include$36[28],
     add$4=include$36[29],
     add_exn$3=include$36[30],
     set$4=include$36[31],
     add_multi$3=include$36[32],
     remove_multi$3=include$36[33],
     find_multi$3=include$36[34],
     change$3=include$36[35],
     update$3=include$36[36],
     find$5=include$36[37],
     find_exn$4=include$36[38],
     remove$4=include$36[39],
     mem$5=include$36[40],
     iter_keys$3=include$36[41],
     iter$10=include$36[42],
     iteri$4=include$36[43],
     iteri_until$2=include$36[44],
     iter2$2=include$36[45],
     map$14=include$36[46],
     mapi$4=include$36[47],
     fold$7=include$36[48],
     fold_until$4=include$36[49],
     fold_right$3=include$36[50],
     fold2$2=include$36[51],
     filter_keys$3=include$36[52],
     filter$7=include$36[53],
     filteri$4=include$36[54],
     filter_map$6=include$36[55],
     filter_mapi$4=include$36[56],
     partition_mapi$3=include$36[57],
     partition_map$3=include$36[58],
     partitioni_tf$4=include$36[59],
     partition_tf$4=include$36[60],
     combine_errors$2=include$36[61],
     compare_direct$2=include$36[62],
     equal$9=include$36[63],
     keys$4=include$36[64],
     data$3=include$36[65],
     to_alist$3=include$36[66],
     merge$4=include$36[67],
     merge_skewed$1=include$36[68],
     symmetric_diff$2=include$36[69],
     fold_symmetric_diff$2=include$36[70],
     min_elt$4=include$36[71],
     min_elt_exn$2=include$36[72],
     max_elt$4=include$36[73],
     max_elt_exn$2=include$36[74],
     for_all$7=include$36[75],
     for_alli$4=include$36[76],
     exists$7=include$36[77],
     existsi$4=include$36[78],
     count$5=include$36[79],
     counti$4=include$36[80],
     split$2=include$36[81],
     append$3=include$36[82],
     subrange$2=include$36[83],
     fold_range_inclusive$2=include$36[84],
     range_to_alist$2=include$36[85],
     closest_key$2=include$36[86],
     nth$2=include$36[87],
     nth_exn$2=include$36[88],
     rank$2=include$36[89],
     to_tree$3=include$36[90],
     to_sequence$3=include$36[91],
     binary_search$3=include$36[92],
     binary_search_segmented$3=include$36[93],
     binary_search_subrange$2=include$36[94];
    function validate$3(name,f,t)
     {var _bs1_=caml_call2(to_alist$3,0,t);
      return caml_call3(Validate[32],name,f,_bs1_)}
    function validatei$2(name,f,t)
     {var _bsZ_=caml_call2(to_alist$3,0,t),_bs0_=caml_call2(_it_,name,_a1_);
      return caml_call3(Validate[29],_bs0_,f,_bsZ_)}
    function quickcheck_generator$3(comparator,k,v)
     {return gen_tree(comparator,k,v)}
    function quickcheck_observer$3(k,v){return obs_tree(k,v)}
    function quickcheck_shrinker$3(comparator,k,v)
     {return shr_tree(comparator,k,v)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$115);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Map$0);
    var
     _vr_=
      [0,
       [0,
        bin_shape_t$30,
        bin_size_t$36,
        bin_write_t$36,
        bin_read_t$75,
        bin_read_t$74,
        bin_writer_t$24,
        bin_reader_t$24,
        bin_t$24,
        compare$20,
        t_of_sexp$21,
        sexp_of_t$21,
        map$10]],
     _vs_=
      [0,
       [0,
        sexp_of_m_t$1,
        m_t_of_sexp$1,
        m_t_sexp_grammar$1,
        compare_m_t,
        equal_m_t$1,
        hash_fold_m_t,
        bin_shape_m_t,
        bin_size_m_t,
        bin_write_m_t,
        bin_read_m_t,
        bin_read_m_t$0,
        quickcheck_generator_m_t$1,
        quickcheck_observer_m_t$1,
        quickcheck_shrinker_m_t$1,
        function(_bsY_)
         {var
           _bsX_=
            Make_binable_using_comparator
             ([0,
               _bsY_[1],
               _bsY_[2],
               _bsY_[3],
               _bsY_[4],
               _bsY_[5],
               _bsY_[6],
               _bsY_[7],
               _bsY_[8],
               _bsY_[10],
               _bsY_[11],
               _bsY_[12]]);
          return [0,
                  _bsX_[109],
                  _bsX_[110],
                  _bsX_[111],
                  _bsX_[112],
                  _bsX_[113],
                  _bsX_[114],
                  _bsX_[115],
                  _bsX_[116],
                  _bsX_[102],
                  _bsX_[107],
                  _bsX_[103],
                  _bsX_[48]]}],
       _vr_];
    function _vt_(Key)
     {var
       _bsW_=Make_tree_plain([0,Key[2],Key[3]]),
       empty=_bsW_[4],
       of_tree=_bsW_[5],
       singleton=_bsW_[6],
       of_sorted_array_unchecked=_bsW_[7],
       of_sorted_array=_bsW_[8],
       of_increasing_iterator_uncheck=_bsW_[9],
       of_increasing_sequence=_bsW_[10],
       of_sequence=_bsW_[11],
       of_sequence_or_error=_bsW_[12],
       of_sequence_exn=_bsW_[13],
       of_sequence_multi=_bsW_[14],
       of_sequence_fold=_bsW_[15],
       of_sequence_reduce=_bsW_[16],
       of_alist=_bsW_[17],
       of_alist_or_error=_bsW_[18],
       of_alist_exn=_bsW_[19],
       of_hashtbl_exn=_bsW_[20],
       of_alist_multi=_bsW_[21],
       of_alist_fold=_bsW_[22],
       of_alist_reduce=_bsW_[23],
       of_iteri=_bsW_[24],
       of_iteri_exn=_bsW_[25],
       of_key_set=_bsW_[26],
       to_tree=_bsW_[27],
       invariants=_bsW_[28],
       is_empty=_bsW_[29],
       length=_bsW_[30],
       set=_bsW_[31],
       add=_bsW_[32],
       add_exn=_bsW_[33],
       add_multi=_bsW_[34],
       remove_multi=_bsW_[35],
       find_multi=_bsW_[36],
       change=_bsW_[37],
       update=_bsW_[38],
       find_exn=_bsW_[39],
       find=_bsW_[40],
       remove=_bsW_[41],
       mem=_bsW_[42],
       iter_keys=_bsW_[43],
       iter=_bsW_[44],
       iteri=_bsW_[45],
       iteri_until=_bsW_[46],
       iter2=_bsW_[47],
       map=_bsW_[48],
       mapi=_bsW_[49],
       fold=_bsW_[50],
       fold_until=_bsW_[51],
       fold_right=_bsW_[52],
       fold2=_bsW_[53],
       filter_keys=_bsW_[54],
       filter=_bsW_[55],
       filteri=_bsW_[56],
       filter_map=_bsW_[57],
       filter_mapi=_bsW_[58],
       partition_mapi=_bsW_[59],
       partition_map=_bsW_[60],
       partitioni_tf=_bsW_[61],
       partition_tf=_bsW_[62],
       combine_errors=_bsW_[63],
       compare_direct=_bsW_[64],
       equal=_bsW_[65],
       keys=_bsW_[66],
       data=_bsW_[67],
       to_alist=_bsW_[68],
       validate=_bsW_[69],
       validatei=_bsW_[70],
       symmetric_diff=_bsW_[71],
       fold_symmetric_diff=_bsW_[72],
       merge=_bsW_[73],
       merge_skewed=_bsW_[74],
       min_elt=_bsW_[75],
       min_elt_exn=_bsW_[76],
       max_elt=_bsW_[77],
       max_elt_exn=_bsW_[78],
       for_all=_bsW_[79],
       for_alli=_bsW_[80],
       exists=_bsW_[81],
       existsi=_bsW_[82],
       count=_bsW_[83],
       counti=_bsW_[84],
       split=_bsW_[85],
       append=_bsW_[86],
       subrange=_bsW_[87],
       fold_range_inclusive=_bsW_[88],
       range_to_alist=_bsW_[89],
       closest_key=_bsW_[90],
       nth=_bsW_[91],
       nth_exn=_bsW_[92],
       rank=_bsW_[93],
       to_sequence=_bsW_[94],
       binary_search=_bsW_[95],
       binary_search_segmented=_bsW_[96],
       binary_search_subrange=_bsW_[97],
       key_set=_bsW_[98],
       map_keys=_bsW_[99],
       map_keys_exn=_bsW_[100],
       quickcheck_generator=_bsW_[101],
       quickcheck_observer=_bsW_[102],
       quickcheck_shrinker=_bsW_[103],
       sexp_of_t=_bsW_[104],
       Provide_of_sexp=_bsW_[105],
       include=caml_call1(Provide_of_sexp,[0,Key[1]]),
       t_of_sexp=include[1];
      return [0,
              empty,
              singleton,
              map_keys,
              map_keys_exn,
              of_alist,
              of_alist_or_error,
              of_alist_exn,
              of_alist_multi,
              of_alist_fold,
              of_alist_reduce,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              of_increasing_sequence,
              of_sequence,
              of_sequence_or_error,
              of_sequence_exn,
              of_sequence_multi,
              of_sequence_fold,
              of_sequence_reduce,
              of_iteri,
              of_iteri_exn,
              of_tree,
              of_hashtbl_exn,
              of_key_set,
              quickcheck_generator,
              invariants,
              is_empty,
              length,
              add,
              add_exn,
              set,
              add_multi,
              remove_multi,
              find_multi,
              change,
              update,
              find,
              find_exn,
              remove,
              mem,
              iter_keys,
              iter,
              iteri,
              iteri_until,
              iter2,
              map,
              mapi,
              fold,
              fold_until,
              fold_right,
              fold2,
              filter_keys,
              filter,
              filteri,
              filter_map,
              filter_mapi,
              partition_mapi,
              partition_map,
              partitioni_tf,
              partition_tf,
              combine_errors,
              compare_direct,
              equal,
              keys,
              data,
              to_alist,
              merge,
              merge_skewed,
              symmetric_diff,
              fold_symmetric_diff,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              for_all,
              for_alli,
              exists,
              existsi,
              count,
              counti,
              split,
              append,
              subrange,
              fold_range_inclusive,
              range_to_alist,
              closest_key,
              nth,
              nth_exn,
              rank,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              binary_search_subrange,
              key_set,
              validate,
              validatei,
              quickcheck_observer,
              quickcheck_shrinker,
              Provide_of_sexp,
              t_of_sexp,
              sexp_of_t]}
    function _vu_(_bsU_)
     {var _bsV_=Make_tree_plain(_bsU_);
      return [0,
              _bsV_[104],
              _bsV_[4],
              _bsV_[6],
              _bsV_[99],
              _bsV_[100],
              _bsV_[17],
              _bsV_[18],
              _bsV_[19],
              _bsV_[21],
              _bsV_[22],
              _bsV_[23],
              _bsV_[8],
              _bsV_[7],
              _bsV_[9],
              _bsV_[10],
              _bsV_[11],
              _bsV_[12],
              _bsV_[13],
              _bsV_[14],
              _bsV_[15],
              _bsV_[16],
              _bsV_[24],
              _bsV_[25],
              _bsV_[5],
              _bsV_[20],
              _bsV_[26],
              _bsV_[101],
              _bsV_[28],
              _bsV_[29],
              _bsV_[30],
              _bsV_[32],
              _bsV_[33],
              _bsV_[31],
              _bsV_[34],
              _bsV_[35],
              _bsV_[36],
              _bsV_[37],
              _bsV_[38],
              _bsV_[40],
              _bsV_[39],
              _bsV_[41],
              _bsV_[42],
              _bsV_[43],
              _bsV_[44],
              _bsV_[45],
              _bsV_[46],
              _bsV_[47],
              _bsV_[48],
              _bsV_[49],
              _bsV_[50],
              _bsV_[51],
              _bsV_[52],
              _bsV_[53],
              _bsV_[54],
              _bsV_[55],
              _bsV_[56],
              _bsV_[57],
              _bsV_[58],
              _bsV_[59],
              _bsV_[60],
              _bsV_[61],
              _bsV_[62],
              _bsV_[63],
              _bsV_[64],
              _bsV_[65],
              _bsV_[66],
              _bsV_[67],
              _bsV_[68],
              _bsV_[73],
              _bsV_[74],
              _bsV_[71],
              _bsV_[72],
              _bsV_[75],
              _bsV_[76],
              _bsV_[77],
              _bsV_[78],
              _bsV_[79],
              _bsV_[80],
              _bsV_[81],
              _bsV_[82],
              _bsV_[83],
              _bsV_[84],
              _bsV_[85],
              _bsV_[86],
              _bsV_[87],
              _bsV_[88],
              _bsV_[89],
              _bsV_[90],
              _bsV_[91],
              _bsV_[92],
              _bsV_[93],
              _bsV_[27],
              _bsV_[94],
              _bsV_[95],
              _bsV_[96],
              _bsV_[97],
              _bsV_[98],
              _bsV_[69],
              _bsV_[70],
              _bsV_[102],
              _bsV_[103],
              _bsV_[105]]}
    function _vv_(_bsS_)
     {var _bsT_=Make_binable_using_comparator(_bsS_);
      return [0,
              _bsT_[108],
              _bsT_[102],
              _bsT_[2],
              _bsT_[3],
              _bsT_[4],
              _bsT_[5],
              _bsT_[9],
              _bsT_[10],
              _bsT_[11],
              _bsT_[12],
              _bsT_[13],
              _bsT_[14],
              _bsT_[6],
              _bsT_[7],
              _bsT_[8],
              _bsT_[15],
              _bsT_[16],
              _bsT_[17],
              _bsT_[18],
              _bsT_[19],
              _bsT_[20],
              _bsT_[21],
              _bsT_[22],
              _bsT_[23],
              _bsT_[24],
              _bsT_[25],
              _bsT_[26],
              _bsT_[27],
              _bsT_[28],
              _bsT_[29],
              _bsT_[30],
              _bsT_[31],
              _bsT_[32],
              _bsT_[33],
              _bsT_[34],
              _bsT_[35],
              _bsT_[36],
              _bsT_[37],
              _bsT_[38],
              _bsT_[39],
              _bsT_[40],
              _bsT_[41],
              _bsT_[42],
              _bsT_[43],
              _bsT_[44],
              _bsT_[45],
              _bsT_[46],
              _bsT_[47],
              _bsT_[48],
              _bsT_[49],
              _bsT_[50],
              _bsT_[51],
              _bsT_[52],
              _bsT_[53],
              _bsT_[54],
              _bsT_[55],
              _bsT_[56],
              _bsT_[57],
              _bsT_[58],
              _bsT_[59],
              _bsT_[60],
              _bsT_[61],
              _bsT_[62],
              _bsT_[63],
              _bsT_[64],
              _bsT_[65],
              _bsT_[66],
              _bsT_[67],
              _bsT_[68],
              _bsT_[69],
              _bsT_[70],
              _bsT_[71],
              _bsT_[72],
              _bsT_[73],
              _bsT_[74],
              _bsT_[75],
              _bsT_[76],
              _bsT_[77],
              _bsT_[78],
              _bsT_[79],
              _bsT_[80],
              _bsT_[81],
              _bsT_[82],
              _bsT_[83],
              _bsT_[84],
              _bsT_[85],
              _bsT_[86],
              _bsT_[87],
              _bsT_[88],
              _bsT_[89],
              _bsT_[90],
              _bsT_[91],
              _bsT_[92],
              _bsT_[93],
              _bsT_[94],
              _bsT_[95],
              _bsT_[96],
              _bsT_[101],
              _bsT_[97],
              _bsT_[98],
              _bsT_[99],
              _bsT_[100],
              _bsT_[104],
              _bsT_[106],
              _bsT_[105],
              _bsT_[107],
              _bsT_[103],
              _bsT_[109],
              _bsT_[110],
              _bsT_[111],
              _bsT_[112],
              _bsT_[113],
              _bsT_[114],
              _bsT_[115],
              _bsT_[116]]}
    function _vw_(Key)
     {var
       bin_size_t=Key[1],
       bin_write_t=Key[2],
       bin_read_t=Key[3],
       bin_read_t$0=Key[4],
       bin_shape_t=Key[5],
       bin_writer_t=Key[6],
       bin_reader_t=Key[7],
       bin_t=Key[8],
       t_of_sexp=Key[10],
       sexp_of_t=Key[11],
       include=caml_call1(Make,[0,Key[9],Key[11]]),
       comparator=include[1],
       _bsR_=
        Make_binable_using_comparator
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,
              _bsR_[108],
              _bsR_[102],
              _bsR_[2],
              _bsR_[3],
              _bsR_[4],
              _bsR_[5],
              _bsR_[9],
              _bsR_[10],
              _bsR_[11],
              _bsR_[12],
              _bsR_[13],
              _bsR_[14],
              _bsR_[6],
              _bsR_[7],
              _bsR_[8],
              _bsR_[15],
              _bsR_[16],
              _bsR_[17],
              _bsR_[18],
              _bsR_[19],
              _bsR_[20],
              _bsR_[21],
              _bsR_[22],
              _bsR_[23],
              _bsR_[24],
              _bsR_[25],
              _bsR_[26],
              _bsR_[27],
              _bsR_[28],
              _bsR_[29],
              _bsR_[30],
              _bsR_[31],
              _bsR_[32],
              _bsR_[33],
              _bsR_[34],
              _bsR_[35],
              _bsR_[36],
              _bsR_[37],
              _bsR_[38],
              _bsR_[39],
              _bsR_[40],
              _bsR_[41],
              _bsR_[42],
              _bsR_[43],
              _bsR_[44],
              _bsR_[45],
              _bsR_[46],
              _bsR_[47],
              _bsR_[48],
              _bsR_[49],
              _bsR_[50],
              _bsR_[51],
              _bsR_[52],
              _bsR_[53],
              _bsR_[54],
              _bsR_[55],
              _bsR_[56],
              _bsR_[57],
              _bsR_[58],
              _bsR_[59],
              _bsR_[60],
              _bsR_[61],
              _bsR_[62],
              _bsR_[63],
              _bsR_[64],
              _bsR_[65],
              _bsR_[66],
              _bsR_[67],
              _bsR_[68],
              _bsR_[69],
              _bsR_[70],
              _bsR_[71],
              _bsR_[72],
              _bsR_[73],
              _bsR_[74],
              _bsR_[75],
              _bsR_[76],
              _bsR_[77],
              _bsR_[78],
              _bsR_[79],
              _bsR_[80],
              _bsR_[81],
              _bsR_[82],
              _bsR_[83],
              _bsR_[84],
              _bsR_[85],
              _bsR_[86],
              _bsR_[87],
              _bsR_[88],
              _bsR_[89],
              _bsR_[90],
              _bsR_[91],
              _bsR_[92],
              _bsR_[93],
              _bsR_[94],
              _bsR_[95],
              _bsR_[96],
              _bsR_[101],
              _bsR_[97],
              _bsR_[98],
              _bsR_[99],
              _bsR_[100],
              _bsR_[104],
              _bsR_[106],
              _bsR_[105],
              _bsR_[107],
              _bsR_[103],
              _bsR_[109],
              _bsR_[110],
              _bsR_[111],
              _bsR_[112],
              _bsR_[113],
              _bsR_[114],
              _bsR_[115],
              _bsR_[116]]}
    function _vx_(_bsP_)
     {var _bsQ_=Make_using_comparator(_bsP_);
      return [0,
              _bsQ_[107],
              _bsQ_[102],
              _bsQ_[2],
              _bsQ_[3],
              _bsQ_[4],
              _bsQ_[5],
              _bsQ_[9],
              _bsQ_[10],
              _bsQ_[11],
              _bsQ_[12],
              _bsQ_[13],
              _bsQ_[14],
              _bsQ_[6],
              _bsQ_[7],
              _bsQ_[8],
              _bsQ_[15],
              _bsQ_[16],
              _bsQ_[17],
              _bsQ_[18],
              _bsQ_[19],
              _bsQ_[20],
              _bsQ_[21],
              _bsQ_[22],
              _bsQ_[23],
              _bsQ_[24],
              _bsQ_[25],
              _bsQ_[26],
              _bsQ_[27],
              _bsQ_[28],
              _bsQ_[29],
              _bsQ_[30],
              _bsQ_[31],
              _bsQ_[32],
              _bsQ_[33],
              _bsQ_[34],
              _bsQ_[35],
              _bsQ_[36],
              _bsQ_[37],
              _bsQ_[38],
              _bsQ_[39],
              _bsQ_[40],
              _bsQ_[41],
              _bsQ_[42],
              _bsQ_[43],
              _bsQ_[44],
              _bsQ_[45],
              _bsQ_[46],
              _bsQ_[47],
              _bsQ_[48],
              _bsQ_[49],
              _bsQ_[50],
              _bsQ_[51],
              _bsQ_[52],
              _bsQ_[53],
              _bsQ_[54],
              _bsQ_[55],
              _bsQ_[56],
              _bsQ_[57],
              _bsQ_[58],
              _bsQ_[59],
              _bsQ_[60],
              _bsQ_[61],
              _bsQ_[62],
              _bsQ_[63],
              _bsQ_[64],
              _bsQ_[65],
              _bsQ_[66],
              _bsQ_[67],
              _bsQ_[68],
              _bsQ_[69],
              _bsQ_[70],
              _bsQ_[71],
              _bsQ_[72],
              _bsQ_[73],
              _bsQ_[74],
              _bsQ_[75],
              _bsQ_[76],
              _bsQ_[77],
              _bsQ_[78],
              _bsQ_[79],
              _bsQ_[80],
              _bsQ_[81],
              _bsQ_[82],
              _bsQ_[83],
              _bsQ_[84],
              _bsQ_[85],
              _bsQ_[86],
              _bsQ_[87],
              _bsQ_[88],
              _bsQ_[89],
              _bsQ_[90],
              _bsQ_[91],
              _bsQ_[92],
              _bsQ_[93],
              _bsQ_[94],
              _bsQ_[95],
              _bsQ_[96],
              _bsQ_[101],
              _bsQ_[97],
              _bsQ_[98],
              _bsQ_[99],
              _bsQ_[100],
              _bsQ_[104],
              _bsQ_[106],
              _bsQ_[105],
              _bsQ_[108],
              _bsQ_[103]]}
    function _vy_(Key)
     {var
       t_of_sexp=Key[2],
       sexp_of_t=Key[3],
       include=caml_call1(Make,[0,Key[1],Key[3]]),
       comparator=include[1],
       _bsO_=Make_using_comparator([0,t_of_sexp,sexp_of_t,comparator]);
      return [0,
              _bsO_[107],
              _bsO_[102],
              _bsO_[2],
              _bsO_[3],
              _bsO_[4],
              _bsO_[5],
              _bsO_[9],
              _bsO_[10],
              _bsO_[11],
              _bsO_[12],
              _bsO_[13],
              _bsO_[14],
              _bsO_[6],
              _bsO_[7],
              _bsO_[8],
              _bsO_[15],
              _bsO_[16],
              _bsO_[17],
              _bsO_[18],
              _bsO_[19],
              _bsO_[20],
              _bsO_[21],
              _bsO_[22],
              _bsO_[23],
              _bsO_[24],
              _bsO_[25],
              _bsO_[26],
              _bsO_[27],
              _bsO_[28],
              _bsO_[29],
              _bsO_[30],
              _bsO_[31],
              _bsO_[32],
              _bsO_[33],
              _bsO_[34],
              _bsO_[35],
              _bsO_[36],
              _bsO_[37],
              _bsO_[38],
              _bsO_[39],
              _bsO_[40],
              _bsO_[41],
              _bsO_[42],
              _bsO_[43],
              _bsO_[44],
              _bsO_[45],
              _bsO_[46],
              _bsO_[47],
              _bsO_[48],
              _bsO_[49],
              _bsO_[50],
              _bsO_[51],
              _bsO_[52],
              _bsO_[53],
              _bsO_[54],
              _bsO_[55],
              _bsO_[56],
              _bsO_[57],
              _bsO_[58],
              _bsO_[59],
              _bsO_[60],
              _bsO_[61],
              _bsO_[62],
              _bsO_[63],
              _bsO_[64],
              _bsO_[65],
              _bsO_[66],
              _bsO_[67],
              _bsO_[68],
              _bsO_[69],
              _bsO_[70],
              _bsO_[71],
              _bsO_[72],
              _bsO_[73],
              _bsO_[74],
              _bsO_[75],
              _bsO_[76],
              _bsO_[77],
              _bsO_[78],
              _bsO_[79],
              _bsO_[80],
              _bsO_[81],
              _bsO_[82],
              _bsO_[83],
              _bsO_[84],
              _bsO_[85],
              _bsO_[86],
              _bsO_[87],
              _bsO_[88],
              _bsO_[89],
              _bsO_[90],
              _bsO_[91],
              _bsO_[92],
              _bsO_[93],
              _bsO_[94],
              _bsO_[95],
              _bsO_[96],
              _bsO_[101],
              _bsO_[97],
              _bsO_[98],
              _bsO_[99],
              _bsO_[100],
              _bsO_[104],
              _bsO_[106],
              _bsO_[105],
              _bsO_[108],
              _bsO_[103]]}
    function _vz_(_bsM_)
     {var _bsN_=Make_plain_using_comparator(_bsM_);
      return [0,
              _bsN_[1],
              _bsN_[104],
              _bsN_[105],
              _bsN_[4],
              _bsN_[5],
              _bsN_[6],
              _bsN_[7],
              _bsN_[11],
              _bsN_[12],
              _bsN_[13],
              _bsN_[14],
              _bsN_[15],
              _bsN_[16],
              _bsN_[8],
              _bsN_[9],
              _bsN_[10],
              _bsN_[17],
              _bsN_[18],
              _bsN_[19],
              _bsN_[20],
              _bsN_[21],
              _bsN_[22],
              _bsN_[23],
              _bsN_[24],
              _bsN_[25],
              _bsN_[26],
              _bsN_[27],
              _bsN_[28],
              _bsN_[29],
              _bsN_[30],
              _bsN_[31],
              _bsN_[32],
              _bsN_[33],
              _bsN_[34],
              _bsN_[35],
              _bsN_[36],
              _bsN_[37],
              _bsN_[38],
              _bsN_[39],
              _bsN_[40],
              _bsN_[41],
              _bsN_[42],
              _bsN_[43],
              _bsN_[44],
              _bsN_[45],
              _bsN_[46],
              _bsN_[47],
              _bsN_[48],
              _bsN_[49],
              _bsN_[50],
              _bsN_[51],
              _bsN_[52],
              _bsN_[53],
              _bsN_[54],
              _bsN_[55],
              _bsN_[56],
              _bsN_[57],
              _bsN_[58],
              _bsN_[59],
              _bsN_[60],
              _bsN_[61],
              _bsN_[62],
              _bsN_[63],
              _bsN_[64],
              _bsN_[65],
              _bsN_[66],
              _bsN_[67],
              _bsN_[68],
              _bsN_[69],
              _bsN_[70],
              _bsN_[71],
              _bsN_[72],
              _bsN_[73],
              _bsN_[74],
              _bsN_[75],
              _bsN_[76],
              _bsN_[77],
              _bsN_[78],
              _bsN_[79],
              _bsN_[80],
              _bsN_[81],
              _bsN_[82],
              _bsN_[83],
              _bsN_[84],
              _bsN_[85],
              _bsN_[86],
              _bsN_[87],
              _bsN_[88],
              _bsN_[89],
              _bsN_[90],
              _bsN_[91],
              _bsN_[92],
              _bsN_[93],
              _bsN_[94],
              _bsN_[95],
              _bsN_[96],
              _bsN_[97],
              _bsN_[98],
              _bsN_[103],
              _bsN_[99],
              _bsN_[100],
              _bsN_[101],
              _bsN_[102],
              _bsN_[106],
              _bsN_[108],
              _bsN_[107]]}
    var
     _vB_=
      [0,
       [0,
        t_of_sexp$22,
        sexp_of_t$24,
        t_sexp_grammar$1,
        empty$2,
        singleton$3,
        map_keys$1,
        map_keys_exn$1,
        of_alist$3,
        of_alist_or_error$3,
        of_alist_exn$3,
        of_alist_multi$3,
        of_alist_fold$1,
        of_alist_reduce$1,
        of_sorted_array$1,
        of_sorted_array_unchecked$1,
        of_increasing_iterator_uncheck$1,
        of_increasing_sequence$1,
        of_sequence$2,
        of_sequence_or_error$1,
        of_sequence_exn$1,
        of_sequence_multi$1,
        of_sequence_fold$1,
        of_sequence_reduce$1,
        of_iteri$1,
        of_iteri_exn$1,
        of_tree$1,
        of_hashtbl_exn$2,
        of_key_set$0,
        quickcheck_generator$2,
        invariants$1,
        is_empty$5,
        length$5,
        add$3,
        add_exn$2,
        set$3,
        add_multi$2,
        remove_multi$2,
        find_multi$2,
        change$2,
        update$2,
        find$4,
        find_exn$3,
        remove$3,
        mem$4,
        iter_keys$2,
        iter$9,
        iteri$3,
        iteri_until$1,
        iter2$1,
        map$13,
        mapi$3,
        fold$6,
        fold_until$3,
        fold_right$2,
        fold2$1,
        filter_keys$2,
        filter$6,
        filteri$3,
        filter_map$5,
        filter_mapi$3,
        partition_mapi$2,
        partition_map$2,
        partitioni_tf$3,
        partition_tf$3,
        combine_errors$1,
        compare_direct$1,
        equal$8,
        keys$3,
        data$2,
        to_alist$2,
        merge$3,
        merge_skewed$0,
        symmetric_diff$1,
        fold_symmetric_diff$1,
        min_elt$3,
        min_elt_exn$1,
        max_elt$3,
        max_elt_exn$1,
        for_all$6,
        for_alli$3,
        exists$6,
        existsi$3,
        count$4,
        counti$3,
        split$1,
        append$2,
        subrange$1,
        fold_range_inclusive$1,
        range_to_alist$1,
        closest_key$1,
        nth$1,
        nth_exn$1,
        rank$1,
        to_tree$2,
        to_sequence$2,
        binary_search$2,
        binary_search_segmented$2,
        binary_search_subrange$1,
        key_set$2,
        validate$2,
        validatei$1,
        quickcheck_observer$2,
        quickcheck_shrinker$2],
       bin_shape_t$31,
       bin_size_t$37,
       bin_write_t$37,
       bin_read_t$76,
       bin_read_t$77,
       bin_writer_t$25,
       bin_reader_t$25,
       bin_t$25,
       _uN_,
       sexp_of_t$23,
       t_sexp_grammar$0,
       compare$21,
       _uO_,
       _uP_,
       _uQ_,
       _uR_,
       _uV_,
       _uW_,
       _uX_,
       _uY_,
       _uZ_,
       _u0_,
       _uS_,
       _uT_,
       _uU_,
       _u1_,
       _u2_,
       _u3_,
       _u4_,
       _u5_,
       _u6_,
       _u7_,
       _u8_,
       _u9_,
       _u__,
       _u$_,
       _va_,
       _vb_,
       invariants,
       is_empty$3,
       length$3,
       add$1,
       add_exn$0,
       set$1,
       add_multi$0,
       remove_multi$0,
       find_multi$0,
       change$0,
       update$0,
       find$2,
       find_exn$1,
       remove$1,
       mem$2,
       iter_keys$0,
       iter$6,
       iteri$1,
       iteri_until,
       iter2,
       map$11,
       mapi$1,
       fold$4,
       fold_until$1,
       fold_right$0,
       fold2,
       filter_keys$0,
       filter$4,
       filteri$1,
       filter_map$3,
       filter_mapi$1,
       partition_mapi$0,
       partition_map$0,
       partitioni_tf$1,
       partition_tf$1,
       combine_errors,
       compare_direct,
       equal$6,
       keys$1,
       data$0,
       to_alist$0,
       merge$1,
       merge_skewed,
       symmetric_diff,
       fold_symmetric_diff,
       min_elt$1,
       min_elt_exn,
       max_elt$1,
       max_elt_exn,
       for_all$4,
       for_alli$1,
       exists$4,
       existsi$1,
       count$2,
       counti$1,
       split,
       append$0,
       subrange,
       fold_range_inclusive,
       range_to_alist,
       closest_key,
       nth,
       nth_exn,
       rank,
       to_tree$0,
       to_sequence$0,
       binary_search$0,
       binary_search_segmented$0,
       binary_search_subrange,
       key_set$1,
       validate$0,
       validatei,
       quickcheck_observer$1,
       quickcheck_shrinker$1];
    function _vA_(Key)
     {var
       sexp_of_t=Key[2],
       include=caml_call1(Make,Key),
       comparator=include[1],
       _bsL_=Make_plain_using_comparator([0,sexp_of_t,comparator]);
      return [0,
              _bsL_[1],
              _bsL_[104],
              _bsL_[105],
              _bsL_[4],
              _bsL_[5],
              _bsL_[6],
              _bsL_[7],
              _bsL_[11],
              _bsL_[12],
              _bsL_[13],
              _bsL_[14],
              _bsL_[15],
              _bsL_[16],
              _bsL_[8],
              _bsL_[9],
              _bsL_[10],
              _bsL_[17],
              _bsL_[18],
              _bsL_[19],
              _bsL_[20],
              _bsL_[21],
              _bsL_[22],
              _bsL_[23],
              _bsL_[24],
              _bsL_[25],
              _bsL_[26],
              _bsL_[27],
              _bsL_[28],
              _bsL_[29],
              _bsL_[30],
              _bsL_[31],
              _bsL_[32],
              _bsL_[33],
              _bsL_[34],
              _bsL_[35],
              _bsL_[36],
              _bsL_[37],
              _bsL_[38],
              _bsL_[39],
              _bsL_[40],
              _bsL_[41],
              _bsL_[42],
              _bsL_[43],
              _bsL_[44],
              _bsL_[45],
              _bsL_[46],
              _bsL_[47],
              _bsL_[48],
              _bsL_[49],
              _bsL_[50],
              _bsL_[51],
              _bsL_[52],
              _bsL_[53],
              _bsL_[54],
              _bsL_[55],
              _bsL_[56],
              _bsL_[57],
              _bsL_[58],
              _bsL_[59],
              _bsL_[60],
              _bsL_[61],
              _bsL_[62],
              _bsL_[63],
              _bsL_[64],
              _bsL_[65],
              _bsL_[66],
              _bsL_[67],
              _bsL_[68],
              _bsL_[69],
              _bsL_[70],
              _bsL_[71],
              _bsL_[72],
              _bsL_[73],
              _bsL_[74],
              _bsL_[75],
              _bsL_[76],
              _bsL_[77],
              _bsL_[78],
              _bsL_[79],
              _bsL_[80],
              _bsL_[81],
              _bsL_[82],
              _bsL_[83],
              _bsL_[84],
              _bsL_[85],
              _bsL_[86],
              _bsL_[87],
              _bsL_[88],
              _bsL_[89],
              _bsL_[90],
              _bsL_[91],
              _bsL_[92],
              _bsL_[93],
              _bsL_[94],
              _bsL_[95],
              _bsL_[96],
              _bsL_[97],
              _bsL_[98],
              _bsL_[103],
              _bsL_[99],
              _bsL_[100],
              _bsL_[101],
              _bsL_[102],
              _bsL_[106],
              _bsL_[108],
              _bsL_[107]]}
    var
     _vC_=Base_Map[2],
     Core_Map=
      [0,
       invariants$0,
       comparator,
       comparator_s,
       empty$1,
       singleton$2,
       of_alist$2,
       of_alist_or_error$2,
       of_alist_exn$2,
       of_hashtbl_exn$1,
       of_alist_multi$2,
       of_alist_fold$0,
       of_alist_reduce$0,
       of_iteri$0,
       of_iteri_exn$0,
       [0,
        sexp_of_t$25,
        empty$3,
        singleton$4,
        map_keys$2,
        map_keys_exn$2,
        of_alist$4,
        of_alist_or_error$4,
        of_alist_exn$4,
        of_alist_multi$4,
        of_alist_fold$2,
        of_alist_reduce$2,
        of_sorted_array$2,
        of_sorted_array_unchecked$2,
        of_increasing_iterator_uncheck$2,
        of_increasing_sequence$2,
        of_sequence$3,
        of_sequence_or_error$2,
        of_sequence_exn$2,
        of_sequence_multi$2,
        of_sequence_fold$2,
        of_sequence_reduce$2,
        of_iteri$2,
        of_iteri_exn$2,
        of_tree$2,
        of_hashtbl_exn$0,
        of_key_set,
        quickcheck_generator$3,
        invariants$2,
        is_empty$6,
        length$6,
        add$4,
        add_exn$3,
        set$4,
        add_multi$3,
        remove_multi$3,
        find_multi$3,
        change$3,
        update$3,
        find$5,
        find_exn$4,
        remove$4,
        mem$5,
        iter_keys$3,
        iter$10,
        iteri$4,
        iteri_until$2,
        iter2$2,
        map$14,
        mapi$4,
        fold$7,
        fold_until$4,
        fold_right$3,
        fold2$2,
        filter_keys$3,
        filter$7,
        filteri$4,
        filter_map$6,
        filter_mapi$4,
        partition_mapi$3,
        partition_map$3,
        partitioni_tf$4,
        partition_tf$4,
        combine_errors$2,
        compare_direct$2,
        equal$9,
        keys$4,
        data$3,
        to_alist$3,
        merge$4,
        merge_skewed$1,
        symmetric_diff$2,
        fold_symmetric_diff$2,
        min_elt$4,
        min_elt_exn$2,
        max_elt$4,
        max_elt_exn$2,
        for_all$7,
        for_alli$4,
        exists$7,
        existsi$4,
        count$5,
        counti$4,
        split$2,
        append$3,
        subrange$2,
        fold_range_inclusive$2,
        range_to_alist$2,
        closest_key$2,
        nth$2,
        nth_exn$2,
        rank$2,
        to_tree$3,
        to_sequence$3,
        binary_search$3,
        binary_search_segmented$3,
        binary_search_subrange$2,
        key_set$0,
        validate$3,
        validatei$2,
        quickcheck_observer$3,
        quickcheck_shrinker$3],
       to_tree$1,
       of_tree$0,
       of_sorted_array$0,
       of_sorted_array_unchecked$0,
       of_increasing_iterator_uncheck$0,
       of_increasing_sequence$0,
       of_sequence$1,
       of_sequence_or_error$0,
       of_sequence_exn$0,
       of_sequence_multi$0,
       of_sequence_fold$0,
       of_sequence_reduce$0,
       is_empty$4,
       length$4,
       add$2,
       add_exn$1,
       set$2,
       add_multi$1,
       remove_multi$1,
       find_multi$1,
       change$1,
       update$1,
       find$3,
       find_exn$2,
       find_or_error,
       remove$2,
       mem$3,
       iter_keys$1,
       iter$7,
       iteri$2,
       Base_Map_intf[7],
       Base_Map[1],
       iteri_until$0,
       [0,_vC_[4],_vC_[5],_vC_[6],_vC_[7],_vC_[8]],
       iter2$0,
       map$12,
       mapi$2,
       map_keys$0,
       map_keys_exn$0,
       fold$5,
       fold_until$2,
       fold_right$1,
       fold2$0,
       filter_keys$1,
       filter$5,
       filteri$2,
       filter_map$4,
       filter_mapi$2,
       partition_mapi$1,
       partition_map$1,
       partitioni_tf$2,
       partition_tf$2,
       combine_errors$0,
       compare_direct$0,
       hash_fold_direct,
       equal$7,
       keys$2,
       data$1,
       to_alist$1,
       validate$1,
       validatei$0,
       merge$2,
       _uK_,
       [0,
        bin_shape_t$30,
        bin_size_t$36,
        bin_write_t$36,
        bin_read_t$75,
        bin_read_t$74,
        bin_writer_t$24,
        bin_reader_t$24,
        bin_t$24,
        compare$20,
        t_of_sexp$21,
        sexp_of_t$21,
        map_data,
        left,
        right],
       symmetric_diff$0,
       fold_symmetric_diff$0,
       min_elt$2,
       min_elt_exn$0,
       max_elt$2,
       max_elt_exn$0,
       for_all$5,
       for_alli$2,
       exists$5,
       existsi$2,
       count$3,
       counti$2,
       split$0,
       append$1,
       subrange$0,
       fold_range_inclusive$0,
       range_to_alist$0,
       closest_key$0,
       nth$0,
       nth_exn$0,
       rank$0,
       to_sequence$1,
       binary_search$1,
       binary_search_segmented$1,
       binary_search_subrange$0,
       to_map,
       of_map_keys,
       quickcheck_generator$1,
       quickcheck_observer$0,
       quickcheck_shrinker$0,
       [0,
        empty$0,
        singleton$1,
        map_keys,
        map_keys_exn,
        of_alist$1,
        of_alist_or_error$1,
        of_alist_exn$1,
        of_alist_multi$1,
        of_alist_fold,
        of_alist_reduce,
        of_sorted_array,
        of_sorted_array_unchecked,
        of_increasing_iterator_uncheck,
        of_increasing_sequence,
        of_sequence$0,
        of_sequence_or_error,
        of_sequence_exn,
        of_sequence_multi,
        of_sequence_fold,
        of_sequence_reduce,
        of_iteri,
        of_iteri_exn,
        of_tree,
        of_hashtbl_exn,
        to_map,
        quickcheck_generator$0],
       _vB_,
       _vA_,
       _vz_,
       _vy_,
       _vx_,
       _vw_,
       _vv_,
       sexp_of_m_t$1,
       m_t_of_sexp$1,
       m_t_sexp_grammar$1,
       compare_m_t,
       equal_m_t$1,
       hash_fold_m_t,
       bin_shape_m_t,
       bin_size_m_t,
       bin_write_m_t,
       bin_read_m_t,
       bin_read_m_t$0,
       quickcheck_generator_m_t$1,
       quickcheck_observer_m_t$1,
       quickcheck_shrinker_m_t$1,
       _vu_,
       _vt_,
       _vs_];
    caml_register_global(5282,Core_Map,"Core__Map");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Maybe_bound);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$116);
    caml_call1(Expect_test_collector[5][1],cst_core_src_maybe_bound_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$117,cst$39);
    var
     _vE_=caml_call1(Bin_prot_Shape[3][1],cst_a$38),
     _vF_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_maybe_bound_ml_7_),
     _vG_=[0,[0,cst_Excl,[0,caml_call2(Bin_prot_Shape[15],_vF_,_vE_),0]],_vD_],
     _vH_=caml_call1(Bin_prot_Shape[3][1],cst_a$39),
     _vI_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_maybe_bound_ml_6_),
     _vJ_=[0,[0,cst_Incl,[0,caml_call2(Bin_prot_Shape[15],_vI_,_vH_),0]],_vG_],
     _vK_=caml_call1(Bin_prot_Shape[9],_vJ_),
     _vL_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$40),0],
     _vM_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$86),_vL_,_vK_],0],
     _vN_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_maybe_bound_ml_5_),
     group$40=caml_call2(Bin_prot_Shape[6],_vN_,_vM_);
    function bin_shape_t$32(a)
     {var _bsK_=caml_call1(Bin_prot_Shape[2][1],cst_t$87);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$40,_bsK_),[0,a,0])}
    function bin_size_t$38(size_of_a,param)
     {if(typeof param === "number")
       return 1;
      else
       {if(0 === param[0])
         {var v1=param[1],_bsI_=caml_call1(size_of_a,v1);
          return caml_call2(Bin_prot_Common[23],1,_bsI_)}
        var v1$0=param[1],_bsJ_=caml_call1(size_of_a,v1$0);
        return caml_call2(Bin_prot_Common[23],1,_bsJ_)}}
    function bin_write_t$38(write_a,buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[31],buf,pos,2);
      else
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
          return caml_call3(write_a,buf,pos$0,v1)}
        var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,1);
        return caml_call3(write_a,buf,pos$1,v1$0)}}
    function bin_writer_t$26(bin_writer_a)
     {function _bsE_(v)
       {var _bsF_=bin_writer_a[2];
        return function(_bsG_,_bsH_)
         {return bin_write_t$38(_bsF_,v,_bsG_,_bsH_)}}
      return [0,function(v){return bin_size_t$38(bin_writer_a[1],v)},_bsE_]}
    function bin_read_t$78(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_maybe_bound_ml_St,pos_ref[1])}
    function bin_read_t$79(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_vO_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1];
        case 1:var arg_1$0=caml_call2(of_a,buf,pos_ref);return [1,arg_1$0];
        default:return 0}}
    function bin_reader_t$26(bin_reader_a)
     {function _bsD_(buf,pos_ref,vtag)
       {return bin_read_t$78(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$79(bin_reader_a[1],buf,pos_ref)},
              _bsD_]}
    function bin_t$26(bin_a)
     {var _bsB_=bin_reader_t$26(bin_a[3]),_bsC_=bin_writer_t$26(bin_a[2]);
      return [0,bin_shape_t$32(bin_a[1]),_bsC_,_bsB_]}
    function compare$22(cmp_a,a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      if(typeof a_001 === "number")
       {if(typeof b_002 === "number")return 0;else if(1 === b_002[0])return 1}
      else
       {if(0 === a_001[0])
         {var _bsz_=a_001[1];
          if(typeof b_002 !== "number" && 0 === b_002[0])
           {var b_004=b_002[1];return caml_call2(cmp_a,_bsz_,b_004)}
          return -1}
        var _bsA_=a_001[1];
        if(typeof b_002 === "number")
         return -1;
        else
         if(0 !== b_002[0])
          {var b_006=b_002[1];return caml_call2(cmp_a,_bsA_,b_006)}}
      return 1}
    function t_of_sexp$23(of_a_007,sexp_012)
     {if(0 === sexp_012[0])
       {var _bsv_=sexp_012[1],switch$0=0;
        if(caml_string_notequal(_bsv_,cst_Excl$0))
         {var switch$1=0;
          if(caml_string_notequal(_bsv_,cst_Incl$0))
           {var switch$2=0;
            if(caml_string_notequal(_bsv_,cst_Unbounded))
             if(caml_string_notequal(_bsv_,cst_excl))
              if(caml_string_notequal(_bsv_,cst_incl))
               {if(caml_string_notequal(_bsv_,cst_unbounded))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 0}
          if(! switch$1)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_010,sexp_012)}
        if(! switch$0)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],error_source_010,sexp_012)}
      else
       {var _bsw_=sexp_012[1];
        if(! _bsw_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_010,sexp_012);
        var _bsx_=_bsw_[1];
        if(0 !== _bsx_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_010,sexp_012);
        var _bsy_=_bsx_[1],switch$3=0;
        if(caml_string_notequal(_bsy_,cst_Excl$1))
         {var switch$4=0;
          if(caml_string_notequal(_bsy_,cst_Incl$1))
           {var switch$5=0;
            if(caml_string_notequal(_bsy_,cst_Unbounded$0))
             if(caml_string_notequal(_bsy_,cst_excl$0))
              if(caml_string_notequal(_bsy_,cst_incl$0))
               {if(caml_string_notequal(_bsy_,cst_unbounded$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3],error_source_010,sexp_012)}
          if(! switch$4)
           {var sexp_args_014=_bsw_[2];
            if(sexp_args_014 && ! sexp_args_014[2])
             {var
               arg0_015=sexp_args_014[1],
               res0_016=caml_call1(of_a_007,arg0_015);
              return [0,res0_016]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_010,
                     _bsy_,
                     sexp_012)}}
        if(! switch$3)
         {var sexp_args_019=_bsw_[2];
          if(sexp_args_019 && ! sexp_args_019[2])
           {var
             arg0_020=sexp_args_019[1],
             res0_021=caml_call1(of_a_007,arg0_020);
            return [1,res0_021]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_010,
                   _bsy_,
                   sexp_012)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_010,sexp_012)}
    function sexp_of_t$26(of_a_023,param)
     {if(typeof param === "number")
       return _vP_;
      else
       {if(0 === param[0])
         {var arg0_024=param[1],res0_025=caml_call1(of_a_023,arg0_024);
          return [1,[0,_vQ_,[0,res0_025,0]]]}
        var arg0_026=param[1],res0_027=caml_call1(of_a_023,arg0_026);
        return [1,[0,_vR_,[0,res0_027,0]]]}}
    function map$15(x,f)
     {if(typeof x === "number")
       return 0;
      else
       {if(0 === x[0]){var x$0=x[1];return [0,caml_call1(f,x$0)]}
        var x$1=x[1];
        return [1,caml_call1(f,x$1)]}}
    var
     _vS_=include$37[1],
     _vT_=include$37[4],
     _vU_=include$37[5],
     _vV_=include$37[6],
     _vW_=include$37[7],
     _vX_=include$37[8],
     _vY_=include$37[9],
     _vZ_=include$37[10],
     _v0_=include$37[11],
     _v1_=include$37[12],
     _v2_=include$37[13],
     _v3_=include$37[14],
     _v4_=include$37[15],
     _v5_=include$37[16],
     _v7_=caml_call1(Bin_prot_Shape[3][1],cst_a$41),
     _v8_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_maybe_bound_ml_24),
     _v9_=
      [0,[0,cst_Excl$2,[0,caml_call2(Bin_prot_Shape[15],_v8_,_v7_),0]],_v6_],
     _v__=caml_call1(Bin_prot_Shape[3][1],cst_a$42),
     _v$_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_maybe_bound_ml_23),
     _wa_=
      [0,[0,cst_Incl$2,[0,caml_call2(Bin_prot_Shape[15],_v$_,_v__),0]],_v9_],
     _wb_=caml_call1(Bin_prot_Shape[9],_wa_),
     _wc_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$43),0],
     _wd_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$88),_wc_,_wb_],0],
     _we_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_maybe_bound_ml_22),
     group$41=caml_call2(Bin_prot_Shape[6],_we_,_wd_);
    function bin_shape_t$33(a)
     {var _bsu_=caml_call1(Bin_prot_Shape[2][1],cst_t$89);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$41,_bsu_),[0,a,0])}
    function bin_size_t$39(size_of_a,param)
     {if(typeof param === "number")
       return 1;
      else
       {if(0 === param[0])
         {var v1=param[1],_bss_=caml_call1(size_of_a,v1);
          return caml_call2(Bin_prot_Common[23],1,_bss_)}
        var v1$0=param[1],_bst_=caml_call1(size_of_a,v1$0);
        return caml_call2(Bin_prot_Common[23],1,_bst_)}}
    function bin_write_t$39(write_a,buf,pos,param)
     {if(typeof param === "number")
       return caml_call3(Bin_prot_Write[31],buf,pos,2);
      else
       {if(0 === param[0])
         {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
          return caml_call3(write_a,buf,pos$0,v1)}
        var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,1);
        return caml_call3(write_a,buf,pos$1,v1$0)}}
    function bin_writer_t$27(bin_writer_a)
     {function _bso_(v)
       {var _bsp_=bin_writer_a[2];
        return function(_bsq_,_bsr_)
         {return bin_write_t$39(_bsp_,v,_bsq_,_bsr_)}}
      return [0,function(v){return bin_size_t$39(bin_writer_a[1],v)},_bso_]}
    function bin_read_t$80(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_maybe_bound_ml_t,pos_ref[1])}
    function bin_read_t$81(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_wf_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=caml_call2(of_a,buf,pos_ref);return [0,arg_1];
        case 1:var arg_1$0=caml_call2(of_a,buf,pos_ref);return [1,arg_1$0];
        default:return 0}}
    function bin_reader_t$27(bin_reader_a)
     {function _bsn_(buf,pos_ref,vtag)
       {return bin_read_t$80(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$81(bin_reader_a[1],buf,pos_ref)},
              _bsn_]}
    function bin_t$27(bin_a)
     {var _bsl_=bin_reader_t$27(bin_a[3]),_bsm_=bin_writer_t$27(bin_a[2]);
      return [0,bin_shape_t$33(bin_a[1]),_bsm_,_bsl_]}
    function quickcheck_generator$4(generator_044)
     {var _bse_=0;
      function _bsf_(size_049,random_050){return 0}
      var
       _bsg_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bsf_)],_bse_];
      function _bsh_(size_047,random_048)
       {return [1,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_044,
                  size_047,
                  random_048)]}
      var
       _bsi_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bsh_)],_bsg_];
      function _bsj_(size_045,random_046)
       {return [0,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  generator_044,
                  size_045,
                  random_046)]}
      var
       _bsk_=
        [0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_bsj_)],_bsi_];
      return caml_call1(Base_quickcheck_Generator[60],_bsk_)}
    function quickcheck_observer$4(observer_038)
     {function _bsd_(x_039,size_040,hash_041)
       {if(typeof x_039 === "number")
         {var hash_041$0=caml_call2(Base[116],hash_041,2);return hash_041$0}
        else
         {if(0 === x_039[0])
           {var
             x_042=x_039[1],
             hash_041$1=caml_call2(Base[116],hash_041,0),
             hash_041$2=
              caml_call4
               (Base_quickcheck_Observer[37],
                observer_038,
                x_042,
                size_040,
                hash_041$1);
            return hash_041$2}
          var
           x_043=x_039[1],
           hash_041$3=caml_call2(Base[116],hash_041,1),
           hash_041$4=
            caml_call4
             (Base_quickcheck_Observer[37],
              observer_038,
              x_043,
              size_040,
              hash_041$3);
          return hash_041$4}}
      return caml_call1(Base_quickcheck_Observer[36],_bsd_)}
    function quickcheck_shrinker$4(shrinker_035)
     {function _br6_(param)
       {if(typeof param === "number")
         return caml_call1(include$9[68],0);
        else
         {if(0 === param[0])
           {var
             x_036=param[1],
             _br7_=0,
             _br8_=function(x_036){return [0,x_036]},
             _br9_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_035,x_036),
             _br__=[0,caml_call2(include$9[32],_br9_,_br8_),_br7_];
            return caml_call1(include$9[68],_br__)}
          var
           x_037=param[1],
           _br$_=0,
           _bsa_=function(x_037){return [1,x_037]},
           _bsb_=caml_call2(Base_quickcheck_Shrinker[37],shrinker_035,x_037),
           _bsc_=[0,caml_call2(include$9[32],_bsb_,_bsa_),_br$_];
          return caml_call1(include$9[68],_bsc_)}}
      return caml_call1(Base_quickcheck_Shrinker[36],_br6_)}
    function t_of_sexp$24(of_a_051,sexp_056)
     {if(0 === sexp_056[0])
       {var _br2_=sexp_056[1],switch$0=0;
        if(caml_string_notequal(_br2_,cst_Excl$3))
         {var switch$1=0;
          if(caml_string_notequal(_br2_,cst_Incl$3))
           {var switch$2=0;
            if(caml_string_notequal(_br2_,cst_Unbounded$1))
             if(caml_string_notequal(_br2_,cst_excl$1))
              if(caml_string_notequal(_br2_,cst_incl$1))
               {if(caml_string_notequal(_br2_,cst_unbounded$1))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 0}
          if(! switch$1)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_054,sexp_056)}
        if(! switch$0)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],error_source_054,sexp_056)}
      else
       {var _br3_=sexp_056[1];
        if(! _br3_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_054,sexp_056);
        var _br4_=_br3_[1];
        if(0 !== _br4_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_054,sexp_056);
        var _br5_=_br4_[1],switch$3=0;
        if(caml_string_notequal(_br5_,cst_Excl$4))
         {var switch$4=0;
          if(caml_string_notequal(_br5_,cst_Incl$4))
           {var switch$5=0;
            if(caml_string_notequal(_br5_,cst_Unbounded$2))
             if(caml_string_notequal(_br5_,cst_excl$2))
              if(caml_string_notequal(_br5_,cst_incl$2))
               {if(caml_string_notequal(_br5_,cst_unbounded$2))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3],error_source_054,sexp_056)}
          if(! switch$4)
           {var sexp_args_058=_br3_[2];
            if(sexp_args_058 && ! sexp_args_058[2])
             {var
               arg0_059=sexp_args_058[1],
               res0_060=caml_call1(of_a_051,arg0_059);
              return [0,res0_060]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_054,
                     _br5_,
                     sexp_056)}}
        if(! switch$3)
         {var sexp_args_063=_br3_[2];
          if(sexp_args_063 && ! sexp_args_063[2])
           {var
             arg0_064=sexp_args_063[1],
             res0_065=caml_call1(of_a_051,arg0_064);
            return [1,res0_065]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_054,
                   _br5_,
                   sexp_056)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_054,sexp_056)}
    function sexp_of_t$27(of_a_067,param)
     {if(typeof param === "number")
       return _wg_;
      else
       {if(0 === param[0])
         {var arg0_068=param[1],res0_069=caml_call1(of_a_067,arg0_068);
          return [1,[0,_wh_,[0,res0_069,0]]]}
        var arg0_070=param[1],res0_071=caml_call1(of_a_067,arg0_070);
        return [1,[0,_wi_,[0,res0_071,0]]]}}
    function compare_one_sided(side,compare_a,t1,t2)
     {if(typeof t1 === "number")
       return typeof t2 === "number"?0:996968770 <= side?1:-1;
      else
       if(0 === t1[0])
        {var _br0_=t1[1];
         if(typeof t2 !== "number")
          {if(0 === t2[0]){var a2=t2[1];return caml_call2(compare_a,_br0_,a2)}
           var a2$0=t2[1],c=caml_call2(compare_a,_br0_,a2$0);
           return 0 === c?996968770 <= side?1:-1:c}}
       else
        {var _br1_=t1[1];
         if(typeof t2 !== "number")
          {if(0 === t2[0])
            {var a2$1=t2[1],c$0=caml_call2(compare_a,_br1_,a2$1);
             return 0 === c$0?996968770 <= side?-1:1:c$0}
           var a2$2=t2[1];
           return caml_call2(compare_a,_br1_,a2$2)}}
      return 996968770 <= side?-1:1}
    function compare$23(compare_a,t1,t2)
     {return compare_one_sided(204302817,compare_a,t1,t2)}
    var As_lower_bound=[0,compare$23];
    function compare$24(compare_a,t1,t2)
     {return compare_one_sided(996968770,compare_a,t1,t2)}
    var As_upper_bound=[0,compare$24];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$118);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Maybe_bound$0);
    var
     Core_Maybe_bound=
      [0,
       bin_shape_t$33,
       bin_size_t$39,
       bin_write_t$39,
       bin_read_t$81,
       bin_read_t$80,
       bin_writer_t$27,
       bin_reader_t$27,
       bin_t$27,
       quickcheck_generator$4,
       quickcheck_observer$4,
       quickcheck_shrinker$4,
       _vS_,
       t_of_sexp$24,
       sexp_of_t$27,
       _vT_,
       _vU_,
       _vV_,
       _vW_,
       _vX_,
       _vY_,
       _vZ_,
       _v0_,
       _v1_,
       _v2_,
       _v3_,
       _v4_,
       _v5_,
       As_lower_bound,
       As_upper_bound,
       [0,
        [0,
         bin_shape_t$32,
         bin_size_t$38,
         bin_write_t$38,
         bin_read_t$79,
         bin_read_t$78,
         bin_writer_t$26,
         bin_reader_t$26,
         bin_t$26,
         compare$22,
         t_of_sexp$23,
         sexp_of_t$26,
         map$15]]];
    caml_register_global(5284,Core_Maybe_bound,"Core__Maybe_bound");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Set_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$119);
    caml_call1(Expect_test_collector[5][1],cst_core_src_set_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$120,cst$40);
    var Elt_bin_io=[0];
    function Check_accessors$0(T,Tree,Elt,Named,Cmp,Options,symbol)
     {return [0]}
    function Check_accessors0(M){return [0]}
    function Check_accessors1$0(M){return [0]}
    function Check_accessors2$0(M){return [0]}
    function Check_accessors2_with_comparat(M){return [0]}
    function Check_creators$0(T,Tree,Elt,Cmp,Options,symbol){return [0]}
    function Check_creators0(M){return [0]}
    function Check_creators1$0(M){return [0]}
    function Check_creators2$0(M){return [0]}
    function Check_creators2_with_comparato(M){return [0]}
    function Make_S_plain_tree$0(Elt){return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$121);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Set_intf$0);
    var
     Core_Set_intf=
      [0,
       Elt_bin_io,
       Check_accessors$0,
       Check_accessors0,
       Check_accessors1$0,
       Check_accessors2$0,
       Check_accessors2_with_comparat,
       Check_creators$0,
       Check_creators0,
       Check_creators1$0,
       Check_creators2$0,
       Check_creators2_with_comparato,
       Make_S_plain_tree$0];
    caml_register_global(5285,Core_Set_intf,"Core__Set_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Set);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$122);
    caml_call1(Expect_test_collector[5][1],cst_core_src_set_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$123,cst$41);
    function quickcheck_generator$5(comparator,elt_gen)
     {return caml_call2(Base_quickcheck_Generator[27],[0,comparator],elt_gen)}
    function gen_tree$0(comparator,elt_gen)
     {return caml_call2(Base_quickcheck_Generator[29],comparator,elt_gen)}
    function quickcheck_observer$5(elt_obs)
     {return caml_call1(Base_quickcheck_Observer[29],elt_obs)}
    function obs_tree$0(elt_obs)
     {return caml_call1(Base_quickcheck_Observer[31],elt_obs)}
    function quickcheck_shrinker$5(elt_shr)
     {return caml_call1(Base_quickcheck_Shrinker[28],elt_shr)}
    function shr_tree$0(comparator,elt_shr)
     {return caml_call2(Base_quickcheck_Shrinker[30],comparator,elt_shr)}
    function quickcheck_generator$6(m,elt_gen)
     {return quickcheck_generator$5(m[1],elt_gen)}
    var
     include$38=Base_Set[74][3],
     sexp_of_t$28=include$38[1],
     t_of_sexp_direct$0=include$38[2],
     Named=include$38[3],
     length$7=include$38[4],
     is_empty$7=include$38[5],
     iter$11=include$38[6],
     fold$8=include$38[7],
     fold_result$1=include$38[8],
     exists$8=include$38[9],
     for_all$8=include$38[10],
     count$6=include$38[11],
     sum$1=include$38[12],
     find$6=include$38[13],
     find_map$1=include$38[14],
     to_list$3=include$38[15],
     to_array$1=include$38[16],
     invariants$3=include$38[17],
     mem$6=include$38[18],
     add$5=include$38[19],
     remove$5=include$38[20],
     union$1=include$38[21],
     inter$0=include$38[22],
     diff$0=include$38[23],
     symmetric_diff$3=include$38[24],
     compare_direct$3=include$38[25],
     equal$10=include$38[26],
     is_subset=include$38[27],
     are_disjoint=include$38[28],
     fold_until$5=include$38[29],
     fold_right$4=include$38[30],
     iter2$3=include$38[31],
     filter$8=include$38[32],
     partition_tf$5=include$38[33],
     elements=include$38[34],
     min_elt$5=include$38[35],
     min_elt_exn$3=include$38[36],
     max_elt$5=include$38[37],
     max_elt_exn$3=include$38[38],
     choose$0=include$38[39],
     choose_exn$0=include$38[40],
     split$3=include$38[41],
     group_by=include$38[42],
     find_exn$5=include$38[43],
     nth$3=include$38[44],
     remove_index=include$38[45],
     to_tree$4=include$38[46],
     to_sequence$4=include$38[47],
     binary_search$4=include$38[48],
     binary_search_segmented$4=include$38[49],
     merge_to_sequence=include$38[50],
     empty$4=include$38[51],
     singleton$5=include$38[52],
     union_list=include$38[53],
     of_list$3=include$38[54],
     of_sequence$4=include$38[55],
     of_array=include$38[56],
     of_sorted_array$3=include$38[57],
     of_sorted_array_unchecked$3=include$38[58],
     of_increasing_iterator_uncheck$3=include$38[59],
     stable_dedup_list=include$38[60],
     map$16=include$38[61],
     filter_map$7=include$38[62],
     of_tree$3=include$38[63],
     empty$5=include$38[64];
    function to_map$0(comparator,t)
     {var _brY_=caml_call2(Base_Set[74][64],comparator,t);
      return function(_brZ_){return to_map(_brY_,_brZ_)}}
    function of_map_keys$0(m)
     {var _brX_=of_map_keys(m);return caml_call1(Base_Set[74][47],_brX_)}
    function of_hash_set(comparator,hset)
     {function _brW_(t,x){return caml_call3(add$5,comparator,t,x)}
      return caml_call3(fold$3,hset,caml_call1(empty$4,comparator),_brW_)}
    function of_hashtbl_keys$0(comparator,hashtbl)
     {function _brU_(x,param,t){return caml_call3(add$5,comparator,t,x)}
      var _brV_=caml_call1(empty$4,comparator);
      return caml_call3(Core_Hashtbl[18],hashtbl,_brV_,_brU_)}
    var
     _wj_=Base_Set[74],
     merge_to_sequence$0=_wj_[51],
     binary_search_segmented$5=_wj_[50],
     binary_search$5=_wj_[49],
     to_sequence$5=_wj_[48],
     to_tree$5=_wj_[47],
     remove_index$0=_wj_[46],
     nth$4=_wj_[45],
     find_exn$6=_wj_[44],
     group_by$0=_wj_[43],
     split$4=_wj_[42],
     choose_exn$1=_wj_[41],
     choose$1=_wj_[40],
     max_elt_exn$4=_wj_[39],
     max_elt$6=_wj_[38],
     min_elt_exn$4=_wj_[37],
     min_elt$6=_wj_[36],
     elements$0=_wj_[35],
     partition_tf$6=_wj_[34],
     filter$9=_wj_[33],
     iter2$4=_wj_[32],
     fold_right$5=_wj_[31],
     fold_until$6=_wj_[30],
     Named$0=_wj_[29],
     are_disjoint$0=_wj_[28],
     is_subset$0=_wj_[27],
     equal$11=_wj_[26],
     compare_direct$4=_wj_[25],
     symmetric_diff$4=_wj_[24],
     diff$1=_wj_[23],
     inter$1=_wj_[22],
     union$2=_wj_[21],
     remove$6=_wj_[20],
     add$6=_wj_[19],
     mem$7=_wj_[18],
     invariants$4=_wj_[17],
     to_array$2=_wj_[16],
     to_list$4=_wj_[15],
     find_map$2=_wj_[14],
     find$7=_wj_[13],
     sum$2=_wj_[12],
     count$7=_wj_[11],
     for_all$9=_wj_[10],
     exists$9=_wj_[9],
     fold_result$2=_wj_[8],
     fold$9=_wj_[7],
     iter$12=_wj_[6],
     is_empty$8=_wj_[5],
     length$8=_wj_[4],
     invariants$5=Base_Set[2],
     empty$6=Base_Set[5],
     singleton$6=Base_Set[6],
     length$9=Base_Set[7],
     is_empty$9=Base_Set[8],
     mem$8=Base_Set[9],
     add$7=Base_Set[10],
     remove$7=Base_Set[11],
     union$3=Base_Set[12],
     union_list$0=Base_Set[13],
     inter$2=Base_Set[14],
     diff$2=Base_Set[15],
     symmetric_diff$5=Base_Set[16],
     compare_direct$5=Base_Set[17],
     equal$12=Base_Set[19],
     exists$10=Base_Set[20],
     for_all$10=Base_Set[21],
     count$8=Base_Set[22],
     sum$3=Base_Set[23],
     find$8=Base_Set[24],
     find_map$3=Base_Set[25],
     find_exn$7=Base_Set[26],
     nth$5=Base_Set[27],
     remove_index$1=Base_Set[28],
     is_subset$1=Base_Set[29],
     are_disjoint$1=Base_Set[30],
     of_list$4=Base_Set[32],
     of_sequence$5=Base_Set[33],
     of_array$0=Base_Set[34],
     to_list$5=Base_Set[35],
     to_array$3=Base_Set[36],
     of_sorted_array$4=Base_Set[37],
     of_sorted_array_unchecked$4=Base_Set[38],
     of_increasing_iterator_uncheck$4=Base_Set[39],
     stable_dedup_list$0=Base_Set[40],
     map$17=Base_Set[41],
     filter_map$8=Base_Set[42],
     filter$10=Base_Set[43],
     fold$10=Base_Set[44],
     fold_result$3=Base_Set[45],
     fold_until$7=Base_Set[46],
     fold_right$6=Base_Set[47],
     iter$13=Base_Set[48],
     iter2$5=Base_Set[49],
     partition_tf$7=Base_Set[50],
     elements$1=Base_Set[51],
     min_elt$7=Base_Set[52],
     min_elt_exn$5=Base_Set[53],
     max_elt$7=Base_Set[54],
     max_elt_exn$5=Base_Set[55],
     choose$2=Base_Set[56],
     choose_exn$2=Base_Set[57],
     split$5=Base_Set[58],
     group_by$1=Base_Set[59],
     to_sequence$6=Base_Set[60],
     binary_search$6=Base_Set[61],
     binary_search_segmented$6=Base_Set[62],
     merge_to_sequence$1=Base_Set[64];
    function of_tree$4(m){return caml_call1(Base_Set[74][64],m[1])}
    var to_tree$6=Base_Set[74][47],sexp_of_t$29=Base_Set[74][1];
    function compare$25(param,_brT_,t1,t2)
     {return caml_call2(compare_direct$5,t1,t2)}
    var
     _wk_=Base_Set[74],
     hash_fold_direct$0=_wk_[66],
     comparator$0=_wk_[65],
     of_tree$5=_wk_[64],
     filter_map$9=_wk_[63],
     map$18=_wk_[62],
     stable_dedup_list$1=_wk_[61],
     of_increasing_iterator_uncheck$5=_wk_[60],
     of_sorted_array_unchecked$5=_wk_[59],
     of_sorted_array$5=_wk_[58],
     of_array$1=_wk_[57],
     of_sequence$6=_wk_[56],
     of_list$5=_wk_[55],
     union_list$1=_wk_[54],
     singleton$7=_wk_[53],
     empty$7=_wk_[52];
    function of_hash_set$0(comparator,hset)
     {return caml_call2(of_tree$5,comparator,of_hash_set(comparator,hset))}
    function of_hashtbl_keys$1(comparator,hashtbl)
     {return caml_call2
              (of_tree$5,comparator,of_hashtbl_keys$0(comparator,hashtbl))}
    function of_hash_set$1(m,hset){return of_hash_set$0(m[1],hset)}
    function of_hashtbl_keys$2(m,hashtbl)
     {return of_hashtbl_keys$1(m[1],hashtbl)}
    function Creators$1(Elt)
     {var comparator=Elt[1];
      function of_tree(tree){return caml_call2(of_tree$5,comparator,tree)}
      function of_sorted_array_unchecked(array)
       {return caml_call2(of_sorted_array_unchecked$5,comparator,array)}
      function of_increasing_iterator_uncheck(len,f)
       {return caml_call3(of_increasing_iterator_uncheck$5,comparator,len,f)}
      function of_sorted_array(array)
       {return caml_call2(of_sorted_array$5,comparator,array)}
      var M_empty=caml_call1(Base_Set[74][67],Elt),empty=M_empty[1];
      function singleton(e){return caml_call2(singleton$7,comparator,e)}
      function union_list(l){return caml_call2(union_list$1,comparator,l)}
      function of_list(l){return caml_call2(of_list$5,comparator,l)}
      function of_sequence(s){return caml_call2(of_sequence$6,comparator,s)}
      function of_hash_set(h){return of_hash_set$0(comparator,h)}
      function of_hashtbl_keys(h){return of_hashtbl_keys$1(comparator,h)}
      function of_array(a){return caml_call2(of_array$1,comparator,a)}
      function stable_dedup_list(xs)
       {return caml_call2(stable_dedup_list$1,comparator,xs)}
      function map(t,f){return caml_call3(map$18,comparator,t,f)}
      function filter_map(t,f){return caml_call3(filter_map$9,comparator,t,f)}
      function t_of_sexp(a_of_sexp,sexp)
       {return of_tree
                (caml_call3(t_of_sexp_direct$0,comparator,a_of_sexp,sexp))}
      function quickcheck_generator(elt)
       {return quickcheck_generator$5(comparator,elt)}
      return [0,
              t_of_sexp,
              empty,
              singleton,
              union_list,
              of_list,
              of_sequence,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator]}
    function Make_tree_S1$0(Elt)
     {var comparator=Elt[1];
      function singleton(e){return caml_call2(singleton$5,comparator,e)}
      function invariants(t){return caml_call2(invariants$3,comparator,t)}
      function length(t){return caml_call1(length$7,t)}
      function is_empty(t){return caml_call1(is_empty$7,t)}
      function elements$0(t){return caml_call1(elements,t)}
      function min_elt(t){return caml_call1(min_elt$5,t)}
      function min_elt_exn(t){return caml_call1(min_elt_exn$3,t)}
      function max_elt(t){return caml_call1(max_elt$5,t)}
      function max_elt_exn(t){return caml_call1(max_elt_exn$3,t)}
      function choose(t){return caml_call1(choose$0,t)}
      function choose_exn(t){return caml_call1(choose_exn$0,t)}
      function to_list(t){return caml_call1(to_list$3,t)}
      function to_array(t){return caml_call1(to_array$1,t)}
      function iter(t,f){return caml_call2(iter$11,t,f)}
      function iter2(a,b,f){return caml_call4(iter2$3,comparator,a,b,f)}
      function exists(t,f){return caml_call2(exists$8,t,f)}
      function for_all(t,f){return caml_call2(for_all$8,t,f)}
      function count(t,f){return caml_call2(count$6,t,f)}
      function sum(m,t,f){return caml_call3(sum$1,m,t,f)}
      function find(t,f){return caml_call2(find$6,t,f)}
      function find_exn(t,f){return caml_call2(find_exn$5,t,f)}
      function find_map(t,f){return caml_call2(find_map$1,t,f)}
      function fold(t,init,f){return caml_call3(fold$8,t,init,f)}
      function fold_until(t,init,f){return caml_call3(fold_until$5,t,init,f)}
      function fold_right(t,init,f){return caml_call3(fold_right$4,t,init,f)}
      function fold_result(t,init,f)
       {return caml_call4(include$7[8],fold,init,f,t)}
      function map(t,f){return caml_call3(map$16,comparator,t,f)}
      function filter(t,f){return caml_call3(filter$8,comparator,t,f)}
      function filter_map(t,f){return caml_call3(filter_map$7,comparator,t,f)}
      function partition_tf(t,f)
       {return caml_call3(partition_tf$5,comparator,t,f)}
      function mem(t,a){return caml_call3(mem$6,comparator,t,a)}
      function add(t,a){return caml_call3(add$5,comparator,t,a)}
      function remove(t,a){return caml_call3(remove$5,comparator,t,a)}
      function union(t1,t2){return caml_call3(union$1,comparator,t1,t2)}
      function inter(t1,t2){return caml_call3(inter$0,comparator,t1,t2)}
      function diff(t1,t2){return caml_call3(diff$0,comparator,t1,t2)}
      function symmetric_diff(t1,t2)
       {return caml_call3(symmetric_diff$3,comparator,t1,t2)}
      function compare_direct(t1,t2)
       {return caml_call3(compare_direct$3,comparator,t1,t2)}
      function equal(t1,t2){return caml_call3(equal$10,comparator,t1,t2)}
      function is_subset$0(t,of){return caml_call3(is_subset,comparator,t,of)}
      function are_disjoint$0(t1,t2)
       {return caml_call3(are_disjoint,comparator,t1,t2)}
      function of_list(l){return caml_call2(of_list$3,comparator,l)}
      function of_sequence(s){return caml_call2(of_sequence$4,comparator,s)}
      function of_hash_set$0(h){return of_hash_set(comparator,h)}
      function of_hashtbl_keys(h){return of_hashtbl_keys$0(comparator,h)}
      function of_array$0(a){return caml_call2(of_array,comparator,a)}
      function of_sorted_array_unchecked(a)
       {return caml_call2(of_sorted_array_unchecked$3,comparator,a)}
      function of_increasing_iterator_uncheck(len,f)
       {return caml_call3(of_increasing_iterator_uncheck$3,comparator,len,f)}
      function of_sorted_array(a)
       {return caml_call2(of_sorted_array$3,comparator,a)}
      function union_list$0(l){return caml_call2(union_list,comparator,l)}
      function stable_dedup_list$0(xs)
       {return caml_call2(stable_dedup_list,comparator,xs)}
      function group_by$0(t,equiv)
       {return caml_call3(group_by,comparator,t,equiv)}
      function split(t,a){return caml_call3(split$3,comparator,t,a)}
      function nth(t,i){return caml_call2(nth$3,t,i)}
      function remove_index$0(t,i)
       {return caml_call3(remove_index,comparator,t,i)}
      function to_tree(t){return t}
      function of_tree(t){return t}
      function to_sequence(order,greater_or_equal_to,less_or_equal_to,t)
       {return caml_call5
                (to_sequence$4,
                 comparator,
                 order,
                 greater_or_equal_to,
                 less_or_equal_to,
                 t)}
      function binary_search(t,compare,how,v)
       {return caml_call5(binary_search$4,comparator,t,compare,how,v)}
      function binary_search_segmented(t,segment_of,how)
       {return caml_call4
                (binary_search_segmented$4,comparator,t,segment_of,how)}
      function merge_to_sequence$0
       (order,greater_or_equal_to,less_or_equal_to,t$0,t)
       {return caml_call6
                (merge_to_sequence,
                 comparator,
                 order,
                 greater_or_equal_to,
                 less_or_equal_to,
                 t$0,
                 t)}
      function to_map(t,f){return caml_call1(to_map$0(comparator,t),f)}
      function is_subset$1(t,of){return caml_call3(Named[1],comparator,t,of)}
      function equal$0(t1,t2){return caml_call3(Named[2],comparator,t1,t2)}
      var Named$0=[0,is_subset$1,equal$0];
      function quickcheck_generator(elt){return gen_tree$0(comparator,elt)}
      function quickcheck_observer(elt){return obs_tree$0(elt)}
      function quickcheck_shrinker(elt){return shr_tree$0(comparator,elt)}
      return [0,
              comparator,
              empty$5,
              singleton,
              invariants,
              length,
              is_empty,
              elements$0,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              to_list,
              to_array,
              iter,
              iter2,
              exists,
              for_all,
              count,
              sum,
              find,
              find_exn,
              find_map,
              fold,
              fold_until,
              fold_right,
              fold_result,
              map,
              filter,
              filter_map,
              partition_tf,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset$0,
              are_disjoint$0,
              of_list,
              of_sequence,
              of_hash_set$0,
              of_hashtbl_keys,
              of_array$0,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              of_sorted_array,
              union_list$0,
              stable_dedup_list$0,
              group_by$0,
              split,
              nth,
              remove_index$0,
              to_tree,
              of_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              merge_to_sequence$0,
              of_map_keys$0,
              to_map,
              Named$0,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker]}
    function Make_tree_plain$0(Elt)
     {var
       Elt_S1=caml_call1(S_to_S1,[0,Elt[2]]),
       include=Make_tree_S1$0(Elt_S1),
       comparator=include[1],
       empty=include[2],
       singleton=include[3],
       invariants=include[4],
       length=include[5],
       is_empty=include[6],
       elements=include[7],
       min_elt=include[8],
       min_elt_exn=include[9],
       max_elt=include[10],
       max_elt_exn=include[11],
       choose=include[12],
       choose_exn=include[13],
       to_list=include[14],
       to_array=include[15],
       iter=include[16],
       iter2=include[17],
       exists=include[18],
       for_all=include[19],
       count=include[20],
       sum=include[21],
       find=include[22],
       find_exn=include[23],
       find_map=include[24],
       fold=include[25],
       fold_until=include[26],
       fold_right=include[27],
       fold_result=include[28],
       map=include[29],
       filter=include[30],
       filter_map=include[31],
       partition_tf=include[32],
       mem=include[33],
       add=include[34],
       remove=include[35],
       union=include[36],
       inter=include[37],
       diff=include[38],
       symmetric_diff=include[39],
       compare_direct=include[40],
       equal=include[41],
       is_subset=include[42],
       are_disjoint=include[43],
       of_list=include[44],
       of_sequence=include[45],
       of_hash_set=include[46],
       of_hashtbl_keys=include[47],
       of_array=include[48],
       of_sorted_array_unchecked=include[49],
       of_increasing_iterator_uncheck=include[50],
       of_sorted_array=include[51],
       union_list=include[52],
       stable_dedup_list=include[53],
       group_by=include[54],
       split=include[55],
       nth=include[56],
       remove_index=include[57],
       to_tree=include[58],
       of_tree=include[59],
       to_sequence=include[60],
       binary_search=include[61],
       binary_search_segmented=include[62],
       merge_to_sequence=include[63],
       of_map_keys=include[64],
       to_map=include[65],
       Named=include[66],
       quickcheck_generator=include[67],
       quickcheck_observer=include[68],
       quickcheck_shrinker=include[69];
      function compare(t1,t2){return caml_call2(compare_direct,t1,t2)}
      function sexp_of_t(t)
       {function _brS_(param){return _wl_}
        return caml_call3(sexp_of_t$28,Elt[1],_brS_,t)}
      function Provide_of_sexp(X)
       {function t_of_sexp(sexp)
         {return caml_call3(t_of_sexp_direct$0,Elt_S1[1],X[1],sexp)}
        return [0,t_of_sexp]}
      return [0,
              Elt_S1,
              comparator,
              empty,
              singleton,
              invariants,
              length,
              is_empty,
              elements,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              to_list,
              to_array,
              iter,
              iter2,
              exists,
              for_all,
              count,
              sum,
              find,
              find_exn,
              find_map,
              fold,
              fold_until,
              fold_right,
              fold_result,
              map,
              filter,
              filter_map,
              partition_tf,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset,
              are_disjoint,
              of_list,
              of_sequence,
              of_hash_set,
              of_hashtbl_keys,
              of_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              of_sorted_array,
              union_list,
              stable_dedup_list,
              group_by,
              split,
              nth,
              remove_index,
              to_tree,
              of_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              merge_to_sequence,
              of_map_keys,
              to_map,
              Named,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker,
              compare,
              sexp_of_t,
              Provide_of_sexp]}
    function init_for_bin_prot$0(len,f,comparator)
     {var set=caml_call3(of_increasing_iterator_uncheck$5,comparator,len,f);
      if(caml_call1(invariants$5,set))return set;
      function _brR_(acc,elt)
       {return caml_call3(mem$6,comparator,acc,elt)
                ?caml_call1(_a3_,cst_Set_bin_read_t_duplicate_e)
                :caml_call3(add$5,comparator,acc,elt)}
      return caml_call2
              (of_tree$5,
               comparator,
               caml_call3(fold$10,set,caml_call1(empty$4,comparator),_brR_))}
    var
     _wm_=Creators$1(Poly),
     _wn_=_wm_[1],
     _wo_=_wm_[2],
     _wp_=_wm_[3],
     _wq_=_wm_[4],
     _wr_=_wm_[5],
     _ws_=_wm_[6],
     _wt_=_wm_[7],
     _wu_=_wm_[8],
     _wv_=_wm_[9],
     _ww_=_wm_[10],
     _wx_=_wm_[11],
     _wy_=_wm_[12],
     _wz_=_wm_[13],
     _wA_=_wm_[14],
     _wB_=_wm_[15],
     _wC_=_wm_[16],
     _wD_=_wm_[17],
     _wE_=_wm_[18];
    function compare$26(param,t1,t2)
     {return caml_call2(compare_direct$4,t1,t2)}
    function sexp_of_t$30(sexp_of_k,t)
     {return caml_call3(sexp_of_t$29,sexp_of_k,function(param){return _wF_},t)}
    function t_sexp_grammar$2(elt_grammar)
     {var _brQ_=caml_call1(_pF_,elt_grammar);
      return caml_call1(Sexplib_Sexp_grammar[1],_brQ_)}
    var
     _wG_=caml_call1(Bin_prot_Shape[3][1],cst_a$44),
     _wH_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_set_ml_364_19),
     _wI_=caml_call2(Bin_prot_Shape[15],_wH_,_wG_),
     _wJ_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$45),0],
     _wK_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$9),_wJ_,_wI_],0],
     _wL_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_set_ml_364_6),
     group$42=caml_call2(Bin_prot_Shape[6],_wL_,_wK_);
    function bin_shape_el$1(a)
     {var _brP_=caml_call1(Bin_prot_Shape[2][1],cst_el$10);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$42,_brP_),[0,a,0])}
    function bin_size_el$1(size_of_a){return size_of_a}
    function bin_write_el$1(write_a){return write_a}
    function bin_read_el$1(of_a){return of_a}
    var
     caller_identity$1=
      caml_call1(Bin_prot_Shape[5][1],cst_88bcc478_4992_11e6_a95d_ff);
    function iter$14(t,f)
     {return caml_call2(iter$12,t,function(key){return caml_call1(f,key)})}
    function init$2(len,next)
     {var _brO_=Poly[1];
      return init_for_bin_prot$0
              (len,function(param){return caml_call1(next,0)},_brO_)}
    var
     include$39=
      caml_call1
       (Bin_prot_Utils[16],
        [0,
         caller_identity$1,
         module_name$4,
         length$8,
         iter$14,
         init$2,
         bin_size_el$1,
         bin_write_el$1,
         bin_read_el$1,
         bin_shape_el$1]),
     bin_shape_t$34=include$39[1],
     bin_size_t$40=include$39[2],
     bin_write_t$40=include$39[3],
     bin_read_t$82=include$39[4],
     bin_read_t$83=include$39[5],
     bin_writer_t$28=include$39[6],
     bin_reader_t$28=include$39[7],
     bin_t$28=include$39[8],
     include$40=Make_tree_S1$0(Poly),
     empty$8=include$40[2],
     singleton$8=include$40[3],
     invariants$6=include$40[4],
     length$10=include$40[5],
     is_empty$10=include$40[6],
     elements$2=include$40[7],
     min_elt$8=include$40[8],
     min_elt_exn$6=include$40[9],
     max_elt$8=include$40[10],
     max_elt_exn$6=include$40[11],
     choose$3=include$40[12],
     choose_exn$3=include$40[13],
     to_list$6=include$40[14],
     to_array$4=include$40[15],
     iter$15=include$40[16],
     iter2$6=include$40[17],
     exists$11=include$40[18],
     for_all$11=include$40[19],
     count$9=include$40[20],
     sum$4=include$40[21],
     find$9=include$40[22],
     find_exn$8=include$40[23],
     find_map$4=include$40[24],
     fold$11=include$40[25],
     fold_until$8=include$40[26],
     fold_right$7=include$40[27],
     fold_result$4=include$40[28],
     map$19=include$40[29],
     filter$11=include$40[30],
     filter_map$10=include$40[31],
     partition_tf$8=include$40[32],
     mem$9=include$40[33],
     add$8=include$40[34],
     remove$8=include$40[35],
     union$4=include$40[36],
     inter$3=include$40[37],
     diff$3=include$40[38],
     symmetric_diff$6=include$40[39],
     compare_direct$6=include$40[40],
     equal$13=include$40[41],
     is_subset$2=include$40[42],
     are_disjoint$2=include$40[43],
     of_list$6=include$40[44],
     of_sequence$7=include$40[45],
     of_hash_set$2=include$40[46],
     of_hashtbl_keys$3=include$40[47],
     of_array$2=include$40[48],
     of_sorted_array_unchecked$6=include$40[49],
     of_increasing_iterator_uncheck$6=include$40[50],
     of_sorted_array$6=include$40[51],
     union_list$2=include$40[52],
     stable_dedup_list$2=include$40[53],
     group_by$2=include$40[54],
     split$6=include$40[55],
     nth$6=include$40[56],
     remove_index$2=include$40[57],
     to_tree$7=include$40[58],
     of_tree$6=include$40[59],
     to_sequence$7=include$40[60],
     binary_search$7=include$40[61],
     binary_search_segmented$7=include$40[62],
     merge_to_sequence$2=include$40[63],
     of_map_keys$1=include$40[64],
     to_map$1=include$40[65],
     Named$1=include$40[66],
     quickcheck_generator$7=include$40[67],
     quickcheck_observer$6=include$40[68],
     quickcheck_shrinker$6=include$40[69];
    function sexp_of_t$31(sexp_of_elt,t)
     {return caml_call3
              (sexp_of_t$28,sexp_of_elt,function(param){return _wM_},t)}
    function t_of_sexp$25(elt_of_sexp,sexp)
     {return caml_call3(t_of_sexp_direct$0,Poly[1],elt_of_sexp,sexp)}
    function t_sexp_grammar$3(grammar)
     {var _brN_=caml_call1(_pF_,grammar);
      return caml_call1(Sexplib_Sexp_grammar[1],_brN_)}
    function Provide_bin_io$0(Elt)
     {var
       _brI_=Elt[5],
       _brJ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$11),0,_brI_],0],
       _brK_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_set_ml_405_4),
       group=caml_call2(Bin_prot_Shape[6],_brK_,_brJ_),
       _brL_=caml_call1(Bin_prot_Shape[2][1],cst_el$12),
       bin_shape_el=caml_call1(caml_call2(Bin_prot_Shape[14],group,_brL_),0),
       bin_size_el=Elt[1],
       bin_write_el=Elt[2],
       bin_read_el=Elt[3],
       caller_identity=
        caml_call1(Bin_prot_Shape[5][1],cst_8989278e_4992_11e6_8f4a_6b);
      function iter(t,f)
       {return caml_call2(iter$13,t,function(key){return caml_call1(f,key)})}
      function init(len,next)
       {var _brM_=Elt[9];
        return init_for_bin_prot$0
                (len,function(param){return caml_call1(next,0)},_brM_)}
      return caml_call1
              (Bin_prot_Utils[15],
               [0,
                caller_identity,
                module_name$5,
                length$9,
                iter,
                init,
                bin_size_el,
                bin_write_el,
                bin_read_el,
                bin_shape_el])}
    function Make_plain_using_comparator$0(Elt)
     {var
       Elt_S1=caml_call1(S_to_S1,[0,Elt[2]]),
       _brF_=Creators$1(Elt_S1),
       t_of_sexp=_brF_[1],
       empty=_brF_[2],
       singleton=_brF_[3],
       union_list=_brF_[4],
       of_list=_brF_[5],
       of_sequence=_brF_[6],
       of_array=_brF_[7],
       of_sorted_array=_brF_[8],
       of_sorted_array_unchecked=_brF_[9],
       of_increasing_iterator_uncheck=_brF_[10],
       stable_dedup_list=_brF_[11],
       map=_brF_[12],
       filter_map=_brF_[13],
       of_tree=_brF_[14],
       of_hash_set=_brF_[15],
       of_hashtbl_keys=_brF_[16],
       of_map_keys=_brF_[17],
       quickcheck_generator=_brF_[18];
      function compare(t1,t2){return caml_call2(compare_direct$4,t1,t2)}
      function sexp_of_t(t)
       {function _brH_(param){return _wN_}
        return caml_call3(sexp_of_t$29,Elt[1],_brH_,t)}
      function Provide_of_sexp(Elt)
       {function t_of_sexp$0(sexp){return caml_call2(t_of_sexp,Elt[1],sexp)}
        return [0,t_of_sexp$0]}
      function Provide_hash(Elt)
       {function hash_fold_t(state,t)
         {return caml_call3(hash_fold_direct$0,Elt[1],state,t)}
        function hash(t)
         {var _brG_=hash_fold_t(caml_call2(Base_Hash[11],0,0),t);
          return caml_call1(Base_Hash[9],_brG_)}
        return [0,hash_fold_t,hash]}
      function Provide_bin_io(Elt$0)
       {var
         comparator=Elt[2],
         bin_size_t=Elt$0[1],
         bin_write_t=Elt$0[2],
         bin_read_t=Elt$0[3],
         bin_read_t$0=Elt$0[4],
         bin_shape_t=Elt$0[5],
         bin_writer_t=Elt$0[6],
         bin_reader_t=Elt$0[7],
         bin_t=Elt$0[8];
        return Provide_bin_io$0
                ([0,
                  bin_size_t,
                  bin_write_t,
                  bin_read_t,
                  bin_read_t$0,
                  bin_shape_t,
                  bin_writer_t,
                  bin_reader_t,
                  bin_t,
                  comparator])}
      return [0,
              Elt,
              Elt_S1,
              t_of_sexp,
              empty,
              singleton,
              union_list,
              of_list,
              of_sequence,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator,
              length$8,
              is_empty$8,
              iter$12,
              fold$9,
              fold_result$2,
              exists$9,
              for_all$9,
              count$7,
              sum$2,
              find$7,
              find_map$2,
              to_list$4,
              to_array$2,
              invariants$4,
              mem$7,
              add$6,
              remove$6,
              union$2,
              inter$1,
              diff$1,
              symmetric_diff$4,
              compare_direct$4,
              equal$11,
              is_subset$0,
              are_disjoint$0,
              Named$0,
              fold_until$6,
              fold_right$5,
              iter2$4,
              filter$9,
              partition_tf$6,
              elements$0,
              min_elt$6,
              min_elt_exn$4,
              max_elt$6,
              max_elt_exn$4,
              choose$1,
              choose_exn$1,
              split$4,
              group_by$0,
              find_exn$6,
              nth$4,
              remove_index$0,
              to_tree$5,
              to_sequence$5,
              binary_search$5,
              binary_search_segmented$5,
              merge_to_sequence$0,
              to_map,
              quickcheck_observer$5,
              quickcheck_shrinker$5,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io]}
    function Make_using_comparator$0(Elt_sexp)
     {var
       _brE_=Make_plain_using_comparator$0([0,Elt_sexp[2],Elt_sexp[3]]),
       Elt_S1=_brE_[2],
       empty=_brE_[4],
       singleton=_brE_[5],
       union_list=_brE_[6],
       of_list=_brE_[7],
       of_sequence=_brE_[8],
       of_array=_brE_[9],
       of_sorted_array=_brE_[10],
       of_sorted_array_unchecked=_brE_[11],
       of_increasing_iterator_uncheck=_brE_[12],
       stable_dedup_list=_brE_[13],
       map=_brE_[14],
       filter_map=_brE_[15],
       of_tree=_brE_[16],
       of_hash_set=_brE_[17],
       of_hashtbl_keys=_brE_[18],
       of_map_keys=_brE_[19],
       quickcheck_generator=_brE_[20],
       length=_brE_[21],
       is_empty=_brE_[22],
       iter=_brE_[23],
       fold=_brE_[24],
       fold_result=_brE_[25],
       exists=_brE_[26],
       for_all=_brE_[27],
       count=_brE_[28],
       sum=_brE_[29],
       find=_brE_[30],
       find_map=_brE_[31],
       to_list=_brE_[32],
       to_array=_brE_[33],
       invariants=_brE_[34],
       mem=_brE_[35],
       add=_brE_[36],
       remove=_brE_[37],
       union=_brE_[38],
       inter=_brE_[39],
       diff=_brE_[40],
       symmetric_diff=_brE_[41],
       compare_direct=_brE_[42],
       equal=_brE_[43],
       is_subset=_brE_[44],
       are_disjoint=_brE_[45],
       Named=_brE_[46],
       fold_until=_brE_[47],
       fold_right=_brE_[48],
       iter2=_brE_[49],
       filter=_brE_[50],
       partition_tf=_brE_[51],
       elements=_brE_[52],
       min_elt=_brE_[53],
       min_elt_exn=_brE_[54],
       max_elt=_brE_[55],
       max_elt_exn=_brE_[56],
       choose=_brE_[57],
       choose_exn=_brE_[58],
       split=_brE_[59],
       group_by=_brE_[60],
       find_exn=_brE_[61],
       nth=_brE_[62],
       remove_index=_brE_[63],
       to_tree=_brE_[64],
       to_sequence=_brE_[65],
       binary_search=_brE_[66],
       binary_search_segmented=_brE_[67],
       merge_to_sequence=_brE_[68],
       to_map=_brE_[69],
       quickcheck_observer=_brE_[70],
       quickcheck_shrinker=_brE_[71],
       compare=_brE_[72],
       sexp_of_t=_brE_[73],
       Provide_of_sexp=_brE_[74],
       Provide_hash=_brE_[75],
       Provide_bin_io=_brE_[76],
       include=caml_call1(Provide_of_sexp,[0,Elt_sexp[1]]),
       t_of_sexp=include[1];
      return [0,
              Elt_S1,
              empty,
              singleton,
              union_list,
              of_list,
              of_sequence,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              invariants,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset,
              are_disjoint,
              Named,
              fold_until,
              fold_right,
              iter2,
              filter,
              partition_tf,
              elements,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              split,
              group_by,
              find_exn,
              nth,
              remove_index,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              merge_to_sequence,
              to_map,
              quickcheck_observer,
              quickcheck_shrinker,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              Elt_sexp,
              t_of_sexp]}
    function Make_binable_using_comparator$0(Elt_bin_sexp)
     {var
       _brD_=
        Make_using_comparator$0
         ([0,Elt_bin_sexp[9],Elt_bin_sexp[10],Elt_bin_sexp[11]]),
       Elt_S1=_brD_[1],
       empty=_brD_[2],
       singleton=_brD_[3],
       union_list=_brD_[4],
       of_list=_brD_[5],
       of_sequence=_brD_[6],
       of_array=_brD_[7],
       of_sorted_array=_brD_[8],
       of_sorted_array_unchecked=_brD_[9],
       of_increasing_iterator_uncheck=_brD_[10],
       stable_dedup_list=_brD_[11],
       map=_brD_[12],
       filter_map=_brD_[13],
       of_tree=_brD_[14],
       of_hash_set=_brD_[15],
       of_hashtbl_keys=_brD_[16],
       of_map_keys=_brD_[17],
       quickcheck_generator=_brD_[18],
       length=_brD_[19],
       is_empty=_brD_[20],
       iter=_brD_[21],
       fold=_brD_[22],
       fold_result=_brD_[23],
       exists=_brD_[24],
       for_all=_brD_[25],
       count=_brD_[26],
       sum=_brD_[27],
       find=_brD_[28],
       find_map=_brD_[29],
       to_list=_brD_[30],
       to_array=_brD_[31],
       invariants=_brD_[32],
       mem=_brD_[33],
       add=_brD_[34],
       remove=_brD_[35],
       union=_brD_[36],
       inter=_brD_[37],
       diff=_brD_[38],
       symmetric_diff=_brD_[39],
       compare_direct=_brD_[40],
       equal=_brD_[41],
       is_subset=_brD_[42],
       are_disjoint=_brD_[43],
       Named=_brD_[44],
       fold_until=_brD_[45],
       fold_right=_brD_[46],
       iter2=_brD_[47],
       filter=_brD_[48],
       partition_tf=_brD_[49],
       elements=_brD_[50],
       min_elt=_brD_[51],
       min_elt_exn=_brD_[52],
       max_elt=_brD_[53],
       max_elt_exn=_brD_[54],
       choose=_brD_[55],
       choose_exn=_brD_[56],
       split=_brD_[57],
       group_by=_brD_[58],
       find_exn=_brD_[59],
       nth=_brD_[60],
       remove_index=_brD_[61],
       to_tree=_brD_[62],
       to_sequence=_brD_[63],
       binary_search=_brD_[64],
       binary_search_segmented=_brD_[65],
       merge_to_sequence=_brD_[66],
       to_map=_brD_[67],
       quickcheck_observer=_brD_[68],
       quickcheck_shrinker=_brD_[69],
       compare=_brD_[70],
       sexp_of_t=_brD_[71],
       Provide_of_sexp=_brD_[72],
       Provide_hash=_brD_[73],
       Provide_bin_io=_brD_[74],
       t_of_sexp=_brD_[76],
       include=
        caml_call1
         (Provide_bin_io,
          [0,
           Elt_bin_sexp[1],
           Elt_bin_sexp[2],
           Elt_bin_sexp[3],
           Elt_bin_sexp[4],
           Elt_bin_sexp[5],
           Elt_bin_sexp[6],
           Elt_bin_sexp[7],
           Elt_bin_sexp[8]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              Elt_S1,
              empty,
              singleton,
              union_list,
              of_list,
              of_sequence,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              invariants,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset,
              are_disjoint,
              Named,
              fold_until,
              fold_right,
              iter2,
              filter,
              partition_tf,
              elements,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              split,
              group_by,
              find_exn,
              nth,
              remove_index,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              merge_to_sequence,
              to_map,
              quickcheck_observer,
              quickcheck_shrinker,
              compare,
              sexp_of_t,
              Provide_of_sexp,
              Provide_hash,
              Provide_bin_io,
              t_of_sexp,
              Elt_bin_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function bin_shape_m_t$0(m){return Provide_bin_io$0(m)[5]}
    function bin_size_m_t$0(m){return Provide_bin_io$0(m)[1]}
    function bin_write_m_t$0(m){return Provide_bin_io$0(m)[2]}
    function bin_read_m_t$1(m){return Provide_bin_io$0(m)[3]}
    function bin_read_m_t$2(m){return Provide_bin_io$0(m)[4]}
    function quickcheck_generator_m_t$2(Elt)
     {return quickcheck_generator$6([0,Elt[1]],Elt[2])}
    function quickcheck_observer_m_t$2(Elt)
     {return quickcheck_observer$5(Elt[2])}
    function quickcheck_shrinker_m_t$2(Elt)
     {return quickcheck_shrinker$5(Elt[2])}
    var
     hash_m_t=Base_Set[72],
     hash_fold_m_t$0=Base_Set[71],
     equal_m_t$2=Base_Set[70],
     compare_m_t$0=Base_Set[69],
     m_t_sexp_grammar$2=Base_Set[68],
     m_t_of_sexp$2=Base_Set[67],
     sexp_of_m_t$2=Base_Set[66];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$124);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Set$0);
    var
     _wO_=
      [0,
       [0,
        sexp_of_m_t$2,
        m_t_of_sexp$2,
        m_t_sexp_grammar$2,
        compare_m_t$0,
        equal_m_t$2,
        hash_fold_m_t$0,
        hash_m_t,
        bin_shape_m_t$0,
        bin_size_m_t$0,
        bin_write_m_t$0,
        bin_read_m_t$1,
        bin_read_m_t$2,
        quickcheck_generator_m_t$2,
        quickcheck_observer_m_t$2,
        quickcheck_shrinker_m_t$2,
        function(_brC_)
         {var
           _brB_=
            Make_binable_using_comparator$0
             ([0,
               _brC_[1],
               _brC_[2],
               _brC_[3],
               _brC_[4],
               _brC_[5],
               _brC_[6],
               _brC_[7],
               _brC_[8],
               _brC_[10],
               _brC_[11],
               _brC_[12]]);
          return [0,
                  _brB_[77],
                  _brB_[78],
                  _brB_[79],
                  _brB_[80],
                  _brB_[81],
                  _brB_[82],
                  _brB_[83],
                  _brB_[84],
                  _brB_[70],
                  _brB_[75],
                  _brB_[71]]}]];
    function _wP_(Elt)
     {var
       _brA_=Make_tree_plain$0([0,Elt[2],Elt[3]]),
       empty=_brA_[3],
       singleton=_brA_[4],
       invariants=_brA_[5],
       length=_brA_[6],
       is_empty=_brA_[7],
       elements=_brA_[8],
       min_elt=_brA_[9],
       min_elt_exn=_brA_[10],
       max_elt=_brA_[11],
       max_elt_exn=_brA_[12],
       choose=_brA_[13],
       choose_exn=_brA_[14],
       to_list=_brA_[15],
       to_array=_brA_[16],
       iter=_brA_[17],
       iter2=_brA_[18],
       exists=_brA_[19],
       for_all=_brA_[20],
       count=_brA_[21],
       sum=_brA_[22],
       find=_brA_[23],
       find_exn=_brA_[24],
       find_map=_brA_[25],
       fold=_brA_[26],
       fold_until=_brA_[27],
       fold_right=_brA_[28],
       fold_result=_brA_[29],
       map=_brA_[30],
       filter=_brA_[31],
       filter_map=_brA_[32],
       partition_tf=_brA_[33],
       mem=_brA_[34],
       add=_brA_[35],
       remove=_brA_[36],
       union=_brA_[37],
       inter=_brA_[38],
       diff=_brA_[39],
       symmetric_diff=_brA_[40],
       compare_direct=_brA_[41],
       equal=_brA_[42],
       is_subset=_brA_[43],
       are_disjoint=_brA_[44],
       of_list=_brA_[45],
       of_sequence=_brA_[46],
       of_hash_set=_brA_[47],
       of_hashtbl_keys=_brA_[48],
       of_array=_brA_[49],
       of_sorted_array_unchecked=_brA_[50],
       of_increasing_iterator_uncheck=_brA_[51],
       of_sorted_array=_brA_[52],
       union_list=_brA_[53],
       stable_dedup_list=_brA_[54],
       group_by=_brA_[55],
       split=_brA_[56],
       nth=_brA_[57],
       remove_index=_brA_[58],
       to_tree=_brA_[59],
       of_tree=_brA_[60],
       to_sequence=_brA_[61],
       binary_search=_brA_[62],
       binary_search_segmented=_brA_[63],
       merge_to_sequence=_brA_[64],
       of_map_keys=_brA_[65],
       to_map=_brA_[66],
       Named=_brA_[67],
       quickcheck_generator=_brA_[68],
       quickcheck_observer=_brA_[69],
       quickcheck_shrinker=_brA_[70],
       compare=_brA_[71],
       sexp_of_t=_brA_[72],
       Provide_of_sexp=_brA_[73],
       include=caml_call1(Provide_of_sexp,[0,Elt[1]]),
       t_of_sexp=include[1];
      return [0,
              compare,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              invariants,
              mem,
              add,
              remove,
              union,
              inter,
              diff,
              symmetric_diff,
              compare_direct,
              equal,
              is_subset,
              are_disjoint,
              Named,
              fold_until,
              fold_right,
              iter2,
              filter,
              partition_tf,
              elements,
              min_elt,
              min_elt_exn,
              max_elt,
              max_elt_exn,
              choose,
              choose_exn,
              split,
              group_by,
              find_exn,
              nth,
              remove_index,
              to_tree,
              to_sequence,
              binary_search,
              binary_search_segmented,
              merge_to_sequence,
              to_map,
              quickcheck_observer,
              quickcheck_shrinker,
              empty,
              singleton,
              union_list,
              of_list,
              of_sequence,
              of_array,
              of_sorted_array,
              of_sorted_array_unchecked,
              of_increasing_iterator_uncheck,
              stable_dedup_list,
              map,
              filter_map,
              of_tree,
              of_hash_set,
              of_hashtbl_keys,
              of_map_keys,
              quickcheck_generator,
              Provide_of_sexp,
              t_of_sexp,
              sexp_of_t]}
    function _wQ_(_bry_)
     {var _brz_=Make_tree_plain$0(_bry_);
      return [0,
              _brz_[71],
              _brz_[72],
              _brz_[6],
              _brz_[7],
              _brz_[17],
              _brz_[26],
              _brz_[29],
              _brz_[19],
              _brz_[20],
              _brz_[21],
              _brz_[22],
              _brz_[23],
              _brz_[25],
              _brz_[15],
              _brz_[16],
              _brz_[5],
              _brz_[34],
              _brz_[35],
              _brz_[36],
              _brz_[37],
              _brz_[38],
              _brz_[39],
              _brz_[40],
              _brz_[41],
              _brz_[42],
              _brz_[43],
              _brz_[44],
              _brz_[67],
              _brz_[27],
              _brz_[28],
              _brz_[18],
              _brz_[31],
              _brz_[33],
              _brz_[8],
              _brz_[9],
              _brz_[10],
              _brz_[11],
              _brz_[12],
              _brz_[13],
              _brz_[14],
              _brz_[56],
              _brz_[55],
              _brz_[24],
              _brz_[57],
              _brz_[58],
              _brz_[59],
              _brz_[61],
              _brz_[62],
              _brz_[63],
              _brz_[64],
              _brz_[66],
              _brz_[69],
              _brz_[70],
              _brz_[3],
              _brz_[4],
              _brz_[53],
              _brz_[45],
              _brz_[46],
              _brz_[49],
              _brz_[52],
              _brz_[50],
              _brz_[51],
              _brz_[54],
              _brz_[30],
              _brz_[32],
              _brz_[60],
              _brz_[47],
              _brz_[48],
              _brz_[65],
              _brz_[68],
              _brz_[73]]}
    function _wR_(_brv_)
     {var _brw_=Make_binable_using_comparator$0(_brv_),_brx_=_brw_[76];
      return [0,
              [0,
               _brx_[9],
               _brx_[10],
               _brx_[1],
               _brx_[2],
               _brx_[3],
               _brx_[4],
               _brx_[5],
               _brx_[6],
               _brx_[7],
               _brx_[8],
               _brx_[11]],
              _brw_[70],
              _brw_[19],
              _brw_[20],
              _brw_[21],
              _brw_[22],
              _brw_[23],
              _brw_[24],
              _brw_[25],
              _brw_[26],
              _brw_[27],
              _brw_[28],
              _brw_[29],
              _brw_[30],
              _brw_[31],
              _brw_[32],
              _brw_[33],
              _brw_[34],
              _brw_[35],
              _brw_[36],
              _brw_[37],
              _brw_[38],
              _brw_[39],
              _brw_[40],
              _brw_[41],
              _brw_[42],
              _brw_[43],
              _brw_[44],
              _brw_[45],
              _brw_[46],
              _brw_[47],
              _brw_[48],
              _brw_[49],
              _brw_[50],
              _brw_[51],
              _brw_[52],
              _brw_[53],
              _brw_[54],
              _brw_[55],
              _brw_[56],
              _brw_[57],
              _brw_[58],
              _brw_[59],
              _brw_[60],
              _brw_[61],
              _brw_[62],
              _brw_[63],
              _brw_[64],
              _brw_[65],
              _brw_[66],
              _brw_[67],
              _brw_[68],
              _brw_[69],
              _brw_[2],
              _brw_[3],
              _brw_[4],
              _brw_[5],
              _brw_[6],
              _brw_[7],
              _brw_[8],
              _brw_[9],
              _brw_[10],
              _brw_[11],
              _brw_[12],
              _brw_[13],
              _brw_[14],
              _brw_[15],
              _brw_[16],
              _brw_[17],
              _brw_[18],
              _brw_[72],
              _brw_[74],
              _brw_[73],
              _brw_[75],
              _brw_[71],
              _brw_[77],
              _brw_[78],
              _brw_[79],
              _brw_[80],
              _brw_[81],
              _brw_[82],
              _brw_[83],
              _brw_[84]]}
    function _wS_(_brt_)
     {var _bru_=Make_using_comparator$0(_brt_);
      return [0,
              _bru_[75],
              _bru_[70],
              _bru_[19],
              _bru_[20],
              _bru_[21],
              _bru_[22],
              _bru_[23],
              _bru_[24],
              _bru_[25],
              _bru_[26],
              _bru_[27],
              _bru_[28],
              _bru_[29],
              _bru_[30],
              _bru_[31],
              _bru_[32],
              _bru_[33],
              _bru_[34],
              _bru_[35],
              _bru_[36],
              _bru_[37],
              _bru_[38],
              _bru_[39],
              _bru_[40],
              _bru_[41],
              _bru_[42],
              _bru_[43],
              _bru_[44],
              _bru_[45],
              _bru_[46],
              _bru_[47],
              _bru_[48],
              _bru_[49],
              _bru_[50],
              _bru_[51],
              _bru_[52],
              _bru_[53],
              _bru_[54],
              _bru_[55],
              _bru_[56],
              _bru_[57],
              _bru_[58],
              _bru_[59],
              _bru_[60],
              _bru_[61],
              _bru_[62],
              _bru_[63],
              _bru_[64],
              _bru_[65],
              _bru_[66],
              _bru_[67],
              _bru_[68],
              _bru_[69],
              _bru_[2],
              _bru_[3],
              _bru_[4],
              _bru_[5],
              _bru_[6],
              _bru_[7],
              _bru_[8],
              _bru_[9],
              _bru_[10],
              _bru_[11],
              _bru_[12],
              _bru_[13],
              _bru_[14],
              _bru_[15],
              _bru_[16],
              _bru_[17],
              _bru_[18],
              _bru_[72],
              _bru_[74],
              _bru_[73],
              _bru_[76],
              _bru_[71]]}
    function _wT_(_brr_)
     {var _brs_=Make_plain_using_comparator$0(_brr_);
      return [0,
              _brs_[1],
              _brs_[72],
              _brs_[73],
              _brs_[21],
              _brs_[22],
              _brs_[23],
              _brs_[24],
              _brs_[25],
              _brs_[26],
              _brs_[27],
              _brs_[28],
              _brs_[29],
              _brs_[30],
              _brs_[31],
              _brs_[32],
              _brs_[33],
              _brs_[34],
              _brs_[35],
              _brs_[36],
              _brs_[37],
              _brs_[38],
              _brs_[39],
              _brs_[40],
              _brs_[41],
              _brs_[42],
              _brs_[43],
              _brs_[44],
              _brs_[45],
              _brs_[46],
              _brs_[47],
              _brs_[48],
              _brs_[49],
              _brs_[50],
              _brs_[51],
              _brs_[52],
              _brs_[53],
              _brs_[54],
              _brs_[55],
              _brs_[56],
              _brs_[57],
              _brs_[58],
              _brs_[59],
              _brs_[60],
              _brs_[61],
              _brs_[62],
              _brs_[63],
              _brs_[64],
              _brs_[65],
              _brs_[66],
              _brs_[67],
              _brs_[68],
              _brs_[69],
              _brs_[70],
              _brs_[71],
              _brs_[4],
              _brs_[5],
              _brs_[6],
              _brs_[7],
              _brs_[8],
              _brs_[9],
              _brs_[10],
              _brs_[11],
              _brs_[12],
              _brs_[13],
              _brs_[14],
              _brs_[15],
              _brs_[16],
              _brs_[17],
              _brs_[18],
              _brs_[19],
              _brs_[20],
              _brs_[74],
              _brs_[76],
              _brs_[75]]}
    function _wU_(Elt)
     {var
       bin_size_t=Elt[1],
       bin_write_t=Elt[2],
       bin_read_t=Elt[3],
       bin_read_t$0=Elt[4],
       bin_shape_t=Elt[5],
       bin_writer_t=Elt[6],
       bin_reader_t=Elt[7],
       bin_t=Elt[8],
       t_of_sexp=Elt[10],
       sexp_of_t=Elt[11],
       include=caml_call1(Make,[0,Elt[9],Elt[11]]),
       comparator=include[1],
       _brp_=
        Make_binable_using_comparator$0
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       _brq_=_brp_[76];
      return [0,
              [0,
               _brq_[9],
               _brq_[10],
               _brq_[1],
               _brq_[2],
               _brq_[3],
               _brq_[4],
               _brq_[5],
               _brq_[6],
               _brq_[7],
               _brq_[8],
               _brq_[11]],
              _brp_[70],
              _brp_[19],
              _brp_[20],
              _brp_[21],
              _brp_[22],
              _brp_[23],
              _brp_[24],
              _brp_[25],
              _brp_[26],
              _brp_[27],
              _brp_[28],
              _brp_[29],
              _brp_[30],
              _brp_[31],
              _brp_[32],
              _brp_[33],
              _brp_[34],
              _brp_[35],
              _brp_[36],
              _brp_[37],
              _brp_[38],
              _brp_[39],
              _brp_[40],
              _brp_[41],
              _brp_[42],
              _brp_[43],
              _brp_[44],
              _brp_[45],
              _brp_[46],
              _brp_[47],
              _brp_[48],
              _brp_[49],
              _brp_[50],
              _brp_[51],
              _brp_[52],
              _brp_[53],
              _brp_[54],
              _brp_[55],
              _brp_[56],
              _brp_[57],
              _brp_[58],
              _brp_[59],
              _brp_[60],
              _brp_[61],
              _brp_[62],
              _brp_[63],
              _brp_[64],
              _brp_[65],
              _brp_[66],
              _brp_[67],
              _brp_[68],
              _brp_[69],
              _brp_[2],
              _brp_[3],
              _brp_[4],
              _brp_[5],
              _brp_[6],
              _brp_[7],
              _brp_[8],
              _brp_[9],
              _brp_[10],
              _brp_[11],
              _brp_[12],
              _brp_[13],
              _brp_[14],
              _brp_[15],
              _brp_[16],
              _brp_[17],
              _brp_[18],
              _brp_[72],
              _brp_[74],
              _brp_[73],
              _brp_[75],
              _brp_[71],
              _brp_[77],
              _brp_[78],
              _brp_[79],
              _brp_[80],
              _brp_[81],
              _brp_[82],
              _brp_[83],
              _brp_[84]]}
    function _wV_(Elt)
     {var
       t_of_sexp=Elt[2],
       sexp_of_t=Elt[3],
       include=caml_call1(Make,[0,Elt[1],Elt[3]]),
       comparator=include[1],
       _bro_=Make_using_comparator$0([0,t_of_sexp,sexp_of_t,comparator]);
      return [0,
              _bro_[75],
              _bro_[70],
              _bro_[19],
              _bro_[20],
              _bro_[21],
              _bro_[22],
              _bro_[23],
              _bro_[24],
              _bro_[25],
              _bro_[26],
              _bro_[27],
              _bro_[28],
              _bro_[29],
              _bro_[30],
              _bro_[31],
              _bro_[32],
              _bro_[33],
              _bro_[34],
              _bro_[35],
              _bro_[36],
              _bro_[37],
              _bro_[38],
              _bro_[39],
              _bro_[40],
              _bro_[41],
              _bro_[42],
              _bro_[43],
              _bro_[44],
              _bro_[45],
              _bro_[46],
              _bro_[47],
              _bro_[48],
              _bro_[49],
              _bro_[50],
              _bro_[51],
              _bro_[52],
              _bro_[53],
              _bro_[54],
              _bro_[55],
              _bro_[56],
              _bro_[57],
              _bro_[58],
              _bro_[59],
              _bro_[60],
              _bro_[61],
              _bro_[62],
              _bro_[63],
              _bro_[64],
              _bro_[65],
              _bro_[66],
              _bro_[67],
              _bro_[68],
              _bro_[69],
              _bro_[2],
              _bro_[3],
              _bro_[4],
              _bro_[5],
              _bro_[6],
              _bro_[7],
              _bro_[8],
              _bro_[9],
              _bro_[10],
              _bro_[11],
              _bro_[12],
              _bro_[13],
              _bro_[14],
              _bro_[15],
              _bro_[16],
              _bro_[17],
              _bro_[18],
              _bro_[72],
              _bro_[74],
              _bro_[73],
              _bro_[76],
              _bro_[71]]}
    var
     _wX_=
      [0,
       [0,
        t_of_sexp$25,
        sexp_of_t$31,
        t_sexp_grammar$3,
        length$10,
        is_empty$10,
        iter$15,
        fold$11,
        fold_result$4,
        exists$11,
        for_all$11,
        count$9,
        sum$4,
        find$9,
        find_map$4,
        to_list$6,
        to_array$4,
        invariants$6,
        mem$9,
        add$8,
        remove$8,
        union$4,
        inter$3,
        diff$3,
        symmetric_diff$6,
        compare_direct$6,
        equal$13,
        is_subset$2,
        are_disjoint$2,
        Named$1,
        fold_until$8,
        fold_right$7,
        iter2$6,
        filter$11,
        partition_tf$8,
        elements$2,
        min_elt$8,
        min_elt_exn$6,
        max_elt$8,
        max_elt_exn$6,
        choose$3,
        choose_exn$3,
        split$6,
        group_by$2,
        find_exn$8,
        nth$6,
        remove_index$2,
        to_tree$7,
        to_sequence$7,
        binary_search$7,
        binary_search_segmented$7,
        merge_to_sequence$2,
        to_map$1,
        quickcheck_observer$6,
        quickcheck_shrinker$6,
        empty$8,
        singleton$8,
        union_list$2,
        of_list$6,
        of_sequence$7,
        of_array$2,
        of_sorted_array$6,
        of_sorted_array_unchecked$6,
        of_increasing_iterator_uncheck$6,
        stable_dedup_list$2,
        map$19,
        filter_map$10,
        of_tree$6,
        of_hash_set$2,
        of_hashtbl_keys$3,
        of_map_keys$1,
        quickcheck_generator$7],
       bin_shape_t$34,
       bin_size_t$40,
       bin_write_t$40,
       bin_read_t$82,
       bin_read_t$83,
       bin_writer_t$28,
       bin_reader_t$28,
       bin_t$28,
       compare$26,
       _wn_,
       sexp_of_t$30,
       t_sexp_grammar$2,
       length$8,
       is_empty$8,
       iter$12,
       fold$9,
       fold_result$2,
       exists$9,
       for_all$9,
       count$7,
       sum$2,
       find$7,
       find_map$2,
       to_list$4,
       to_array$2,
       invariants$4,
       mem$7,
       add$6,
       remove$6,
       union$2,
       inter$1,
       diff$1,
       symmetric_diff$4,
       compare_direct$4,
       equal$11,
       is_subset$0,
       are_disjoint$0,
       Named$0,
       fold_until$6,
       fold_right$5,
       iter2$4,
       filter$9,
       partition_tf$6,
       elements$0,
       min_elt$6,
       min_elt_exn$4,
       max_elt$6,
       max_elt_exn$4,
       choose$1,
       choose_exn$1,
       split$4,
       group_by$0,
       find_exn$6,
       nth$4,
       remove_index$0,
       to_tree$5,
       to_sequence$5,
       binary_search$5,
       binary_search_segmented$5,
       merge_to_sequence$0,
       to_map,
       quickcheck_observer$5,
       quickcheck_shrinker$5,
       _wo_,
       _wp_,
       _wq_,
       _wr_,
       _ws_,
       _wt_,
       _wu_,
       _wv_,
       _ww_,
       _wx_,
       _wy_,
       _wz_,
       _wA_,
       _wB_,
       _wC_,
       _wD_,
       _wE_];
    function _wW_(Elt)
     {var
       sexp_of_t=Elt[2],
       include=caml_call1(Make,Elt),
       comparator=include[1],
       _brn_=Make_plain_using_comparator$0([0,sexp_of_t,comparator]);
      return [0,
              _brn_[1],
              _brn_[72],
              _brn_[73],
              _brn_[21],
              _brn_[22],
              _brn_[23],
              _brn_[24],
              _brn_[25],
              _brn_[26],
              _brn_[27],
              _brn_[28],
              _brn_[29],
              _brn_[30],
              _brn_[31],
              _brn_[32],
              _brn_[33],
              _brn_[34],
              _brn_[35],
              _brn_[36],
              _brn_[37],
              _brn_[38],
              _brn_[39],
              _brn_[40],
              _brn_[41],
              _brn_[42],
              _brn_[43],
              _brn_[44],
              _brn_[45],
              _brn_[46],
              _brn_[47],
              _brn_[48],
              _brn_[49],
              _brn_[50],
              _brn_[51],
              _brn_[52],
              _brn_[53],
              _brn_[54],
              _brn_[55],
              _brn_[56],
              _brn_[57],
              _brn_[58],
              _brn_[59],
              _brn_[60],
              _brn_[61],
              _brn_[62],
              _brn_[63],
              _brn_[64],
              _brn_[65],
              _brn_[66],
              _brn_[67],
              _brn_[68],
              _brn_[69],
              _brn_[70],
              _brn_[71],
              _brn_[4],
              _brn_[5],
              _brn_[6],
              _brn_[7],
              _brn_[8],
              _brn_[9],
              _brn_[10],
              _brn_[11],
              _brn_[12],
              _brn_[13],
              _brn_[14],
              _brn_[15],
              _brn_[16],
              _brn_[17],
              _brn_[18],
              _brn_[19],
              _brn_[20],
              _brn_[74],
              _brn_[76],
              _brn_[75]]}
    var
     _wY_=
      [0,
       empty$7,
       singleton$7,
       union_list$1,
       of_list$5,
       of_sequence$6,
       of_array$1,
       of_sorted_array$5,
       of_sorted_array_unchecked$5,
       of_increasing_iterator_uncheck$5,
       stable_dedup_list$1,
       map$18,
       filter_map$9,
       of_tree$5,
       of_hash_set$0,
       of_hashtbl_keys$1,
       of_map_keys,
       quickcheck_generator$5],
     Core_Set=
      [0,
       compare$25,
       [0,
        sexp_of_t$28,
        length$7,
        is_empty$7,
        iter$11,
        fold$8,
        fold_result$1,
        exists$8,
        for_all$8,
        count$6,
        sum$1,
        find$6,
        find_map$1,
        to_list$3,
        to_array$1,
        invariants$3,
        mem$6,
        add$5,
        remove$5,
        union$1,
        inter$0,
        diff$0,
        symmetric_diff$3,
        compare_direct$3,
        equal$10,
        is_subset,
        are_disjoint,
        fold_until$5,
        fold_right$4,
        iter2$3,
        filter$8,
        partition_tf$5,
        elements,
        min_elt$5,
        min_elt_exn$3,
        max_elt$5,
        max_elt_exn$3,
        choose$0,
        choose_exn$0,
        split$3,
        group_by,
        find_exn$5,
        nth$3,
        remove_index,
        to_tree$4,
        to_sequence$4,
        binary_search$4,
        binary_search_segmented$4,
        merge_to_sequence,
        to_map$0,
        obs_tree$0,
        shr_tree$0,
        empty$4,
        singleton$5,
        union_list,
        of_list$3,
        of_sequence$4,
        of_array,
        of_sorted_array$3,
        of_sorted_array_unchecked$3,
        of_increasing_iterator_uncheck$3,
        stable_dedup_list,
        map$16,
        filter_map$7,
        of_tree$3,
        of_hash_set,
        of_hashtbl_keys$0,
        of_map_keys$0,
        gen_tree$0],
       _wY_,
       invariants$5,
       comparator$0,
       empty$6,
       singleton$6,
       length$9,
       is_empty$9,
       mem$8,
       add$7,
       remove$7,
       union$3,
       union_list$0,
       inter$2,
       diff$2,
       symmetric_diff$5,
       compare_direct$5,
       hash_fold_direct$0,
       equal$12,
       exists$10,
       for_all$10,
       count$8,
       sum$3,
       find$8,
       find_map$3,
       find_exn$7,
       nth$5,
       remove_index$1,
       is_subset$1,
       are_disjoint$1,
       Base_Set[31],
       of_list$4,
       of_sequence$5,
       of_array$0,
       of_hash_set$1,
       of_hashtbl_keys$2,
       to_list$5,
       to_array$3,
       to_tree$6,
       of_tree$4,
       of_sorted_array$4,
       of_sorted_array_unchecked$4,
       of_increasing_iterator_uncheck$4,
       stable_dedup_list$0,
       map$17,
       filter_map$8,
       filter$10,
       fold$10,
       fold_result$3,
       fold_until$7,
       fold_right$6,
       iter$13,
       iter2$5,
       partition_tf$7,
       elements$1,
       min_elt$7,
       min_elt_exn$5,
       max_elt$7,
       max_elt_exn$5,
       choose$2,
       choose_exn$2,
       split$5,
       group_by$1,
       to_sequence$6,
       binary_search$6,
       binary_search_segmented$6,
       [0,
        _k7_[1],
        _k7_[2],
        _k7_[3],
        _k7_[4],
        _k7_[5],
        _k7_[6],
        _k7_[7],
        _k7_[8],
        _k7_[9],
        _k7_[11],
        _k7_[12],
        _k7_[13]],
       merge_to_sequence$1,
       to_map,
       of_map_keys,
       quickcheck_generator$6,
       quickcheck_observer$5,
       quickcheck_shrinker$5,
       _wX_,
       _wW_,
       _wV_,
       _wU_,
       _wT_,
       _wS_,
       _wR_,
       sexp_of_m_t$2,
       m_t_of_sexp$2,
       m_t_sexp_grammar$2,
       compare_m_t$0,
       equal_m_t$2,
       hash_fold_m_t$0,
       hash_m_t,
       bin_shape_m_t$0,
       bin_size_m_t$0,
       bin_write_m_t$0,
       bin_read_m_t$1,
       bin_read_m_t$2,
       quickcheck_generator_m_t$2,
       quickcheck_observer_m_t$2,
       quickcheck_shrinker_m_t$2,
       _wQ_,
       _wP_,
       _wO_];
    caml_register_global(5286,Core_Set,"Core__Set");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Comparable_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$125);
    caml_call1(Expect_test_collector[5][1],cst_core_src_comparable_intf_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$126,cst$42);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$127);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Comparable_intf$0);
    var Core_Comparable_intf=[0];
    caml_register_global(5287,Core_Comparable_intf,"Core__Comparable_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Comparable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$128);
    caml_call1(Expect_test_collector[5][1],cst_core_src_comparable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$129,cst$43);
    function Validate$0(T)
     {function to_string(t)
       {var _brm_=caml_call1(T[2],t);return caml_call1(Base[84][15],_brm_)}
      function validate_bound(min,max,t)
       {return caml_call5(Validate[33],to_string,min,max,T[1],t)}
      function validate_lbound(min,t){return validate_bound(min,0,t)}
      function validate_ubound(max,t){return validate_bound(0,max,t)}
      return [0,validate_lbound,validate_ubound,validate_bound]}
    function Validate_with_zero(T)
     {var
       V=Validate$0([0,T[1],T[2]]),
       validate_lbound=V[1],
       validate_ubound=V[2],
       validate_bound=V[3],
       excl_zero=[1,T[3]],
       incl_zero=[0,T[3]];
      function validate_positive(t)
       {return caml_call2(validate_lbound,excl_zero,t)}
      function validate_non_negative(t)
       {return caml_call2(validate_lbound,incl_zero,t)}
      function validate_negative(t)
       {return caml_call2(validate_ubound,excl_zero,t)}
      function validate_non_positive(t)
       {return caml_call2(validate_ubound,incl_zero,t)}
      return [0,
              V,
              validate_lbound,
              validate_ubound,
              validate_bound,
              excl_zero,
              incl_zero,
              validate_positive,
              validate_non_negative,
              validate_negative,
              validate_non_positive]}
    function Map_and_set_binable_using_comp(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       comparator=T[12],
       Map=_vv_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[10],T[11],T[12]]),
       Set=_wR_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[10],T[11],T[12]]);
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              comparator,
              Map,
              Set]}
    function Make_plain_using_comparator$1(T)
     {var
       M=caml_call1(Base_Comparable[11],T),
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       sexp_of_t=T[1],
       compare$0=M[8],
       include=Validate$0([0,compare$0,sexp_of_t]),
       validate_lbound=include[1],
       validate_ubound=include[2],
       validate_bound=include[3],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_vz_(T),
       Set=_wT_(T);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Make_plain$1(T)
     {var sexp_of_t=T[2],include=caml_call1(Make,T),comparator=include[1];
      return Make_plain_using_comparator$1([0,sexp_of_t,comparator])}
    function Make_using_comparator$1(T)
     {var
       M=caml_call1(Base_Comparable[11],[0,T[2],T[3]]),
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       sexp_of_t=T[2],
       compare$0=M[8],
       include=Validate$0([0,compare$0,sexp_of_t]),
       validate_lbound=include[1],
       validate_ubound=include[2],
       validate_bound=include[3],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_vx_(T),
       Set=_wS_(T);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Make$2(T)
     {var
       t_of_sexp=T[2],
       sexp_of_t=T[3],
       include=caml_call1(Make,[0,T[1],T[3]]),
       comparator=include[1];
      return Make_using_comparator$1([0,t_of_sexp,sexp_of_t,comparator])}
    function Make_binable_using_comparator$1(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[9],
       sexp_of_t=T[10],
       M=caml_call1(Base_Comparable[11],[0,T[10],T[11]]),
       sexp_of_t$0=T[10],
       compare=T[11][1],
       _brl_=Validate$0([0,compare,sexp_of_t$0]),
       validate_lbound=_brl_[1],
       validate_ubound=_brl_[2],
       validate_bound=_brl_[3],
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare$0=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_vv_(T),
       Set=_wR_(T);
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              M,
              validate_lbound,
              validate_ubound,
              validate_bound,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare$0,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function Inherit(C,T)
     {var t_of_sexp=T[1],sexp_of_t=T[2];
      function compare(t$0,t)
       {var _brj_=caml_call1(T[3],t),_brk_=caml_call1(T[3],t$0);
        return caml_call2(C[1],_brk_,_brj_)}
      return Make$2([0,compare,t_of_sexp,sexp_of_t])}
    var
     min=Base_Comparable[6],
     max=Base_Comparable[5],
     equal$14=Base_Comparable[4],
     reverse=Base_Comparable[3],
     lift=Base_Comparable[2],
     lexicographic=Base_Comparable[1];
    function Make$3(X)
     {var Map=caml_call1(_vs_[1][15],X),Set=caml_call1(_wO_[1][16],X);
      return [0,Map,Set]}
    var V1$11=[0,Make$3],Stable$2=[0,V1$11];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$130);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Comparable$0);
    function _wZ_(T)
     {var
       _bri_=Validate_with_zero(T),
       validate_lbound=_bri_[2],
       validate_ubound=_bri_[3],
       validate_bound=_bri_[4],
       validate_positive=_bri_[7],
       validate_non_negative=_bri_[8],
       validate_negative=_bri_[9],
       validate_non_positive=_bri_[10],
       include=caml_call1(Base_Comparable[13],T),
       is_positive=include[1],
       is_non_negative=include[2],
       is_negative=include[3],
       is_non_positive=include[4],
       sign=include[5];
      return [0,
              is_positive,
              is_non_negative,
              is_negative,
              is_non_positive,
              sign,
              validate_lbound,
              validate_ubound,
              validate_bound,
              validate_positive,
              validate_non_negative,
              validate_negative,
              validate_non_positive]}
    function _w0_(_brg_)
     {var _brh_=Validate_with_zero(_brg_);
      return [0,
              _brh_[2],
              _brh_[3],
              _brh_[4],
              _brh_[7],
              _brh_[8],
              _brh_[9],
              _brh_[10]]}
    function _w1_(T)
     {var
       t_of_sexp=T[1],
       sexp_of_t=T[2],
       include=caml_call1(Base_Comparable[12],[0,T[2]]),
       symbol=include[1],
       symbol$0=include[2],
       symbol$1=include[3],
       symbol$2=include[4],
       symbol$3=include[5],
       symbol$4=include[6],
       equal=include[7],
       compare=include[8],
       min=include[9],
       max=include[10],
       ascending=include[11],
       descending=include[12],
       between=include[13],
       clamp_exn=include[14],
       clamp=include[15],
       comparator=include[16],
       include$0=Validate$0([0,compare,sexp_of_t]),
       validate_lbound=include$0[1],
       validate_ubound=include$0[2],
       validate_bound=include$0[3],
       Replace_polymorphic_compare=
        [0,
         symbol,
         symbol$0,
         symbol$1,
         symbol$2,
         symbol$3,
         symbol$4,
         equal,
         compare,
         min,
         max],
       Map=_vx_([0,t_of_sexp,sexp_of_t,comparator]),
       Set=_wS_([0,t_of_sexp,sexp_of_t,comparator]);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function _w2_(_bre_)
     {var _brf_=Map_and_set_binable_using_comp(_bre_);
      return [0,_brf_[12],_brf_[13],_brf_[14]]}
    function _w3_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       include=caml_call1(Make,[0,T[9],T[11]]),
       comparator=include[1],
       _brd_=
        Map_and_set_binable_using_comp
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           compare,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,_brd_[12],_brd_[13],_brd_[14]]}
    function _w4_(M,X)
     {var
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       bin_size_t=X[1],
       bin_write_t=X[2],
       bin_read_t=X[3],
       bin_read_t$0=X[4],
       bin_shape_t=X[5],
       bin_writer_t=X[6],
       bin_reader_t=X[7],
       bin_t=X[8],
       t_of_sexp=X[9],
       sexp_of_t=X[10],
       include=Validate$0([0,compare,sexp_of_t]),
       validate_lbound=include[1],
       validate_ubound=include[2],
       validate_bound=include[3],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=
        _vv_
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       Set=
        _wR_
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set]}
    function _w5_(M,X)
     {var
       symbol=M[1],
       symbol$0=M[2],
       symbol$1=M[3],
       symbol$2=M[4],
       symbol$3=M[5],
       symbol$4=M[6],
       equal=M[7],
       compare=M[8],
       min=M[9],
       max=M[10],
       ascending=M[11],
       descending=M[12],
       between=M[13],
       clamp_exn=M[14],
       clamp=M[15],
       comparator=M[16],
       t_of_sexp=X[1],
       sexp_of_t=X[2],
       include=Validate$0([0,compare,sexp_of_t]),
       validate_lbound=include[1],
       validate_ubound=include[2],
       validate_bound=include[3],
       Replace_polymorphic_compare=
        [0,M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10]],
       Map=_vx_([0,t_of_sexp,sexp_of_t,comparator]),
       Set=_wS_([0,t_of_sexp,sexp_of_t,comparator]);
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    function _w6_(_brb_)
     {var _brc_=Make_binable_using_comparator$1(_brb_);
      return [0,
              _brc_[15],
              _brc_[16],
              _brc_[17],
              _brc_[18],
              _brc_[19],
              _brc_[20],
              _brc_[21],
              _brc_[22],
              _brc_[23],
              _brc_[24],
              _brc_[25],
              _brc_[26],
              _brc_[27],
              _brc_[28],
              _brc_[29],
              _brc_[12],
              _brc_[13],
              _brc_[14],
              _brc_[31],
              _brc_[30],
              _brc_[32],
              _brc_[33]]}
    function _w7_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       include=caml_call1(Make,[0,T[9],T[11]]),
       comparator=include[1],
       include$0=
        Make_binable_using_comparator$1
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t,
           comparator]),
       validate_lbound=include$0[12],
       validate_ubound=include$0[13],
       validate_bound=include$0[14],
       symbol=include$0[15],
       symbol$0=include$0[16],
       symbol$1=include$0[17],
       symbol$2=include$0[18],
       symbol$3=include$0[19],
       symbol$4=include$0[20],
       equal=include$0[21],
       compare=include$0[22],
       min=include$0[23],
       max=include$0[24],
       ascending=include$0[25],
       descending=include$0[26],
       between=include$0[27],
       clamp_exn=include$0[28],
       clamp=include$0[29],
       comparator$0=include$0[30],
       Replace_polymorphic_compare=include$0[31],
       Map=include$0[32],
       Set=include$0[33];
      return [0,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator$0,
              Map,
              Set]}
    var
     Core_Comparable=
      [0,
       lexicographic,
       lift,
       reverse,
       equal$14,
       max,
       min,
       Inherit,
       Base_Comparable[7],
       Base_Comparable[8],
       Make_plain$1,
       Make$2,
       Make_plain_using_comparator$1,
       Make_using_comparator$1,
       _w7_,
       _w6_,
       _w5_,
       _w4_,
       _w3_,
       _w2_,
       _w1_,
       Validate$0,
       _w0_,
       _wZ_,
       Stable$2];
    caml_register_global(5288,Core_Comparable,"Core__Comparable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Doubly_linked_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$131);
    caml_call1(Expect_test_collector[5][1],cst_core_src_doubly_linked_int);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$132,cst$44);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$133);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Doubly_linked_intf$0);
    var Core_Doubly_linked_intf=[0];
    caml_register_global
     (5289,Core_Doubly_linked_intf,"Core__Doubly_linked_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_List);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$134);
    caml_call1(Expect_test_collector[5][1],cst_core_src_list_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$135,cst$45);
    var stable_dedup=_wX_[74];
    function stable_dedup_staged(compare)
     {function t_of_sexp(param){throw [0,Assert_failure,_w8_]}
      function sexp_of_t(param){throw [0,Assert_failure,_w9_]}
      var _bra_=_wV_([0,compare,t_of_sexp,sexp_of_t])[63];
      return caml_call1(Base_Staged[1],_bra_)}
    function zip_with_remainder(xs$1,ys$1)
     {var acc=0,xs=xs$1,ys=ys$1;
      for(;;)
       {if(xs)
         {if(ys)
           {var
             ys$0=ys[2],
             y=ys[1],
             xs$0=xs[2],
             x=xs[1],
             acc$0=[0,[0,x,y],acc],
             acc=acc$0,
             xs=xs$0,
             ys=ys$0;
            continue}
          return [0,caml_call1(parts,acc),[0,[0,xs]]]}
        return ys
                ?[0,caml_call1(parts,acc),[0,[1,ys]]]
                :[0,caml_call1(parts,acc),0]}}
    var
     Duplicate_found=
      [248,cst_Core_List_Duplicate_found,caml_fresh_oo_id(0)];
    function _w__(param)
     {if(param[1] === Duplicate_found)
       {var
         arg1_002=param[3],
         arg0_001=param[2],
         res0_003=caml_call1(arg0_001,0),
         res1_004=caml_call1(include$41[28],arg1_002);
        return [1,[0,_w$_,[0,res0_003,[0,res1_004,0]]]]}
      throw [0,Assert_failure,_xa_]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Duplicate_found,_w__);
    function exn_if_dup(compare,opt,t,to_sexp)
     {if(opt)var sth=opt[1],context=sth;else var context=cst_exn_if_dup;
      var match=caml_call2(_rg_,t,compare);
      if(match)
       {var dup=match[1];
        throw [0,
               Duplicate_found,
               function(param){return caml_call1(to_sexp,dup)},
               context]}
      return 0}
    function slice$1(a,start,stop){return slice(length$0,_rv_,a,start,stop)}
    var
     _xb_=caml_call1(Bin_prot_Shape[3][1],cst_a$46),
     _xc_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_list_ml_56_23),
     _xd_=bin_shape_t$27(caml_call2(Bin_prot_Shape[15],_xc_,_xb_)),
     _xe_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$47),0],
     _xf_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$90),_xe_,_xd_],0],
     _xg_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_list_ml_56_4),
     group$43=caml_call2(Bin_prot_Shape[6],_xg_,_xf_);
    function bin_shape_t$35(a)
     {var _bq$_=caml_call1(Bin_prot_Shape[2][1],cst_t$91);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$43,_bq$_),[0,a,0])}
    function bin_size_t$41(size_of_a,v){return bin_size_t$33(size_of_a,v)}
    function bin_write_t$41(write_a,buf,pos,v)
     {return bin_write_t$33(write_a,buf,pos,v)}
    function bin_writer_t$29(bin_writer_a)
     {function _bq7_(v)
       {var _bq8_=bin_writer_a[2];
        return function(_bq9_,_bq__)
         {return bin_write_t$41(_bq8_,v,_bq9_,_bq__)}}
      return [0,function(v){return bin_size_t$41(bin_writer_a[1],v)},_bq7_]}
    function bin_read_t$84(of_a,buf,pos_ref,vint)
     {return bin_read_t$68(of_a,buf,pos_ref,vint)}
    function bin_read_t$85(of_a,buf,pos_ref)
     {return bin_read_t$69(of_a,buf,pos_ref)}
    function bin_reader_t$29(bin_reader_a)
     {function _bq6_(buf,pos_ref,vtag)
       {return bin_read_t$84(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$85(bin_reader_a[1],buf,pos_ref)},
              _bq6_]}
    function bin_t$29(bin_a)
     {var _bq4_=bin_reader_t$29(bin_a[3]),_bq5_=bin_writer_t$29(bin_a[2]);
      return [0,bin_shape_t$35(bin_a[1]),_bq5_,_bq4_]}
    function compare$27(cmp_a,a_010,b_011)
     {return caml_call3
              (_pE_,
               function(a_012,b_013){return caml_call2(cmp_a,a_012,b_013)},
               a_010,
               b_011)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$136);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_List$0);
    var
     _xh_=
      [0,
       [0,
        list_of_sexp,
        sexp_of_list,
        bin_shape_t$35,
        bin_size_t$41,
        bin_write_t$41,
        bin_read_t$85,
        bin_read_t$84,
        bin_writer_t$29,
        bin_reader_t$29,
        bin_t$29,
        compare$27]],
     _xi_=
      [0,
       Assoc[13],
       Assoc[14],
       Assoc[15],
       Assoc[16],
       Assoc[17],
       Assoc[18],
       Assoc[19],
       Assoc[20],
       Assoc[21],
       Assoc[1],
       Assoc[2],
       Assoc[3],
       Assoc[4],
       Assoc[5],
       Assoc[6],
       Assoc[7],
       Assoc[8],
       Assoc[9],
       Assoc[10],
       Assoc[11],
       Assoc[12]],
     Core_List=
      [0,
       _pE_,
       hash_fold_list,
       list_of_sexp,
       sexp_of_list,
       _pF_,
       _pG_,
       length$0,
       is_empty$0,
       _pH_,
       _pI_,
       _pJ_,
       _pK_,
       _pL_,
       _pM_,
       _pN_,
       _pO_,
       _pP_,
       _pQ_,
       _pR_,
       _pS_,
       _pT_,
       _pU_,
       _pV_,
       _pW_,
       _pX_,
       _pY_,
       _pZ_,
       _p0_,
       _p1_,
       _p2_,
       _p3_,
       _p4_,
       _p5_,
       parts,
       _p6_,
       _p7_,
       _p8_,
       _p9_,
       _p__,
       _p$_,
       _qa_,
       _qb_,
       _qc_,
       _qd_,
       _qe_,
       _qf_,
       _qg_,
       _qh_,
       _qi_,
       _qj_,
       _qk_,
       _ql_,
       _qm_,
       _qn_,
       _qo_,
       _qp_,
       _qq_,
       _qr_,
       _qs_,
       _qt_,
       _qu_,
       _qv_,
       _qw_,
       _qx_,
       _qy_,
       _qz_,
       _qA_,
       _qB_,
       _qC_,
       _qD_,
       _qE_,
       _qF_,
       _qG_,
       _qH_,
       _qI_,
       _qJ_,
       _qK_,
       _qL_,
       _qM_,
       _qN_,
       _qO_,
       _qP_,
       _qQ_,
       _qR_,
       _qS_,
       _qT_,
       _qU_,
       _qV_,
       _qW_,
       _qX_,
       _qY_,
       _qZ_,
       _q0_,
       _q1_,
       _q2_,
       _q3_,
       _q4_,
       _q5_,
       _q6_,
       _q7_,
       _q8_,
       _q9_,
       _q__,
       _q$_,
       _ra_,
       _rb_,
       _rc_,
       _rd_,
       _re_,
       _rf_,
       _rg_,
       _rh_,
       _ri_,
       _rj_,
       _rk_,
       _rl_,
       _rm_,
       _rn_,
       _ro_,
       _rp_,
       _rq_,
       _rr_,
       _rs_,
       _rt_,
       _rv_,
       _rw_,
       _rx_,
       _ry_,
       _rz_,
       _rA_,
       _rB_,
       _rC_,
       _rD_,
       _rE_,
       _rF_,
       _rG_,
       _rH_,
       _rI_,
       _rJ_,
       _rK_,
       _rL_,
       _rM_,
       _rN_,
       _rO_,
       _rP_,
       bin_shape_t$27,
       bin_size_t$33,
       bin_write_t$33,
       bin_read_t$69,
       bin_read_t$68,
       bin_writer_t$21,
       bin_reader_t$21,
       bin_t$21,
       typerep_of_t$1,
       typename_of_t$1,
       _xi_,
       stable_dedup,
       stable_dedup_staged,
       Duplicate_found,
       exn_if_dup,
       slice$1,
       _sh_,
       _si_,
       _sm_,
       _sn_,
       to_string,
       _sj_,
       gen_with_length,
       _sk_,
       _sl_,
       zip_with_remainder,
       _xh_];
    caml_register_global(5292,Core_List,"Core__List");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Option);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$137);
    caml_call1(Expect_test_collector[5][1],cst_core_src_option_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$138,cst$46);
    var
     _xj_=include$28[1],
     hash_fold_option=include$28[2],
     _xk_=include$28[3],
     _xl_=include$28[4],
     option_of_sexp=include$28[6],
     sexp_of_option=include$28[7],
     _xw_=include$28[19],
     _xy_=include$28[21],
     _xD_=include$28[27],
     _xE_=include$28[28],
     _xF_=include$28[29],
     _xH_=include$28[31],
     _xK_=include$28[34],
     _xU_=include$28[44],
     _xZ_=include$28[49],
     _x0_=include$28[50],
     _xm_=include$28[5],
     _xn_=include$28[8],
     _xo_=include$28[9],
     _xp_=include$28[10],
     _xq_=include$28[11],
     _xr_=include$28[12],
     _xs_=include$28[13],
     _xt_=include$28[14],
     _xu_=include$28[16],
     _xv_=include$28[17],
     _xx_=include$28[20],
     _xz_=include$28[22],
     _xA_=include$28[23],
     _xB_=include$28[24],
     _xC_=include$28[25],
     _xG_=include$28[30],
     _xI_=include$28[32],
     _xJ_=include$28[33],
     _xL_=include$28[35],
     _xM_=include$28[36],
     _xN_=include$28[37],
     _xO_=include$28[38],
     _xP_=include$28[39],
     _xQ_=include$28[40],
     _xR_=include$28[41],
     _xS_=include$28[42],
     _xT_=include$28[43],
     _xV_=include$28[45],
     _xW_=include$28[46],
     _xX_=include$28[47],
     _xY_=include$28[48],
     _x1_=include$28[51],
     _x2_=include$28[52],
     _x3_=include$28[53],
     _x4_=include$28[54],
     _x5_=include$28[55],
     _x6_=include$28[56],
     _x7_=include$28[57],
     _x8_=caml_call1(Bin_prot_Shape[3][1],cst_a$48),
     _x9_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_option_ml_4_12),
     _x__=caml_call1(_cX_,caml_call2(Bin_prot_Shape[15],_x9_,_x8_)),
     _x$_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$49),0],
     _ya_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$92),_x$_,_x__],0],
     _yb_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_option_ml_4_0),
     group$44=caml_call2(Bin_prot_Shape[6],_yb_,_ya_);
    function bin_shape_t$36(a)
     {var _bq3_=caml_call1(Bin_prot_Shape[2][1],cst_t$93);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$44,_bq3_),[0,a,0])}
    function bin_size_t$42(size_of_a,v){return caml_call2(_bj_,size_of_a,v)}
    function bin_write_t$42(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_cZ_,write_a),buf,pos,v)}
    function bin_writer_t$30(bin_writer_a)
     {function _bqZ_(v)
       {var _bq0_=bin_writer_a[2];
        return function(_bq1_,_bq2_)
         {return bin_write_t$42(_bq0_,v,_bq1_,_bq2_)}}
      return [0,function(v){return bin_size_t$42(bin_writer_a[1],v)},_bqZ_]}
    function bin_read_t$86(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_c2_,of_a),buf,pos_ref,vint)}
    function bin_read_t$87(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_c1_,of_a),buf,pos_ref)}
    function bin_reader_t$30(bin_reader_a)
     {function _bqY_(buf,pos_ref,vtag)
       {return bin_read_t$86(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$87(bin_reader_a[1],buf,pos_ref)},
              _bqY_]}
    function bin_t$30(bin_a)
     {var _bqW_=bin_reader_t$30(bin_a[3]),_bqX_=bin_writer_t$30(bin_a[2]);
      return [0,bin_shape_t$36(bin_a[1]),_bqX_,_bqW_]}
    var
     Typename_of_t$2=caml_call1(Typerep_lib_Make_typename[2],[0,name$11]),
     typename_of_t$2=Typename_of_t$2[2];
    function typerep_of_t$2(of_a)
     {var name_of_t=caml_call1(Typename_of_t$2[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_bqV_){return caml_call1(_eU_,of_a)}]]]]}
    function compare$28(cmp_a,a_003,b_004)
     {return caml_call3
              (_xj_,
               function(a_005,b_006){return caml_call2(cmp_a,a_005,b_006)},
               a_003,
               b_004)}
    var
     include$42=caml_call1(Derived,[0,compare$28,sexp_of_option]),
     _yc_=include$42[1];
    function validate$4(none,some,t)
     {if(t)
       {var x=t[1],_bqT_=caml_call2(Validate[13],some,x);
        return caml_call2(Validate[8],cst_some,_bqT_)}
      var _bqU_=caml_call2(Validate[13],none,0);
      return caml_call2(Validate[8],cst_none,_bqU_)}
    var
     _yd_=Base_quickcheck_Generator[13],
     _yf_=Base_quickcheck_Shrinker[14],
     _ye_=Base_quickcheck_Observer[14],
     _yg_=caml_call1(Bin_prot_Shape[3][1],cst_a$50),
     _yh_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_option_ml_23_23),
     _yi_=bin_shape_t$36(caml_call2(Bin_prot_Shape[15],_yh_,_yg_)),
     _yj_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$51),0],
     _yk_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$94),_yj_,_yi_],0],
     _yl_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_option_ml_23_4),
     group$45=caml_call2(Bin_prot_Shape[6],_yl_,_yk_);
    function bin_shape_t$37(a)
     {var _bqS_=caml_call1(Bin_prot_Shape[2][1],cst_t$95);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$45,_bqS_),[0,a,0])}
    function bin_size_t$43(size_of_a,v){return bin_size_t$42(size_of_a,v)}
    function bin_write_t$43(write_a,buf,pos,v)
     {return bin_write_t$42(write_a,buf,pos,v)}
    function bin_writer_t$31(bin_writer_a)
     {function _bqO_(v)
       {var _bqP_=bin_writer_a[2];
        return function(_bqQ_,_bqR_)
         {return bin_write_t$43(_bqP_,v,_bqQ_,_bqR_)}}
      return [0,function(v){return bin_size_t$43(bin_writer_a[1],v)},_bqO_]}
    function bin_read_t$88(of_a,buf,pos_ref,vint)
     {return bin_read_t$86(of_a,buf,pos_ref,vint)}
    function bin_read_t$89(of_a,buf,pos_ref)
     {return bin_read_t$87(of_a,buf,pos_ref)}
    function bin_reader_t$31(bin_reader_a)
     {function _bqN_(buf,pos_ref,vtag)
       {return bin_read_t$88(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$89(bin_reader_a[1],buf,pos_ref)},
              _bqN_]}
    function bin_t$31(bin_a)
     {var _bqL_=bin_reader_t$31(bin_a[3]),_bqM_=bin_writer_t$31(bin_a[2]);
      return [0,bin_shape_t$37(bin_a[1]),_bqM_,_bqL_]}
    function compare$29(cmp_a,a_007,b_008)
     {return caml_call3
              (_xj_,
               function(a_009,b_010){return caml_call2(cmp_a,a_009,b_010)},
               a_007,
               b_008)}
    function equal$15(cmp_a,a_011,b_012)
     {return caml_call3
              (_xl_,
               function(a_013,b_014){return caml_call2(cmp_a,a_013,b_014)},
               a_011,
               b_012)}
    function unsafe_value(t){var value=t[1];return value}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$139);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Option$0);
    var
     Core_Option=
      [0,
       bin_shape_t$36,
       bin_size_t$42,
       bin_write_t$42,
       bin_read_t$87,
       bin_read_t$86,
       bin_writer_t$30,
       bin_reader_t$30,
       bin_t$30,
       typerep_of_t$2,
       typename_of_t$2,
       _xj_,
       hash_fold_option,
       _xk_,
       _xl_,
       _xm_,
       option_of_sexp,
       sexp_of_option,
       _xn_,
       _xo_,
       _xp_,
       _xq_,
       _xr_,
       _xs_,
       _xt_,
       _xu_,
       _xv_,
       _xw_,
       _xx_,
       _xy_,
       _xz_,
       _xA_,
       _xB_,
       _xC_,
       _xD_,
       _xE_,
       _xF_,
       _xG_,
       _xH_,
       _xI_,
       _xJ_,
       _xK_,
       _xL_,
       _xM_,
       _xN_,
       _xO_,
       _xP_,
       _xQ_,
       _xR_,
       _xS_,
       _xT_,
       _xU_,
       _xV_,
       _xW_,
       _xX_,
       _xY_,
       _xZ_,
       _x0_,
       _x1_,
       _x2_,
       _x3_,
       _x4_,
       _x5_,
       _x6_,
       _x7_,
       _yc_,
       _yd_,
       _ye_,
       _yf_,
       validate$4,
       [0,
        [0,
         bin_shape_t$37,
         bin_size_t$43,
         bin_write_t$43,
         bin_read_t$89,
         bin_read_t$88,
         bin_writer_t$31,
         bin_reader_t$31,
         bin_t$31,
         compare$29,
         equal$15,
         option_of_sexp,
         sexp_of_option]],
       [0,[0,_xZ_,unsafe_value]]];
    caml_register_global(5293,Core_Option,"Core__Option");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Optional_syntax_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$140);
    caml_call1(Expect_test_collector[5][1],cst_core_src_optional_syntax_i);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$141,cst$47);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$142);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Optional_syntax_intf$0);
    var Core_Optional_syntax_intf=[0];
    caml_register_global
     (5294,Core_Optional_syntax_intf,"Core__Optional_syntax_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Optional_syntax);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$143);
    caml_call1(Expect_test_collector[5][1],cst_core_src_optional_syntax_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$144,cst$48);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$145);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Optional_syntax$0);
    var Core_Optional_syntax=[0];
    caml_register_global(5295,Core_Optional_syntax,"Core__Optional_syntax");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Union_find);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$146);
    caml_call1(Expect_test_collector[5][1],cst_core_src_union_find_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$147,cst$49);
    function invariant$2(param,t)
     {var t$0=t,depth=0;
      for(;;)
       {var _bqK_=t$0[1];
        if(0 === _bqK_[0])
         {var t$1=_bqK_[1],depth$0=depth + 1 | 0,t$0=t$1,depth=depth$0;
          continue}
        var r=_bqK_[1];
        if(depth <= r[2])return 0;
        throw [0,Assert_failure,_ym_]}}
    function create$10(v){return [0,[1,[0,v,0]]]}
    function representative(t$1)
     {var _bqJ_=t$1[1];
      if(0 === _bqJ_[0])
       {var t$2=_bqJ_[1],t=t$2,inner_node=_bqJ_,inner=t$1,descendants=0;
        for(;;)
         {var _bqI_=t[1];
          if(0 === _bqI_[0])
           {var
             t$0=_bqI_[1],
             descendants$0=[0,inner,descendants],
             inner_node=_bqI_,
             inner=t,
             t=t$0,
             descendants=descendants$0;
            continue}
          var r=_bqI_[1];
          caml_call2(_pH_,descendants,function(t){t[1] = inner_node;return 0});
          return [0,t,r]}}
      var r$0=_bqJ_[1];
      return [0,t$1,r$0]}
    function root(t)
     {var _bqH_=t[1];
      if(0 === _bqH_[0])return caml_call1(_a2_,representative(t));
      var r=_bqH_[1];
      return r}
    function rank$3(t){return root(t)[2]}
    function get$0(t){return root(t)[1]}
    function set$5(t,v){root(t)[1] = v;return 0}
    function same_class(t1,t2)
     {var _bqG_=root(t2);return caml_call2(_a6_,root(t1),_bqG_)}
    function union$5(t1,t2)
     {var
       match=representative(t1),
       r1=match[2],
       t1$0=match[1],
       match$0=representative(t2),
       r2=match$0[2],
       t2$0=match$0[1];
      if(caml_call2(_a6_,r1,r2))return 0;
      var n1=r1[2],n2=r2[2];
      if(n1 < n2){t1$0[1] = [0,t2$0];return 0}
      t2$0[1] = [0,t1$0];
      var _bqE_=n1 === n2?1:0,_bqF_=_bqE_?(r1[2] = r1[2] + 1 | 0,0):_bqE_;
      return _bqF_}
    function is_compressed(t)
     {invariant$2(function(_bqD_){return 0},t);
      var _bqC_=t[1];
      if(0 === _bqC_[0]){var t$0=_bqC_[1];return 0 === t$0[1][0]?0:1}
      return 1}
    var Private$0=[0,is_compressed,rank$3];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$148);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Union_find$0);
    var
     Core_Union_find=
      [0,invariant$2,create$10,get$0,set$5,same_class,union$5,Private$0];
    caml_register_global(5296,Core_Union_find,"Core__Union_find");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Doubly_linked);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$149);
    caml_call1(Expect_test_collector[5][1],cst_core_src_doubly_linked_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$150,cst$50);
    var
     Attempt_to_mutate_list_during_=
      [248,cst_Core_Doubly_linked_Attempt,caml_fresh_oo_id(0)];
    function phys_equal(_bqB_,_bqA_){return _bqB_ === _bqA_?1:0}
    function create$11(param){return create$10([0,1,0])}
    function equal$16(t1,t2){return same_class(t1,t2)}
    function length$11(t){return get$0(t)[1]}
    function union_find_get_check_no_pendin(t)
     {var s=get$0(t);
      if(0 < s[2])throw Attempt_to_mutate_list_during_;
      return s}
    function check_no_pending_iterations(t)
     {union_find_get_check_no_pendin(t);return 0}
    function incr_length(n,t)
     {var s=union_find_get_check_no_pendin(t);s[1] = s[1] + n | 0;return 0}
    function incr_pending_iters(s){s[2] = s[2] + 1 | 0;return 0}
    function decr_pending_iters(s){s[2] = s[2] - 1 | 0;return 0}
    function with_iteration_2(t,a,b,f)
     {var s=get$0(t);
      incr_pending_iters(s);
      try
       {var r=caml_call2(f,a,b)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function with_iteration_3(t,a,b,c,f)
     {var s=get$0(t);
      incr_pending_iters(s);
      try
       {var r=caml_call3(f,a,b,c)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function with_iteration_4(t,a,b,c,d,f)
     {var s=get$0(t);
      incr_pending_iters(s);
      try
       {var r=caml_call4(f,a,b,c,d)}
      catch(exn)
       {exn = caml_wrap_exception(exn);decr_pending_iters(s);throw exn}
      decr_pending_iters(s);
      return r}
    function prev(t){return t[2]}
    function create_aux(v,header)
     {var t=[];caml_update_dummy(t,[0,v,t,t,header]);return t}
    function is_singleton(t){return t === t[2]?1:0}
    function sexp_of_t$32(sexp_of_a,t){return caml_call1(sexp_of_a,t[1])}
    function create$12(v){return create_aux(v,create$11(0))}
    function value$0(t){return t[1]}
    function set$6(t,v){t[1] = v;return 0}
    function unsafe_split_or_splice(a,b,c,d)
     {a[3] = d;d[2] = a;c[3] = b;b[2] = c;return 0}
    function unsafe_split_or_splice_after(t1,t2)
     {return unsafe_split_or_splice(t1[3][2],t1[3],t2[3][2],t2[3])}
    function unsafe_split_or_splice_before(t1,t2)
     {return unsafe_split_or_splice(t1[2],t1[2][3],t2[2],t2[2][3])}
    function check_two_nodes_no_pending_ite(t1,t2)
     {check_no_pending_iterations(t1[4]);
      var _bqz_=1 - equal$16(t1[4],t2[4]);
      return _bqz_?check_no_pending_iterations(t2[4]):_bqz_}
    function split_or_splice_before(t1,t2)
     {check_two_nodes_no_pending_ite(t1,t2);
      return unsafe_split_or_splice_before(t1,t2)}
    function insert_before(t,v)
     {incr_length(1,t[4]);
      var node=create_aux(v,t[4]);
      unsafe_split_or_splice_before(t,node);
      return node}
    function insert_after(t,v)
     {incr_length(1,t[4]);
      var node=create_aux(v,t[4]);
      unsafe_split_or_splice_after(t,node);
      return node}
    var dummy_header=create$11(0);
    function unlink(t)
     {var _bqy_=t[2],node=_bqy_[3];
      if(! is_singleton(node))
       {incr_length(-1,_bqy_[4]);
        unsafe_split_or_splice_after(_bqy_,node);
        node[4] = dummy_header}
      return 0}
    function invariant$3(invariant_a,t)
     {var _bqx_=t[1];
      if(_bqx_)
       {var head=_bqx_[1],header=head[4],n=1,elt=head;
        for(;;)
         {var next_elt=elt[3],prev_elt=elt[2];
          if(elt === next_elt[2])
           {if(elt === prev_elt[3])
             {if(equal$16(elt[4],header))
               {caml_call1(invariant_a,elt[1]);
                if(next_elt === head)
                 {if(n === length$11(header))return 0;
                  throw [0,Assert_failure,_yq_]}
                var n$0=n + 1 | 0,n=n$0,elt=next_elt;
                continue}
              throw [0,Assert_failure,_yn_]}
            throw [0,Assert_failure,_yo_]}
          throw [0,Assert_failure,_yp_]}}
      return 0}
    function create$13(param){return [0,0]}
    function equal$17(t$0,t){return t$0 === t?1:0}
    function of_list$7(param)
     {if(param)
       {var xs=param[2],x=param[1],first=create$12(x);
        caml_call3(_pI_,xs,first,insert_after);
        return [0,[0,first]]}
      return create$13(0)}
    function of_array$3(arr)
     {var len=arr.length - 1;
      if(len)
       {var elt=create$12(caml_check_bound(arr,0)[1]),elt$0=elt,i=1;
        for(;;)
         {if(i < arr.length - 1)
           {var
             i$0=i + 1 | 0,
             elt$1=insert_after(elt$0,caml_check_bound(arr,i)[1 + i]),
             elt$0=elt$1,
             i=i$0;
            continue}
          return [0,[0,elt]]}}
      return create$13(0)}
    function map$20(t,f)
     {var _bqt_=t[1];
      if(_bqt_)
       {var
         first=_bqt_[1],
         new_first=create$12(caml_call1(f,first[1])),
         _bqu_=
          function(f,new_first,first)
           {var next$0=first[3],_bqw_=1 - (next$0 === first?1:0);
            if(_bqw_)
             {var acc=new_first,elt=next$0;
              for(;;)
               {var
                 acc$0=insert_after(acc,caml_call1(f,elt[1])),
                 next=elt[3],
                 _bqv_=1 - (next === first?1:0);
                if(_bqv_){var acc=acc$0,elt=next;continue}
                return _bqv_}}
            return _bqw_};
        with_iteration_3(first[4],f,new_first,first,_bqu_);
        return [0,[0,new_first]]}
      return create$13(0)}
    function mapi$5(t,f)
     {var _bqp_=t[1];
      if(_bqp_)
       {var
         first=_bqp_[1],
         new_first=create$12(caml_call2(f,0,first[1])),
         _bqq_=
          function(f,new_first,first)
           {var next$0=first[3],_bqs_=1 - (next$0 === first?1:0);
            if(_bqs_)
             {var i=1,acc=new_first,elt=next$0;
              for(;;)
               {var
                 acc$0=insert_after(acc,caml_call2(f,i,elt[1])),
                 next=elt[3],
                 _bqr_=1 - (next === first?1:0);
                if(_bqr_){var i$0=i + 1 | 0,i=i$0,acc=acc$0,elt=next;continue}
                return _bqr_}}
            return _bqs_};
        with_iteration_3(first[4],f,new_first,first,_bqq_);
        return [0,[0,new_first]]}
      return create$13(0)}
    function fold_elt(t,init,f)
     {var _bqn_=t[1];
      if(_bqn_)
       {var
         first=_bqn_[1],
         _bqo_=
          function(f,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call2(f,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bqo_)}
      return init}
    function foldi_elt(t,init,f)
     {var _bql_=t[1];
      if(_bql_)
       {var
         first=_bql_[1],
         _bqm_=
          function(f,acc,first)
           {var i=0,acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call3(f,i,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var i$0=i + 1 | 0,i=i$0,acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bqm_)}
      return init}
    function fold_elt_1(t,init,f,a)
     {var _bqj_=t[1];
      if(_bqj_)
       {var
         first=_bqj_[1],
         _bqk_=
          function(f,a,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call3(f,a,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_4(first[4],f,a,init,first,_bqk_)}
      return init}
    function foldi_elt_1(t,init,f,a)
     {var _bqh_=t[1];
      if(_bqh_)
       {var
         first=_bqh_[1],
         _bqi_=
          function(f,a,acc,first)
           {var i=0,acc$0=acc,elt=first;
            for(;;)
             {var acc$1=caml_call4(f,i,a,acc$0,elt),elt$0=elt[3];
              if(elt$0 === first)return acc$1;
              var i$0=i + 1 | 0,i=i$0,acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_4(first[4],f,a,init,first,_bqi_)}
      return init}
    function iter_elt(t,f)
     {return fold_elt_1(t,0,function(f,param,elt){return caml_call1(f,elt)},f)}
    function iteri_elt(t,f)
     {return foldi_elt(t,0,function(i,param,elt){return caml_call2(f,i,elt)})}
    function find_elt(t,f)
     {function _bqf_(r)
       {fold_elt_1
         (t,
          0,
          function(f,param,elt)
           {var _bqg_=caml_call1(f,elt[1]);
            return _bqg_?caml_call1(r,[0,elt]):_bqg_},
          f);
        return 0}
      return caml_call1(Base_With_return[1],_bqf_)}
    function findi_elt(t,f)
     {function _bqd_(r)
       {foldi_elt_1
         (t,
          0,
          function(i,f,param,elt)
           {var _bqe_=caml_call2(f,i,elt[1]);
            return _bqe_?caml_call1(r,[0,[0,i,elt]]):_bqe_},
          f);
        return 0}
      return caml_call1(Base_With_return[1],_bqd_)}
    function iter$16(t,f)
     {var _bqa_=t[1];
      if(_bqa_)
       {var
         first=_bqa_[1],
         _bqb_=
          function(first,f)
           {var elt=first;
            for(;;)
             {caml_call1(f,elt[1]);
              var next=elt[3],_bqc_=1 - (next === first?1:0);
              if(_bqc_){var elt=next;continue}
              return _bqc_}};
        return with_iteration_2(first[4],first,f,_bqb_)}
      return 0}
    function length$12(t)
     {var _bp$_=t[1];
      if(_bp$_){var first=_bp$_[1];return length$11(first[4])}
      return 0}
    function iteri$5(t,f)
     {var _bp8_=t[1];
      if(_bp8_)
       {var
         first=_bp8_[1],
         _bp9_=
          function(first,f)
           {var i=0,elt=first;
            for(;;)
             {caml_call2(f,i,elt[1]);
              var next=elt[3],_bp__=1 - (next === first?1:0);
              if(_bp__){var i$0=i + 1 | 0,i=i$0,elt=next;continue}
              return _bp__}};
        return with_iteration_2(first[4],first,f,_bp9_)}
      return 0}
    function foldi$0(t,init,f)
     {return foldi_elt_1
              (t,
               init,
               function(i,f,acc,elt){return caml_call3(f,i,acc,elt[1])},
               f)}
    function fold$12(t,init,f)
     {return fold_elt_1
              (t,init,function(f,acc,elt){return caml_call2(f,acc,elt[1])},f)}
    var
     iter$17=[0,-198771759,iter$16],
     length$13=[0,-198771759,length$12],
     C=caml_call1(include$7[16],[0,fold$12,iter$17,length$13]),
     _yr_=C[10],
     _ys_=C[11],
     _yt_=C[8],
     _yu_=C[12],
     _yv_=C[13],
     _yw_=C[5],
     _yx_=C[9],
     _yy_=C[1],
     _yz_=C[15],
     _yA_=C[16],
     _yB_=C[17],
     _yC_=C[6],
     _yD_=C[7];
    function unchecked_iter(t,f)
     {var _bp5_=t[1];
      if(_bp5_)
       {var first=_bp5_[1],elt=first;
        for(;;)
         {caml_call1(f,elt[1]);
          var next=elt[3],_bp6_=t[1];
          if(_bp6_)
           {var first$0=_bp6_[1],_bp7_=1 - (first$0 === next?1:0);
            if(_bp7_){var elt=next;continue}
            return _bp7_}
          return 0}}
      return 0}
    function is_empty$11(t){return caml_call1(_xZ_,t[1])}
    function fold_right$8(t,init,f)
     {var _bp3_=t[1];
      if(_bp3_)
       {var
         first=_bp3_[1],
         _bp4_=
          function(f,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var elt$0=elt[2],acc$1=caml_call2(f,elt$0[1],acc$0);
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bp4_)}
      return init}
    function fold_right_elt(t,init,f)
     {var _bp1_=t[1];
      if(_bp1_)
       {var
         first=_bp1_[1],
         _bp2_=
          function(f,acc,first)
           {var acc$0=acc,elt=first;
            for(;;)
             {var elt$0=elt[2],acc$1=caml_call2(f,elt$0,acc$0);
              if(elt$0 === first)return acc$1;
              var acc$0=acc$1,elt=elt$0;
              continue}};
        return with_iteration_3(first[4],f,init,first,_bp2_)}
      return init}
    function to_list$7(t)
     {return fold_right$8(t,0,function(x,tl){return [0,x,tl]})}
    function sexp_of_t$33(sexp_of_a,t)
     {return caml_call2(sexp_of_list,sexp_of_a,to_list$7(t))}
    function t_of_sexp$26(a_of_sexp,s)
     {return of_list$7(caml_call2(list_of_sexp,a_of_sexp,s))}
    function t_sexp_grammar$4(elt_grammar)
     {var _bp0_=caml_call1(include$25[5],elt_grammar);
      return caml_call1(Sexplib_Sexp_grammar[1],_bp0_)}
    function copy$2(t){return of_list$7(to_list$7(t))}
    function clear$1(t){t[1] = 0;return 0}
    function compare$30(compare_elt,t1,t2)
     {var _bpW_=t1[1],_bpX_=t2[1];
      if(_bpW_)
       {if(_bpX_)
         {var
           f2=_bpX_[1],
           f1=_bpW_[1],
           _bpY_=
            function(compare_elt,f1,f2)
             {function _bpZ_(compare_elt,f1,f2)
               {var elt1=f1,elt2=f2;
                for(;;)
                 {var compare_result=caml_call2(compare_elt,elt1[1],elt2[1]);
                  if(0 === compare_result)
                   {var
                     elt1$0=elt1[3],
                     elt2$0=elt2[3],
                     match=elt1$0 === f1?1:0,
                     match$0=elt2$0 === f2?1:0;
                    if(match)return match$0?0:-1;
                    if(match$0)return 1;
                    var elt1=elt1$0,elt2=elt2$0;
                    continue}
                  return compare_result}}
              return with_iteration_3(f2[4],compare_elt,f1,f2,_bpZ_)};
          return with_iteration_3(f1[4],compare_elt,f1,f2,_bpY_)}
        return 1}
      return _bpX_?-1:0}
    var
     Transfer_src_and_dst_are_same_=
      [248,cst_Core_Doubly_linked_Transfe,caml_fresh_oo_id(0)];
    function transfer(src,dst)
     {if(src === dst)throw Transfer_src_and_dst_are_same_;
      var _bpS_=src[1];
      if(_bpS_)
       {var src_head=_bpS_[1],_bpT_=dst[1];
        if(_bpT_)
         {var dst_head=_bpT_[1],_bpU_=dst_head[4],_bpV_=src_head[4];
          if(same_class(_bpV_,_bpU_))
           var match=-823486817;
          else
           {var
             n1=union_find_get_check_no_pendin(_bpV_)[1],
             n2=union_find_get_check_no_pendin(_bpU_)[1];
            with_iteration_4
             (_bpV_,
              _bpV_,
              _bpU_,
              n1,
              n2,
              function(t1,t2,n1,n2)
               {return with_iteration_4
                        (t2,
                         t1,
                         t2,
                         n1,
                         n2,
                         function(t1,t2,n1,n2)
                          {union$5(t1,t2);return set$5(t1,[0,n1 + n2 | 0,0])})});
            var match=1016869580}
          if(1016869580 <= match)
           {split_or_splice_before(dst_head,src_head);return clear$1(src)}
          throw Transfer_src_and_dst_are_same_}
        dst[1] = [0,src_head];
        return clear$1(src)}
      return 0}
    function map_inplace$1(t,f)
     {return iter_elt(t,function(elt){return set$6(elt,caml_call1(f,elt[1]))})}
    function mapi_inplace$0(t,f)
     {return iteri_elt
              (t,function(i,elt){return set$6(elt,caml_call2(f,i,elt[1]))})}
    function remove_list(t,to_remove)
     {return caml_call2
              (_pH_,
               to_remove,
               function(elt)
                {var _bpQ_=t[1];
                 if(_bpQ_)
                  {var head=_bpQ_[1];
                   if(head === elt)
                    {var next_elt=elt[3],_bpR_=head === next_elt?0:[0,next_elt];
                     t[1] = _bpR_}}
                 return unlink(elt)})}
    function filter_inplace$1(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          fold_elt
           (t,
            0,
            function(elts,elt){return caml_call1(f,elt[1])?elts:[0,elt,elts]}));
      return remove_list(t,to_remove)}
    function filteri_inplace$0(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          foldi_elt
           (t,
            0,
            function(i,elts,elt)
             {return caml_call2(f,i,elt[1])?elts:[0,elt,elts]}));
      return remove_list(t,to_remove)}
    function filter_map_inplace$0(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          fold_elt
           (t,
            0,
            function(elts,elt)
             {var match=caml_call1(f,elt[1]);
              if(match){var value=match[1];set$6(elt,value);return elts}
              return [0,elt,elts]}));
      return remove_list(t,to_remove)}
    function filter_mapi_inplace$0(t,f)
     {var
       to_remove=
        caml_call1
         (parts,
          foldi_elt
           (t,
            0,
            function(i,elts,elt)
             {var match=caml_call2(f,i,elt[1]);
              if(match){var value=match[1];set$6(elt,value);return elts}
              return [0,elt,elts]}));
      return remove_list(t,to_remove)}
    var
     Elt_does_not_belong_to_list=
      [248,cst_Core_Doubly_linked_Elt_doe,caml_fresh_oo_id(0)];
    function choose$4(t){return t[1]}
    function last_elt(t){return caml_call2(_xy_,t[1],prev)}
    function first$0(t){return caml_call2(_xy_,t[1],value$0)}
    function last$0(t){return caml_call2(_xy_,last_elt(t),value$0)}
    function is_first$0(t,elt)
     {var _bpP_=t[1];
      if(_bpP_)
       {var first=_bpP_[1];
        if(equal$16(first[4],elt[4]))return elt === first?1:0;
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function is_last(t,elt)
     {var _bpO_=t[1];
      if(_bpO_)
       {var first=_bpO_[1];
        if(equal$16(first[4],elt[4]))
         {var last=first[2];return elt === last?1:0}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function mem_elt(t,elt)
     {var _bpN_=t[1];
      if(_bpN_){var first=_bpN_[1];return equal$16(first[4],elt[4])}
      return 0}
    function prev$0(t,elt)
     {var _bpM_=t[1];
      if(_bpM_)
       {var first=_bpM_[1];
        if(elt === first)return 0;
        if(equal$16(first[4],elt[4]))return [0,elt[2]];
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function next(t,elt)
     {var _bpL_=t[1];
      if(_bpL_)
       {var first=_bpL_[1],last=first[2];
        if(elt === last)return 0;
        if(equal$16(first[4],elt[4]))return [0,elt[3]];
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_after$0(t,elt,v)
     {var _bpK_=t[1];
      if(_bpK_)
       {var first=_bpK_[1];
        if(equal$16(first[4],elt[4]))return insert_after(elt,v);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_before$0(t,elt,v)
     {var _bpJ_=t[1];
      if(_bpJ_)
       {var first=_bpJ_[1];
        if(elt === first)
         {var new_elt=insert_before(first,v);
          t[1] = [0,new_elt];
          return new_elt}
        if(equal$16(first[4],elt[4]))return insert_before(elt,v);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function insert_empty(t,v)
     {var new_elt=create$12(v);t[1] = [0,new_elt];return new_elt}
    function insert_last(t,v)
     {var _bpI_=t[1];
      if(_bpI_){var first=_bpI_[1];return insert_before(first,v)}
      return insert_empty(t,v)}
    function add$9(t,v)
     {var _bpH_=t[1];
      if(_bpH_)
       {var first=_bpH_[1],new_elt=insert_before(first,v);
        t[1] = [0,new_elt];
        return new_elt}
      return insert_empty(t,v)}
    function remove_last(t)
     {var _bpG_=t[1];
      if(_bpG_)
       {var first=_bpG_[1],node=first[2];
        if(! is_singleton(node))
         {incr_length(-1,first[4]);
          unsafe_split_or_splice_before(first,node);
          node[4] = dummy_header}
        if(first === node)t[1] = 0;
        return [0,node[1]]}
      return 0}
    function remove_one(t)
     {var _bpE_=t[1];
      if(_bpE_)
       {var first=_bpE_[1],second=first[3];
        unlink(first);
        var _bpF_=first === second?0:[0,second];
        t[1] = _bpF_;
        return [0,first[1]]}
      return 0}
    function remove$9(t,elt)
     {var _bpD_=t[1];
      if(_bpD_)
       {var first=_bpD_[1];
        if(elt === first){remove_one(t);return 0}
        if(equal$16(first[4],elt[4]))return unlink(elt);
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function filter$12(t,f)
     {var new_t=create$13(0),_bpA_=t[1];
      if(_bpA_)
       {var
         first=_bpA_[1],
         _bpB_=
          function(f,new_t,first)
           {var elt=first;
            for(;;)
             {if(caml_call1(f,elt[1]))insert_last(new_t,elt[1]);
              var next=elt[3],_bpC_=1 - (next === first?1:0);
              if(_bpC_){var elt=next;continue}
              return _bpC_}};
        with_iteration_3(first[4],f,new_t,first,_bpB_)}
      return new_t}
    function filteri$5(t,f)
     {var new_t=create$13(0),_bpx_=t[1];
      if(_bpx_)
       {var
         first=_bpx_[1],
         _bpy_=
          function(f,new_t,first)
           {var i=0,elt=first;
            for(;;)
             {if(caml_call2(f,i,elt[1]))insert_last(new_t,elt[1]);
              var next=elt[3],_bpz_=1 - (next === first?1:0);
              if(_bpz_){var i$0=i + 1 | 0,i=i$0,elt=next;continue}
              return _bpz_}};
        with_iteration_3(first[4],f,new_t,first,_bpy_)}
      return new_t}
    function filter_map$11(t,f)
     {var new_t=create$13(0),_bpu_=t[1];
      if(_bpu_)
       {var
         first=_bpu_[1],
         _bpv_=
          function(f,new_t,first)
           {var elt=first;
            for(;;)
             {var match=caml_call1(f,elt[1]);
              if(match){var value=match[1];insert_last(new_t,value)}
              var next=elt[3],_bpw_=1 - (next === first?1:0);
              if(_bpw_){var elt=next;continue}
              return _bpw_}};
        with_iteration_3(first[4],f,new_t,first,_bpv_)}
      return new_t}
    function filter_mapi$5(t,f)
     {var new_t=create$13(0),_bpr_=t[1];
      if(_bpr_)
       {var
         first=_bpr_[1],
         _bps_=
          function(f,new_t,first)
           {var i=0,elt=first;
            for(;;)
             {var match=caml_call2(f,i,elt[1]);
              if(match){var value=match[1];insert_last(new_t,value)}
              var next=elt[3],_bpt_=1 - (next === first?1:0);
              if(_bpt_){var i$0=i + 1 | 0,i=i$0,elt=next;continue}
              return _bpt_}};
        with_iteration_3(first[4],f,new_t,first,_bps_)}
      return new_t}
    function partition_tf$9(t,f)
     {var t1=create$13(0),t2=create$13(0),_bpn_=t[1];
      if(_bpn_)
       {var
         first=_bpn_[1],
         _bpo_=
          function(f,t1,t2,first)
           {var elt=first;
            for(;;)
             {var _bpp_=elt[1],t1$0=caml_call1(f,elt[1])?t1:t2;
              insert_last(t1$0,_bpp_);
              var next=elt[3],_bpq_=1 - (next === first?1:0);
              if(_bpq_){var elt=next;continue}
              return _bpq_}};
        with_iteration_4(first[4],f,t1,t2,first,_bpo_)}
      return [0,t1,t2]}
    function partitioni_tf$5(t,f)
     {var t1=create$13(0),t2=create$13(0),_bpj_=t[1];
      if(_bpj_)
       {var
         first=_bpj_[1],
         _bpk_=
          function(f,t1,t2,first)
           {var i=0,elt=first;
            for(;;)
             {var _bpl_=elt[1],t1$0=caml_call2(f,i,elt[1])?t1:t2;
              insert_last(t1$0,_bpl_);
              var next=elt[3],_bpm_=1 - (next === first?1:0);
              if(_bpm_){var i$0=i + 1 | 0,i=i$0,elt=next;continue}
              return _bpm_}};
        with_iteration_4(first[4],f,t1,t2,first,_bpk_)}
      return [0,t1,t2]}
    function partition_map$4(t,f)
     {var t1=create$13(0),t2=create$13(0),_bpg_=t[1];
      if(_bpg_)
       {var
         first=_bpg_[1],
         _bph_=
          function(f,t1,t2,first)
           {var elt=first;
            for(;;)
             {var match=caml_call1(f,elt[1]);
              if(0 === match[0])
               {var value=match[1];insert_last(t1,value)}
              else
               {var value$0=match[1];insert_last(t2,value$0)}
              var next=elt[3],_bpi_=1 - (next === first?1:0);
              if(_bpi_){var elt=next;continue}
              return _bpi_}};
        with_iteration_4(first[4],f,t1,t2,first,_bph_)}
      return [0,t1,t2]}
    function partition_mapi$4(t,f)
     {var t1=create$13(0),t2=create$13(0),_bpd_=t[1];
      if(_bpd_)
       {var
         first=_bpd_[1],
         _bpe_=
          function(f,t1,t2,first)
           {var i=0,elt=first;
            for(;;)
             {var match=caml_call2(f,i,elt[1]);
              if(0 === match[0])
               {var value=match[1];insert_last(t1,value)}
              else
               {var value$0=match[1];insert_last(t2,value$0)}
              var next=elt[3],_bpf_=1 - (next === first?1:0);
              if(_bpf_){var i$0=i + 1 | 0,i=i$0,elt=next;continue}
              return _bpf_}};
        with_iteration_4(first[4],f,t1,t2,first,_bpe_)}
      return [0,t1,t2]}
    var
     Invalid_move_elt_equals_anchor=
      [248,cst_Core_Doubly_linked_Invalid,caml_fresh_oo_id(0)];
    function move_before(t,elt,anchor)
     {if(anchor === elt)throw Invalid_move_elt_equals_anchor;
      if(equal$16(anchor[4],elt[4]))
       {var _bpa_=t[1];
        if(_bpa_)
         {var first=_bpa_[1];
          if(equal$16(first[4],elt[4]))
           {var after_elt=elt[3];
            split_or_splice_before(elt,after_elt);
            var first$0=first === elt?(t[1] = [0,after_elt],after_elt):first;
            split_or_splice_before(anchor,elt);
            var
             _bpb_=first$0 === anchor?1:0,
             _bpc_=_bpb_?(t[1] = [0,elt],0):_bpb_;
            return _bpc_}
          throw Elt_does_not_belong_to_list}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function move_to_front(t,elt)
     {var _bo__=t[1];
      if(_bo__)
       {var first=_bo__[1],_bo$_=1 - (elt === first?1:0);
        return _bo$_?move_before(t,elt,first):_bo$_}
      throw Elt_does_not_belong_to_list}
    function move_after(t,elt,anchor)
     {if(anchor === elt)throw Invalid_move_elt_equals_anchor;
      if(equal$16(anchor[4],elt[4]))
       {var _bo9_=t[1];
        if(_bo9_)
         {var first=_bo9_[1];
          if(equal$16(first[4],elt[4]))
           {var after_elt=elt[3];
            split_or_splice_before(elt,after_elt);
            if(first === elt)t[1] = [0,after_elt];
            check_two_nodes_no_pending_ite(anchor,elt);
            return unsafe_split_or_splice_after(anchor,elt)}
          throw Elt_does_not_belong_to_list}
        throw Elt_does_not_belong_to_list}
      throw Elt_does_not_belong_to_list}
    function move_to_back(t,elt)
     {var _bo7_=t[1];
      if(_bo7_)
       {var first=_bo7_[1],last=first[2],_bo8_=1 - (elt === last?1:0);
        return _bo8_?move_after(t,elt,last):_bo8_}
      throw Elt_does_not_belong_to_list}
    function to_sequence$8(t){return caml_call1(_j8_,to_list$7(t))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$151);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Doubly_linked$0);
    var
     Elt=[0,value$0,phys_equal,set$6,sexp_of_t$32],
     include$43=
      [0,
       Elt,
       compare$30,
       t_of_sexp$26,
       sexp_of_t$33,
       t_sexp_grammar$4,
       _yy_,
       length$12,
       is_empty$11,
       iter$16,
       _yw_,
       _yC_,
       _yD_,
       _yt_,
       _yx_,
       _yr_,
       _ys_,
       _yu_,
       _yv_,
       to_list$7,
       _yz_,
       _yA_,
       _yB_,
       invariant$3,
       create$13,
       of_list$7,
       of_array$3,
       equal$17,
       is_first$0,
       is_last,
       mem_elt,
       choose$4,
       last_elt,
       first$0,
       last$0,
       next,
       prev$0,
       insert_before$0,
       insert_after$0,
       add$9,
       insert_last,
       move_to_front,
       move_to_back,
       move_after,
       move_before,
       remove$9,
       remove_one,
       remove_last,
       iteri$5,
       foldi$0,
       fold_elt,
       foldi_elt,
       iter_elt,
       iteri_elt,
       fold_right$8,
       fold_right_elt,
       find_elt,
       findi_elt,
       clear$1,
       copy$2,
       transfer,
       map$20,
       mapi$5,
       filter$12,
       filteri$5,
       filter_map$11,
       filter_mapi$5,
       partition_tf$9,
       partitioni_tf$5,
       partition_map$4,
       partition_mapi$4,
       map_inplace$1,
       mapi_inplace$0,
       filter_inplace$1,
       filteri_inplace$0,
       filter_map_inplace$0,
       filter_mapi_inplace$0,
       unchecked_iter,
       to_sequence$8];
    caml_register_global(5297,include$43,"Core__Doubly_linked");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Hash_queue_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$152);
    caml_call1(Expect_test_collector[5][1],cst_core_src_hash_queue_intf_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$153,cst$51);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$154);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Hash_queue_intf$0);
    var Core_Hash_queue_intf=[0];
    caml_register_global(5298,Core_Hash_queue_intf,"Core__Hash_queue_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Sexp);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$155);
    caml_call1(Expect_test_collector[5][1],cst_core_src_sexp_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$156,cst$52);
    var
     _yE_=caml_call1(Bin_prot_Shape[2][1],cst_t$96),
     _yF_=
      [0,
       [0,cst_Atom$2,[0,_bV_,0]],
       [0,
        [0,
         cst_List$2,
         [0,
          caml_call1(_c4_,caml_call1(caml_call1(Bin_prot_Shape[13],_yE_),0)),
          0]],
        0]],
     _yG_=caml_call1(Bin_prot_Shape[9],_yF_),
     _yH_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$97),0,_yG_],0],
     _yI_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sexp_ml_5_4),
     group$46=caml_call2(Bin_prot_Shape[6],_yI_,_yH_),
     _yJ_=caml_call1(Bin_prot_Shape[2][1],cst_t$98),
     bin_shape_t$38=caml_call1(caml_call2(Bin_prot_Shape[14],group$46,_yJ_),0);
    function bin_size_t$44(param)
     {if(0 === param[0])
       {var v1=param[1],_bo5_=caml_call1(bin_size_t$1,v1);
        return caml_call2(Bin_prot_Common[23],1,_bo5_)}
      var v1$0=param[1],_bo6_=caml_call2(_bm_,bin_size_t$44,v1$0);
      return caml_call2(Bin_prot_Common[23],1,_bo6_)}
    function bin_write_t$44(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
        return caml_call3(bin_write_t$1,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,1);
      return caml_call3(caml_call1(_c6_,bin_write_t$44),buf,pos$1,v1$0)}
    var bin_writer_t$32=[0,bin_size_t$44,bin_write_t$44];
    function bin_read_t$90(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_sexp_ml_Stable_V1,pos_ref[1])}
    function bin_read_t$91(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(0 === match)
       {var arg_1=caml_call2(bin_read_t$3,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=caml_call2(caml_call1(_c8_,bin_read_t$91),buf,pos_ref);
        return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_yK_,pos_ref[1])}
    var
     bin_reader_t$32=[0,bin_read_t$91,bin_read_t$90],
     bin_t$32=[0,bin_shape_t$38,bin_writer_t$32,bin_reader_t$32];
    function compare$31(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      if(0 === a_001[0])
       {var _bo3_=a_001[1];
        if(0 === b_002[0])
         {var b_004=b_002[1];return caml_call2(_ao_,_bo3_,b_004)}
        return -1}
      var _bo4_=a_001[1];
      if(0 === b_002[0])return 1;
      var b_006=b_002[1];
      return caml_call3
              (_S_,
               function(a_007,b_008){return compare$31(a_007,b_008)},
               _bo4_,
               b_006)}
    var
     hash_fold_t$9=function _bo2_(_bo0_,_bo1_){return _bo2_.fun(_bo0_,_bo1_)},
     hash$8=function _boZ_(_boY_){return _boZ_.fun(_boY_)};
    caml_update_dummy
     (hash_fold_t$9,
      function(hsv,arg)
       {if(0 === arg[0])
         {var a0=arg[1],hsv$0=caml_call2(Base_Hash[3],hsv,0);
          return caml_call2(_aq_,hsv$0,a0)}
        var a0$0=arg[1],hsv$1=caml_call2(Base_Hash[3],hsv,1);
        return caml_call3(_U_,hash_fold_t$9,hsv$1,a0$0)});
    caml_update_dummy
     (hash$8,
      function(x)
       {var
         hsv=caml_call2(Base_Hash[11],0,0),
         _boX_=caml_call2(hash_fold_t$9,hsv,x);
        return caml_call1(Base_Hash[9],_boX_)});
    var
     t_of_sexp$27=include$19[61],
     sexp_of_t$34=include$19[60],
     _yL_=Base[84],
     hash_fold_t$10=_yL_[1],
     hash$9=_yL_[2],
     Of_sexp_error=_yL_[6],
     of_float_style=_yL_[16],
     of_int_style=_yL_[17],
     subst_found=include$19[64],
     search_physical=include$19[63],
     t_sexp_grammar$5=include$19[62],
     t_of_sexp$28=include$19[61],
     sexp_of_t$35=include$19[60],
     is_unit=include$19[59],
     unit=include$19[58],
     to_buffer_gen=include$19[57],
     to_buffer=include$19[56],
     to_buffer_mach=include$19[55],
     to_buffer_hum=include$19[54],
     to_string$0=include$19[53],
     to_string_mach=include$19[52],
     to_string_hum=include$19[51],
     of_bigstring_conv_exn=include$19[50],
     of_bigstring_conv=include$19[49],
     of_bigstring$0=include$19[48],
     of_string_conv_exn=include$19[47],
     of_string_many_conv_exn=include$19[46],
     of_string_conv=include$19[45],
     of_string_many=include$19[44],
     of_string=include$19[43],
     pp=include$19[41],
     pp_mach=include$19[40],
     pp_hum_indent=include$19[39],
     pp_hum=include$19[38],
     save_sexps=include$19[37],
     save_sexps_mach=include$19[36],
     save_sexps_hum=include$19[35],
     save=include$19[34],
     save_mach=include$19[33],
     save_hum=include$19[32],
     output=include$19[31],
     output_mach=include$19[30],
     output_hum_indent=include$19[29],
     output_hum=include$19[28],
     load_sexps_conv_exn=include$19[27],
     load_sexps_conv=include$19[26],
     load_sexp_conv_exn=include$19[25],
     load_sexp_conv=include$19[24],
     load_rev_sexps=include$19[23],
     load_sexps=include$19[22],
     load_sexp=include$19[21],
     input_rev_sexps=include$19[20],
     input_sexps=include$19[19],
     input_sexp=include$19[18],
     parse_bigstring=include$19[17],
     parse=include$19[16],
     Parse_error=include$19[15],
     scan_sexps_conv=include$19[11],
     scan_fold_sexps=include$19[10],
     scan_iter_sexps=include$19[9],
     scan_sexp_opt=include$19[8],
     scan_rev_sexps=include$19[7],
     scan_sexps=include$19[6],
     scan_sexp=include$19[5],
     size$0=include$19[4],
     default_indent=include$19[3],
     compare$32=include$19[1],
     O=[0],
     _yN_=caml_call1(Bin_prot_Shape[7],[0,bin_shape_t$38,[0,_n4_,0]]),
     _yO_=caml_call1(Bin_prot_Shape[3][1],cst_a$52),
     _yP_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sexp_ml_38_22),
     _yM_=0,
     _yQ_=caml_call2(Bin_prot_Shape[15],_yP_,_yO_),
     _yR_=function(_boW_){return bin_shape_t$7(_yQ_,_boW_)}(_yN_),
     _yS_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$53),0],
     _yT_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$99),_yS_,_yR_],_yM_],
     _yU_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sexp_ml_38_2),
     group$47=caml_call2(Bin_prot_Shape[6],_yU_,_yT_);
    function bin_shape_t$39(a)
     {var _boV_=caml_call1(Bin_prot_Shape[2][1],cst_t$100);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$47,_boV_),[0,a,0])}
    function bin_size_t$45(size_of_a,v)
     {return bin_size_t$15
              (size_of_a,
               function(param)
                {var
                  v2=param[2],
                  v1=param[1],
                  _boT_=bin_size_t$44(v1),
                  size=caml_call2(Bin_prot_Common[23],0,_boT_),
                  _boU_=caml_call1(_n0_,v2);
                 return caml_call2(Bin_prot_Common[23],size,_boU_)},
               v)}
    function bin_write_t$45(write_a,buf,pos,v)
     {return bin_write_t$15
              (write_a,
               function(buf,pos,param)
                {var v2=param[2],v1=param[1],pos$0=bin_write_t$44(buf,pos,v1);
                 return caml_call3(_n1_,buf,pos$0,v2)},
               buf,
               pos,
               v)}
    function bin_writer_t$33(bin_writer_a)
     {function _boP_(v)
       {var _boQ_=bin_writer_a[2];
        return function(_boR_,_boS_)
         {return bin_write_t$45(_boQ_,v,_boR_,_boS_)}}
      return [0,function(v){return bin_size_t$45(bin_writer_a[1],v)},_boP_]}
    function bin_read_t$92(of_a,buf,pos_ref,vint)
     {return bin_read_t$33
              (of_a,
               function(buf,pos_ref)
                {var
                  v1=bin_read_t$91(buf,pos_ref),
                  v2=caml_call2(_n2_,buf,pos_ref);
                 return [0,v1,v2]},
               buf,
               pos_ref,
               vint)}
    function bin_read_t$93(of_a,buf,pos_ref)
     {return bin_read_t$34
              (of_a,
               function(buf,pos_ref)
                {var
                  v1=bin_read_t$91(buf,pos_ref),
                  v2=caml_call2(_n2_,buf,pos_ref);
                 return [0,v1,v2]},
               buf,
               pos_ref)}
    function bin_reader_t$33(bin_reader_a)
     {function _boO_(buf,pos_ref,vtag)
       {return bin_read_t$92(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$93(bin_reader_a[1],buf,pos_ref)},
              _boO_]}
    function bin_t$33(bin_a)
     {var _boM_=bin_reader_t$33(bin_a[3]),_boN_=bin_writer_t$33(bin_a[2]);
      return [0,bin_shape_t$39(bin_a[1]),_boN_,_boM_]}
    function compare$33(cmp_a,a_009,b_010)
     {function _boL_(a_013,b_014)
       {var
         t_016=a_013[2],
         t_015=a_013[1],
         t_018=b_014[2],
         t_017=b_014[1],
         n=caml_call2(compare$32,t_015,t_017);
        return 0 === n?caml_call2(_nv_,t_016,t_018):n}
      return caml_call4
              (_hA_,
               function(a_011,b_012){return caml_call2(cmp_a,a_011,b_012)},
               _boL_,
               a_009,
               b_010)}
    function hash_fold_t$11(hash_fold_a,hsv,arg)
     {return caml_call4
              (_hC_,
               hash_fold_a,
               function(hsv,arg)
                {var
                  e1=arg[2],
                  e0=arg[1],
                  hsv$0=caml_call2(hash_fold_t$10,hsv,e0),
                  hsv$1=caml_call2(_nx_,hsv$0,e1);
                 return hsv$1},
               hsv,
               arg)}
    function sexp_of_t$36(sexp_of_a,t)
     {if(0 === t[0]){var a=t[1];return caml_call1(sexp_of_a,a)}
      var match=t[1],err=match[2],sexp=match[1];
      return [1,[0,_yV_,[0,sexp,[0,caml_call1(_nA_,err),0]]]]}
    function t_of_sexp$29(a_of_sexp,sexp)
     {var switch$0=0;
      if(1 === sexp[0])
       {var _boH_=sexp[1];
        if(_boH_)
         {var _boI_=_boH_[1];
          if
           (0
            ===
            _boI_[0]
            &&
            !
            caml_string_notequal(_boI_[1],cst_sexp_parse_error))
           {var _boJ_=_boH_[2];
            if(_boJ_)
             {var _boK_=_boJ_[2];
              if(_boK_ && ! _boK_[2]){var sexp$0=_boJ_[1];switch$0 = 1}}}}}
      if(! switch$0)var sexp$0=sexp;
      try
       {var _boG_=[0,caml_call1(a_of_sexp,sexp$0)];return _boG_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return [1,[0,sexp$0,caml_call2(_nT_,0,exn)]]}}
    function t_sexp_grammar$6(grammar)
     {return [4,[0,grammar,[0,Base[84][18],0]]]}
    var
     _yW_=caml_call1(Bin_prot_Shape[3][1],cst_a$54),
     _yX_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sexp_ml_63_14),
     _yY_=
      [0,
       [0,cst_value,caml_call2(Bin_prot_Shape[15],_yX_,_yW_)],
       [0,[0,cst_text,_bV_],0]],
     _yZ_=caml_call1(Bin_prot_Shape[8],_yY_),
     _y0_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$55),0],
     _y1_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$101),_y0_,_yZ_],0],
     _y2_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sexp_ml_62_2),
     group$48=caml_call2(Bin_prot_Shape[6],_y2_,_y1_);
    function bin_shape_t$40(a)
     {var _boF_=caml_call1(Bin_prot_Shape[2][1],cst_t$102);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$48,_boF_),[0,a,0])}
    function bin_size_t$46(size_of_a,param)
     {var
       v2=param[2],
       v1=param[1],
       _boD_=caml_call1(size_of_a,v1),
       size=caml_call2(Bin_prot_Common[23],0,_boD_),
       _boE_=caml_call1(bin_size_t$1,v2);
      return caml_call2(Bin_prot_Common[23],size,_boE_)}
    function bin_write_t$46(write_a,buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(write_a,buf,pos,v1);
      return caml_call3(bin_write_t$1,buf,pos$0,v2)}
    function bin_writer_t$34(bin_writer_a)
     {function _boz_(v)
       {var _boA_=bin_writer_a[2];
        return function(_boB_,_boC_)
         {return bin_write_t$46(_boA_,v,_boB_,_boC_)}}
      return [0,function(v){return bin_size_t$46(bin_writer_a[1],v)},_boz_]}
    function bin_read_t$94(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_sexp_ml_With_text,pos_ref[1])}
    function bin_read_t$95(of_a,buf,pos_ref)
     {var
       v_value=caml_call2(of_a,buf,pos_ref),
       v_text=caml_call2(bin_read_t$3,buf,pos_ref);
      return [0,v_value,v_text]}
    function bin_reader_t$34(bin_reader_a)
     {function _boy_(buf,pos_ref,vtag)
       {return bin_read_t$94(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$95(bin_reader_a[1],buf,pos_ref)},
              _boy_]}
    function bin_t$34(bin_a)
     {var _bow_=bin_reader_t$34(bin_a[3]),_box_=bin_writer_t$34(bin_a[2]);
      return [0,bin_shape_t$40(bin_a[1]),_box_,_bow_]}
    function sexp_of_t$37(param,t){return [0,t[2]]}
    function of_text(value_of_sexp,opt,text)
     {if(opt)var sth=opt[1],filename=sth;else var filename=cst$53;
      var
       err=
        caml_call2
         (_ov_,
          0,
          function(param)
           {return caml_call2(of_string_conv,text,value_of_sexp)});
      if(0 === err[0])
       {var _bov_=err[1];
        if(1025039613 <= _bov_[1])
         {var value=_bov_[2];return [0,[0,value,text]]}
        var match=_bov_[2],annotated=match[2],exn=match[1];
        return [1,
                caml_call2
                 (_nT_,
                  0,
                  caml_call3(include$19[14][17],filename,exn,annotated))]}
      return err}
    function t_of_sexp$30(a_of_sexp,sexp)
     {if(0 === sexp[0])
       {var text=sexp[1];return caml_call1(_oy_,of_text(a_of_sexp,0,text))}
      return caml_call2(_ef_,cst_With_text_t_should_be_stor,sexp)}
    function t_sexp_grammar$7(param)
     {return caml_call1(Sexplib_Sexp_grammar[1],include$41[1])}
    function text(t){return t[2]}
    function value$1(t){return t[1]}
    function of_value(sexp_of_value,value)
     {var text=caml_call2(to_string_hum,0,caml_call1(sexp_of_value,value));
      return [0,value,text]}
    var
     _y3_=caml_call1(Bin_prot_Shape[3][1],cst_a$56),
     _y4_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sexp_ml_97_19),
     _y5_=caml_call2(Bin_prot_Shape[15],_y4_,_y3_),
     _y6_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$57),0],
     _y7_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_no_raise),_y6_,_y5_],0],
     _y8_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sexp_ml_97_0),
     group$49=caml_call2(Bin_prot_Shape[6],_y8_,_y7_);
    function bin_shape_no_raise(a)
     {var _bou_=caml_call1(Bin_prot_Shape[2][1],cst_no_raise$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$49,_bou_),[0,a,0])}
    function bin_size_no_raise(size_of_a){return size_of_a}
    function bin_write_no_raise(write_a){return write_a}
    function bin_writer_no_raise(bin_writer_a)
     {function _bot_(v){return caml_call1(bin_writer_a[2],v)}
      return [0,function(v){return caml_call1(bin_writer_a[1],v)},_bot_]}
    function bin_read_no_raise(of_a,buf,pos_ref,vint)
     {return caml_call2(Bin_prot_Common[18],_y9_,pos_ref[1])}
    function bin_read_no_raise$0(of_a){return of_a}
    function bin_reader_no_raise(bin_reader_a)
     {function _bos_(buf,pos_ref,vtag)
       {return bin_read_no_raise(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return caml_call2(bin_reader_a[1],buf,pos_ref)},
              _bos_]}
    function bin_no_raise(bin_a)
     {var
       _boq_=bin_reader_no_raise(bin_a[3]),
       _bor_=bin_writer_no_raise(bin_a[2]);
      return [0,bin_shape_no_raise(bin_a[1]),_bor_,_boq_]}
    function no_raise_of_sexp(of_a_019){return of_a_019}
    function sexp_of_no_raise(sexp_of_a,a)
     {try
       {var _boo_=caml_call1(sexp_of_a,a);return _boo_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        try
         {var _bon_=[1,[0,_y$_,[0,caml_call1(sexp_of_t,exn),0]]];return _bon_}
        catch(_bop_){return _y__}}}
    var
     _za_=Base[84],
     _zc_=Base[84],
     _zb_=[0,_za_[3],_za_[4]],
     _zd_=
      [0,
       _zc_[21],
       _zc_[22],
       _zc_[23],
       _zc_[24],
       _zc_[25],
       _zc_[26],
       _zc_[27],
       _zc_[28],
       _zc_[29],
       _zc_[30],
       _zc_[31],
       _zc_[32],
       _zc_[33],
       _zc_[34],
       _zc_[35],
       _zc_[36]],
     include$44=function(_bom_){return _w5_(_zd_,_bom_)}(_zb_),
     _zg_=include$44[3],
     _zj_=include$44[6],
     _zl_=include$44[8],
     _ze_=include$44[1],
     _zf_=include$44[2],
     _zh_=include$44[4],
     _zi_=include$44[5],
     _zk_=include$44[7],
     _zm_=include$44[9],
     _zn_=include$44[10],
     _zo_=include$44[11],
     _zp_=include$44[12],
     _zq_=include$44[13],
     _zr_=include$44[14],
     _zs_=include$44[15],
     _zt_=include$44[16],
     _zu_=include$44[17],
     _zv_=include$44[18],
     _zw_=include$44[19],
     _zx_=include$44[20],
     _zy_=include$44[21],
     _zz_=include$44[22];
    function of_sexp_allow_extra_fields_rec(of_sexp,sexp)
     {var r=Sexplib_Conv[26],prev=r[1];
      function _bok_(param){r[1] = prev;return 0}
      function _bol_(param){r[1] = 0;return caml_call1(of_sexp,sexp)}
      return caml_call2(Base_Exn[13],_bol_,_bok_)}
    var
     _zA_=Base_quickcheck_Generator[12],
     _zB_=Base_quickcheck_Observer[13],
     _zC_=Base_quickcheck_Shrinker[13];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$157);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Sexp$0);
    var
     Core_Sexp=
      [0,
       bin_size_t$44,
       bin_write_t$44,
       bin_read_t$91,
       bin_read_t$90,
       bin_shape_t$38,
       bin_writer_t$32,
       bin_reader_t$32,
       bin_t$32,
       hash_fold_t$10,
       hash$9,
       O,
       _ze_,
       _zf_,
       _zg_,
       _zh_,
       _zi_,
       _zj_,
       _zm_,
       _zn_,
       _zo_,
       _zp_,
       _zq_,
       _zr_,
       _zs_,
       _zt_,
       _zu_,
       _zv_,
       _zw_,
       _zx_,
       _zy_,
       _zz_,
       _zA_,
       _zB_,
       _zC_,
       _zl_,
       _zk_,
       default_indent,
       size$0,
       scan_sexp,
       scan_sexps,
       scan_rev_sexps,
       scan_sexp_opt,
       scan_iter_sexps,
       scan_fold_sexps,
       scan_sexps_conv,
       Parse_error,
       parse,
       parse_bigstring,
       input_sexp,
       input_sexps,
       input_rev_sexps,
       load_sexp,
       load_sexps,
       load_rev_sexps,
       load_sexp_conv,
       load_sexp_conv_exn,
       load_sexps_conv,
       load_sexps_conv_exn,
       output_hum,
       output_hum_indent,
       output_mach,
       output,
       save_hum,
       save_mach,
       save,
       save_sexps_hum,
       save_sexps_mach,
       save_sexps,
       pp_hum,
       pp_hum_indent,
       pp_mach,
       pp,
       of_string,
       of_string_many,
       of_string_conv,
       of_string_many_conv_exn,
       of_string_conv_exn,
       of_bigstring$0,
       of_bigstring_conv,
       of_bigstring_conv_exn,
       to_string_hum,
       to_string_mach,
       to_string$0,
       to_buffer_hum,
       to_buffer_mach,
       to_buffer,
       to_buffer_gen,
       unit,
       is_unit,
       sexp_of_t$35,
       t_of_sexp$28,
       t_sexp_grammar$5,
       search_physical,
       subst_found,
       Of_sexp_error,
       of_float_style,
       of_int_style,
       bin_shape_no_raise,
       bin_size_no_raise,
       bin_write_no_raise,
       bin_writer_no_raise,
       bin_read_no_raise$0,
       bin_read_no_raise,
       bin_reader_no_raise,
       bin_no_raise,
       sexp_of_no_raise,
       no_raise_of_sexp,
       [0,
        bin_shape_t$39,
        bin_size_t$45,
        bin_write_t$45,
        bin_read_t$93,
        bin_read_t$92,
        bin_writer_t$33,
        bin_reader_t$33,
        bin_t$33,
        compare$33,
        hash_fold_t$11,
        t_of_sexp$29,
        sexp_of_t$36,
        t_sexp_grammar$6],
       [0,
        t_of_sexp$30,
        sexp_of_t$37,
        t_sexp_grammar$7,
        bin_shape_t$40,
        bin_size_t$46,
        bin_write_t$46,
        bin_read_t$95,
        bin_read_t$94,
        bin_writer_t$34,
        bin_reader_t$34,
        bin_t$34,
        of_value,
        of_text,
        value$1,
        text],
       of_sexp_allow_extra_fields_rec,
       [0,
        [0,
         t_of_sexp$27,
         sexp_of_t$34,
         bin_size_t$44,
         bin_write_t$44,
         bin_read_t$91,
         bin_read_t$90,
         bin_shape_t$38,
         bin_writer_t$32,
         bin_reader_t$32,
         bin_t$32,
         hash_fold_t$9,
         hash$8,
         compare$31]]];
    caml_register_global(5299,Core_Sexp,"Core__Sexp");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Hash_queue);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$158);
    caml_call1(Expect_test_collector[5][1],cst_core_src_hash_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$159,cst$54);
    function Make_backend(Table)
     {function key(t){return t[1]}
      function value(t){return t[2]}
      function sexp_of_t(sexp_of_key,sexp_of_data,t)
       {var _boj_=t[2];
        return sexp_of_t$33
                (function(param)
                  {var
                    arg0_001=param[1],
                    arg1_002=param[2],
                    res0_003=caml_call1(sexp_of_key,arg0_001),
                    res1_004=caml_call1(sexp_of_data,arg1_002);
                   return [1,[0,res0_003,[0,res1_004,0]]]},
                 _boj_)}
      function invariant(t)
       {var _bof_=caml_call1(Table[28],t[3]);
        if(length$12(t[2]) === _bof_)
         {var
           _bog_=caml_call1(Table[81],t[3]),
           _boh_=[0,caml_call1(Table[28],t[3])],
           keys=caml_call3(Table[4],0,_boh_,_bog_),
           _boi_=
            function(kv)
             {var key=kv[1],match=caml_call2(Table[53],t[3],key);
              if(match)
               {if(caml_call2(Table[30],keys,key))
                 throw [0,Assert_failure,_zD_];
                return caml_call3(Table[34],keys,key,0)}
              throw [0,Assert_failure,_zE_]};
          return iter$16(t[2],_boi_)}
        throw [0,Assert_failure,_zF_]}
      function create(opt,_boc_,hashable)
       {if(opt)var sth=opt[1],growth_allowed=sth;else var growth_allowed=1;
        if(_boc_)var sth$0=_boc_[1],size=sth$0;else var size=16;
        var
         _bod_=caml_call1(Base_Hashable[4],hashable),
         _boe_=caml_call3(Table[4],[0,growth_allowed],[0,size],_bod_);
        return [0,0,create$13(0),_boe_]}
      function read(t,f)
       {t[1] = t[1] + 1 | 0;
        function _bob_(param){t[1] = t[1] - 1 | 0;return 0}
        return caml_call2(Base_Exn[13],f,_bob_)}
      function ensure_can_modify(t)
       {var _boa_=0 < t[1]?1:0;
        return _boa_?caml_call1(_a3_,cst_It_is_an_error_to_modify_a):_boa_}
      function clear(t)
       {ensure_can_modify(t);clear$1(t[2]);return caml_call1(Table[16],t[3])}
      function length(t){return caml_call1(Table[28],t[3])}
      function is_empty(t){return 0 === length(t)?1:0}
      function lookup(t,k)
       {var match=caml_call2(Table[53],t[3],k);
        if(match){var elt=match[1];return [0,caml_call1(Elt[1],elt)[2]]}
        return 0}
      function lookup_exn(t,k)
       {var _bn$_=caml_call2(Table[54],t[3],k);
        return caml_call1(Elt[1],_bn$_)[2]}
      function mem(t,k){return caml_call2(Table[30],t[3],k)}
      function to_list(t){return caml_call2(_qF_,to_list$7(t[2]),value)}
      function to_array(t)
       {return caml_call2(map$0,caml_call1(_yz_,t[2]),value)}
      function for_all(t,f)
       {return read
                (t,
                 function(param)
                  {function _bn__(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_yx_,t[2],_bn__)})}
      function exists(t,f)
       {return read
                (t,
                 function(param)
                  {function _bn9_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_yt_,t[2],_bn9_)})}
      function find_map(t,f)
       {return read
                (t,
                 function(param)
                  {function _bn8_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_yv_,t[2],_bn8_)})}
      function find(t,f)
       {return read
                (t,
                 function(param)
                  {function _bn7_(kv){return caml_call1(f,kv[2])}
                   return caml_call2(_xy_,caml_call2(_yu_,t[2],_bn7_),value)})}
      function enqueue(t,back_or_front,key,value)
       {ensure_can_modify(t);
        if(caml_call2(Table[30],t[3],key))return 975255060;
        var
         contents=[0,key,value],
         elt=
          109975721 <= back_or_front
           ?add$9(t[2],contents)
           :insert_last(t[2],contents);
        caml_call3(Table[34],t[3],key,elt);
        return 17724}
      function enqueue_back(t)
       {var _bn4_=-1055860185;
        return function(_bn5_,_bn6_){return enqueue(t,_bn4_,_bn5_,_bn6_)}}
      function enqueue_front(t)
       {var _bn1_=109975721;
        return function(_bn2_,_bn3_){return enqueue(t,_bn1_,_bn2_,_bn3_)}}
      function enqueue_exn(t,back_or_front,key,value)
       {var match=enqueue(t,back_or_front,key,value);
        if(975255060 <= match)
         {var
           _bn0_=
            [0,caml_call1(sexp_of_t$35,caml_call2(Table[15],t[3],key)),0];
          return caml_call1
                  (_a5_,
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7],cst_Hash_queue_enqueue_exn_dup),
                     _bn0_]])}
        return 0}
      function enqueue_back_exn(t)
       {var _bnX_=-1055860185;
        return function(_bnY_,_bnZ_){return enqueue_exn(t,_bnX_,_bnY_,_bnZ_)}}
      function enqueue_front_exn(t)
       {var _bnU_=109975721;
        return function(_bnV_,_bnW_){return enqueue_exn(t,_bnU_,_bnV_,_bnW_)}}
      function lookup_and_move_to_back_exn(t,key)
       {ensure_can_modify(t);
        var elt=caml_call2(Table[54],t[3],key);
        move_to_back(t[2],elt);
        return caml_call1(Elt[1],elt)[2]}
      function lookup_and_move_to_back(t,key)
       {ensure_can_modify(t);
        function _bnS_(elt)
         {move_to_back(t[2],elt);return caml_call1(Elt[1],elt)[2]}
        var _bnT_=caml_call2(Table[53],t[3],key);
        return caml_call2(include$28[26][4][3],_bnT_,_bnS_)}
      function lookup_and_move_to_front_exn(t,key)
       {ensure_can_modify(t);
        var elt=caml_call2(Table[54],t[3],key);
        move_to_front(t[2],elt);
        return caml_call1(Elt[1],elt)[2]}
      function lookup_and_move_to_front(t,key)
       {ensure_can_modify(t);
        function _bnQ_(elt)
         {move_to_front(t[2],elt);return caml_call1(Elt[1],elt)[2]}
        var _bnR_=caml_call2(Table[53],t[3],key);
        return caml_call2(include$28[26][4][3],_bnR_,_bnQ_)}
      function dequeue_with_key(t,back_or_front)
       {ensure_can_modify(t);
        var
         maybe_kv=
          109975721 <= back_or_front?remove_one(t[2]):remove_last(t[2]);
        if(maybe_kv)
         {var kv=maybe_kv[1];
          caml_call2(Table[31],t[3],kv[1]);
          return [0,[0,kv[1],kv[2]]]}
        return 0}
      function dequeue_with_key_exn(t,back_or_front)
       {var match=dequeue_with_key(t,back_or_front);
        if(match)
         {var match$0=match[1],v=match$0[2],k=match$0[1];return [0,k,v]}
        return caml_call1
                (_a5_,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Hash_queue_dequeue_with_ke))}
      function dequeue_back_with_key(t)
       {return dequeue_with_key(t,-1055860185)}
      function dequeue_back_with_key_exn(t)
       {return dequeue_with_key_exn(t,-1055860185)}
      function dequeue_front_with_key(t){return dequeue_with_key(t,109975721)}
      function dequeue_front_with_key_exn(t)
       {return dequeue_with_key_exn(t,109975721)}
      function dequeue(t,back_or_front)
       {var match=dequeue_with_key(t,back_or_front);
        if(match){var match$0=match[1],v=match$0[2];return [0,v]}
        return 0}
      function dequeue_back(t){return dequeue(t,-1055860185)}
      function dequeue_front(t){return dequeue(t,109975721)}
      function last_with_key(t)
       {var match=last$0(t[2]);
        if(match)
         {var match$0=match[1],key=match$0[1],value=match$0[2];
          return [0,[0,key,value]]}
        return 0}
      function last(t)
       {var match=last$0(t[2]);
        if(match){var kv=match[1];return [0,kv[2]]}
        return 0}
      function first_with_key(t)
       {var match=first$0(t[2]);
        if(match)
         {var match$0=match[1],key=match$0[1],value=match$0[2];
          return [0,[0,key,value]]}
        return 0}
      function first(t)
       {var match=first$0(t[2]);
        if(match){var kv=match[1];return [0,kv[2]]}
        return 0}
      function dequeue_exn(t,back_or_front)
       {var match=dequeue(t,back_or_front);
        if(match){var v=match[1];return v}
        return caml_call1
                (_a5_,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Hash_queue_dequeue_exn_emp))}
      function dequeue_back_exn(t){return dequeue_exn(t,-1055860185)}
      function dequeue_front_exn(t){return dequeue_exn(t,109975721)}
      function keys(t){return caml_call2(_qF_,to_list$7(t[2]),key)}
      function iteri(t,f)
       {return read
                (t,
                 function(param)
                  {function _bnP_(kv){return caml_call2(f,kv[1],kv[2])}
                   return iter$16(t[2],_bnP_)})}
      function iter(t,f)
       {return iteri(t,function(param,data){return caml_call1(f,data)})}
      function foldi(t,init,f)
       {return read
                (t,
                 function(param)
                  {function _bnO_(ac,kv){return caml_call3(f,ac,kv[1],kv[2])}
                   return caml_call3(_yw_,t[2],init,_bnO_)})}
      function fold(t,init,f)
       {return foldi
                (t,init,function(ac,param,data){return caml_call2(f,ac,data)})}
      function count(t,f){return caml_call3(_ib_,fold,t,f)}
      function sum(m,t,f){return caml_call4(_ig_,fold,m,t,f)}
      function min_elt(t,compare){return caml_call3(_ic_,fold,t,compare)}
      function max_elt(t,compare){return caml_call3(_id_,fold,t,compare)}
      function fold_result(t,init,f){return caml_call4(_ih_,fold,init,f,t)}
      function fold_until(t,init,f)
       {var _bnM_=caml_call3(_ii_,fold,init,f);
        return function(_bnN_){return caml_call2(_bnM_,_bnN_,t)}}
      function dequeue_all(t,f)
       {for(;;)
         {var match=dequeue_front(t);
          if(match){var v=match[1];caml_call1(f,v);continue}
          return 0}}
      function remove(t,k)
       {ensure_can_modify(t);
        var match=caml_call2(Table[61],t[3],k);
        if(match){var elt=match[1];remove$9(t[2],elt);return 17724}
        return -725941051}
      function remove_exn(t,k)
       {ensure_can_modify(t);
        var match=remove(t,k);
        if(17724 <= match)return 0;
        var _bnL_=[0,caml_call1(sexp_of_t$35,caml_call2(Table[15],t[3],k)),0];
        return caml_call1
                (_a5_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Hash_queue_remove_exn_unkn),
                   _bnL_]])}
      function lookup_and_remove(t,k)
       {ensure_can_modify(t);
        var match=caml_call2(Table[61],t[3],k);
        if(match)
         {var elt=match[1];
          remove$9(t[2],elt);
          return [0,caml_call1(Elt[1],elt)[2]]}
        return 0}
      function replace(t,k,v)
       {ensure_can_modify(t);
        var match=caml_call2(Table[53],t[3],k);
        if(match){var elt=match[1];caml_call1(Elt[1],elt)[2] = v;return 17724}
        return -725941051}
      function replace_exn(t,k,v)
       {ensure_can_modify(t);
        var match=replace(t,k,v);
        if(17724 <= match)return 0;
        var _bnK_=[0,caml_call1(sexp_of_t$35,caml_call2(Table[15],t[3],k)),0];
        return caml_call1
                (_a5_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Hash_queue_replace_exn_unk),
                   _bnK_]])}
      function drop(opt,t,back_or_front)
       {if(opt)var sth=opt[1],n=sth;else var n=1;
        if(length(t) <= n)return clear(t);
        var _bnI_=1;
        if(! (n < 1))
         {var for$0=_bnI_;
          for(;;)
           {dequeue_with_key(t,back_or_front);
            var _bnJ_=for$0 + 1 | 0;
            if(n !== for$0){var for$0=_bnJ_;continue}
            break}}
        return 0}
      function drop_back(n,t){return drop(n,t,-1055860185)}
      function drop_front(n,t){return drop(n,t,109975721)}
      function copy(t)
       {var
         _bnH_=caml_call1(Table[93],t[3]),
         copied=create(0,[0,length(t)],_bnH_);
        iteri
         (t,
          function(key,data)
           {return caml_call2(enqueue_back_exn(copied),key,data)});
        return copied}
      function Make_with_hashable(T)
       {function sexp_of_t$0(of_data_008,x_009)
         {return sexp_of_t(T[1][2],of_data_008,x_009)}
        var hashable=T[2];
        function create$0(growth_allowed,size,param)
         {return create(growth_allowed,size,hashable)}
        return [0,
                length,
                is_empty,
                iter,
                fold,
                fold_result,
                fold_until,
                exists,
                for_all,
                count,
                sum,
                find,
                find_map,
                to_list,
                to_array,
                min_elt,
                max_elt,
                invariant,
                create$0,
                clear,
                copy,
                mem,
                lookup,
                lookup_exn,
                enqueue,
                enqueue_exn,
                enqueue_back,
                enqueue_back_exn,
                enqueue_front,
                enqueue_front_exn,
                lookup_and_move_to_back,
                lookup_and_move_to_back_exn,
                lookup_and_move_to_front,
                lookup_and_move_to_front_exn,
                last,
                last_with_key,
                first,
                first_with_key,
                keys,
                dequeue,
                dequeue_exn,
                dequeue_back,
                dequeue_back_exn,
                dequeue_front,
                dequeue_front_exn,
                dequeue_with_key,
                dequeue_with_key_exn,
                dequeue_back_with_key,
                dequeue_back_with_key_exn,
                dequeue_front_with_key,
                dequeue_front_with_key_exn,
                dequeue_all,
                remove,
                remove_exn,
                lookup_and_remove,
                replace,
                replace_exn,
                drop,
                drop_front,
                drop_back,
                iteri,
                foldi,
                sexp_of_t$0]}
      function Make(Key)
       {var hashable=caml_call1(Base_Hashable[3],Key);
        return Make_with_hashable([0,Key,hashable])}
      return [0,
              sexp_of_t,
              length,
              is_empty,
              iter,
              fold,
              fold_result,
              fold_until,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_list,
              to_array,
              min_elt,
              max_elt,
              invariant,
              create,
              clear,
              copy,
              mem,
              lookup,
              lookup_exn,
              enqueue,
              enqueue_exn,
              enqueue_back,
              enqueue_back_exn,
              enqueue_front,
              enqueue_front_exn,
              lookup_and_move_to_back,
              lookup_and_move_to_back_exn,
              lookup_and_move_to_front,
              lookup_and_move_to_front_exn,
              last,
              last_with_key,
              first,
              first_with_key,
              keys,
              dequeue,
              dequeue_exn,
              dequeue_back,
              dequeue_back_exn,
              dequeue_front,
              dequeue_front_exn,
              dequeue_with_key,
              dequeue_with_key_exn,
              dequeue_back_with_key,
              dequeue_back_with_key_exn,
              dequeue_front_with_key,
              dequeue_front_with_key_exn,
              dequeue_all,
              remove,
              remove_exn,
              lookup_and_remove,
              replace,
              replace_exn,
              drop,
              drop_front,
              drop_back,
              iteri,
              foldi,
              Make,
              Make_with_hashable]}
    var
     include$45=Make_backend(Core_Hashtbl),
     _AE_=include$45[63],
     _AF_=include$45[64],
     _zG_=include$45[1],
     _zH_=include$45[2],
     _zI_=include$45[3],
     _zJ_=include$45[4],
     _zK_=include$45[5],
     _zL_=include$45[6],
     _zM_=include$45[7],
     _zN_=include$45[8],
     _zO_=include$45[9],
     _zP_=include$45[10],
     _zQ_=include$45[11],
     _zR_=include$45[12],
     _zS_=include$45[13],
     _zT_=include$45[14],
     _zU_=include$45[15],
     _zV_=include$45[16],
     _zW_=include$45[17],
     _zX_=include$45[18],
     _zY_=include$45[19],
     _zZ_=include$45[20],
     _z0_=include$45[21],
     _z1_=include$45[22],
     _z2_=include$45[23],
     _z3_=include$45[24],
     _z4_=include$45[25],
     _z5_=include$45[26],
     _z6_=include$45[27],
     _z7_=include$45[28],
     _z8_=include$45[29],
     _z9_=include$45[30],
     _z__=include$45[31],
     _z$_=include$45[32],
     _Aa_=include$45[33],
     _Ab_=include$45[34],
     _Ac_=include$45[35],
     _Ad_=include$45[36],
     _Ae_=include$45[37],
     _Af_=include$45[38],
     _Ag_=include$45[39],
     _Ah_=include$45[40],
     _Ai_=include$45[41],
     _Aj_=include$45[42],
     _Ak_=include$45[43],
     _Al_=include$45[44],
     _Am_=include$45[45],
     _An_=include$45[46],
     _Ao_=include$45[47],
     _Ap_=include$45[48],
     _Aq_=include$45[49],
     _Ar_=include$45[50],
     _As_=include$45[51],
     _At_=include$45[52],
     _Au_=include$45[53],
     _Av_=include$45[54],
     _Aw_=include$45[55],
     _Ax_=include$45[56],
     _Ay_=include$45[57],
     _Az_=include$45[58],
     _AA_=include$45[59],
     _AB_=include$45[60],
     _AC_=include$45[61],
     _AD_=include$45[62];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$160);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Hash_queue$0);
    var
     Core_Hash_queue=
      [0,
       Make_backend,
       _zG_,
       _zH_,
       _zI_,
       _zJ_,
       _zK_,
       _zL_,
       _zM_,
       _zN_,
       _zO_,
       _zP_,
       _zQ_,
       _zR_,
       _zS_,
       _zT_,
       _zU_,
       _zV_,
       _zW_,
       _zX_,
       _zY_,
       _zZ_,
       _z0_,
       _z1_,
       _z2_,
       _z3_,
       _z4_,
       _z5_,
       _z6_,
       _z7_,
       _z8_,
       _z9_,
       _z__,
       _z$_,
       _Aa_,
       _Ab_,
       _Ac_,
       _Ad_,
       _Ae_,
       _Af_,
       _Ag_,
       _Ah_,
       _Ai_,
       _Aj_,
       _Ak_,
       _Al_,
       _Am_,
       _An_,
       _Ao_,
       _Ap_,
       _Aq_,
       _Ar_,
       _As_,
       _At_,
       _Au_,
       _Av_,
       _Aw_,
       _Ax_,
       _Ay_,
       _Az_,
       _AA_,
       _AB_,
       _AC_,
       _AD_,
       _AE_,
       _AF_];
    caml_register_global(5300,Core_Hash_queue,"Core__Hash_queue");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Hashable_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$161);
    caml_call1(Expect_test_collector[5][1],cst_core_src_hashable_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$162,cst$55);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$163);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Hashable_intf$0);
    var Core_Hashable_intf=[0];
    caml_register_global(5301,Core_Hashable_intf,"Core__Hashable_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Hashable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$164);
    caml_call1(Expect_test_collector[5][1],cst_core_src_hashable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$165,cst$56);
    function Make_plain$2(T)
     {var
       hash_fold_t=T[1],
       compare=T[2],
       hash=T[4],
       Table=caml_call1(Core_Hashtbl[86],[0,T[2],T[3],T[4]]),
       Hash_set=_t8_([0,T[2],T[3],T[4]]),
       Hash_queue=caml_call1(_AE_,[0,T[2],T[3],T[4]]),
       hashable=Table[2];
      return [0,compare,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_plain_and_derive_hash_fol(T)
     {var compare=T[1],sexp_of_t=T[2],hash=T[3];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return Make_plain$2([0,hash_fold_t$0,compare,sexp_of_t,hash])}
    function Make$4(T)
     {var
       hash_fold_t=T[1],
       compare=T[3],
       hash=T[5],
       Table=caml_call1(Core_Hashtbl[87],[0,T[2],T[3],T[4],T[5]]),
       Hash_set=_t7_([0,T[2],T[3],T[4],T[5]]),
       Hash_queue=caml_call1(_AE_,[0,T[3],T[4],T[5]]),
       hashable=Table[2];
      return [0,compare,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_and_derive_hash_fold_t(T)
     {var t_of_sexp=T[1],compare=T[2],sexp_of_t=T[3],hash=T[4];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return Make$4([0,hash_fold_t$0,t_of_sexp,compare,sexp_of_t,hash])}
    function Make_binable(T)
     {var
       Table=
        caml_call1
         (Core_Hashtbl[88],
          [0,T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10],T[11],T[12],T[13]]),
       Hash_set=
        _t6_
         ([0,T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10],T[11],T[12],T[13]]),
       Hash_queue=caml_call1(_AE_,[0,T[11],T[12],T[13]]),
       hash_fold_t=T[1],
       hash=T[13],
       hashable=Table[2];
      return [0,hash_fold_t,hash,hashable,Table,Hash_set,Hash_queue]}
    function Make_plain_with_hashable$1(T)
     {var
       include=T[1],
       hash_fold_t=include[1],
       compare=include[2],
       hash=include[4],
       _bnF_=T[1],
       Table=
        caml_call1(Core_Hashtbl[89],[0,[0,_bnF_[2],_bnF_[3],_bnF_[4]],T[2]]),
       Elt=T[1],
       hashable=T[2],
       Hash_set=_t5_([0,[0,Elt[2],Elt[3],Elt[4]],hashable]),
       _bnG_=T[1],
       Hash_queue=caml_call1(_AF_,[0,[0,_bnG_[2],_bnG_[3],_bnG_[4]],T[2]]),
       hashable$0=T[2];
      return [0,compare,hash_fold_t,hash,hashable$0,Table,Hash_set,Hash_queue]}
    function Make_with_hashable$1(T)
     {var
       include=T[1],
       hash_fold_t=include[1],
       compare=include[3],
       hash=include[5],
       _bnD_=T[1],
       Table=
        caml_call1
         (Core_Hashtbl[90],[0,[0,_bnD_[2],_bnD_[3],_bnD_[4],_bnD_[5]],T[2]]),
       Elt=T[1],
       hashable=T[2],
       Hash_set=_t4_([0,[0,Elt[2],Elt[3],Elt[4],Elt[5]],hashable]),
       _bnE_=T[1],
       Hash_queue=caml_call1(_AF_,[0,[0,_bnE_[3],_bnE_[4],_bnE_[5]],T[2]]),
       hashable$0=T[2];
      return [0,compare,hash_fold_t,hash,hashable$0,Table,Hash_set,Hash_queue]}
    function Make_binable_with_hashable(T)
     {var
       _bnB_=T[1],
       Table=
        caml_call1
         (Core_Hashtbl[91],
          [0,
           [0,
            _bnB_[2],
            _bnB_[3],
            _bnB_[4],
            _bnB_[5],
            _bnB_[6],
            _bnB_[7],
            _bnB_[8],
            _bnB_[9],
            _bnB_[10],
            _bnB_[11],
            _bnB_[12],
            _bnB_[13]],
           T[2]]),
       Elt=T[1],
       hashable=T[2],
       Hash_set=
        _t3_
         ([0,
           [0,
            Elt[2],
            Elt[3],
            Elt[4],
            Elt[5],
            Elt[6],
            Elt[7],
            Elt[8],
            Elt[9],
            Elt[10],
            Elt[11],
            Elt[12],
            Elt[13]],
           hashable]),
       _bnC_=T[1],
       Hash_queue=caml_call1(_AF_,[0,[0,_bnC_[11],_bnC_[12],_bnC_[13]],T[2]]),
       include=T[1],
       hash_fold_t=include[1],
       hash=include[13],
       hashable$0=T[2];
      return [0,hash_fold_t,hash,hashable$0,Table,Hash_set,Hash_queue]}
    function Make_binable_and_derive_hash_f(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[9],
       compare=T[10],
       sexp_of_t=T[11],
       hash=T[12];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return Make_binable
              ([0,
                hash_fold_t$0,
                bin_size_t,
                bin_write_t,
                bin_read_t,
                bin_read_t$0,
                bin_shape_t,
                bin_writer_t,
                bin_reader_t,
                bin_t,
                t_of_sexp,
                compare,
                sexp_of_t,
                hash])}
    function Make$5(Key)
     {var
       Table=caml_call1(Core_Hashtbl[88],Key),
       Hash_set=_t6_(Key),
       hashable=Table[2];
      return [0,
              [0,
               Table[84],
               Table[1],
               Table[85],
               Table[86],
               Table[87],
               Table[88],
               Table[89],
               Table[90],
               Table[91],
               Table[92]],
              [0,
               Hash_set[7],
               Hash_set[2],
               Hash_set[8],
               Hash_set[9],
               Hash_set[10],
               Hash_set[11],
               Hash_set[12],
               Hash_set[13],
               Hash_set[14],
               Hash_set[15]],
              hashable]}
    function Make_with_hashable$2(T)
     {var
       Table=caml_call1(Core_Hashtbl[91],T),
       Elt=T[1],
       hashable=T[2],
       Hash_set=_t3_([0,Elt,hashable]),
       hashable$0=T[2];
      return [0,
              [0,
               Table[84],
               Table[1],
               Table[85],
               Table[86],
               Table[87],
               Table[88],
               Table[89],
               Table[90],
               Table[91],
               Table[92]],
              [0,
               Hash_set[7],
               Hash_set[2],
               Hash_set[8],
               Hash_set[9],
               Hash_set[10],
               Hash_set[11],
               Hash_set[12],
               Hash_set[13],
               Hash_set[14],
               Hash_set[15]],
              hashable$0]}
    var V1$12=[0,Make$5,Make_with_hashable$2],Stable$3=[0,V1$12];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$166);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Hashable$0);
    var
     Core_Hashable=
      [0,
       Make_plain$2,
       Make_plain_and_derive_hash_fol,
       Make$4,
       Make_and_derive_hash_fold_t,
       Make_binable,
       Make_plain_with_hashable$1,
       Make_with_hashable$1,
       Make_binable_with_hashable,
       Make_binable_and_derive_hash_f,
       Stable$3];
    caml_register_global(5302,Core_Hashable,"Core__Hashable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Hexdump_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$167);
    caml_call1(Expect_test_collector[5][1],cst_core_src_hexdump_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$168,cst$57);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$169);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Hexdump_intf$0);
    var Core_Hexdump_intf=[0];
    caml_register_global(5303,Core_Hexdump_intf,"Core__Hexdump_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Hexdump);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$170);
    caml_call1(Expect_test_collector[5][1],cst_core_src_hexdump_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$171,cst$58);
    var default_max_lines=[0,257],bytes_per_line=16;
    function Of_indexable2(T)
     {var length=T[1],get=T[2];
      function hex_of_pos(pos){return caml_call2(_fx_,_AG_,pos)}
      function hex_of_char(t,start,until,offset)
       {var pos=start + offset | 0;
        if(until <= pos)return cst$59;
        var _bnA_=caml_call2(get,t,pos);
        return caml_call2(_fx_,_AH_,caml_call1(Base_Char[29],_bnA_))}
      function hex_of_line(t,start,until)
       {var
         _bnl_=hex_of_char(t,start,until,15),
         _bnm_=hex_of_char(t,start,until,14),
         _bnn_=hex_of_char(t,start,until,13),
         _bno_=hex_of_char(t,start,until,12),
         _bnp_=hex_of_char(t,start,until,11),
         _bnq_=hex_of_char(t,start,until,10),
         _bnr_=hex_of_char(t,start,until,9),
         _bns_=hex_of_char(t,start,until,8),
         _bnt_=hex_of_char(t,start,until,7),
         _bnu_=hex_of_char(t,start,until,6),
         _bnv_=hex_of_char(t,start,until,5),
         _bnw_=hex_of_char(t,start,until,4),
         _bnx_=hex_of_char(t,start,until,3),
         _bny_=hex_of_char(t,start,until,2),
         _bnz_=hex_of_char(t,start,until,1);
        return caml_call17
                (_fx_,
                 _AI_,
                 hex_of_char(t,start,until,0),
                 _bnz_,
                 _bny_,
                 _bnx_,
                 _bnw_,
                 _bnv_,
                 _bnu_,
                 _bnt_,
                 _bns_,
                 _bnr_,
                 _bnq_,
                 _bnp_,
                 _bno_,
                 _bnn_,
                 _bnm_,
                 _bnl_)}
      function printable_string(t,start,until)
       {function _bnk_(i)
         {var char$0=caml_call2(get,t,start + i | 0);
          return caml_call1(Base_Char[41],char$0)?char$0:46}
        return caml_call2(include$41[52],until - start | 0,_bnk_)}
      function line(t,pos,len,line_index)
       {var
         start=pos + (line_index * 16 | 0) | 0,
         until=caml_call2(_aS_,start + 16 | 0,pos + len | 0),
         _bni_=printable_string(t,start,until),
         _bnj_=hex_of_line(t,start,until);
        return caml_call4(_fx_,_AJ_,hex_of_pos(start),_bnj_,_bni_)}
      function to_sequence(max_lines,pos,len,t)
       {var
         match=caml_call4(_iv_,pos,len,0,caml_call1(length,t)),
         len$0=match[2],
         pos$0=match[1];
        if(max_lines)
         var max_lines$0=max_lines[1],max_lines$1=max_lines$0;
        else
         var max_lines$1=default_max_lines[1];
        var
         max_lines$2=caml_call2(_aR_,max_lines$1,3),
         unabridged_lines=
          caml_call2(include$27[38],len$0,bytes_per_line)
          /
          16
          |
          0,
         skip_from=(max_lines$2 - 1 | 0) / 2 | 0,
         skip_to=
          (unabridged_lines - (max_lines$2 - skip_from | 0) | 0)
          +
          1
          |
          0;
        return caml_call2
                (_i__,
                 0,
                 function(line_index)
                  {if(unabridged_lines <= line_index)return 0;
                   if
                    (line_index === skip_from && max_lines$2 < unabridged_lines)
                    return [1,cst$60,skip_to];
                   return [1,line(t,pos$0,len$0,line_index),line_index + 1 | 0]})}
      function to_string_hum(max_lines,pos,len,t)
       {var _bnh_=caml_call1(_iO_,to_sequence(max_lines,pos,len,t));
        return caml_call2(include$41[54],_AK_,_bnh_)}
      function sexp_of_t(param,_bng_,t)
       {var x_001=caml_call1(_iO_,to_sequence(0,0,0,t));
        return caml_call2(_W_,_at_,x_001)}
      var length$0=T[1],get$0=T[2];
      function printable(t)
       {var length=caml_call1(length$0,t),pos=0;
        for(;;)
         {var _bnc_=length <= pos?1:0;
          if(_bnc_)
           var _bnd_=_bnc_;
          else
           {var
             _bne_=caml_call2(get$0,t,pos),
             _bnf_=caml_call1(Base_Char[41],_bne_);
            if(_bnf_){var pos$0=pos + 1 | 0,pos=pos$0;continue}
            var _bnd_=_bnf_}
          return _bnd_}}
      function to_string(t)
       {function _bna_(pos){return caml_call2(get$0,t,pos)}
        var _bnb_=caml_call1(length$0,t);
        return caml_call2(include$41[52],_bnb_,_bna_)}
      function sexp_of_t$0(sexp_of_a,sexp_of_b,x_002)
       {return printable(x_002)
                ?caml_call1(_at_,to_string(x_002))
                :sexp_of_t(sexp_of_a,sexp_of_b,x_002)}
      var
       Pretty=[0,length$0,get$0,printable,to_string,sexp_of_t$0],
       Hexdump=
        [0,
         length,
         get,
         hex_of_pos,
         hex_of_char,
         hex_of_line,
         printable_string,
         line,
         to_sequence,
         to_string_hum,
         sexp_of_t,
         Pretty];
      return [0,Hexdump]}
    function Of_indexable1(T)
     {var
       length=T[1],
       get=T[2],
       M=Of_indexable2([0,length,get]),
       length$0=T[1],
       get$0=T[2];
      function sexp_of_t(x,t)
       {function _bm$_(param){return _AL_}
        return caml_call3(M[1][10],x,_bm$_,t)}
      var to_sequence=M[1][8],to_string_hum=M[1][9],length$1=T[1],get$1=T[2];
      function sexp_of_t$0(sexp_of_a,x_003)
       {function _bm__(param){return _AM_}
        return caml_call3(M[1][11][5],sexp_of_a,_bm__,x_003)}
      var
       Pretty=[0,length$1,get$1,sexp_of_t$0],
       Hexdump=[0,length$0,get$0,sexp_of_t,to_sequence,to_string_hum,Pretty];
      return [0,M,Hexdump]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$172);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Hexdump$0);
    function _AP_(_bm8_)
     {var _bm9_=Of_indexable2(_bm8_)[1];
      return [0,[0,_bm9_[10],_bm9_[9],_bm9_[8],[0,_bm9_[11][5]]]]}
    function _AQ_(_bm6_)
     {var _bm7_=Of_indexable1(_bm6_)[2];
      return [0,[0,_bm7_[3],_bm7_[5],_bm7_[4],[0,_bm7_[6][3]]]]}
    function _AR_(T)
     {var length=T[1],get=T[2],M=Of_indexable1([0,length,get]);
      function sexp_of_t(t)
       {function _bm5_(param){return _AN_}return caml_call2(M[2][3],_bm5_,t)}
      var to_sequence=M[2][4],to_string_hum=M[2][5];
      function sexp_of_t$0(x_004)
       {function _bm4_(param){return _AO_}
        return caml_call2(M[2][6][3],_bm4_,x_004)}
      return [0,[0,sexp_of_t,to_string_hum,to_sequence,[0,sexp_of_t$0]]]}
    var Core_Hexdump=[0,default_max_lines,_AR_,_AQ_,_AP_];
    caml_register_global(5305,Core_Hexdump,"Core__Hexdump");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Identifiable_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$173);
    caml_call1(Expect_test_collector[5][1],cst_core_src_identifiable_intf);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$174,cst$61);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$175);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Identifiable_intf$0);
    var Core_Identifiable_intf=[0];
    caml_register_global
     (5306,Core_Identifiable_intf,"Core__Identifiable_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Identifiable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$176);
    caml_call1(Expect_test_collector[5][1],cst_core_src_identifiable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$177,cst$62);
    function Make$6(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[12],
       sexp_of_t=T[13],
       of_string=T[14],
       to_string=T[15],
       module_name=T[16],
       _bm2_=
        _w7_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[12],T[13]]),
       symbol=_bm2_[1],
       symbol$0=_bm2_[2],
       symbol$1=_bm2_[3],
       symbol$2=_bm2_[4],
       symbol$3=_bm2_[5],
       symbol$4=_bm2_[6],
       equal=_bm2_[7],
       compare=_bm2_[8],
       min=_bm2_[9],
       max=_bm2_[10],
       ascending=_bm2_[11],
       descending=_bm2_[12],
       between=_bm2_[13],
       clamp_exn=_bm2_[14],
       clamp=_bm2_[15],
       validate_lbound=_bm2_[16],
       validate_ubound=_bm2_[17],
       validate_bound=_bm2_[18],
       Replace_polymorphic_compare=_bm2_[19],
       comparator=_bm2_[20],
       Map=_bm2_[21],
       Set=_bm2_[22],
       _bm3_=
        Make_binable
         ([0,
           T[10],
           T[1],
           T[2],
           T[3],
           T[4],
           T[5],
           T[6],
           T[7],
           T[8],
           T[12],
           T[9],
           T[13],
           T[11]]),
       hash_fold_t=_bm3_[1],
       hash=_bm3_[2],
       hashable=_bm3_[3],
       Table=_bm3_[4],
       Hash_set=_bm3_[5],
       Hash_queue=_bm3_[6],
       include=caml_call1(Base_Pretty_printer[2],[0,T[16],T[15]]),
       pp=include[1];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              module_name,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              pp]}
    function Make_using_comparator$2(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       t_of_sexp=T[12],
       sexp_of_t=T[13],
       of_string=T[15],
       to_string=T[16],
       module_name=T[17],
       _bm0_=
        _w6_([0,T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[12],T[13],T[14]]),
       symbol=_bm0_[1],
       symbol$0=_bm0_[2],
       symbol$1=_bm0_[3],
       symbol$2=_bm0_[4],
       symbol$3=_bm0_[5],
       symbol$4=_bm0_[6],
       equal=_bm0_[7],
       compare=_bm0_[8],
       min=_bm0_[9],
       max=_bm0_[10],
       ascending=_bm0_[11],
       descending=_bm0_[12],
       between=_bm0_[13],
       clamp_exn=_bm0_[14],
       clamp=_bm0_[15],
       validate_lbound=_bm0_[16],
       validate_ubound=_bm0_[17],
       validate_bound=_bm0_[18],
       Replace_polymorphic_compare=_bm0_[19],
       comparator=_bm0_[20],
       Map=_bm0_[21],
       Set=_bm0_[22],
       _bm1_=
        Make_binable
         ([0,
           T[10],
           T[1],
           T[2],
           T[3],
           T[4],
           T[5],
           T[6],
           T[7],
           T[8],
           T[12],
           T[9],
           T[13],
           T[11]]),
       hash_fold_t=_bm1_[1],
       hash=_bm1_[2],
       hashable=_bm1_[3],
       Table=_bm1_[4],
       Hash_set=_bm1_[5],
       Hash_queue=_bm1_[6],
       include=caml_call1(Base_Pretty_printer[2],[0,T[17],T[16]]),
       pp=include[1];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              module_name,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              pp]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$178);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Identifiable$0);
    function _AS_(M,B)
     {var
       hash_fold_t=M[1],
       hash=M[2],
       t_of_sexp=M[3],
       sexp_of_t=M[4],
       of_string=M[5],
       to_string=M[6],
       compare=M[14],
       pp=M[23],
       bin_size_t=B[1],
       bin_write_t=B[2],
       bin_read_t=B[3],
       bin_read_t$0=B[4],
       bin_shape_t=B[5],
       bin_writer_t=B[6],
       bin_reader_t=B[7],
       bin_t=B[8],
       include$0=
        _w4_
         ([0,
           M[7],
           M[8],
           M[9],
           M[10],
           M[11],
           M[12],
           M[13],
           M[14],
           M[15],
           M[16],
           M[17],
           M[18],
           M[19],
           M[20],
           M[21],
           M[22]],
          [0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           t_of_sexp,
           sexp_of_t]),
       symbol=include$0[1],
       symbol$0=include$0[2],
       symbol$1=include$0[3],
       symbol$2=include$0[4],
       symbol$3=include$0[5],
       symbol$4=include$0[6],
       equal=include$0[7],
       compare$0=include$0[8],
       min=include$0[9],
       max=include$0[10],
       ascending=include$0[11],
       descending=include$0[12],
       between=include$0[13],
       clamp_exn=include$0[14],
       clamp=include$0[15],
       validate_lbound=include$0[16],
       validate_ubound=include$0[17],
       validate_bound=include$0[18],
       Replace_polymorphic_compare=include$0[19],
       comparator=include$0[20],
       Map=include$0[21],
       Set=include$0[22],
       hashable=M[24],
       include=
        Make_binable_with_hashable
         ([0,
           [0,
            hash_fold_t,
            bin_size_t,
            bin_write_t,
            bin_read_t,
            bin_read_t$0,
            bin_shape_t,
            bin_writer_t,
            bin_reader_t,
            bin_t,
            t_of_sexp,
            compare,
            sexp_of_t,
            hash],
           hashable]),
       hash_fold_t$0=include[1],
       hash$0=include[2],
       hashable$0=include[3],
       Table=include[4],
       Hash_set=include[5],
       Hash_queue=include[6];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              pp,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare$0,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t$0,
              hash$0,
              hashable$0,
              Table,
              Hash_set,
              Hash_queue]}
    function _AT_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       comparator=T[12],
       of_string=T[13],
       to_string=T[14],
       hash=T[15],
       module_name=T[16];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      var
       _bmZ_=
        Make_using_comparator$2
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           compare,
           hash_fold_t$0,
           hash,
           t_of_sexp,
           sexp_of_t,
           comparator,
           of_string,
           to_string,
           module_name]);
      return [0,
              _bmZ_[1],
              _bmZ_[2],
              _bmZ_[3],
              _bmZ_[4],
              _bmZ_[5],
              _bmZ_[6],
              _bmZ_[7],
              _bmZ_[8],
              _bmZ_[9],
              _bmZ_[10],
              _bmZ_[11],
              _bmZ_[12],
              _bmZ_[42],
              _bmZ_[14],
              _bmZ_[15],
              _bmZ_[16],
              _bmZ_[17],
              _bmZ_[18],
              _bmZ_[19],
              _bmZ_[20],
              _bmZ_[21],
              _bmZ_[22],
              _bmZ_[23],
              _bmZ_[24],
              _bmZ_[25],
              _bmZ_[26],
              _bmZ_[27],
              _bmZ_[28],
              _bmZ_[29],
              _bmZ_[30],
              _bmZ_[31],
              _bmZ_[32],
              _bmZ_[33],
              _bmZ_[34],
              _bmZ_[35],
              _bmZ_[36],
              _bmZ_[37],
              _bmZ_[38],
              _bmZ_[39],
              _bmZ_[40],
              _bmZ_[41]]}
    function _AU_(_bmX_)
     {var _bmY_=Make_using_comparator$2(_bmX_);
      return [0,
              _bmY_[1],
              _bmY_[2],
              _bmY_[3],
              _bmY_[4],
              _bmY_[5],
              _bmY_[6],
              _bmY_[7],
              _bmY_[8],
              _bmY_[9],
              _bmY_[10],
              _bmY_[11],
              _bmY_[12],
              _bmY_[42],
              _bmY_[14],
              _bmY_[15],
              _bmY_[16],
              _bmY_[17],
              _bmY_[18],
              _bmY_[19],
              _bmY_[20],
              _bmY_[21],
              _bmY_[22],
              _bmY_[23],
              _bmY_[24],
              _bmY_[25],
              _bmY_[26],
              _bmY_[27],
              _bmY_[28],
              _bmY_[29],
              _bmY_[30],
              _bmY_[31],
              _bmY_[32],
              _bmY_[33],
              _bmY_[34],
              _bmY_[35],
              _bmY_[36],
              _bmY_[37],
              _bmY_[38],
              _bmY_[39],
              _bmY_[40],
              _bmY_[41]]}
    function _AV_(T)
     {var
       bin_size_t=T[1],
       bin_write_t=T[2],
       bin_read_t=T[3],
       bin_read_t$0=T[4],
       bin_shape_t=T[5],
       bin_writer_t=T[6],
       bin_reader_t=T[7],
       bin_t=T[8],
       compare=T[9],
       t_of_sexp=T[10],
       sexp_of_t=T[11],
       of_string=T[12],
       to_string=T[13],
       hash=T[14],
       module_name=T[15];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      var
       _bmW_=
        Make$6
         ([0,
           bin_size_t,
           bin_write_t,
           bin_read_t,
           bin_read_t$0,
           bin_shape_t,
           bin_writer_t,
           bin_reader_t,
           bin_t,
           compare,
           hash_fold_t$0,
           hash,
           t_of_sexp,
           sexp_of_t,
           of_string,
           to_string,
           module_name]);
      return [0,
              _bmW_[1],
              _bmW_[2],
              _bmW_[3],
              _bmW_[4],
              _bmW_[5],
              _bmW_[6],
              _bmW_[7],
              _bmW_[8],
              _bmW_[9],
              _bmW_[10],
              _bmW_[11],
              _bmW_[12],
              _bmW_[42],
              _bmW_[14],
              _bmW_[15],
              _bmW_[16],
              _bmW_[17],
              _bmW_[18],
              _bmW_[19],
              _bmW_[20],
              _bmW_[21],
              _bmW_[22],
              _bmW_[23],
              _bmW_[24],
              _bmW_[25],
              _bmW_[26],
              _bmW_[27],
              _bmW_[28],
              _bmW_[29],
              _bmW_[30],
              _bmW_[31],
              _bmW_[32],
              _bmW_[33],
              _bmW_[34],
              _bmW_[35],
              _bmW_[36],
              _bmW_[37],
              _bmW_[38],
              _bmW_[39],
              _bmW_[40],
              _bmW_[41]]}
    function _AW_(T)
     {var
       t_sexp_grammar=T[14],
       include=
        Make$6
         ([0,
           T[1],
           T[2],
           T[3],
           T[4],
           T[5],
           T[6],
           T[7],
           T[8],
           T[9],
           T[10],
           T[11],
           T[12],
           T[13],
           T[15],
           T[16],
           T[17]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8],
       t_of_sexp=include[9],
       sexp_of_t=include[10],
       of_string=include[11],
       to_string=include[12],
       symbol=include[14],
       symbol$0=include[15],
       symbol$1=include[16],
       symbol$2=include[17],
       symbol$3=include[18],
       symbol$4=include[19],
       equal=include[20],
       compare=include[21],
       min=include[22],
       max=include[23],
       ascending=include[24],
       descending=include[25],
       between=include[26],
       clamp_exn=include[27],
       clamp=include[28],
       validate_lbound=include[29],
       validate_ubound=include[30],
       validate_bound=include[31],
       Replace_polymorphic_compare=include[32],
       comparator=include[33],
       Map=include[34],
       Set=include[35],
       hash_fold_t=include[36],
       hash=include[37],
       hashable=include[38],
       Table=include[39],
       Hash_set=include[40],
       Hash_queue=include[41],
       pp=include[42];
      return [0,
              t_sexp_grammar,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              pp,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue]}
    function _AX_(_bmU_)
     {var _bmV_=Make$6(_bmU_);
      return [0,
              _bmV_[1],
              _bmV_[2],
              _bmV_[3],
              _bmV_[4],
              _bmV_[5],
              _bmV_[6],
              _bmV_[7],
              _bmV_[8],
              _bmV_[9],
              _bmV_[10],
              _bmV_[11],
              _bmV_[12],
              _bmV_[42],
              _bmV_[14],
              _bmV_[15],
              _bmV_[16],
              _bmV_[17],
              _bmV_[18],
              _bmV_[19],
              _bmV_[20],
              _bmV_[21],
              _bmV_[22],
              _bmV_[23],
              _bmV_[24],
              _bmV_[25],
              _bmV_[26],
              _bmV_[27],
              _bmV_[28],
              _bmV_[29],
              _bmV_[30],
              _bmV_[31],
              _bmV_[32],
              _bmV_[33],
              _bmV_[34],
              _bmV_[35],
              _bmV_[36],
              _bmV_[37],
              _bmV_[38],
              _bmV_[39],
              _bmV_[40],
              _bmV_[41]]}
    var
     Core_Identifiable=
      [0,
       function(T)
        {var
          sexp_of_t=T[4],
          of_string=T[5],
          to_string=T[6],
          _bmS_=Make_plain$1([0,T[1],T[4]]),
          symbol=_bmS_[1],
          symbol$0=_bmS_[2],
          symbol$1=_bmS_[3],
          symbol$2=_bmS_[4],
          symbol$3=_bmS_[5],
          symbol$4=_bmS_[6],
          equal=_bmS_[7],
          min=_bmS_[9],
          max=_bmS_[10],
          ascending=_bmS_[11],
          descending=_bmS_[12],
          between=_bmS_[13],
          clamp_exn=_bmS_[14],
          clamp=_bmS_[15],
          comparator=_bmS_[16],
          validate_lbound=_bmS_[17],
          validate_ubound=_bmS_[18],
          validate_bound=_bmS_[19],
          Replace_polymorphic_compare=_bmS_[20],
          Map=_bmS_[21],
          Set=_bmS_[22],
          _bmT_=Make_plain$2([0,T[2],T[1],T[4],T[3]]),
          compare=_bmT_[1],
          hash_fold_t=_bmT_[2],
          hash=_bmT_[3],
          hashable=_bmT_[4],
          Table=_bmT_[5],
          Hash_set=_bmT_[6],
          Hash_queue=_bmT_[7],
          include=caml_call1(Base_Pretty_printer[2],[0,T[7],T[6]]),
          pp=include[1];
         return [0,
                 sexp_of_t,
                 of_string,
                 to_string,
                 pp,
                 symbol,
                 symbol$0,
                 symbol$1,
                 symbol$2,
                 symbol$3,
                 symbol$4,
                 equal,
                 min,
                 max,
                 ascending,
                 descending,
                 between,
                 clamp_exn,
                 clamp,
                 comparator,
                 validate_lbound,
                 validate_ubound,
                 validate_bound,
                 Replace_polymorphic_compare,
                 Map,
                 Set,
                 compare,
                 hash_fold_t,
                 hash,
                 hashable,
                 Table,
                 Hash_set,
                 Hash_queue]},
       _AX_,
       _AW_,
       _AV_,
       _AU_,
       _AT_,
       _AS_];
    caml_register_global(5308,Core_Identifiable,"Core__Identifiable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Stable_comparable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$179);
    caml_call1(Expect_test_collector[5][1],cst_core_src_stable_comparable);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$180,cst$63);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$181);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Stable_comparable$0);
    var Core_Stable_comparable=[0];
    caml_register_global
     (5309,Core_Stable_comparable,"Core__Stable_comparable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_String);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$182);
    caml_call1(Expect_test_collector[5][1],cst_core_src_string_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$183,cst$64);
    var
     t_sexp_grammar$8=include$41[1],
     _AY_=include$41[2],
     _AZ_=include$41[3],
     _A0_=include$41[4],
     _A1_=include$41[5],
     _A6_=include$41[10],
     _A7_=include$41[11],
     _Bm_=include$41[50],
     _Bq_=include$41[54],
     _Bs_=include$41[56],
     _Bt_=include$41[57],
     _Bu_=include$41[58],
     _Bx_=include$41[61],
     _BG_=include$41[71],
     _BM_=include$41[77],
     _BP_=include$41[80],
     _BQ_=include$41[81],
     _BR_=include$41[82],
     _BT_=include$41[84],
     _BU_=include$41[85],
     _BV_=include$41[86],
     _BY_=include$41[89],
     _BZ_=include$41[90],
     _B0_=include$41[91],
     _B1_=include$41[92],
     _B2_=include$41[93],
     _B9_=include$41[100],
     _B$_=include$41[102],
     _Ca_=include$41[103],
     _Cb_=include$41[104],
     _Cc_=include$41[105],
     _Cg_=include$41[109],
     _Ch_=include$41[110],
     t_sexp_grammar$9=include$41[1],
     hash_fold_t$12=include$41[26],
     t_of_sexp$31=include$41[27],
     sexp_of_t$38=include$41[28],
     compare$34=include$41[37],
     comparator$1=include$41[45],
     equal$18=include$41[121],
     _A2_=include$41[6],
     _A3_=include$41[7],
     _A4_=include$41[8],
     _A5_=include$41[9],
     _A8_=include$41[12],
     _A9_=include$41[13],
     _A__=include$41[14],
     _A$_=include$41[15],
     _Ba_=include$41[16],
     _Bb_=include$41[17],
     _Bc_=include$41[18],
     _Bd_=include$41[19],
     _Be_=include$41[20],
     _Bf_=include$41[21],
     _Bg_=include$41[22],
     _Bh_=include$41[23],
     _Bi_=include$41[24],
     _Bj_=include$41[25],
     _Bk_=include$41[48],
     _Bl_=include$41[49],
     _Bn_=include$41[51],
     _Bo_=include$41[52],
     _Bp_=include$41[53],
     _Br_=include$41[55],
     _Bv_=include$41[59],
     _Bw_=include$41[60],
     _By_=include$41[62],
     _Bz_=include$41[63],
     _BA_=include$41[64],
     _BB_=include$41[65],
     _BC_=include$41[66],
     _BD_=include$41[67],
     _BE_=include$41[68],
     _BF_=include$41[69],
     _BH_=include$41[72],
     _BI_=include$41[73],
     _BJ_=include$41[74],
     _BK_=include$41[75],
     _BL_=include$41[76],
     _BN_=include$41[78],
     _BO_=include$41[79],
     _BS_=include$41[83],
     _BW_=include$41[87],
     _BX_=include$41[88],
     _B3_=include$41[94],
     _B4_=include$41[95],
     _B5_=include$41[96],
     _B6_=include$41[97],
     _B7_=include$41[98],
     _B8_=include$41[99],
     _B__=include$41[101],
     _Cd_=include$41[106],
     _Ce_=include$41[107],
     _Cf_=include$41[108],
     _Ci_=include$41[111],
     _Cj_=include$41[112],
     _Ck_=include$41[113],
     _Cl_=include$41[114],
     _Cm_=include$41[115],
     _Cn_=include$41[116],
     _Co_=include$41[117],
     _Cp_=include$41[118],
     _Cq_=include$41[119],
     _Cr_=include$41[120],
     _Cs_=include$41[122],
     _Ct_=include$41[123],
     _Cu_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$103),0,_bV_],0],
     _Cv_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_string_ml_12_6),
     group$50=caml_call2(Bin_prot_Shape[6],_Cv_,_Cu_),
     _Cw_=caml_call1(Bin_prot_Shape[2][1],cst_t$104),
     bin_shape_t$41=caml_call1(caml_call2(Bin_prot_Shape[14],group$50,_Cw_),0),
     bin_writer_t$35=[0,bin_size_t$1,bin_write_t$1],
     bin_reader_t$35=[0,bin_read_t$3,bin_read_t$4],
     bin_t$35=[0,bin_shape_t$41,bin_writer_t$35,bin_reader_t$35];
    function to_string$1(_bmR_){return _bmR_}
    function of_string$0(_bmQ_){return _bmQ_}
    var
     _Cx_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$41,
         bin_writer_t$35,
         bin_reader_t$35,
         bin_t$35,
         compare$34,
         t_of_sexp$31,
         sexp_of_t$38,
         comparator$1]),
     Map=_Cx_[1],
     Set=_Cx_[2],
     _Cy_=
      [0,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_shape_t$41,
       bin_writer_t$35,
       bin_reader_t$35,
       bin_t$35,
       t_of_sexp$31,
       compare$34,
       sexp_of_t$38,
       function(_bmP_){return runtime.Base_hash_string(_bmP_)}],
     include$46=caml_call1(Stable$3[1][1],_Cy_),
     Table=include$46[1],
     Hash_set=include$46[2],
     hashable=include$46[3],
     t_of_sexp$32=_Bx_[3],
     sexp_of_t$39=_Bx_[4],
     t_sexp_grammar$10=_Bx_[5],
     is_suffix=_Bx_[22],
     is_prefix=_Bx_[23],
     is_substring=_Bx_[24],
     is_substring_at=_Bx_[25],
     substr_index=_Bx_[26],
     substr_index_exn=_Bx_[27],
     substr_index_all=_Bx_[28],
     substr_replace_first=_Bx_[29],
     substr_replace_all=_Bx_[30],
     _Cz_=_Bx_[1],
     _CA_=_Bx_[2],
     _CB_=_Bx_[13],
     _CC_=_Bx_[21],
     _CD_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$105),0,_bV_],0],
     _CE_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_string_ml_29_4),
     group$51=caml_call2(Bin_prot_Shape[6],_CE_,_CD_),
     _CF_=caml_call1(Bin_prot_Shape[2][1],cst_t$106),
     bin_shape_t$42=caml_call1(caml_call2(Bin_prot_Shape[14],group$51,_CF_),0),
     bin_writer_t$36=[0,bin_size_t$1,bin_write_t$1],
     bin_reader_t$36=[0,bin_read_t$3,bin_read_t$4],
     bin_t$36=[0,bin_shape_t$42,bin_writer_t$36,bin_reader_t$36],
     _CG_=
      _w6_
       ([0,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$42,
         bin_writer_t$36,
         bin_reader_t$36,
         bin_t$36,
         t_of_sexp$32,
         sexp_of_t$39,
         _CC_]),
     symbol$3=_CG_[1],
     symbol$4=_CG_[2],
     symbol$5=_CG_[3],
     symbol$6=_CG_[4],
     symbol$7=_CG_[5],
     symbol$8=_CG_[6],
     equal$19=_CG_[7],
     compare$35=_CG_[8],
     min$0=_CG_[9],
     max$0=_CG_[10],
     ascending=_CG_[11],
     descending=_CG_[12],
     between=_CG_[13],
     clamp_exn=_CG_[14],
     clamp=_CG_[15],
     validate_lbound=_CG_[16],
     validate_ubound=_CG_[17],
     validate_bound=_CG_[18],
     Replace_polymorphic_compare=_CG_[19],
     comparator$2=_CG_[20],
     Map$0=_CG_[21],
     Set$0=_CG_[22],
     include$47=
      Make_binable
       ([0,
         _Cz_,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$42,
         bin_writer_t$36,
         bin_reader_t$36,
         bin_t$36,
         t_of_sexp$32,
         _CB_,
         sexp_of_t$39,
         _CA_]),
     hash_fold_t$13=include$47[1],
     hash$10=include$47[2],
     hashable$0=include$47[3],
     Table$0=include$47[4],
     Hash_set$0=include$47[5],
     Hash_queue=include$47[6],
     Typename_of_t$3=caml_call1(Typerep_lib_Make_typename[1],[0,name$12]),
     typename_of_t$3=Typename_of_t$3[2],
     name_of_t=Typename_of_t$3[1],
     typerep_of_t$3=[9,[0,name_of_t,[0,_eZ_]]],
     _CH_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$107),0,_bV_],0],
     _CI_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_string_ml_47_6),
     group$52=caml_call2(Bin_prot_Shape[6],_CI_,_CH_),
     _CJ_=caml_call1(Bin_prot_Shape[2][1],cst_t$108),
     bin_shape_t$43=caml_call1(caml_call2(Bin_prot_Shape[14],group$52,_CJ_),0),
     bin_writer_t$37=[0,bin_size_t$1,bin_write_t$1],
     bin_reader_t$37=[0,bin_read_t$3,bin_read_t$4],
     bin_t$37=[0,bin_shape_t$43,bin_writer_t$37,bin_reader_t$37],
     hash_fold_t$14=include$41[26],
     t_of_sexp$33=include$41[27],
     sexp_of_t$40=include$41[28],
     of_string$1=include$41[29],
     to_string$2=include$41[30],
     symbol$9=include$41[31],
     symbol$10=include$41[32],
     symbol$11=include$41[33],
     symbol$12=include$41[34],
     symbol$13=include$41[35],
     symbol$14=include$41[36],
     compare$36=include$41[37],
     min$1=include$41[38],
     max$1=include$41[39],
     ascending$0=include$41[40],
     descending$0=include$41[41],
     between$0=include$41[42],
     clamp_exn$0=include$41[43],
     clamp$0=include$41[44],
     comparator$3=include$41[45],
     pp$0=include$41[46],
     equal$20=include$41[121],
     _CK_=
      [0,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_shape_t$43,
       bin_writer_t$37,
       bin_reader_t$37,
       bin_t$37],
     _CL_=
      [0,
       hash_fold_t$14,
       function(_bmO_){return runtime.Base_hash_string(_bmO_)},
       t_of_sexp$33,
       sexp_of_t$40,
       of_string$1,
       to_string$2,
       symbol$9,
       symbol$10,
       symbol$11,
       symbol$12,
       symbol$13,
       symbol$14,
       equal$20,
       compare$36,
       min$1,
       max$1,
       ascending$0,
       descending$0,
       between$0,
       clamp_exn$0,
       clamp$0,
       comparator$3,
       pp$0,
       hashable],
     _CM_=function(_bmN_){return _AS_(_CL_,_bmN_)}(_CK_),
     bin_size_t$47=_CM_[1],
     bin_write_t$47=_CM_[2],
     bin_read_t$96=_CM_[3],
     bin_read_t$97=_CM_[4],
     bin_shape_t$44=_CM_[5],
     bin_writer_t$38=_CM_[6],
     bin_reader_t$38=_CM_[7],
     bin_t$38=_CM_[8],
     t_of_sexp$34=_CM_[9],
     sexp_of_t$41=_CM_[10],
     of_string$2=_CM_[11],
     to_string$3=_CM_[12],
     pp$1=_CM_[13],
     symbol$15=_CM_[14],
     symbol$16=_CM_[15],
     symbol$17=_CM_[16],
     symbol$18=_CM_[17],
     symbol$19=_CM_[18],
     symbol$20=_CM_[19],
     equal$21=_CM_[20],
     compare$37=_CM_[21],
     min$2=_CM_[22],
     max$2=_CM_[23],
     ascending$1=_CM_[24],
     descending$1=_CM_[25],
     between$1=_CM_[26],
     clamp_exn$1=_CM_[27],
     clamp$1=_CM_[28],
     Replace_polymorphic_compare$0=_CM_[32],
     comparator$4=_CM_[33],
     Map$1=_CM_[34],
     Set$1=_CM_[35],
     hash_fold_t$15=_CM_[36],
     hash$11=_CM_[37],
     hashable$1=_CM_[38],
     Table$1=_CM_[39],
     Hash_set$1=_CM_[40],
     Hash_queue$0=_CM_[41],
     include$48=Validate$0([0,include$41[37],include$41[28]]),
     validate_lbound$0=include$48[1],
     validate_ubound$0=include$48[2],
     validate_bound$0=include$48[3],
     length$14=caml_ml_string_length,
     get$1=caml_string_get,
     include$49=_AR_([0,length$14,get$1]),
     _CO_=Base_quickcheck_Generator[4],
     _CP_=Base_quickcheck_Observer[5],
     _CQ_=Base_quickcheck_Shrinker[5],
     _CS_=Base_quickcheck_Generator[108],
     _CT_=Base_quickcheck_Generator[109],
     _CN_=include$49[1],
     _CR_=Base_quickcheck_Generator[106];
    function gen_with_length$0(length,chars)
     {return caml_call2(Base_quickcheck_Generator[110],chars,length)}
    function take_while(t,f)
     {var
       match=
        caml_call3(_BY_,0,t,function(param,elt){return 1 - caml_call1(f,elt)});
      if(match){var i=match[1];return caml_call3(_AY_,t,0,i)}
      return t}
    function rtake_while(t,f)
     {var
       match=
        caml_call3(_BZ_,0,t,function(param,elt){return 1 - caml_call1(f,elt)});
      if(match)
       {var i=match[1];
        return caml_call3
                (_AY_,t,i + 1 | 0,(caml_ml_string_length(t) - i | 0) - 1 | 0)}
      return t}
    function slice$2(t,start,stop)
     {return slice(caml_ml_string_length,_AY_,t,start,stop)}
    function nget$0(x,i)
     {return caml_string_get(x,normalize(caml_ml_string_length,x,i))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$184);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_String$0);
    var
     Stable$4=
      [0,
       [0,
        equal$18,
        hash_fold_t$12,
        function(_bmM_){return runtime.Base_hash_string(_bmM_)},
        t_sexp_grammar$9,
        of_string$0,
        to_string$1,
        bin_size_t$1,
        bin_write_t$1,
        bin_read_t$3,
        bin_read_t$4,
        bin_shape_t$41,
        bin_writer_t$35,
        bin_reader_t$35,
        bin_t$35,
        compare$34,
        t_of_sexp$31,
        sexp_of_t$38,
        comparator$1,
        Map,
        Set,
        Table,
        Hash_set,
        hashable]],
     Caseless=
      [0,
       t_sexp_grammar$10,
       is_suffix,
       is_prefix,
       is_substring,
       is_substring_at,
       substr_index,
       substr_index_exn,
       substr_index_all,
       substr_replace_first,
       substr_replace_all,
       bin_size_t$1,
       bin_write_t$1,
       bin_read_t$3,
       bin_read_t$4,
       bin_shape_t$42,
       bin_writer_t$36,
       bin_reader_t$36,
       bin_t$36,
       t_of_sexp$32,
       sexp_of_t$39,
       symbol$3,
       symbol$4,
       symbol$5,
       symbol$6,
       symbol$7,
       symbol$8,
       equal$19,
       compare$35,
       min$0,
       max$0,
       ascending,
       descending,
       between,
       clamp_exn,
       clamp,
       validate_lbound,
       validate_ubound,
       validate_bound,
       Replace_polymorphic_compare,
       comparator$2,
       Map$0,
       Set$0,
       hash_fold_t$13,
       hash$10,
       hashable$0,
       Table$0,
       Hash_set$0,
       Hash_queue],
     include$50=
      [0,
       t_sexp_grammar$8,
       _AY_,
       _AZ_,
       _A0_,
       _A1_,
       _A2_,
       _A3_,
       _A4_,
       _A5_,
       _A6_,
       _A7_,
       _A8_,
       _A9_,
       _A__,
       _A$_,
       _Ba_,
       _Bb_,
       _Bc_,
       _Bd_,
       _Be_,
       _Bf_,
       _Bg_,
       _Bh_,
       _Bi_,
       _Bj_,
       _Bk_,
       _Bl_,
       _Bm_,
       _Bn_,
       _Bo_,
       _Bp_,
       _Bq_,
       _Br_,
       _Bs_,
       _Bt_,
       _Bu_,
       _Bv_,
       _Bw_,
       _By_,
       _Bz_,
       _BA_,
       _BB_,
       _BC_,
       _BD_,
       _BE_,
       _BF_,
       _BG_,
       _BH_,
       _BI_,
       _BJ_,
       _BK_,
       _BL_,
       _BM_,
       _BN_,
       _BO_,
       _BP_,
       _BQ_,
       _BR_,
       _BS_,
       _BT_,
       _BU_,
       _BV_,
       _BW_,
       _BX_,
       _BY_,
       _BZ_,
       _B0_,
       _B1_,
       _B2_,
       _B3_,
       _B4_,
       _B5_,
       _B6_,
       _B7_,
       _B8_,
       _B9_,
       _B__,
       _B$_,
       _Ca_,
       _Cb_,
       _Cc_,
       _Cd_,
       _Ce_,
       _Cf_,
       _Cg_,
       _Ch_,
       _Ci_,
       _Cj_,
       _Ck_,
       _Cl_,
       _Cm_,
       _Cn_,
       _Co_,
       _Cp_,
       _Cq_,
       _Cr_,
       _Cs_,
       _Ct_,
       typerep_of_t$3,
       typename_of_t$3,
       Caseless,
       slice$2,
       nget$0,
       take_while,
       rtake_while,
       _CN_,
       bin_size_t$47,
       bin_write_t$47,
       bin_read_t$96,
       bin_read_t$97,
       bin_shape_t$44,
       bin_writer_t$38,
       bin_reader_t$38,
       bin_t$38,
       t_of_sexp$34,
       sexp_of_t$41,
       of_string$2,
       to_string$3,
       pp$1,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$21,
       compare$37,
       min$2,
       max$2,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       comparator$4,
       Map$1,
       Set$1,
       hash_fold_t$15,
       hash$11,
       hashable$1,
       Table$1,
       Hash_set$1,
       Hash_queue$0,
       _CO_,
       _CP_,
       _CQ_,
       _CR_,
       _CS_,
       _CT_,
       gen_with_length$0,
       Stable$4];
    caml_register_global(5310,include$50,"Core__String");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Bool);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$185);
    caml_call1(Expect_test_collector[5][1],cst_core_src_bool_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$186,cst$65);
    var
     _CU_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$109),0,_bR_],0],
     _CV_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_bool_ml_3_0),
     group$53=caml_call2(Bin_prot_Shape[6],_CV_,_CU_),
     _CW_=caml_call1(Bin_prot_Shape[2][1],cst_t$110),
     bin_shape_t$45=caml_call1(caml_call2(Bin_prot_Shape[14],group$53,_CW_),0),
     Typename_of_t$4=caml_call1(Typerep_lib_Make_typename[1],[0,name$13]),
     typename_of_t$4=Typename_of_t$4[2],
     name_of_t$0=Typename_of_t$4[1],
     typerep_of_t$4=[9,[0,name_of_t$0,[0,_eX_]]],
     _CX_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$111),0,bin_shape_t$45],0],
     _CY_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_bool_ml_9_6),
     group$54=caml_call2(Bin_prot_Shape[6],_CY_,_CX_),
     _CZ_=caml_call1(Bin_prot_Shape[2][1],cst_t$112),
     bin_shape_t$46=caml_call1(caml_call2(Bin_prot_Shape[14],group$54,_CZ_),0),
     bin_writer_t$39=[0,bin_size_t$0,bin_write_t$0],
     bin_reader_t$39=[0,bin_read_t$1,bin_read_t$2],
     bin_t$39=[0,bin_shape_t$46,bin_writer_t$39,bin_reader_t$39],
     _C0_=
      [0,
       bin_size_t$0,
       bin_write_t$0,
       bin_read_t$1,
       bin_read_t$2,
       bin_shape_t$46,
       bin_writer_t$39,
       bin_reader_t$39,
       bin_t$39],
     _C1_=
      [0,
       Base_Bool[3],
       Base_Bool[4],
       Base_Bool[5],
       Base_Bool[6],
       Base_Bool[7],
       Base_Bool[8],
       Base_Bool[9],
       Base_Bool[10],
       Base_Bool[11],
       Base_Bool[12],
       Base_Bool[13],
       Base_Bool[14],
       Base_Bool[15],
       Base_Bool[16],
       Base_Bool[17],
       Base_Bool[18],
       Base_Bool[19],
       Base_Bool[20],
       Base_Bool[21],
       Base_Bool[22],
       Base_Bool[23],
       Base_Bool[24],
       Base_Bool[25],
       Base_Bool[26]],
     _C2_=function(_bmL_){return _AS_(_C1_,_bmL_)}(_C0_),
     bin_size_bool=_C2_[1],
     bin_write_bool=_C2_[2],
     bin_read_bool=_C2_[3],
     bin_read_bool$0=_C2_[4],
     bin_shape_t$47=_C2_[5],
     bin_writer_t$40=_C2_[6],
     bin_reader_t$40=_C2_[7],
     bin_t$40=_C2_[8],
     Map$2=_C2_[34],
     Set$2=_C2_[35],
     Table$2=_C2_[39],
     Hash_set$2=_C2_[40],
     Hash_queue$1=_C2_[41],
     to_int=Base_Bool[28],
     invariant$4=Base_Bool[27],
     hashable$2=Base_Bool[26],
     pp$2=Base_Bool[25],
     comparator$5=Base_Bool[24],
     clamp$2=Base_Bool[23],
     clamp_exn$2=Base_Bool[22],
     between$2=Base_Bool[21],
     descending$2=Base_Bool[20],
     ascending$2=Base_Bool[19],
     max$3=Base_Bool[18],
     min$3=Base_Bool[17],
     compare_bool=Base_Bool[16],
     equal_bool=Base_Bool[15],
     symbol$21=Base_Bool[14],
     symbol$22=Base_Bool[13],
     symbol$23=Base_Bool[12],
     symbol$24=Base_Bool[11],
     symbol$25=Base_Bool[10],
     symbol$26=Base_Bool[9],
     to_string$4=Base_Bool[8],
     of_string$3=Base_Bool[7],
     sexp_of_bool=Base_Bool[6],
     bool_of_sexp=Base_Bool[5],
     hash$12=Base_Bool[4],
     hash_fold_bool=Base_Bool[3],
     bool_sexp_grammar=Base_Bool[2],
     all$0=Base_Bool[1],
     include$51=Validate$0([0,Base_Bool[16],Base_Bool[6]]),
     validate_lbound$1=include$51[1],
     validate_ubound$1=include$51[2],
     validate_bound$1=include$51[3],
     table=
      [246,
       function(_bmJ_)
        {var table=caml_call3(Caseless[46][4],0,0,0);
         caml_call2
          (_pH_,
           _C3_,
           function(param)
            {var strings=param[2],bool=param[1];
             return caml_call2
                     (_pH_,
                      strings,
                      function(string)
                       {caml_call3(Core_Hashtbl[34],table,string,bool);
                        var _bmK_=caml_call2(_Cg_,string,1);
                        return caml_call3(Core_Hashtbl[34],table,_bmK_,bool)})});
         return table}];
    function raise_invalid(input)
     {var
       _bmE_=caml_obj_tag(table),
       _bmF_=
        250 === _bmE_
         ?table[1]
         :246 === _bmE_?caml_call1(CamlinternalLazy[2],table):table,
       _bmG_=caml_call1(Core_Hashtbl[64],_bmF_),
       expected_case_insensitive=caml_call1(Set$1[57],_bmG_),
       _bmH_=
        [0,
         [1,[0,_C4_,[0,caml_call1(Set$1[75],expected_case_insensitive),0]]],
         0],
       _bmI_=[0,[1,[0,_C5_,[0,caml_call1(_at_,input),0]]],_bmH_];
      return caml_call1
              (_a5_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Bool_of_string_hum_invalid),
                 _bmI_]])}
    function of_string_hum(string)
     {function _bmA_(_bmD_){return _bmD_}
      var
       _bmB_=caml_obj_tag(table),
       _bmC_=
        250 === _bmB_
         ?table[1]
         :246 === _bmB_?caml_call1(CamlinternalLazy[2],table):table;
      return caml_call4(Core_Hashtbl[55],_bmC_,string,_bmA_,raise_invalid)}
    var
     _C6_=Base_quickcheck_Generator[2],
     _C7_=Base_quickcheck_Observer[3],
     _C8_=Base_quickcheck_Shrinker[3],
     _C9_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$113),0,bin_shape_t$47],0],
     _C__=caml_call1(Bin_prot_Shape[4][1],cst_core_src_bool_ml_52_4),
     group$55=caml_call2(Bin_prot_Shape[6],_C__,_C9_),
     _C$_=caml_call1(Bin_prot_Shape[2][1],cst_t$114),
     bin_shape_t$48=caml_call1(caml_call2(Bin_prot_Shape[14],group$55,_C$_),0),
     bin_writer_t$41=[0,bin_size_bool,bin_write_bool],
     bin_reader_t$41=[0,bin_read_bool,bin_read_bool$0],
     bin_t$41=[0,bin_shape_t$48,bin_writer_t$41,bin_reader_t$41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$187);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Bool$0);
    var
     Core_Bool=
      [0,
       typerep_of_t$4,
       typename_of_t$4,
       all$0,
       bool_sexp_grammar,
       invariant$4,
       to_int,
       Base_Bool[29],
       bin_size_bool,
       bin_write_bool,
       bin_read_bool,
       bin_read_bool$0,
       bin_shape_t$47,
       bin_writer_t$40,
       bin_reader_t$40,
       bin_t$40,
       bool_of_sexp,
       sexp_of_bool,
       of_string$3,
       to_string$4,
       pp$2,
       symbol$26,
       symbol$25,
       symbol$24,
       symbol$23,
       symbol$22,
       symbol$21,
       equal_bool,
       compare_bool,
       min$3,
       max$3,
       ascending$2,
       descending$2,
       between$2,
       clamp_exn$2,
       clamp$2,
       validate_lbound$1,
       validate_ubound$1,
       validate_bound$1,
       [0,
        Base_Bool[9],
        Base_Bool[10],
        Base_Bool[11],
        Base_Bool[12],
        Base_Bool[13],
        Base_Bool[14],
        Base_Bool[15],
        Base_Bool[16],
        Base_Bool[17],
        Base_Bool[18]],
       comparator$5,
       Map$2,
       Set$2,
       hash_fold_bool,
       hash$12,
       hashable$2,
       Table$2,
       Hash_set$2,
       Hash_queue$1,
       of_string_hum,
       _C6_,
       _C7_,
       _C8_,
       [0,
        [0,
         compare_bool,
         bool_of_sexp,
         sexp_of_bool,
         bin_size_bool,
         bin_write_bool,
         bin_read_bool,
         bin_read_bool$0,
         bin_shape_t$48,
         bin_writer_t$41,
         bin_reader_t$41,
         bin_t$41]]];
    caml_register_global(5312,Core_Bool,"Core__Bool");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Bytes);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$188);
    caml_call1(Expect_test_collector[5][1],cst_core_src_bytes_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$189,cst$66);
    var
     bytes_of_sexp=include$52[1],
     sexp_of_bytes=include$52[2],
     bytes_sexp_grammar=include$52[3],
     bytes_bytes=include$52[5],
     equal_bytes=include$52[15],
     compare_bytes=include$52[16],
     _Dr_=include$52[24],
     _Ds_=include$52[25],
     _Dw_=include$52[31],
     _DD_=include$52[38],
     _DE_=include$52[39],
     _DO_=include$52[49],
     _Da_=include$52[4],
     _Db_=include$52[6],
     _Dc_=include$52[7],
     _Dd_=include$52[8],
     _De_=include$52[9],
     _Df_=include$52[10],
     _Dg_=include$52[11],
     _Dh_=include$52[12],
     _Di_=include$52[13],
     _Dj_=include$52[14],
     _Dk_=include$52[17],
     _Dl_=include$52[18],
     _Dm_=include$52[19],
     _Dn_=include$52[20],
     _Do_=include$52[21],
     _Dp_=include$52[22],
     _Dq_=include$52[23],
     _Dt_=include$52[26],
     _Du_=include$52[27],
     _Dv_=include$52[28],
     _Dx_=include$52[32],
     _Dy_=include$52[33],
     _Dz_=include$52[34],
     _DA_=include$52[35],
     _DB_=include$52[36],
     _DC_=include$52[37],
     _DF_=include$52[40],
     _DG_=include$52[41],
     _DH_=include$52[42],
     _DI_=include$52[43],
     _DJ_=include$52[44],
     _DK_=include$52[45],
     _DL_=include$52[46],
     _DM_=include$52[47],
     _DN_=include$52[48],
     _DP_=include$52[50],
     _DQ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$115),0,_bZ_],0],
     _DR_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_bytes_ml_8_4),
     group$56=caml_call2(Bin_prot_Shape[6],_DR_,_DQ_),
     _DS_=caml_call1(Bin_prot_Shape[2][1],cst_t$116),
     bin_shape_t$49=caml_call1(caml_call2(Bin_prot_Shape[14],group$56,_DS_),0),
     bin_writer_t$42=[0,bin_size_bytes,bin_write_bytes],
     bin_reader_t$42=[0,bin_read_bytes,bin_read_bytes$0],
     bin_t$42=[0,bin_shape_t$49,bin_writer_t$42,bin_reader_t$42],
     quickcheck_generator$8=Base_quickcheck_Export[5],
     quickcheck_observer$7=Base_quickcheck_Export[15],
     quickcheck_shrinker$7=Base_quickcheck_Export[25],
     Typename_of_t$5=caml_call1(Typerep_lib_Make_typename[1],[0,name$14]),
     typename_of_t$5=Typename_of_t$5[2],
     name_of_t$1=Typename_of_t$5[1],
     typerep_of_t$5=[9,[0,name_of_t$1,[0,_eY_]]],
     length$15=caml_ml_bytes_length,
     include$53=_AR_([0,length$15,_DD_]),
     _DT_=include$53[1];
    function gen(char_gen)
     {var _bmz_=caml_call1(_CS_,char_gen);
      return caml_call2(_pD_[10],_bmz_,_Ds_)}
    function gen_with_length$1(len,char_gen)
     {var _bmy_=gen_with_length$0(len,char_gen);
      return caml_call2(_pD_[10],_bmy_,_Ds_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$190);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Bytes$0);
    var
     include$54=
      [0,
       bin_size_bytes,
       bin_write_bytes,
       bin_read_bytes,
       bin_read_bytes$0,
       bin_shape_t$49,
       bin_writer_t$42,
       bin_reader_t$42,
       bin_t$42,
       typerep_of_t$5,
       typename_of_t$5,
       bytes_of_sexp,
       sexp_of_bytes,
       bytes_sexp_grammar,
       _Da_,
       bytes_bytes,
       _Db_,
       _Dc_,
       _Dd_,
       _De_,
       _Df_,
       _Dg_,
       _Dh_,
       _Di_,
       _Dj_,
       equal_bytes,
       compare_bytes,
       _Dk_,
       _Dl_,
       _Dm_,
       _Dn_,
       _Do_,
       _Dp_,
       _Dq_,
       _Dr_,
       _Ds_,
       _Dt_,
       _Du_,
       _Dv_,
       _Dw_,
       _Dx_,
       _Dy_,
       _Dz_,
       _DA_,
       _DB_,
       _DC_,
       _DD_,
       _DE_,
       _DF_,
       _DG_,
       _DH_,
       _DI_,
       _DJ_,
       _DK_,
       _DL_,
       _DM_,
       _DN_,
       _DO_,
       _DP_,
       _DT_,
       quickcheck_generator$8,
       quickcheck_observer$7,
       quickcheck_shrinker$7,
       gen,
       gen_with_length$1,
       [0,
        [0,
         bin_size_bytes,
         bin_write_bytes,
         bin_read_bytes,
         bin_read_bytes$0,
         bin_shape_t$49,
         bin_writer_t$42,
         bin_reader_t$42,
         bin_t$42,
         compare_bytes,
         bytes_of_sexp,
         sexp_of_bytes,
         _Dr_]]];
    caml_register_global(5314,include$54,"Core__Bytes");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Char);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$191);
    caml_call1(Expect_test_collector[5][1],cst_core_src_char_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$192,cst$67);
    var
     Typename_of_t$6=caml_call1(Typerep_lib_Make_typename[1],[0,name$15]),
     typename_of_t$6=Typename_of_t$6[2],
     name_of_t$2=Typename_of_t$6[1],
     typerep_of_t$6=[9,[0,name_of_t$2,[0,_e1_]]],
     _DU_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$117),0,_b3_],0],
     _DV_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_char_ml_9_6),
     group$57=caml_call2(Bin_prot_Shape[6],_DV_,_DU_),
     _DW_=caml_call1(Bin_prot_Shape[2][1],cst_t$118),
     bin_shape_t$50=caml_call1(caml_call2(Bin_prot_Shape[14],group$57,_DW_),0),
     bin_writer_t$43=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$43=[0,bin_read_t$5,bin_read_t$6],
     bin_t$43=[0,bin_shape_t$50,bin_writer_t$43,bin_reader_t$43],
     _DX_=
      [0,
       bin_size_t$2,
       bin_write_t$2,
       bin_read_t$5,
       bin_read_t$6,
       bin_shape_t$50,
       bin_writer_t$43,
       bin_reader_t$43,
       bin_t$43],
     _DY_=
      [0,
       Base_Char[3],
       Base_Char[4],
       Base_Char[5],
       Base_Char[6],
       Base_Char[7],
       Base_Char[8],
       Base_Char[9],
       Base_Char[10],
       Base_Char[11],
       Base_Char[12],
       Base_Char[13],
       Base_Char[14],
       Base_Char[15],
       Base_Char[16],
       Base_Char[17],
       Base_Char[18],
       Base_Char[19],
       Base_Char[20],
       Base_Char[21],
       Base_Char[22],
       Base_Char[23],
       Base_Char[24],
       Base_Char[25],
       Base_Char[26]],
     _DZ_=function(_bmx_){return _AS_(_DY_,_bmx_)}(_DX_),
     bin_size_char=_DZ_[1],
     bin_write_char=_DZ_[2],
     bin_read_char=_DZ_[3],
     bin_read_char$0=_DZ_[4],
     _D0_=_DZ_[5],
     _D8_=_DZ_[35],
     _Eh_=Base_Char[44],
     _Ej_=Base_Char[42],
     _Ep_=Base_Char[36],
     _Er_=Base_Char[34],
     _Et_=Base_Char[32],
     _Ew_=Base_Char[29],
     compare_char=Base_Char[16],
     equal_char=Base_Char[15],
     _EL_=Base_Char[11],
     _EP_=Base_Char[7],
     sexp_of_char=Base_Char[6],
     char_of_sexp=Base_Char[5],
     _EQ_=Base_Char[4],
     hash_fold_char=Base_Char[3],
     char_sexp_grammar=Base_Char[2],
     _ES_=Base_Char[52],
     t_of_sexp$35=_ES_[3],
     sexp_of_t$42=_ES_[4],
     _D1_=_DZ_[6],
     _D2_=_DZ_[7],
     _D3_=_DZ_[8],
     _D4_=_DZ_[29],
     _D5_=_DZ_[30],
     _D6_=_DZ_[31],
     _D7_=_DZ_[34],
     _D9_=_DZ_[39],
     _D__=_DZ_[40],
     _D$_=_DZ_[41],
     _Ea_=Base_Char[51],
     _Eb_=Base_Char[50],
     _Ec_=Base_Char[49],
     _Ed_=Base_Char[48],
     _Ee_=Base_Char[47],
     _Ef_=Base_Char[46],
     _Eg_=Base_Char[45],
     _Ei_=Base_Char[43],
     _Ek_=Base_Char[41],
     _El_=Base_Char[40],
     _Em_=Base_Char[39],
     _En_=Base_Char[38],
     _Eo_=Base_Char[37],
     _Eq_=Base_Char[35],
     _Es_=Base_Char[33],
     _Eu_=Base_Char[31],
     _Ev_=Base_Char[30],
     _Ex_=Base_Char[27],
     _Ey_=Base_Char[26],
     _Ez_=Base_Char[25],
     _EA_=Base_Char[24],
     _EB_=Base_Char[23],
     _EC_=Base_Char[22],
     _ED_=Base_Char[21],
     _EE_=Base_Char[20],
     _EF_=Base_Char[19],
     _EG_=Base_Char[18],
     _EH_=Base_Char[17],
     _EI_=Base_Char[14],
     _EJ_=Base_Char[13],
     _EK_=Base_Char[12],
     _EM_=Base_Char[10],
     _EN_=Base_Char[9],
     _EO_=Base_Char[8],
     _ER_=Base_Char[1],
     _ET_=_ES_[1],
     _EU_=_ES_[2],
     _EV_=_ES_[13],
     _EW_=_ES_[21],
     _EX_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$119),0,_b3_],0],
     _EY_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_char_ml_25_4),
     group$58=caml_call2(Bin_prot_Shape[6],_EY_,_EX_),
     _EZ_=caml_call1(Bin_prot_Shape[2][1],cst_t$120),
     bin_shape_t$51=caml_call1(caml_call2(Bin_prot_Shape[14],group$58,_EZ_),0),
     bin_writer_t$44=[0,bin_size_t$2,bin_write_t$2],
     bin_reader_t$44=[0,bin_read_t$5,bin_read_t$6],
     bin_t$44=[0,bin_shape_t$51,bin_writer_t$44,bin_reader_t$44],
     _E0_=
      _w6_
       ([0,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$51,
         bin_writer_t$44,
         bin_reader_t$44,
         bin_t$44,
         t_of_sexp$35,
         sexp_of_t$42,
         _EW_]),
     symbol$27=_E0_[1],
     symbol$28=_E0_[2],
     symbol$29=_E0_[3],
     symbol$30=_E0_[4],
     symbol$31=_E0_[5],
     symbol$32=_E0_[6],
     equal$22=_E0_[7],
     compare$38=_E0_[8],
     min$4=_E0_[9],
     max$4=_E0_[10],
     ascending$3=_E0_[11],
     descending$3=_E0_[12],
     between$3=_E0_[13],
     clamp_exn$3=_E0_[14],
     clamp$3=_E0_[15],
     validate_lbound$2=_E0_[16],
     validate_ubound$2=_E0_[17],
     validate_bound$2=_E0_[18],
     Replace_polymorphic_compare$1=_E0_[19],
     comparator$6=_E0_[20],
     Map$3=_E0_[21],
     Set$3=_E0_[22],
     include$55=
      Make_binable
       ([0,
         _ET_,
         bin_size_t$2,
         bin_write_t$2,
         bin_read_t$5,
         bin_read_t$6,
         bin_shape_t$51,
         bin_writer_t$44,
         bin_reader_t$44,
         bin_t$44,
         t_of_sexp$35,
         _EV_,
         sexp_of_t$42,
         _EU_]),
     hash_fold_t$16=include$55[1],
     hash$13=include$55[2],
     hashable$3=include$55[3],
     Table$3=include$55[4],
     Hash_set$3=include$55[5],
     Hash_queue$2=include$55[6],
     _E9_=Base_quickcheck_Generator[104],
     _E1_=Base_quickcheck_Generator[3],
     _E2_=Base_quickcheck_Observer[4],
     _E3_=Base_quickcheck_Shrinker[4],
     _E4_=Base_quickcheck_Generator[100],
     _E5_=Base_quickcheck_Generator[98],
     _E6_=Base_quickcheck_Generator[99],
     _E7_=Base_quickcheck_Generator[101],
     _E8_=Base_quickcheck_Generator[102],
     _E__=Base_quickcheck_Generator[103],
     _E$_=Base_quickcheck_Generator[105];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$193);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Char$0);
    var
     Core_Char=
      [0,
       typerep_of_t$6,
       typename_of_t$6,
       _ER_,
       char_sexp_grammar,
       _Ex_,
       _Ew_,
       _Ev_,
       _Eu_,
       _Et_,
       _Es_,
       _Er_,
       _Eq_,
       _Ep_,
       _Eo_,
       _En_,
       _Em_,
       _El_,
       _Ek_,
       _Ej_,
       _Ei_,
       _Eh_,
       _Eg_,
       _Ef_,
       _Ee_,
       _Ed_,
       _Ec_,
       _Eb_,
       _Ea_,
       [0,
        bin_size_t$2,
        bin_write_t$2,
        bin_read_t$5,
        bin_read_t$6,
        bin_shape_t$51,
        bin_writer_t$44,
        bin_reader_t$44,
        bin_t$44,
        t_of_sexp$35,
        sexp_of_t$42,
        symbol$27,
        symbol$28,
        symbol$29,
        symbol$30,
        symbol$31,
        symbol$32,
        equal$22,
        compare$38,
        min$4,
        max$4,
        ascending$3,
        descending$3,
        between$3,
        clamp_exn$3,
        clamp$3,
        validate_lbound$2,
        validate_ubound$2,
        validate_bound$2,
        Replace_polymorphic_compare$1,
        comparator$6,
        Map$3,
        Set$3,
        hash_fold_t$16,
        hash$13,
        hashable$3,
        Table$3,
        Hash_set$3,
        Hash_queue$2],
       bin_size_char,
       bin_write_char,
       bin_read_char,
       bin_read_char$0,
       _D0_,
       _D1_,
       _D2_,
       _D3_,
       char_of_sexp,
       sexp_of_char,
       _EP_,
       _EO_,
       _Ez_,
       _EN_,
       _EM_,
       _EL_,
       _EK_,
       _EJ_,
       _EI_,
       equal_char,
       compare_char,
       _EH_,
       _EG_,
       _EF_,
       _EE_,
       _ED_,
       _EC_,
       _EB_,
       _D4_,
       _D5_,
       _D6_,
       [0,
        Base_Char[9],
        Base_Char[10],
        Base_Char[11],
        Base_Char[12],
        Base_Char[13],
        Base_Char[14],
        Base_Char[15],
        Base_Char[16],
        Base_Char[17],
        Base_Char[18]],
       _EA_,
       _D7_,
       _D8_,
       hash_fold_char,
       _EQ_,
       _Ey_,
       _D9_,
       _D__,
       _D$_,
       _E1_,
       _E2_,
       _E3_,
       _E4_,
       _E5_,
       _E6_,
       _E7_,
       _E8_,
       _E9_,
       _E__,
       _E$_];
    caml_register_global(5315,Core_Char,"Core__Char");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_pervasives);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$194);
    caml_call1(Expect_test_collector[5][1],cst_core_src_core_pervasives_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$195,cst$68);
    var
     _Fa_=include$0[1],
     _Fb_=include$0[2],
     _Fc_=include$0[3],
     _Ff_=include$0[18],
     _Fg_=include$0[19],
     _Fh_=include$0[20],
     _Fi_=include$0[21],
     _Fj_=include$0[22],
     _Fk_=include$0[23],
     _Fl_=include$0[24],
     _Fm_=include$0[25],
     _Fn_=include$0[26],
     _Fo_=include$0[27],
     _Fp_=include$0[28],
     _Fq_=include$0[29],
     _Fr_=include$0[30],
     _Fs_=include$0[32],
     _Ft_=include$0[33],
     _Fu_=include$0[35],
     _Fw_=include$0[38],
     _Fx_=include$0[39],
     _Fy_=include$0[40],
     _Fz_=include$0[41],
     _FA_=include$0[42],
     _FB_=include$0[43],
     _FC_=include$0[44],
     _FD_=include$0[45],
     _FE_=include$0[46],
     _FF_=include$0[47],
     _FG_=include$0[48],
     _FH_=include$0[49],
     _FI_=include$0[50],
     _FJ_=include$0[51],
     _FK_=include$0[52],
     _FL_=include$0[53],
     _FM_=include$0[54],
     _FN_=include$0[55],
     _FO_=include$0[57],
     _FP_=include$0[59],
     _FQ_=include$0[60],
     _FR_=include$0[61],
     _FS_=include$0[62],
     _FT_=include$0[63],
     _FU_=include$0[64],
     _FV_=include$0[65],
     _FW_=include$0[66],
     _FX_=include$0[67],
     _FY_=include$0[68],
     _FZ_=include$0[69],
     _F0_=include$0[70],
     _F1_=include$0[71],
     _F2_=include$0[72],
     _F3_=include$0[73],
     _F4_=include$0[74],
     _F5_=include$0[75],
     _F6_=include$0[76],
     _F7_=include$0[77],
     _F8_=include$0[78],
     _F9_=include$0[79],
     _F__=include$0[80],
     _F$_=include$0[81],
     _Ga_=include$0[82],
     _Gb_=include$0[83],
     _Gc_=include$0[84],
     _Gd_=include$0[85],
     _Ge_=include$0[86],
     _Gf_=include$0[87],
     _Gg_=include$0[88],
     _Gh_=include$0[89],
     _Gi_=include$0[90],
     _Gj_=include$0[91],
     _Gk_=include$0[92],
     _Gl_=include$0[93],
     _Gm_=include$0[94],
     _Gn_=include$0[95],
     _Go_=include$0[96],
     _Gp_=include$0[97],
     _Gq_=include$0[98],
     _Gr_=include$0[99],
     _Gs_=include$0[100],
     _Gt_=include$0[101],
     _Gu_=include$0[102],
     _Gv_=include$0[103],
     _Fd_=include$0[16],
     _Fe_=include$0[17],
     _Fv_=include$0[37];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$196);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_pervasives$0);
    var
     Core_Core_pervasives=
      [0,
       _Fa_,
       _Fb_,
       _Fc_,
       _Fd_,
       _Fe_,
       _Ff_,
       _Fg_,
       _Fh_,
       _Fi_,
       _Fj_,
       _Fk_,
       _Fl_,
       _Fm_,
       _Fn_,
       _Fo_,
       _Fp_,
       _Fq_,
       _Fr_,
       _Fs_,
       _Ft_,
       _Fu_,
       _Fv_,
       _Fw_,
       _Fx_,
       _Fy_,
       _Fz_,
       _FA_,
       _FB_,
       _FC_,
       _FD_,
       _FE_,
       _FF_,
       _FG_,
       _FH_,
       _FI_,
       _FJ_,
       _FK_,
       _FL_,
       _FM_,
       _FN_,
       _FO_,
       _FP_,
       _FQ_,
       _FR_,
       _FS_,
       _FT_,
       _FU_,
       _FV_,
       _FW_,
       _FX_,
       _FY_,
       _FZ_,
       _F0_,
       _F1_,
       _F2_,
       _F3_,
       _F4_,
       _F5_,
       _F6_,
       _F7_,
       _F8_,
       _F9_,
       _F__,
       _F$_,
       _Ga_,
       _Gb_,
       _Gc_,
       _Gd_,
       _Ge_,
       _Gf_,
       _Gg_,
       _Gh_,
       _Gi_,
       _Gj_,
       _Gk_,
       _Gl_,
       _Gm_,
       _Gn_,
       _Go_,
       _Gp_,
       _Gq_,
       _Gr_,
       _Gs_,
       _Gt_,
       _Gu_,
       _Gv_];
    caml_register_global(5316,Core_Core_pervasives,"Core__Core_pervasives");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Robustly_comparable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$197);
    caml_call1(Expect_test_collector[5][1],cst_core_src_robustly_comparab);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$198,cst$69);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$199);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Robustly_comparable$0);
    var Core_Robustly_comparable=[0];
    caml_register_global
     (5317,Core_Robustly_comparable,"Core__Robustly_comparable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Sign);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$200);
    caml_call1(Expect_test_collector[5][1],cst_core_src_sign_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$201,cst$70);
    function t_of_sexp$36(sexp_004)
     {if(0 === sexp_004[0])
       {var _bmt_=sexp_004[1],switch$0=0;
        if(caml_string_notequal(_bmt_,cst_Neg))
         {var switch$1=0;
          if(caml_string_notequal(_bmt_,cst_Pos))
           {var switch$2=0;
            if(caml_string_notequal(_bmt_,cst_Zero))
             if(caml_string_notequal(_bmt_,cst_neg))
              if(caml_string_notequal(_bmt_,cst_pos))
               {if(caml_string_notequal(_bmt_,cst_zero))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 1}
          if(! switch$1)return 2}
        if(! switch$0)return 0}
      else
       {var _bmu_=sexp_004[1];
        if(! _bmu_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_003,sexp_004);
        var _bmv_=_bmu_[1];
        if(0 !== _bmv_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_003,sexp_004);
        var _bmw_=_bmv_[1],switch$3=0;
        if(caml_string_notequal(_bmw_,cst_Neg$0))
         {var switch$4=0;
          if(caml_string_notequal(_bmw_,cst_Pos$0))
           {var switch$5=0;
            if(caml_string_notequal(_bmw_,cst_Zero$0))
             if(caml_string_notequal(_bmw_,cst_neg$0))
              if(caml_string_notequal(_bmw_,cst_pos$0))
               {if(caml_string_notequal(_bmw_,cst_zero$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3],error_source_003,sexp_004)}
          if(! switch$4)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003,sexp_004)}
        if(! switch$3)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3],error_source_003,sexp_004)}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_003,sexp_004)}
    function sexp_of_t$43(param)
     {switch(param){case 0:return _Gw_;case 1:return _Gx_;default:return _Gy_}}
    var
     _GA_=caml_call1(Bin_prot_Shape[9],_Gz_),
     _GB_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$121),0,_GA_],0],
     _GC_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sign_ml_6_4),
     group$59=caml_call2(Bin_prot_Shape[6],_GC_,_GB_),
     _GD_=caml_call1(Bin_prot_Shape[2][1],cst_t$122),
     bin_shape_t$52=caml_call1(caml_call2(Bin_prot_Shape[14],group$59,_GD_),0);
    function bin_size_t$48(param){return 1}
    function bin_write_t$48(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[31],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[31],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[31],buf,pos,2)}}
    var bin_writer_t$45=[0,bin_size_t$48,bin_write_t$48];
    function bin_read_t$98(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_sign_ml_Stable_V1,pos_ref[1])}
    function bin_read_t$99(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_GE_,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_t$45=[0,bin_read_t$99,bin_read_t$98],
     bin_t$45=[0,bin_shape_t$52,bin_writer_t$45,bin_reader_t$45],
     compare$39=caml_int_compare;
    function hash_fold_t$17(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        default:return caml_call2(Base_Hash[3],hsv,2)}}
    function hash$14(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bms_=hash_fold_t$17(hsv,x);
      return caml_call1(Base_Hash[9],_bms_)}
    var
     Typename_of_t$7=caml_call1(Typerep_lib_Make_typename[1],[0,name$16]),
     typename_of_t$7=Typename_of_t$7[2],
     name_of_t$3=Typename_of_t$7[1],
     typerep_of_t$7=
      [9,
       [0,
        name_of_t$3,
        [0,
         [246,
          function(_bmr_)
           {var
             tag0=
              caml_call1
               (Typerep_lib_Std[1][4][9],[0,cst_Neg$1,_eO_,0,0,0,0,_es_,_GF_]),
             tag1=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Zero$1,_eO_,0,0,1,1,_es_,_GG_]),
             tag2=
              caml_call1
               (Typerep_lib_Std[1][4][9],[0,cst_Pos$1,_eO_,0,0,2,2,_es_,_GH_]),
             typename=caml_call1(Typerep_lib_Std[1][1][2],name_of_t$3),
             tags=[0,[0,tag0],[0,tag1],[0,tag2]],
             polymorphic=0;
            function value(param)
             {switch(param)
               {case 0:return [0,tag0,_eV_];
                case 1:return [0,tag1,_eV_];
                default:return [0,tag2,_eV_]}}
            return [8,
                    caml_call1
                     (Typerep_lib_Std[1][6][7],
                      [0,typename,tags,polymorphic,value])]}]]]],
     _GJ_=Base_Sign[2],
     _GK_=Base_Sign[27],
     _GI_=Base_Sign[1],
     _GL_=Base_Sign[28],
     _GM_=Base_Sign[29],
     _GN_=Base_Sign[30],
     _GO_=Base_Sign[31],
     _GP_=
      [0,
       bin_size_t$48,
       bin_write_t$48,
       bin_read_t$99,
       bin_read_t$98,
       bin_shape_t$52,
       bin_writer_t$45,
       bin_reader_t$45,
       bin_t$45],
     _GQ_=
      [0,
       Base_Sign[3],
       Base_Sign[4],
       Base_Sign[5],
       Base_Sign[6],
       Base_Sign[7],
       Base_Sign[8],
       Base_Sign[9],
       Base_Sign[10],
       Base_Sign[11],
       Base_Sign[12],
       Base_Sign[13],
       Base_Sign[14],
       Base_Sign[15],
       Base_Sign[16],
       Base_Sign[17],
       Base_Sign[18],
       Base_Sign[19],
       Base_Sign[20],
       Base_Sign[21],
       Base_Sign[22],
       Base_Sign[23],
       Base_Sign[24],
       Base_Sign[25],
       Base_Sign[26]],
     include$56=function(_bmq_){return _AS_(_GQ_,_bmq_)}(_GP_),
     _GZ_=include$56[9],
     _G0_=include$56[10],
     _G$_=include$56[21],
     _GR_=include$56[1],
     _GS_=include$56[2],
     _GT_=include$56[3],
     _GU_=include$56[4],
     _GV_=include$56[5],
     _GW_=include$56[6],
     _GX_=include$56[7],
     _GY_=include$56[8],
     _G1_=include$56[11],
     _G2_=include$56[12],
     _G3_=include$56[13],
     _G4_=include$56[14],
     _G5_=include$56[15],
     _G6_=include$56[16],
     _G7_=include$56[17],
     _G8_=include$56[18],
     _G9_=include$56[19],
     _G__=include$56[20],
     _Ha_=include$56[22],
     _Hb_=include$56[23],
     _Hc_=include$56[24],
     _Hd_=include$56[25],
     _He_=include$56[26],
     _Hf_=include$56[27],
     _Hg_=include$56[28],
     _Hh_=include$56[29],
     _Hi_=include$56[30],
     _Hj_=include$56[31],
     _Hk_=include$56[32],
     _Hl_=include$56[33],
     _Hm_=include$56[34],
     _Hn_=include$56[35],
     _Ho_=include$56[36],
     _Hp_=include$56[37],
     _Hq_=include$56[38],
     _Hr_=include$56[39],
     _Hs_=include$56[40],
     _Ht_=include$56[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$202);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Sign$0);
    var
     Core_Sign=
      [0,
       typerep_of_t$7,
       typename_of_t$7,
       _GI_,
       _GJ_,
       _GK_,
       _GL_,
       _GM_,
       _GN_,
       _GO_,
       _GR_,
       _GS_,
       _GT_,
       _GU_,
       _GV_,
       _GW_,
       _GX_,
       _GY_,
       _GZ_,
       _G0_,
       _G1_,
       _G2_,
       _G3_,
       _G4_,
       _G5_,
       _G6_,
       _G7_,
       _G8_,
       _G9_,
       _G__,
       _G$_,
       _Ha_,
       _Hb_,
       _Hc_,
       _Hd_,
       _He_,
       _Hf_,
       _Hg_,
       _Hh_,
       _Hi_,
       _Hj_,
       _Hk_,
       _Hl_,
       _Hm_,
       _Hn_,
       _Ho_,
       _Hp_,
       _Hq_,
       _Hr_,
       _Hs_,
       _Ht_,
       [0,
        [0,
         bin_size_t$48,
         bin_write_t$48,
         bin_read_t$99,
         bin_read_t$98,
         bin_shape_t$52,
         bin_writer_t$45,
         bin_reader_t$45,
         bin_t$45,
         compare$39,
         hash_fold_t$17,
         hash$14,
         t_of_sexp$36,
         sexp_of_t$43]]];
    caml_register_global(5319,Core_Sign,"Core__Sign");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Float);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$203);
    caml_call1(Expect_test_collector[5][1],cst_core_src_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$204,cst$71);
    var
     t_sexp_grammar$11=include$13[1],
     of_float=include$13[2],
     to_float=include$13[3],
     float_of_sexp=include$13[6],
     sexp_of_t$44=include$13[7],
     _Hw_=include$13[8],
     symbol$33=include$13[9],
     symbol$34=include$13[10],
     symbol$35=include$13[11],
     symbol$36=include$13[12],
     symbol$37=include$13[13],
     symbol$38=include$13[14],
     equal$23=include$13[15],
     compare$40=include$13[16],
     min$5=include$13[17],
     max$5=include$13[18],
     ascending$4=include$13[19],
     descending$4=include$13[20],
     between$4=include$13[21],
     clamp_exn$4=include$13[22],
     clamp$4=include$13[23],
     is_positive=include$13[27],
     is_non_negative=include$13[28],
     is_negative=include$13[29],
     is_non_positive=include$13[30],
     none=include$13[32],
     _HA_=include$13[33],
     _HB_=include$13[34],
     zero=include$13[37],
     _HR_=include$13[51],
     _HS_=include$13[52],
     _HT_=include$13[53],
     _HX_=include$13[57],
     _H1_=include$13[61],
     _H2_=include$13[62],
     _H__=include$13[70],
     _H$_=include$13[71],
     _Ia_=include$13[72],
     _Ib_=include$13[73],
     _Id_=include$13[75],
     _Ii_=include$13[80],
     _Ij_=include$13[81],
     is_nan=include$13[82],
     is_inf=include$13[83],
     _Ik_=include$13[84],
     symbol$39=include$13[88],
     symbol$40=include$13[89],
     symbol$41=include$13[90],
     symbol$42=include$13[92],
     _Is_=include$13[97],
     neg=include$13[100],
     scale=include$13[101],
     abs=include$13[102],
     _Iv_=include$13[105],
     _Iw_=include$13[106],
     _ID_=include$13[114],
     sign=include$13[116],
     _Hu_=include$13[4],
     _Hv_=include$13[5],
     _Hx_=include$13[24],
     _Hy_=include$13[25],
     _Hz_=include$13[31],
     _HC_=include$13[35],
     _HD_=include$13[36],
     _HE_=include$13[38],
     _HF_=include$13[39],
     _HG_=include$13[40],
     _HH_=include$13[41],
     _HI_=include$13[42],
     _HJ_=include$13[43],
     _HK_=include$13[44],
     _HL_=include$13[45],
     _HM_=include$13[46],
     _HN_=include$13[47],
     _HO_=include$13[48],
     _HP_=include$13[49],
     _HQ_=include$13[50],
     _HU_=include$13[54],
     _HV_=include$13[55],
     _HW_=include$13[56],
     _HY_=include$13[58],
     _HZ_=include$13[59],
     _H0_=include$13[60],
     _H3_=include$13[63],
     _H4_=include$13[64],
     _H5_=include$13[65],
     _H6_=include$13[66],
     _H7_=include$13[67],
     _H8_=include$13[68],
     _H9_=include$13[69],
     _Ic_=include$13[74],
     _Ie_=include$13[76],
     _If_=include$13[77],
     _Ig_=include$13[78],
     _Ih_=include$13[79],
     _Il_=include$13[85],
     _Im_=include$13[86],
     _In_=include$13[87],
     _Io_=include$13[91],
     _Ip_=include$13[93],
     _Iq_=include$13[94],
     _Ir_=include$13[96],
     _It_=include$13[98],
     _Iu_=include$13[99],
     _Ix_=include$13[107],
     _Iy_=include$13[108],
     _Iz_=include$13[109],
     _IA_=include$13[110],
     _IB_=include$13[111],
     _IC_=include$13[112],
     _IE_=include$13[117],
     _IF_=include$13[118],
     _IG_=include$13[119],
     _IH_=include$13[120],
     _II_=include$13[121],
     _IJ_=include$13[122],
     _IK_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$123),0,_b$_],0],
     _IL_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_float_ml_25_2),
     group$60=caml_call2(Bin_prot_Shape[6],_IL_,_IK_),
     _IM_=caml_call1(Bin_prot_Shape[2][1],cst_t$124),
     bin_shape_t$53=caml_call1(caml_call2(Bin_prot_Shape[14],group$60,_IM_),0),
     bin_writer_t$46=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_t$46=[0,bin_read_t$9,bin_read_t$10],
     bin_t$46=[0,bin_shape_t$53,bin_writer_t$46,bin_reader_t$46],
     Typename_of_t$8=caml_call1(Typerep_lib_Make_typename[1],[0,name$17]),
     typename_of_t$8=Typename_of_t$8[2],
     name_of_t$4=Typename_of_t$8[1],
     typerep_of_t$8=[9,[0,name_of_t$4,[0,_e0_]]],
     _IN_=
      Make_binable
       ([0,
         _Hu_,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$53,
         bin_writer_t$46,
         bin_reader_t$46,
         bin_t$46,
         float_of_sexp,
         compare$40,
         sexp_of_t$44,
         _Hv_]),
     hash_fold_t$18=_IN_[1],
     hash$15=_IN_[2],
     hashable$4=_IN_[3],
     Table$4=_IN_[4],
     Hash_set$4=_IN_[5],
     Hash_queue$3=_IN_[6],
     _IO_=
      _w2_
       ([0,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$53,
         bin_writer_t$46,
         bin_reader_t$46,
         bin_t$46,
         compare$40,
         float_of_sexp,
         sexp_of_t$44,
         _Hx_]),
     comparator$7=_IO_[1],
     Map$4=_IO_[2],
     Set$4=_IO_[3],
     include$57=_w0_([0,compare$40,sexp_of_t$44,zero]),
     validate_positive=include$57[4],
     validate_non_negative=include$57[5],
     validate_negative=include$57[6],
     validate_non_positive=include$57[7],
     Replace_polymorphic_compare$2=
      [0,
       symbol$33,
       symbol$34,
       symbol$35,
       symbol$36,
       symbol$37,
       symbol$38,
       equal$23,
       compare$40,
       min$5,
       max$5];
    function validate$5(t)
     {var match=caml_call1(_ID_,t),_bmp_=1 === match?_IP_:match?0:_IQ_;
      return caml_call1(Validate[31],_bmp_)}
    var ZZ=Validate$0([0,compare$40,sexp_of_t$44]);
    function validate_bound$3(min,max,t)
     {var _bmn_=caml_call3(ZZ[3],min,max,t),_bmo_=validate$5(t);
      return caml_call2(Validate[30],_bmo_,_bmn_)}
    function validate_lbound$3(min,t)
     {var _bml_=caml_call2(ZZ[1],min,t),_bmm_=validate$5(t);
      return caml_call2(Validate[30],_bmm_,_bml_)}
    function validate_ubound$3(max,t)
     {var _bmj_=caml_call2(ZZ[2],max,t),_bmk_=validate$5(t);
      return caml_call2(Validate[30],_bmk_,_bmj_)}
    function Make$7(T)
     {var robust_comparison_tolerance=T[1];
      function symbol(x,y){return y - robust_comparison_tolerance <= x?1:0}
      function symbol$0(x,y){return symbol(y,x)}
      function symbol$1(x,y)
       {var _bmi_=symbol(x,y);return _bmi_?symbol(y,x):_bmi_}
      function symbol$2(x,y){return y + robust_comparison_tolerance < x?1:0}
      function symbol$3(x,y){return symbol$2(y,x)}
      function symbol$4(x,y){return 1 - symbol$1(x,y)}
      function robustly_compare(x,y)
       {var d=x - y;
        return d < - robust_comparison_tolerance
                ?-1
                :robust_comparison_tolerance < d?1:0}
      return [0,
              robust_comparison_tolerance,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              robustly_compare]}
    var
     Robust_compare=[0,Make$7],
     include$58=caml_call1(Robust_compare[1],[0,1e-07]),
     symbol$43=include$58[2],
     symbol$44=include$58[3],
     symbol$45=include$58[4],
     symbol$46=include$58[5],
     symbol$47=include$58[6],
     symbol$48=include$58[7],
     robustly_compare=include$58[8],
     _IS_=include$13[103],
     symbol$49=_IS_[1],
     symbol$50=_IS_[2],
     symbol$51=_IS_[3],
     symbol$52=_IS_[4],
     symbol$53=_IS_[5],
     symbol$54=_IS_[6],
     symbol$55=_IS_[7],
     symbol$56=_IS_[8],
     symbol$57=_IS_[9],
     symbol$58=_IS_[10],
     symbol$59=_IS_[11],
     symbol$60=_IS_[12],
     symbol$61=_IS_[13],
     abs$0=_IS_[14],
     neg$0=_IS_[15],
     zero$0=_IS_[16],
     of_int=_IS_[17],
     of_float$0=_IS_[18],
     symbol$62=include$58[2],
     symbol$63=include$58[3],
     symbol$64=include$58[4],
     symbol$65=include$58[5],
     symbol$66=include$58[6],
     symbol$67=include$58[7],
     robustly_compare$0=include$58[8],
     _IR_=include$58[1],
     _IT_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$125),0,bin_shape_t$53],0],
     _IU_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_float_ml_111_2),
     group$61=caml_call2(Bin_prot_Shape[6],_IU_,_IT_),
     _IV_=caml_call1(Bin_prot_Shape[2][1],cst_t$126),
     bin_shape_t$54=caml_call1(caml_call2(Bin_prot_Shape[14],group$61,_IV_),0),
     bin_writer_t$47=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_t$47=[0,bin_read_t$9,bin_read_t$10],
     bin_t$47=[0,bin_shape_t$54,bin_writer_t$47,bin_reader_t$47],
     include$59=include$13[123],
     t_of_sexp$37=include$59[1],
     sexp_of_t$45=include$59[2],
     t_sexp_grammar$12=include$59[3],
     of_string$4=include$59[4],
     to_string$5=include$59[5];
    function sign$0(t)
     {return caml_call2(symbol$46,t,0.)?2:caml_call2(symbol$47,t,0.)?0:1}
    function to_string_12(x)
     {var
       s=runtime.caml_format_float(cst_12g,x),
       l=caml_ml_string_length(s),
       i=0;
      for(;;)
       {if(l <= i)return caml_call2(Stdlib[28],s,cst$72);
        var match=caml_string_get(s,i),switch$0=0;
        if(48 <= match)
         {if(! (58 <= match))switch$0 = 1}
        else
         if(45 === match)switch$0 = 1;
        if(switch$0){var i$0=i + 1 | 0,i=i$0;continue}
        return s}}
    var
     quickcheck_generator$9=Base_quickcheck_Generator[11],
     quickcheck_observer$8=Base_quickcheck_Observer[12],
     quickcheck_shrinker$8=Base_quickcheck_Shrinker[12],
     _IW_=Base_quickcheck_Generator[90],
     _IX_=Base_quickcheck_Generator[89],
     quickcheck_generator$10=Base_quickcheck_Generator[92],
     _IY_=Base_quickcheck_Generator[91],
     _IZ_=Base_quickcheck_Generator[93],
     _I0_=Base_quickcheck_Generator[94],
     gen_zero=caml_call1(Base_quickcheck_Generator[97],4),
     gen_nan=caml_call1(Base_quickcheck_Generator[97],1),
     gen_subnormal=caml_call1(Base_quickcheck_Generator[97],3),
     gen_normal=caml_call1(Base_quickcheck_Generator[97],2),
     gen_infinite=caml_call1(Base_quickcheck_Generator[97],0);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$205);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Float$0);
    var
     include$60=
      [0,
       t_sexp_grammar$11,
       of_float,
       to_float,
       is_positive,
       is_non_negative,
       is_negative,
       is_non_positive,
       _Hz_,
       none,
       _HA_,
       _HB_,
       _HC_,
       _HD_,
       zero,
       _HE_,
       _HF_,
       _HG_,
       _HH_,
       _HI_,
       _HJ_,
       _HK_,
       _HL_,
       _HM_,
       _HN_,
       _HO_,
       _HP_,
       _HQ_,
       _HR_,
       _HS_,
       _HT_,
       _HU_,
       _HV_,
       _HW_,
       _HX_,
       _HY_,
       _HZ_,
       _H0_,
       _H1_,
       _H2_,
       _H3_,
       _H4_,
       _H5_,
       _H6_,
       _H7_,
       _H8_,
       _H9_,
       _H__,
       _H$_,
       _Ia_,
       _Ib_,
       _Ic_,
       _Id_,
       _Ie_,
       _If_,
       _Ig_,
       _Ih_,
       _Ii_,
       _Ij_,
       is_nan,
       is_inf,
       _Ik_,
       _Il_,
       _Im_,
       _In_,
       symbol$39,
       symbol$40,
       symbol$41,
       _Io_,
       symbol$42,
       _Ip_,
       _Iq_,
       _Ir_,
       _Is_,
       _It_,
       _Iu_,
       neg,
       scale,
       abs,
       _Iw_,
       _Ix_,
       _Iy_,
       _Iz_,
       _IA_,
       _IB_,
       _IC_,
       _ID_,
       sign,
       _IE_,
       _IF_,
       _IG_,
       _IH_,
       _II_,
       _IJ_,
       typerep_of_t$8,
       typename_of_t$8,
       Robust_compare,
       _IR_,
       symbol$43,
       symbol$44,
       symbol$45,
       symbol$46,
       symbol$47,
       symbol$48,
       robustly_compare,
       [0,
        symbol$49,
        symbol$50,
        symbol$51,
        symbol$52,
        symbol$53,
        symbol$54,
        symbol$55,
        symbol$56,
        symbol$57,
        symbol$58,
        symbol$59,
        symbol$60,
        symbol$61,
        abs$0,
        neg$0,
        zero$0,
        of_int,
        of_float$0,
        symbol$62,
        symbol$63,
        symbol$64,
        symbol$65,
        symbol$66,
        symbol$67,
        robustly_compare$0],
       include$58,
       [0,
        bin_size_t$4,
        bin_write_t$4,
        bin_read_t$9,
        bin_read_t$10,
        bin_shape_t$54,
        bin_writer_t$47,
        bin_reader_t$47,
        bin_t$47,
        t_of_sexp$37,
        sexp_of_t$45,
        t_sexp_grammar$12,
        of_string$4,
        to_string$5],
       bin_size_t$4,
       bin_write_t$4,
       bin_read_t$9,
       bin_read_t$10,
       bin_shape_t$53,
       bin_writer_t$46,
       bin_reader_t$46,
       bin_t$46,
       float_of_sexp,
       sexp_of_t$44,
       _Hw_,
       _Hy_,
       symbol$33,
       symbol$34,
       symbol$35,
       symbol$36,
       symbol$37,
       symbol$38,
       equal$23,
       compare$40,
       min$5,
       max$5,
       ascending$4,
       descending$4,
       between$4,
       clamp_exn$4,
       clamp$4,
       Replace_polymorphic_compare$2,
       comparator$7,
       Map$4,
       Set$4,
       hash_fold_t$18,
       hash$15,
       hashable$4,
       Table$4,
       Hash_set$4,
       Hash_queue$3,
       validate_lbound$3,
       validate_ubound$3,
       validate_bound$3,
       validate_positive,
       validate_non_negative,
       validate_negative,
       validate_non_positive,
       validate$5,
       to_string_12,
       _Iv_,
       quickcheck_generator$9,
       quickcheck_observer$8,
       quickcheck_shrinker$8,
       sign$0,
       sign$0,
       _IW_,
       _IX_,
       quickcheck_generator$10,
       _IZ_,
       _I0_,
       _IY_,
       gen_infinite,
       gen_nan,
       gen_normal,
       gen_subnormal,
       gen_zero];
    caml_register_global(5320,include$60,"Core__Float");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Int);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$206);
    caml_call1(Expect_test_collector[5][1],cst_core_src_int_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$207,cst$73);
    var
     compare$41=include$27[13],
     comparator$8=include$27[21],
     _I1_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$127),0,_b7_],0],
     _I2_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_int_ml_8_6),
     group$62=caml_call2(Bin_prot_Shape[6],_I2_,_I1_),
     _I3_=caml_call1(Bin_prot_Shape[2][1],cst_t$128),
     bin_shape_t$55=caml_call1(caml_call2(Bin_prot_Shape[14],group$62,_I3_),0),
     bin_writer_t$48=[0,bin_size_t$3,bin_write_t$3],
     bin_reader_t$48=[0,bin_read_t$7,bin_read_t$8],
     bin_t$48=[0,bin_shape_t$55,bin_writer_t$48,bin_reader_t$48],
     include$61=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$3,
         bin_write_t$3,
         bin_read_t$7,
         bin_read_t$8,
         bin_shape_t$55,
         bin_writer_t$48,
         bin_reader_t$48,
         bin_t$48,
         compare$41,
         t_of_sexp,
         sexp_of_t$0,
         comparator$8]),
     Map$5=include$61[1],
     Set$5=include$61[2],
     _I4_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$129),0,_b7_],0],
     _I5_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_int_ml_20_6),
     group$63=caml_call2(Bin_prot_Shape[6],_I5_,_I4_),
     _I6_=caml_call1(Bin_prot_Shape[2][1],cst_t$130),
     bin_shape_t$56=caml_call1(caml_call2(Bin_prot_Shape[14],group$63,_I6_),0),
     bin_writer_t$49=[0,bin_size_t$3,bin_write_t$3],
     bin_reader_t$49=[0,bin_read_t$7,bin_read_t$8],
     bin_t$49=[0,bin_shape_t$56,bin_writer_t$49,bin_reader_t$49],
     _I7_=
      [0,
       bin_size_t$3,
       bin_write_t$3,
       bin_read_t$7,
       bin_read_t$8,
       bin_shape_t$56,
       bin_writer_t$49,
       bin_reader_t$49,
       bin_t$49],
     _I8_=include$27[23],
     _I9_=include$27[22],
     _I__=include$27[21],
     _I$_=include$27[20],
     _Ja_=include$27[19],
     _Jb_=include$27[18],
     _Jc_=include$27[17],
     _Jd_=include$27[16],
     _Je_=include$27[15],
     _Jf_=include$27[14],
     _Jg_=include$27[13],
     _Jh_=include$27[12];
    function _Ji_(_bmh_,_bmg_){return _bmh_ !== _bmg_?1:0}
    function _Jj_(_bmf_,_bme_){return _bmf_ < _bme_?1:0}
    function _Jk_(_bmd_,_bmc_){return _bmc_ < _bmd_?1:0}
    function _Jl_(_bmb_,_bma_){return _bmb_ === _bma_?1:0}
    function _Jm_(_bl$_,_bl__){return _bl$_ <= _bl__?1:0}
    function _Jn_(_bl9_,_bl8_){return _bl8_ <= _bl9_?1:0}
    var
     _Jo_=
      [0,
       include$27[6],
       include$27[7],
       include$27[8],
       include$27[9],
       include$27[10],
       include$27[11],
       _Jn_,
       _Jm_,
       _Jl_,
       _Jk_,
       _Jj_,
       _Ji_,
       _Jh_,
       _Jg_,
       _Jf_,
       _Je_,
       _Jd_,
       _Jc_,
       _Jb_,
       _Ja_,
       _I$_,
       _I__,
       _I9_,
       _I8_],
     _Jp_=function(_bl7_){return _AS_(_Jo_,_bl7_)}(_I7_),
     bin_size_t$49=_Jp_[1],
     bin_write_t$49=_Jp_[2],
     bin_read_t$100=_Jp_[3],
     bin_read_t$101=_Jp_[4],
     bin_shape_t$57=_Jp_[5],
     bin_writer_t$50=_Jp_[6],
     bin_reader_t$50=_Jp_[7],
     bin_t$50=_Jp_[8],
     Map$6=_Jp_[34],
     Set$6=_Jp_[35],
     Table$5=_Jp_[39],
     Hash_set$5=_Jp_[40],
     Hash_queue$4=_Jp_[41],
     int_sexp_grammar=include$27[1],
     of_float$1=include$27[2],
     to_float$0=include$27[3],
     of_int_exn=include$27[4],
     to_int_exn=include$27[5],
     hash_fold_t$19=include$27[6],
     hash$16=include$27[7],
     int_of_sexp=include$27[8],
     sexp_of_int=include$27[9],
     of_string$5=include$27[10],
     to_string$6=include$27[11],
     equal$24=include$27[12],
     compare$42=include$27[13],
     min$6=include$27[14],
     max$6=include$27[15],
     ascending$5=include$27[16],
     descending$5=include$27[17],
     between$5=include$27[18],
     clamp_exn$5=include$27[19],
     clamp$5=include$27[20],
     comparator$9=include$27[21],
     pp$3=include$27[22],
     hashable$5=include$27[23],
     is_positive$0=include$27[24],
     is_non_negative$0=include$27[25],
     is_negative$0=include$27[26],
     is_non_positive$0=include$27[27],
     invariant$5=include$27[29],
     Hex=include$27[30],
     to_string_hum$0=include$27[31],
     one=include$27[32],
     minus_one=include$27[33],
     rem=include$27[34],
     round=include$27[35],
     round_towards_zero=include$27[36],
     round_down=include$27[37],
     round_up=include$27[38],
     round_nearest=include$27[39],
     next$0=include$27[40],
     prev$1=include$27[41],
     pow=include$27[42],
     bit_and=include$27[43],
     bit_or=include$27[44],
     bit_xor=include$27[45],
     bit_not=include$27[46],
     popcount=include$27[47],
     shift_left=include$27[48],
     shift_right=include$27[49],
     decr$0=include$27[50],
     incr$0=include$27[51],
     of_int32_exn=include$27[52],
     to_int32_exn=include$27[53],
     of_int64_exn=include$27[54],
     to_int64=include$27[55],
     of_nativeint_exn=include$27[56],
     to_nativeint_exn=include$27[57],
     of_float_unchecked=include$27[58],
     num_bits=include$27[59],
     max_value=include$27[60],
     min_value=include$27[61],
     shift_right_logical=include$27[62],
     ceil_pow2=include$27[63],
     floor_pow2=include$27[64],
     ceil_log2=include$27[65],
     floor_log2=include$27[66],
     is_pow2=include$27[67],
     clz=include$27[68],
     ctz=include$27[69],
     O$0=include$27[70],
     symbol$68=include$27[71],
     lnot=include$27[72],
     abs$1=include$27[73],
     zero$1=include$27[74],
     symbol$69=include$27[75],
     symbol$70=include$27[76],
     symbol$71=include$27[77],
     max_value_30_bits=include$27[78],
     of_int$0=include$27[79],
     to_int$0=include$27[80],
     of_int32=include$27[81],
     to_int32=include$27[82],
     of_int64=include$27[83],
     of_nativeint=include$27[84],
     to_nativeint=include$27[85],
     Private$1=include$27[86],
     include$62=_w0_([0,include$27[13],include$27[9],include$27[74]]),
     validate_lbound$4=include$62[1],
     validate_ubound$4=include$62[2],
     validate_bound$4=include$62[3],
     validate_positive$0=include$62[4],
     validate_non_negative$0=include$62[5],
     validate_negative$0=include$62[6],
     validate_non_positive$0=include$62[7],
     Typename_of_t$9=caml_call1(Typerep_lib_Make_typename[1],[0,name$18]),
     typename_of_t$9=Typename_of_t$9[2],
     name_of_t$5=Typename_of_t$9[1],
     typerep_of_t$9=[9,[0,name_of_t$5,[0,_e6_]]],
     t_of_sexp$38=Hex[1],
     sexp_of_t$46=Hex[2],
     t_sexp_grammar$13=Hex[3],
     compare$43=Hex[4],
     hash_fold_t$20=Hex[5],
     hash$17=Hex[6],
     of_string$6=Hex[7],
     to_string$7=Hex[8],
     to_string_hum$1=Hex[9],
     Typename_of_t$10=caml_call1(Typerep_lib_Make_typename[1],[0,name$19]),
     typename_of_t$10=Typename_of_t$10[2],
     name_of_t$6=Typename_of_t$10[1],
     typerep_of_t$10=[9,[0,name_of_t$6,[0,typerep_of_t$9]]],
     _Jq_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$131),0,bin_shape_t$57],0],
     _Jr_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_int_ml_36_2),
     group$64=caml_call2(Bin_prot_Shape[6],_Jr_,_Jq_),
     _Js_=caml_call1(Bin_prot_Shape[2][1],cst_t$132),
     bin_shape_t$58=caml_call1(caml_call2(Bin_prot_Shape[14],group$64,_Js_),0),
     bin_writer_t$51=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$51=[0,bin_read_t$100,bin_read_t$101],
     bin_t$51=[0,bin_shape_t$58,bin_writer_t$51,bin_reader_t$51],
     _Jt_=Base_quickcheck_Generator[6],
     _Ju_=Base_quickcheck_Observer[7],
     _Jv_=Base_quickcheck_Shrinker[7],
     _Jx_=Base_quickcheck_Generator[74],
     _Jw_=Base_quickcheck_Generator[69],
     _Jy_=Base_quickcheck_Generator[84],
     _Jz_=Base_quickcheck_Generator[79];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$208);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Int$0);
    var
     Stable$5=
      [0,
       [0,
        bin_size_t$3,
        bin_write_t$3,
        bin_read_t$7,
        bin_read_t$8,
        bin_shape_t$55,
        bin_writer_t$48,
        bin_reader_t$48,
        bin_t$48,
        compare$41,
        t_of_sexp,
        sexp_of_t$0,
        comparator$8,
        Map$5,
        Set$5]],
     _JA_=include$27[15],
     _JB_=include$27[14],
     _JC_=include$27[13],
     _JD_=include$27[12];
    function _JE_(_bl6_,_bl5_){return _bl6_ !== _bl5_?1:0}
    function _JF_(_bl4_,_bl3_){return _bl4_ < _bl3_?1:0}
    function _JG_(_bl2_,_bl1_){return _bl1_ < _bl2_?1:0}
    function _JH_(_bl0_,_blZ_){return _bl0_ === _blZ_?1:0}
    function _JI_(_blY_,_blX_){return _blY_ <= _blX_?1:0}
    var
     Replace_polymorphic_compare$3=
      [0,
       function(_blW_,_blV_){return _blV_ <= _blW_?1:0},
       _JI_,
       _JH_,
       _JG_,
       _JF_,
       _JE_,
       _JD_,
       _JC_,
       _JB_,
       _JA_];
    function symbol$72(_blU_,_blT_){return _blU_ !== _blT_?1:0}
    function symbol$73(_blS_,_blR_){return _blS_ < _blR_?1:0}
    function symbol$74(_blQ_,_blP_){return _blP_ < _blQ_?1:0}
    function symbol$75(_blO_,_blN_){return _blO_ === _blN_?1:0}
    function symbol$76(_blM_,_blL_){return _blM_ <= _blL_?1:0}
    function symbol$77(_blK_,_blJ_){return _blJ_ <= _blK_?1:0}
    var
     Hex$0=
      [0,
       bin_size_t$49,
       bin_write_t$49,
       bin_read_t$100,
       bin_read_t$101,
       bin_shape_t$58,
       bin_writer_t$51,
       bin_reader_t$51,
       bin_t$51,
       t_of_sexp$38,
       sexp_of_t$46,
       t_sexp_grammar$13,
       compare$43,
       hash_fold_t$20,
       hash$17,
       typerep_of_t$10,
       typename_of_t$10,
       of_string$6,
       to_string$7,
       to_string_hum$1],
     include$63=
      [0,
       int_sexp_grammar,
       of_float$1,
       to_float$0,
       of_int_exn,
       to_int_exn,
       is_positive$0,
       is_non_negative$0,
       is_negative$0,
       is_non_positive$0,
       _GK_,
       invariant$5,
       to_string_hum$0,
       one,
       minus_one,
       rem,
       round,
       round_towards_zero,
       round_down,
       round_up,
       round_nearest,
       next$0,
       prev$1,
       pow,
       bit_and,
       bit_or,
       bit_xor,
       bit_not,
       popcount,
       shift_left,
       shift_right,
       decr$0,
       incr$0,
       of_int32_exn,
       to_int32_exn,
       of_int64_exn,
       to_int64,
       of_nativeint_exn,
       to_nativeint_exn,
       of_float_unchecked,
       num_bits,
       max_value,
       min_value,
       shift_right_logical,
       ceil_pow2,
       floor_pow2,
       ceil_log2,
       floor_log2,
       is_pow2,
       clz,
       ctz,
       O$0,
       symbol$68,
       lnot,
       abs$1,
       zero$1,
       symbol$69,
       symbol$70,
       symbol$71,
       max_value_30_bits,
       of_int$0,
       to_int$0,
       of_int32,
       to_int32,
       of_int64,
       of_nativeint,
       to_nativeint,
       Private$1,
       typerep_of_t$9,
       typename_of_t$9,
       Hex$0,
       bin_size_t$49,
       bin_write_t$49,
       bin_read_t$100,
       bin_read_t$101,
       bin_shape_t$57,
       bin_writer_t$50,
       bin_reader_t$50,
       bin_t$50,
       int_of_sexp,
       sexp_of_int,
       of_string$5,
       to_string$6,
       pp$3,
       symbol$77,
       symbol$76,
       symbol$75,
       symbol$74,
       symbol$73,
       symbol$72,
       equal$24,
       compare$42,
       min$6,
       max$6,
       ascending$5,
       descending$5,
       between$5,
       clamp_exn$5,
       clamp$5,
       Replace_polymorphic_compare$3,
       comparator$9,
       Map$6,
       Set$6,
       hash_fold_t$19,
       hash$16,
       hashable$5,
       Table$5,
       Hash_set$5,
       Hash_queue$4,
       validate_lbound$4,
       validate_ubound$4,
       validate_bound$4,
       validate_positive$0,
       validate_non_negative$0,
       validate_negative$0,
       validate_non_positive$0,
       _Jt_,
       _Ju_,
       _Jv_,
       _Jw_,
       _Jx_,
       _Jz_,
       _Jy_,
       Stable$5];
    caml_register_global(5321,include$63,"Core__Int");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Int32);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$209);
    caml_call1(Expect_test_collector[5][1],cst_core_src_int32_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$210,cst$74);
    var
     _JJ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$133),0,_cq_],0],
     _JK_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_int32_ml_7_6),
     group$65=caml_call2(Bin_prot_Shape[6],_JK_,_JJ_),
     _JL_=caml_call1(Bin_prot_Shape[2][1],cst_t$134),
     bin_shape_t$59=caml_call1(caml_call2(Bin_prot_Shape[14],group$65,_JL_),0),
     bin_writer_t$52=[0,bin_size_t$5,bin_write_t$5],
     bin_reader_t$52=[0,bin_read_t$11,bin_read_t$12],
     bin_t$52=[0,bin_shape_t$59,bin_writer_t$52,bin_reader_t$52],
     _JM_=
      [0,
       bin_size_t$5,
       bin_write_t$5,
       bin_read_t$11,
       bin_read_t$12,
       bin_shape_t$59,
       bin_writer_t$52,
       bin_reader_t$52,
       bin_t$52],
     _JN_=
      [0,
       Base_Int32[6],
       Base_Int32[7],
       Base_Int32[8],
       Base_Int32[9],
       Base_Int32[10],
       Base_Int32[11],
       Base_Int32[12],
       Base_Int32[13],
       Base_Int32[14],
       Base_Int32[15],
       Base_Int32[16],
       Base_Int32[17],
       Base_Int32[18],
       Base_Int32[19],
       Base_Int32[20],
       Base_Int32[21],
       Base_Int32[22],
       Base_Int32[23],
       Base_Int32[24],
       Base_Int32[25],
       Base_Int32[26],
       Base_Int32[27],
       Base_Int32[28],
       Base_Int32[29]],
     _JO_=function(_blI_){return _AS_(_JN_,_blI_)}(_JM_),
     bin_size_int32=_JO_[1],
     bin_write_int32=_JO_[2],
     bin_read_int32=_JO_[3],
     bin_read_int32$0=_JO_[4],
     bin_shape_t$60=_JO_[5],
     bin_writer_t$53=_JO_[6],
     bin_reader_t$53=_JO_[7],
     bin_t$53=_JO_[8],
     Replace_polymorphic_compare$4=_JO_[32],
     Map$7=_JO_[34],
     Set$7=_JO_[35],
     Table$6=_JO_[39],
     Hash_set$6=_JO_[40],
     Hash_queue$5=_JO_[41],
     int32_sexp_grammar=Base_Int32[1],
     of_float$2=Base_Int32[2],
     to_float$1=Base_Int32[3],
     of_int_exn$0=Base_Int32[4],
     to_int_exn$0=Base_Int32[5],
     hash_fold_int32=Base_Int32[6],
     hash$18=Base_Int32[7],
     int32_of_sexp=Base_Int32[8],
     sexp_of_int32=Base_Int32[9],
     of_string$7=Base_Int32[10],
     to_string$8=Base_Int32[11],
     symbol$78=Base_Int32[12],
     symbol$79=Base_Int32[13],
     symbol$80=Base_Int32[14],
     symbol$81=Base_Int32[15],
     symbol$82=Base_Int32[16],
     symbol$83=Base_Int32[17],
     equal_int32=Base_Int32[18],
     compare_int32=Base_Int32[19],
     min$7=Base_Int32[20],
     max$7=Base_Int32[21],
     ascending$6=Base_Int32[22],
     descending$6=Base_Int32[23],
     between$6=Base_Int32[24],
     clamp_exn$6=Base_Int32[25],
     clamp$6=Base_Int32[26],
     comparator$10=Base_Int32[27],
     pp$4=Base_Int32[28],
     hashable$6=Base_Int32[29],
     is_positive$1=Base_Int32[30],
     is_non_negative$1=Base_Int32[31],
     is_negative$1=Base_Int32[32],
     is_non_positive$1=Base_Int32[33],
     sign$1=Base_Int32[34],
     invariant$6=Base_Int32[35],
     Hex$1=Base_Int32[36],
     to_string_hum$2=Base_Int32[37],
     zero$2=Base_Int32[38],
     one$0=Base_Int32[39],
     minus_one$0=Base_Int32[40],
     symbol$84=Base_Int32[41],
     symbol$85=Base_Int32[42],
     symbol$86=Base_Int32[43],
     symbol$87=Base_Int32[44],
     neg$1=Base_Int32[45],
     symbol$88=Base_Int32[46],
     symbol$89=Base_Int32[47],
     symbol$90=Base_Int32[48],
     symbol$91=Base_Int32[49],
     rem$0=Base_Int32[50],
     symbol$92=Base_Int32[51],
     land=Base_Int32[52],
     lor=Base_Int32[53],
     lxor=Base_Int32[54],
     lnot$0=Base_Int32[55],
     lsl=Base_Int32[56],
     asr=Base_Int32[57],
     round$0=Base_Int32[58],
     round_towards_zero$0=Base_Int32[59],
     round_down$0=Base_Int32[60],
     round_up$0=Base_Int32[61],
     round_nearest$0=Base_Int32[62],
     abs$2=Base_Int32[63],
     succ=Base_Int32[64],
     pred=Base_Int32[65],
     pow$0=Base_Int32[66],
     bit_and$0=Base_Int32[67],
     bit_or$0=Base_Int32[68],
     bit_xor$0=Base_Int32[69],
     bit_not$0=Base_Int32[70],
     popcount$0=Base_Int32[71],
     shift_left$0=Base_Int32[72],
     shift_right$0=Base_Int32[73],
     decr$1=Base_Int32[74],
     incr$1=Base_Int32[75],
     of_int32_exn$0=Base_Int32[76],
     to_int32_exn$0=Base_Int32[77],
     of_int64_exn$0=Base_Int32[78],
     to_int64$0=Base_Int32[79],
     of_nativeint_exn$0=Base_Int32[80],
     to_nativeint_exn$0=Base_Int32[81],
     of_float_unchecked$0=Base_Int32[82],
     num_bits$0=Base_Int32[83],
     max_value$0=Base_Int32[84],
     min_value$0=Base_Int32[85],
     lsr=Base_Int32[86],
     shift_right_logical$0=Base_Int32[87],
     ceil_pow2$0=Base_Int32[88],
     floor_pow2$0=Base_Int32[89],
     ceil_log2$0=Base_Int32[90],
     floor_log2$0=Base_Int32[91],
     is_pow2$0=Base_Int32[92],
     clz$0=Base_Int32[93],
     ctz$0=Base_Int32[94],
     of_int$1=Base_Int32[96],
     to_int$1=Base_Int32[97],
     of_int32$0=Base_Int32[98],
     to_int32$0=Base_Int32[99],
     of_nativeint$0=Base_Int32[100],
     to_nativeint$0=Base_Int32[101],
     of_int64$0=Base_Int32[102],
     of_int_trunc=Base_Int32[103],
     to_int_trunc=Base_Int32[104],
     of_nativeint_trunc=Base_Int32[105],
     of_int64_trunc=Base_Int32[106],
     bits_of_float=Base_Int32[107],
     float_of_bits=Base_Int32[108],
     bswap16=Base_Int32[109],
     bswap32=Base_Int32[110],
     include$64=_w0_([0,Base_Int32[19],Base_Int32[9],Base_Int32[38]]),
     validate_lbound$5=include$64[1],
     validate_ubound$5=include$64[2],
     validate_bound$5=include$64[3],
     validate_positive$1=include$64[4],
     validate_non_negative$1=include$64[5],
     validate_negative$1=include$64[6],
     validate_non_positive$1=include$64[7],
     Typename_of_t$11=caml_call1(Typerep_lib_Make_typename[1],[0,name$20]),
     typename_of_t$11=Typename_of_t$11[2],
     name_of_t$7=Typename_of_t$11[1],
     typerep_of_t$11=[9,[0,name_of_t$7,[0,_e5_]]],
     t_of_sexp$39=Hex$1[1],
     sexp_of_t$47=Hex$1[2],
     t_sexp_grammar$14=Hex$1[3],
     compare$44=Hex$1[4],
     hash_fold_t$21=Hex$1[5],
     hash$19=Hex$1[6],
     of_string$8=Hex$1[7],
     to_string$9=Hex$1[8],
     to_string_hum$3=Hex$1[9],
     Typename_of_t$12=caml_call1(Typerep_lib_Make_typename[1],[0,name$21]),
     typename_of_t$12=Typename_of_t$12[2],
     name_of_t$8=Typename_of_t$12[1],
     typerep_of_t$12=[9,[0,name_of_t$8,[0,typerep_of_t$11]]],
     _JP_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$135),0,bin_shape_t$60],0],
     _JQ_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_int32_ml_18_2),
     group$66=caml_call2(Bin_prot_Shape[6],_JQ_,_JP_),
     _JR_=caml_call1(Bin_prot_Shape[2][1],cst_t$136),
     bin_shape_t$61=caml_call1(caml_call2(Bin_prot_Shape[14],group$66,_JR_),0),
     bin_writer_t$54=[0,bin_size_int32,bin_write_int32],
     bin_reader_t$54=[0,bin_read_int32,bin_read_int32$0],
     bin_t$54=[0,bin_shape_t$61,bin_writer_t$54,bin_reader_t$54],
     _JS_=Base_quickcheck_Generator[7],
     _JT_=Base_quickcheck_Observer[8],
     _JU_=Base_quickcheck_Shrinker[8],
     _JV_=Base_quickcheck_Generator[70],
     _JW_=Base_quickcheck_Generator[75],
     _JX_=Base_quickcheck_Generator[85],
     _JY_=Base_quickcheck_Generator[80];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$211);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Int32$0);
    var
     Core_Int32=
      [0,
       int32_sexp_grammar,
       of_float$2,
       to_float$1,
       of_int_exn$0,
       to_int_exn$0,
       is_positive$1,
       is_non_negative$1,
       is_negative$1,
       is_non_positive$1,
       sign$1,
       invariant$6,
       to_string_hum$2,
       zero$2,
       one$0,
       minus_one$0,
       symbol$84,
       symbol$85,
       symbol$86,
       symbol$87,
       neg$1,
       symbol$88,
       symbol$89,
       symbol$90,
       symbol$91,
       rem$0,
       symbol$92,
       land,
       lor,
       lxor,
       lnot$0,
       lsl,
       asr,
       round$0,
       round_towards_zero$0,
       round_down$0,
       round_up$0,
       round_nearest$0,
       abs$2,
       succ,
       pred,
       pow$0,
       bit_and$0,
       bit_or$0,
       bit_xor$0,
       bit_not$0,
       popcount$0,
       shift_left$0,
       shift_right$0,
       decr$1,
       incr$1,
       of_int32_exn$0,
       to_int32_exn$0,
       of_int64_exn$0,
       to_int64$0,
       of_nativeint_exn$0,
       to_nativeint_exn$0,
       of_float_unchecked$0,
       num_bits$0,
       max_value$0,
       min_value$0,
       lsr,
       shift_right_logical$0,
       ceil_pow2$0,
       floor_pow2$0,
       ceil_log2$0,
       floor_log2$0,
       is_pow2$0,
       clz$0,
       ctz$0,
       of_int$1,
       to_int$1,
       of_int32$0,
       to_int32$0,
       of_nativeint$0,
       to_nativeint$0,
       of_int64$0,
       of_int_trunc,
       to_int_trunc,
       of_nativeint_trunc,
       of_int64_trunc,
       bits_of_float,
       float_of_bits,
       bswap16,
       bswap32,
       typerep_of_t$11,
       typename_of_t$11,
       [0,
        bin_size_int32,
        bin_write_int32,
        bin_read_int32,
        bin_read_int32$0,
        bin_shape_t$61,
        bin_writer_t$54,
        bin_reader_t$54,
        bin_t$54,
        t_of_sexp$39,
        sexp_of_t$47,
        t_sexp_grammar$14,
        compare$44,
        hash_fold_t$21,
        hash$19,
        typerep_of_t$12,
        typename_of_t$12,
        of_string$8,
        to_string$9,
        to_string_hum$3],
       bin_size_int32,
       bin_write_int32,
       bin_read_int32,
       bin_read_int32$0,
       bin_shape_t$60,
       bin_writer_t$53,
       bin_reader_t$53,
       bin_t$53,
       int32_of_sexp,
       sexp_of_int32,
       of_string$7,
       to_string$8,
       pp$4,
       symbol$78,
       symbol$79,
       symbol$80,
       symbol$81,
       symbol$82,
       symbol$83,
       equal_int32,
       compare_int32,
       min$7,
       max$7,
       ascending$6,
       descending$6,
       between$6,
       clamp_exn$6,
       clamp$6,
       Replace_polymorphic_compare$4,
       comparator$10,
       Map$7,
       Set$7,
       hash_fold_int32,
       hash$18,
       hashable$6,
       Table$6,
       Hash_set$6,
       Hash_queue$5,
       validate_lbound$5,
       validate_ubound$5,
       validate_bound$5,
       validate_positive$1,
       validate_non_negative$1,
       validate_negative$1,
       validate_non_positive$1,
       _JS_,
       _JT_,
       _JU_,
       _JV_,
       _JW_,
       _JY_,
       _JX_];
    caml_register_global(5323,Core_Int32,"Core__Int32");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Int64);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$212);
    caml_call1(Expect_test_collector[5][1],cst_core_src_int64_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$213,cst$75);
    var
     _JZ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$137),0,_cu_],0],
     _J0_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_int64_ml_7_6),
     group$67=caml_call2(Bin_prot_Shape[6],_J0_,_JZ_),
     _J1_=caml_call1(Bin_prot_Shape[2][1],cst_t$138),
     bin_shape_t$62=caml_call1(caml_call2(Bin_prot_Shape[14],group$67,_J1_),0),
     bin_writer_t$55=[0,bin_size_t$6,bin_write_t$6],
     bin_reader_t$55=[0,bin_read_t$13,bin_read_t$14],
     bin_t$55=[0,bin_shape_t$62,bin_writer_t$55,bin_reader_t$55],
     _J2_=
      [0,
       bin_size_t$6,
       bin_write_t$6,
       bin_read_t$13,
       bin_read_t$14,
       bin_shape_t$62,
       bin_writer_t$55,
       bin_reader_t$55,
       bin_t$55],
     _J3_=
      [0,
       Base_Int64[6],
       Base_Int64[7],
       Base_Int64[8],
       Base_Int64[9],
       Base_Int64[10],
       Base_Int64[11],
       caml_greaterequal,
       caml_lessequal,
       caml_equal,
       caml_greaterthan,
       caml_lessthan,
       caml_notequal,
       Base_Int64[12],
       Base_Int64[13],
       Base_Int64[14],
       Base_Int64[15],
       Base_Int64[16],
       Base_Int64[17],
       Base_Int64[18],
       Base_Int64[19],
       Base_Int64[20],
       Base_Int64[21],
       Base_Int64[22],
       Base_Int64[23]],
     _J4_=function(_blH_){return _AS_(_J3_,_blH_)}(_J2_),
     bin_size_int64=_J4_[1],
     bin_write_int64=_J4_[2],
     bin_read_int64=_J4_[3],
     bin_read_int64$0=_J4_[4],
     bin_shape_t$63=_J4_[5],
     bin_writer_t$56=_J4_[6],
     bin_reader_t$56=_J4_[7],
     bin_t$56=_J4_[8],
     Replace_polymorphic_compare$5=_J4_[32],
     Map$8=_J4_[34],
     Set$8=_J4_[35],
     Table$7=_J4_[39],
     Hash_set$7=_J4_[40],
     Hash_queue$6=_J4_[41],
     int64_sexp_grammar=Base_Int64[1],
     of_float$3=Base_Int64[2],
     to_float$2=Base_Int64[3],
     of_int_exn$1=Base_Int64[4],
     to_int_exn$1=Base_Int64[5],
     hash_fold_int64=Base_Int64[6],
     hash$20=Base_Int64[7],
     int64_of_sexp=Base_Int64[8],
     sexp_of_int64=Base_Int64[9],
     of_string$9=Base_Int64[10],
     to_string$10=Base_Int64[11],
     equal_int64=Base_Int64[12],
     compare_int64=Base_Int64[13],
     min$8=Base_Int64[14],
     max$8=Base_Int64[15],
     ascending$7=Base_Int64[16],
     descending$7=Base_Int64[17],
     between$7=Base_Int64[18],
     clamp_exn$7=Base_Int64[19],
     clamp$7=Base_Int64[20],
     comparator$11=Base_Int64[21],
     pp$5=Base_Int64[22],
     hashable$7=Base_Int64[23],
     is_positive$2=Base_Int64[24],
     is_non_negative$2=Base_Int64[25],
     is_negative$2=Base_Int64[26],
     is_non_positive$2=Base_Int64[27],
     sign$2=Base_Int64[28],
     invariant$7=Base_Int64[29],
     Hex$2=Base_Int64[30],
     to_string_hum$4=Base_Int64[31],
     one$1=Base_Int64[32],
     minus_one$1=Base_Int64[33],
     rem$1=Base_Int64[34],
     round$1=Base_Int64[35],
     round_towards_zero$1=Base_Int64[36],
     round_down$1=Base_Int64[37],
     round_up$1=Base_Int64[38],
     round_nearest$1=Base_Int64[39],
     succ$0=Base_Int64[40],
     pred$0=Base_Int64[41],
     pow$1=Base_Int64[42],
     bit_and$1=Base_Int64[43],
     bit_or$1=Base_Int64[44],
     bit_xor$1=Base_Int64[45],
     bit_not$1=Base_Int64[46],
     popcount$1=Base_Int64[47],
     shift_left$1=Base_Int64[48],
     shift_right$1=Base_Int64[49],
     decr$2=Base_Int64[50],
     incr$2=Base_Int64[51],
     of_int32_exn$1=Base_Int64[52],
     to_int32_exn$1=Base_Int64[53],
     of_int64_exn$1=Base_Int64[54],
     to_int64$1=Base_Int64[55],
     of_nativeint_exn$1=Base_Int64[56],
     to_nativeint_exn$1=Base_Int64[57],
     of_float_unchecked$1=Base_Int64[58],
     num_bits$1=Base_Int64[59],
     max_value$1=Base_Int64[60],
     min_value$1=Base_Int64[61],
     shift_right_logical$1=Base_Int64[62],
     ceil_pow2$1=Base_Int64[63],
     floor_pow2$1=Base_Int64[64],
     ceil_log2$1=Base_Int64[65],
     floor_log2$1=Base_Int64[66],
     is_pow2$1=Base_Int64[67],
     clz$1=Base_Int64[68],
     ctz$1=Base_Int64[69],
     symbol$93=Base_Int64[71],
     lnot$1=Base_Int64[72],
     abs$3=Base_Int64[73],
     zero$3=Base_Int64[74],
     symbol$94=Base_Int64[75],
     symbol$95=Base_Int64[76],
     symbol$96=Base_Int64[77],
     to_int$2=Base_Int64[78],
     to_int32$1=Base_Int64[79],
     of_nativeint$1=Base_Int64[80],
     to_nativeint$1=Base_Int64[81],
     bits_of_float$0=Base_Int64[82],
     float_of_bits$0=Base_Int64[83],
     bswap16$0=Base_Int64[84],
     bswap32$0=Base_Int64[85],
     bswap48=Base_Int64[86],
     include$65=_w0_([0,Base_Int64[13],Base_Int64[9],Base_Int64[74]]),
     validate_lbound$6=include$65[1],
     validate_ubound$6=include$65[2],
     validate_bound$6=include$65[3],
     validate_positive$2=include$65[4],
     validate_non_negative$2=include$65[5],
     validate_negative$2=include$65[6],
     validate_non_positive$2=include$65[7],
     Typename_of_t$13=caml_call1(Typerep_lib_Make_typename[1],[0,name$22]),
     typename_of_t$13=Typename_of_t$13[2],
     name_of_t$9=Typename_of_t$13[1],
     typerep_of_t$13=[9,[0,name_of_t$9,[0,_e4_]]],
     t_of_sexp$40=Hex$2[1],
     sexp_of_t$48=Hex$2[2],
     t_sexp_grammar$15=Hex$2[3],
     compare$45=Hex$2[4],
     hash_fold_t$22=Hex$2[5],
     hash$21=Hex$2[6],
     of_string$10=Hex$2[7],
     to_string$11=Hex$2[8],
     to_string_hum$5=Hex$2[9],
     Typename_of_t$14=caml_call1(Typerep_lib_Make_typename[1],[0,name$23]),
     typename_of_t$14=Typename_of_t$14[2],
     name_of_t$10=Typename_of_t$14[1],
     typerep_of_t$14=[9,[0,name_of_t$10,[0,typerep_of_t$13]]],
     _J5_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$139),0,bin_shape_t$63],0],
     _J6_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_int64_ml_18_2),
     group$68=caml_call2(Bin_prot_Shape[6],_J6_,_J5_),
     _J7_=caml_call1(Bin_prot_Shape[2][1],cst_t$140),
     bin_shape_t$64=caml_call1(caml_call2(Bin_prot_Shape[14],group$68,_J7_),0),
     bin_writer_t$57=[0,bin_size_int64,bin_write_int64],
     bin_reader_t$57=[0,bin_read_int64,bin_read_int64$0],
     bin_t$57=[0,bin_shape_t$64,bin_writer_t$57,bin_reader_t$57],
     _J8_=Base_quickcheck_Generator[9],
     _J9_=Base_quickcheck_Observer[10],
     _J__=Base_quickcheck_Shrinker[10],
     _J$_=Base_quickcheck_Generator[72],
     _Ka_=Base_quickcheck_Generator[77],
     _Kb_=Base_quickcheck_Generator[87],
     _Kc_=Base_quickcheck_Generator[82];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$214);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Int64$0);
    var
     Core_Int64=
      [0,
       int64_sexp_grammar,
       of_float$3,
       to_float$2,
       of_int_exn$1,
       to_int_exn$1,
       is_positive$2,
       is_non_negative$2,
       is_negative$2,
       is_non_positive$2,
       sign$2,
       invariant$7,
       to_string_hum$4,
       one$1,
       minus_one$1,
       rem$1,
       round$1,
       round_towards_zero$1,
       round_down$1,
       round_up$1,
       round_nearest$1,
       succ$0,
       pred$0,
       pow$1,
       bit_and$1,
       bit_or$1,
       bit_xor$1,
       bit_not$1,
       popcount$1,
       shift_left$1,
       shift_right$1,
       decr$2,
       incr$2,
       of_int32_exn$1,
       to_int32_exn$1,
       of_int64_exn$1,
       to_int64$1,
       of_nativeint_exn$1,
       to_nativeint_exn$1,
       of_float_unchecked$1,
       num_bits$1,
       max_value$1,
       min_value$1,
       shift_right_logical$1,
       ceil_pow2$1,
       floor_pow2$1,
       ceil_log2$1,
       floor_log2$1,
       is_pow2$1,
       clz$1,
       ctz$1,
       symbol$93,
       lnot$1,
       abs$3,
       zero$3,
       symbol$94,
       symbol$95,
       symbol$96,
       to_int$2,
       to_int32$1,
       of_nativeint$1,
       to_nativeint$1,
       bits_of_float$0,
       float_of_bits$0,
       bswap16$0,
       bswap32$0,
       bswap48,
       typerep_of_t$13,
       typename_of_t$13,
       [0,
        bin_size_int64,
        bin_write_int64,
        bin_read_int64,
        bin_read_int64$0,
        bin_shape_t$64,
        bin_writer_t$57,
        bin_reader_t$57,
        bin_t$57,
        t_of_sexp$40,
        sexp_of_t$48,
        t_sexp_grammar$15,
        compare$45,
        hash_fold_t$22,
        hash$21,
        typerep_of_t$14,
        typename_of_t$14,
        of_string$10,
        to_string$11,
        to_string_hum$5],
       bin_size_int64,
       bin_write_int64,
       bin_read_int64,
       bin_read_int64$0,
       bin_shape_t$63,
       bin_writer_t$56,
       bin_reader_t$56,
       bin_t$56,
       int64_of_sexp,
       sexp_of_int64,
       of_string$9,
       to_string$10,
       pp$5,
       caml_greaterequal,
       caml_lessequal,
       caml_equal,
       caml_greaterthan,
       caml_lessthan,
       caml_notequal,
       equal_int64,
       compare_int64,
       min$8,
       max$8,
       ascending$7,
       descending$7,
       between$7,
       clamp_exn$7,
       clamp$7,
       Replace_polymorphic_compare$5,
       comparator$11,
       Map$8,
       Set$8,
       hash_fold_int64,
       hash$20,
       hashable$7,
       Table$7,
       Hash_set$7,
       Hash_queue$6,
       validate_lbound$6,
       validate_ubound$6,
       validate_bound$6,
       validate_positive$2,
       validate_non_negative$2,
       validate_negative$2,
       validate_non_positive$2,
       _J8_,
       _J9_,
       _J__,
       _J$_,
       _Ka_,
       _Kc_,
       _Kb_];
    caml_register_global(5325,Core_Int64,"Core__Int64");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Int_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$215);
    caml_call1(Expect_test_collector[5][1],cst_core_src_int_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$216,cst$76);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$217);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Int_intf$0);
    var Core_Int_intf=[0];
    caml_register_global(5326,Core_Int_intf,"Core__Int_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Int63);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$218);
    caml_call1(Expect_test_collector[5][1],cst_core_src_int63_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$219,cst$77);
    var
     of_binable$1=Base_Int63_emul[111][1],
     to_binable$1=Base_Int63_emul[111][2],
     include$66=
      caml_call1
       (caml_call1
         (_fr_,
          [0,
           bin_shape_t$63,
           bin_size_int64,
           bin_write_int64,
           bin_read_int64,
           bin_read_int64$0]),
        [0,to_binable$1,of_binable$1]),
     bin_size_t$50=include$66[1],
     bin_write_t$50=include$66[2],
     bin_read_t$102=include$66[3],
     bin_read_t$103=include$66[4],
     bin_shape_t$65=include$66[5],
     bin_writer_t$58=include$66[6],
     bin_reader_t$58=include$66[7],
     bin_t$58=include$66[8],
     Bin_emulated=
      [0,
       bin_size_t$50,
       bin_write_t$50,
       bin_read_t$102,
       bin_read_t$103,
       bin_shape_t$65,
       bin_writer_t$58,
       bin_reader_t$58,
       bin_t$58];
    function binable_of_repr(param)
     {return param
              ?Bin_emulated
              :[0,
                bin_size_t$49,
                bin_write_t$49,
                bin_read_t$100,
                bin_read_t$101,
                bin_shape_t$57,
                bin_writer_t$50,
                bin_reader_t$50,
                bin_t$50]}
    var
     binable=binable_of_repr(Base_Int63[114][2]),
     bin_size_t$51=binable[1],
     bin_write_t$51=binable[2],
     bin_read_t$104=binable[3],
     bin_read_t$105=binable[4],
     bin_writer_t$59=binable[6],
     bin_reader_t$59=binable[7],
     bin_t$59=binable[8],
     bin_shape_t$66=Bin_prot_Shape[32],
     t_of_sexp$41=Base_Int63[8],
     sexp_of_t$49=Base_Int63[9],
     comparator$12=Base_Int63[27],
     compare$46=Base_Int63[19],
     include$67=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$51,
         bin_write_t$51,
         bin_read_t$104,
         bin_read_t$105,
         bin_shape_t$66,
         bin_writer_t$59,
         bin_reader_t$59,
         bin_t$59,
         compare$46,
         t_of_sexp$41,
         sexp_of_t$49,
         comparator$12]),
     Map$9=include$67[1],
     Set$9=include$67[2],
     _Kd_=
      [0,
       bin_size_t$51,
       bin_write_t$51,
       bin_read_t$104,
       bin_read_t$105,
       bin_shape_t$66,
       bin_writer_t$59,
       bin_reader_t$59,
       bin_t$59],
     _Ke_=
      [0,
       Base_Int63[6],
       Base_Int63[7],
       Base_Int63[8],
       Base_Int63[9],
       Base_Int63[10],
       Base_Int63[11],
       Base_Int63[12],
       Base_Int63[13],
       Base_Int63[14],
       Base_Int63[15],
       Base_Int63[16],
       Base_Int63[17],
       Base_Int63[18],
       Base_Int63[19],
       Base_Int63[20],
       Base_Int63[21],
       Base_Int63[22],
       Base_Int63[23],
       Base_Int63[24],
       Base_Int63[25],
       Base_Int63[26],
       Base_Int63[27],
       Base_Int63[28],
       Base_Int63[29]],
     _Kf_=function(_blG_){return _AS_(_Ke_,_blG_)}(_Kd_),
     bin_size_t$52=_Kf_[1],
     bin_write_t$52=_Kf_[2],
     bin_read_t$106=_Kf_[3],
     bin_read_t$107=_Kf_[4],
     bin_shape_t$67=_Kf_[5],
     bin_writer_t$60=_Kf_[6],
     bin_reader_t$60=_Kf_[7],
     bin_t$60=_Kf_[8],
     Map$10=_Kf_[34],
     Set$10=_Kf_[35],
     Table$8=_Kf_[39],
     Hash_set$8=_Kf_[40],
     Hash_queue$7=_Kf_[41],
     include$68=
      [0,
       Base_Int63[12],
       Base_Int63[13],
       Base_Int63[14],
       Base_Int63[15],
       Base_Int63[16],
       Base_Int63[17],
       Base_Int63[18],
       Base_Int63[19],
       Base_Int63[20],
       Base_Int63[21]],
     of_float$4=Base_Int63[2],
     to_float$3=Base_Int63[3],
     of_int_exn$2=Base_Int63[4],
     to_int_exn$2=Base_Int63[5],
     hash_fold_t$23=Base_Int63[6],
     _Kh_=Base_Int63[7],
     _Ki_=Base_Int63[8],
     _Kj_=Base_Int63[9],
     _Kk_=Base_Int63[10],
     _Kl_=Base_Int63[11],
     symbol$97=Base_Int63[12],
     symbol$98=Base_Int63[13],
     symbol$99=Base_Int63[14],
     symbol$100=Base_Int63[15],
     symbol$101=Base_Int63[16],
     symbol$102=Base_Int63[17],
     equal$25=Base_Int63[18],
     compare$47=Base_Int63[19],
     min$9=Base_Int63[20],
     max$9=Base_Int63[21],
     ascending$8=Base_Int63[22],
     descending$8=Base_Int63[23],
     between$8=Base_Int63[24],
     clamp_exn$8=Base_Int63[25],
     clamp$8=Base_Int63[26],
     comparator$13=Base_Int63[27],
     pp$6=Base_Int63[28],
     hashable$8=Base_Int63[29],
     is_positive$3=Base_Int63[30],
     is_non_negative$3=Base_Int63[31],
     is_negative$3=Base_Int63[32],
     is_non_positive$3=Base_Int63[33],
     sign$3=Base_Int63[34],
     invariant$8=Base_Int63[35],
     Hex$3=Base_Int63[36],
     zero$4=Base_Int63[38],
     one$2=Base_Int63[39],
     minus_one$2=Base_Int63[40],
     symbol$103=Base_Int63[41],
     symbol$104=Base_Int63[42],
     symbol$105=Base_Int63[43],
     symbol$106=Base_Int63[44],
     neg$2=Base_Int63[45],
     symbol$107=Base_Int63[46],
     symbol$108=Base_Int63[47],
     symbol$109=Base_Int63[48],
     symbol$110=Base_Int63[49],
     rem$2=Base_Int63[50],
     symbol$111=Base_Int63[51],
     land$0=Base_Int63[52],
     lor$0=Base_Int63[53],
     lxor$0=Base_Int63[54],
     lnot$2=Base_Int63[55],
     lsl$0=Base_Int63[56],
     asr$0=Base_Int63[57],
     round$2=Base_Int63[58],
     round_towards_zero$2=Base_Int63[59],
     round_down$2=Base_Int63[60],
     round_up$2=Base_Int63[61],
     round_nearest$2=Base_Int63[62],
     abs$4=Base_Int63[63],
     succ$1=Base_Int63[64],
     pred$1=Base_Int63[65],
     pow$2=Base_Int63[66],
     bit_and$2=Base_Int63[67],
     bit_or$2=Base_Int63[68],
     bit_xor$2=Base_Int63[69],
     bit_not$2=Base_Int63[70],
     popcount$2=Base_Int63[71],
     shift_left$2=Base_Int63[72],
     shift_right$2=Base_Int63[73],
     decr$3=Base_Int63[74],
     incr$3=Base_Int63[75],
     of_int32_exn$2=Base_Int63[76],
     to_int32_exn$2=Base_Int63[77],
     of_int64_exn$2=Base_Int63[78],
     to_int64$2=Base_Int63[79],
     of_nativeint_exn$2=Base_Int63[80],
     to_nativeint_exn$2=Base_Int63[81],
     of_float_unchecked$2=Base_Int63[82],
     num_bits$2=Base_Int63[83],
     max_value$2=Base_Int63[84],
     min_value$2=Base_Int63[85],
     lsr$0=Base_Int63[86],
     shift_right_logical$2=Base_Int63[87],
     ceil_pow2$2=Base_Int63[88],
     floor_pow2$2=Base_Int63[89],
     ceil_log2$2=Base_Int63[90],
     is_pow2$2=Base_Int63[91],
     clz$2=Base_Int63[92],
     ctz$2=Base_Int63[93],
     of_int$2=Base_Int63[96],
     to_int$3=Base_Int63[97],
     of_int32$1=Base_Int63[98],
     to_int32$2=Base_Int63[99],
     of_int64$1=Base_Int63[100],
     of_nativeint$2=Base_Int63[101],
     to_nativeint$2=Base_Int63[102],
     to_int_trunc$0=Base_Int63[103],
     to_int32_trunc=Base_Int63[104],
     of_int64_trunc$0=Base_Int63[105],
     of_nativeint_trunc$0=Base_Int63[106],
     to_nativeint_trunc=Base_Int63[107],
     bswap16$1=Base_Int63[108],
     bswap32$1=Base_Int63[109],
     bswap48$0=Base_Int63[110],
     random=Base_Int63[111],
     random_incl=Base_Int63[112],
     floor_log2$2=Base_Int63[113],
     _Kg_=Base_Int63[1],
     _Km_=Base_Int63[37],
     include$69=_w0_([0,Base_Int63[19],Base_Int63[9],Base_Int63[38]]),
     validate_lbound$7=include$69[1],
     validate_ubound$7=include$69[2],
     validate_bound$7=include$69[3],
     validate_positive$3=include$69[4],
     validate_non_negative$3=include$69[5],
     validate_negative$3=include$69[6],
     validate_non_positive$3=include$69[7],
     t_of_sexp$42=Hex$3[1],
     sexp_of_t$50=Hex$3[2],
     t_sexp_grammar$16=Hex$3[3],
     compare$48=Hex$3[4],
     hash_fold_t$24=Hex$3[5],
     hash$22=Hex$3[6],
     of_string$11=Hex$3[7],
     to_string$12=Hex$3[8],
     to_string_hum$6=Hex$3[9],
     Typename_of_t$15=caml_call1(Typerep_lib_Make_typename[1],[0,name$24]),
     typename_of_t$15=Typename_of_t$15[2],
     name_of_t$11=Typename_of_t$15[1],
     typerep_of_t$15=[9,[0,name_of_t$11,[0,_e2_]]],
     _Kn_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$141),0,bin_shape_t$67],0],
     _Ko_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_int63_ml_78_2),
     group$69=caml_call2(Bin_prot_Shape[6],_Ko_,_Kn_),
     _Kp_=caml_call1(Bin_prot_Shape[2][1],cst_t$142),
     bin_shape_t$68=caml_call1(caml_call2(Bin_prot_Shape[14],group$69,_Kp_),0),
     bin_writer_t$61=[0,bin_size_t$52,bin_write_t$52],
     bin_reader_t$61=[0,bin_read_t$106,bin_read_t$107],
     bin_t$61=[0,bin_shape_t$68,bin_writer_t$61,bin_reader_t$61],
     quickcheck_generator$11=Base_quickcheck_Generator[8],
     quickcheck_observer$9=Base_quickcheck_Observer[9],
     quickcheck_shrinker$9=Base_quickcheck_Shrinker[9],
     _Kq_=Base_quickcheck_Generator[71],
     _Kr_=Base_quickcheck_Generator[76],
     _Ks_=Base_quickcheck_Generator[86],
     _Kt_=Base_quickcheck_Generator[81];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$220);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Int63$0);
    var
     Stable$6=
      [0,
       [0,
        bin_size_t$51,
        bin_write_t$51,
        bin_read_t$104,
        bin_read_t$105,
        bin_shape_t$66,
        bin_writer_t$59,
        bin_reader_t$59,
        bin_t$59,
        compare$46,
        t_of_sexp$41,
        sexp_of_t$49,
        comparator$12,
        Map$9,
        Set$9]],
     Hex$4=
      [0,
       bin_size_t$52,
       bin_write_t$52,
       bin_read_t$106,
       bin_read_t$107,
       bin_shape_t$68,
       bin_writer_t$61,
       bin_reader_t$61,
       bin_t$61,
       t_of_sexp$42,
       sexp_of_t$50,
       t_sexp_grammar$16,
       compare$48,
       hash_fold_t$24,
       hash$22,
       typerep_of_t$15,
       typename_of_t$15,
       of_string$11,
       to_string$12,
       to_string_hum$6],
     include$70=
      [0,
       _Kg_,
       of_float$4,
       to_float$3,
       of_int_exn$2,
       to_int_exn$2,
       is_positive$3,
       is_non_negative$3,
       is_negative$3,
       is_non_positive$3,
       sign$3,
       invariant$8,
       _Km_,
       zero$4,
       one$2,
       minus_one$2,
       symbol$103,
       symbol$104,
       symbol$105,
       symbol$106,
       neg$2,
       symbol$107,
       symbol$108,
       symbol$109,
       symbol$110,
       rem$2,
       symbol$111,
       land$0,
       lor$0,
       lxor$0,
       lnot$2,
       lsl$0,
       asr$0,
       round$2,
       round_towards_zero$2,
       round_down$2,
       round_up$2,
       round_nearest$2,
       abs$4,
       succ$1,
       pred$1,
       pow$2,
       bit_and$2,
       bit_or$2,
       bit_xor$2,
       bit_not$2,
       popcount$2,
       shift_left$2,
       shift_right$2,
       decr$3,
       incr$3,
       of_int32_exn$2,
       to_int32_exn$2,
       of_int64_exn$2,
       to_int64$2,
       of_nativeint_exn$2,
       to_nativeint_exn$2,
       of_float_unchecked$2,
       num_bits$2,
       max_value$2,
       min_value$2,
       lsr$0,
       shift_right_logical$2,
       ceil_pow2$2,
       floor_pow2$2,
       ceil_log2$2,
       is_pow2$2,
       clz$2,
       ctz$2,
       of_int$2,
       to_int$3,
       of_int32$1,
       to_int32$2,
       of_int64$1,
       of_nativeint$2,
       to_nativeint$2,
       to_int_trunc$0,
       to_int32_trunc,
       of_int64_trunc$0,
       of_nativeint_trunc$0,
       to_nativeint_trunc,
       bswap16$1,
       bswap32$1,
       bswap48$0,
       random,
       random_incl,
       floor_log2$2,
       _e2_,
       _eF_,
       Hex$4,
       bin_size_t$52,
       bin_write_t$52,
       bin_read_t$106,
       bin_read_t$107,
       bin_shape_t$67,
       bin_writer_t$60,
       bin_reader_t$60,
       bin_t$60,
       _Ki_,
       _Kj_,
       _Kk_,
       _Kl_,
       pp$6,
       symbol$97,
       symbol$98,
       symbol$99,
       symbol$100,
       symbol$101,
       symbol$102,
       equal$25,
       compare$47,
       min$9,
       max$9,
       ascending$8,
       descending$8,
       between$8,
       clamp_exn$8,
       clamp$8,
       include$68,
       comparator$13,
       Map$10,
       Set$10,
       hash_fold_t$23,
       _Kh_,
       hashable$8,
       Table$8,
       Hash_set$8,
       Hash_queue$7,
       validate_lbound$7,
       validate_ubound$7,
       validate_bound$7,
       validate_positive$3,
       validate_non_negative$3,
       validate_negative$3,
       validate_non_positive$3,
       quickcheck_generator$11,
       quickcheck_observer$9,
       quickcheck_shrinker$9,
       _Kq_,
       _Kr_,
       _Kt_,
       _Ks_,
       Stable$6];
    caml_register_global(5329,include$70,"Core__Int63");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Stable_int63able);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$221);
    caml_call1(Expect_test_collector[5][1],cst_core_src_stable_int63able_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$222,cst$78);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$223);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Stable_int63able$0);
    var Core_Stable_int63able=[0];
    caml_register_global(5330,Core_Stable_int63able,"Core__Stable_int63able");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Unit);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$224);
    caml_call1(Expect_test_collector[5][1],cst_core_src_unit_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$225,cst$79);
    var
     _Ku_=Bin_prot_Std[46],
     _Kv_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$143),0,_Ku_],0],
     _Kw_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_unit_ml_7_6),
     group$70=caml_call2(Bin_prot_Shape[6],_Kw_,_Kv_),
     _Kx_=caml_call1(Bin_prot_Shape[2][1],cst_t$144),
     bin_shape_t$69=caml_call1(caml_call2(Bin_prot_Shape[14],group$70,_Kx_),0),
     bin_size_t$53=Bin_prot_Std[1],
     bin_write_t$53=Bin_prot_Std[48],
     bin_writer_t$62=[0,bin_size_t$53,bin_write_t$53],
     bin_read_t$108=Bin_prot_Std[51],
     bin_read_t$109=Bin_prot_Std[50],
     bin_reader_t$62=[0,bin_read_t$109,bin_read_t$108],
     bin_t$62=[0,bin_shape_t$69,bin_writer_t$62,bin_reader_t$62],
     compare$49=Base[86][85],
     t_of_sexp$43=Base[86][89],
     sexp_of_t$51=Base[86][90],
     include$71=caml_call1(_hd_[1][2],[0,compare$49,sexp_of_t$51]),
     _Ky_=include$71[1],
     Expect_test_collector$1=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _Kz_(param)
     {var
       _blD_=caml_call1(Bin_prot_Shape[21],bin_shape_t$69),
       _blE_=caml_call1(Bin_prot_Shape[18][4],_blD_);
      caml_call1(Stdlib[46],_blE_);
      var
       _blF_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_core_src_unit_ml$0),
         15,
         289,
         297,
         303];
      return caml_call1(Expect_test_collector$1[1],_blF_)}
    var
     _KA_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_unit_ml$1),
       15,
       289,
       304,
       342],
     _KD_=
      [0,
       [0,
        _KC_,
        _KB_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_core_src_unit_ml$2),
         15,
         289,
         297,
         303],
        _KA_],
       0],
     _KE_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_unit_ml$4),
       13,
       227,
       231,
       343],
     _KF_=
      caml_call1(Expect_test_common_File[4][3],cst_48b2027e5c11a1ded1fbe5a2e8);
    caml_call9
     (Expect_test_collector$1[3],
      _KF_,
      _KE_,
      cst_core_src_unit_ml$3,
      0,
      0,
      _KD_,
      0,
      Inline_test_config,
      _Kz_);
    var
     _KG_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$145),0,_bN_],0],
     _KH_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_unit_ml_26_6),
     group$71=caml_call2(Bin_prot_Shape[6],_KH_,_KG_),
     _KI_=caml_call1(Bin_prot_Shape[2][1],cst_t$146),
     bin_shape_t$70=caml_call1(caml_call2(Bin_prot_Shape[14],group$71,_KI_),0),
     bin_writer_t$63=[0,bin_size_t,bin_write_t],
     bin_reader_t$63=[0,bin_read_t,bin_read_t$0],
     bin_t$63=[0,bin_shape_t$70,bin_writer_t$63,bin_reader_t$63],
     _KJ_=
      [0,
       bin_size_t,
       bin_write_t,
       bin_read_t,
       bin_read_t$0,
       bin_shape_t$70,
       bin_writer_t$63,
       bin_reader_t$63,
       bin_t$63],
     _KK_=
      [0,
       include$72[3],
       include$72[4],
       include$72[5],
       include$72[6],
       include$72[7],
       include$72[8],
       include$72[9],
       include$72[10],
       include$72[11],
       include$72[12],
       include$72[13],
       include$72[14],
       include$72[15],
       include$72[16],
       include$72[17],
       include$72[18],
       include$72[19],
       include$72[20],
       include$72[21],
       include$72[22],
       include$72[23],
       include$72[24],
       include$72[25],
       include$72[26]],
     _KL_=function(_blC_){return _AS_(_KK_,_blC_)}(_KJ_),
     bin_size_unit=_KL_[1],
     bin_write_unit=_KL_[2],
     bin_read_unit=_KL_[3],
     bin_read_unit$0=_KL_[4],
     bin_shape_t$71=_KL_[5],
     bin_writer_t$64=_KL_[6],
     bin_reader_t$64=_KL_[7],
     bin_t$64=_KL_[8],
     validate_lbound$8=_KL_[29],
     validate_ubound$8=_KL_[30],
     validate_bound$8=_KL_[31],
     Replace_polymorphic_compare$6=_KL_[32],
     Map$11=_KL_[34],
     Set$11=_KL_[35],
     Table$9=_KL_[39],
     Hash_set$9=_KL_[40],
     Hash_queue$8=_KL_[41],
     all$1=include$72[1],
     unit_sexp_grammar=include$72[2],
     hash_fold_unit=include$72[3],
     hash$23=include$72[4],
     unit_of_sexp=include$72[5],
     sexp_of_unit=include$72[6],
     of_string$12=include$72[7],
     to_string$13=include$72[8],
     symbol$112=include$72[9],
     symbol$113=include$72[10],
     symbol$114=include$72[11],
     symbol$115=include$72[12],
     symbol$116=include$72[13],
     symbol$117=include$72[14],
     equal_unit=include$72[15],
     compare_unit=include$72[16],
     min$10=include$72[17],
     max$10=include$72[18],
     ascending$9=include$72[19],
     descending$9=include$72[20],
     between$9=include$72[21],
     clamp_exn$9=include$72[22],
     clamp$9=include$72[23],
     comparator$14=include$72[24],
     pp$7=include$72[25],
     hashable$9=include$72[26],
     invariant$9=include$72[27],
     Typename_of_t$16=caml_call1(Typerep_lib_Make_typename[1],[0,name$25]),
     typename_of_t$16=Typename_of_t$16[2],
     name_of_t$12=Typename_of_t$16[1],
     typerep_of_t$16=[9,[0,name_of_t$12,[0,_eW_]]],
     _KM_=Base_quickcheck_Generator[1],
     _KN_=Base_quickcheck_Observer[2],
     _KO_=Base_quickcheck_Shrinker[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$226);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Unit$0);
    var
     Core_Unit=
      [0,
       typerep_of_t$16,
       typename_of_t$16,
       all$1,
       unit_sexp_grammar,
       invariant$9,
       bin_size_unit,
       bin_write_unit,
       bin_read_unit,
       bin_read_unit$0,
       bin_shape_t$71,
       bin_writer_t$64,
       bin_reader_t$64,
       bin_t$64,
       unit_of_sexp,
       sexp_of_unit,
       of_string$12,
       to_string$13,
       pp$7,
       symbol$112,
       symbol$113,
       symbol$114,
       symbol$115,
       symbol$116,
       symbol$117,
       equal_unit,
       compare_unit,
       min$10,
       max$10,
       ascending$9,
       descending$9,
       between$9,
       clamp_exn$9,
       clamp$9,
       validate_lbound$8,
       validate_ubound$8,
       validate_bound$8,
       Replace_polymorphic_compare$6,
       comparator$14,
       Map$11,
       Set$11,
       hash_fold_unit,
       hash$23,
       hashable$9,
       Table$9,
       Hash_set$9,
       Hash_queue$8,
       _KM_,
       _KN_,
       _KO_,
       [0,
        [0,
         bin_size_t$53,
         bin_write_t$53,
         bin_read_t$109,
         bin_read_t$108,
         bin_shape_t$69,
         bin_writer_t$62,
         bin_reader_t$62,
         bin_t$62,
         compare$49,
         t_of_sexp$43,
         sexp_of_t$51,
         _Ky_]]];
    caml_register_global(5332,Core_Unit,"Core__Unit");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Interfaces);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$227);
    caml_call1(Expect_test_collector[5][1],cst_core_src_interfaces_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$228,cst$80);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$229);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Interfaces$0);
    var Core_Interfaces=[0];
    caml_register_global(5333,Core_Interfaces,"Core__Interfaces");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Lazy);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$230);
    caml_call1(Expect_test_collector[5][1],cst_core_src_lazy_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$231,cst$81);
    var
     _KP_=caml_call1(Bin_prot_Shape[3][1],cst_a$58),
     _KQ_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_lazy_ml_8_16),
     _KR_=caml_call1(_cJ_,caml_call2(Bin_prot_Shape[15],_KQ_,_KP_)),
     _KS_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$59),0],
     _KT_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$147),_KS_,_KR_],0],
     _KU_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_lazy_ml_8_4),
     group$72=caml_call2(Bin_prot_Shape[6],_KU_,_KT_);
    function bin_shape_t$72(a)
     {var _blB_=caml_call1(Bin_prot_Shape[2][1],cst_t$148);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$72,_blB_),[0,a,0])}
    function bin_size_t$54(size_of_a,v){return caml_call2(_bh_,size_of_a,v)}
    function bin_write_t$54(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_cL_,write_a),buf,pos,v)}
    function bin_writer_t$65(bin_writer_a)
     {function _blx_(v)
       {var _bly_=bin_writer_a[2];
        return function(_blz_,_blA_)
         {return bin_write_t$54(_bly_,v,_blz_,_blA_)}}
      return [0,function(v){return bin_size_t$54(bin_writer_a[1],v)},_blx_]}
    function bin_read_t$110(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_cO_,of_a),buf,pos_ref,vint)}
    function bin_read_t$111(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_cN_,of_a),buf,pos_ref)}
    function bin_reader_t$65(bin_reader_a)
     {function _blw_(buf,pos_ref,vtag)
       {return bin_read_t$110(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$111(bin_reader_a[1],buf,pos_ref)},
              _blw_]}
    function bin_t$65(bin_a)
     {var _blu_=bin_reader_t$65(bin_a[3]),_blv_=bin_writer_t$65(bin_a[2]);
      return [0,bin_shape_t$72(bin_a[1]),_blv_,_blu_]}
    function quickcheck_generator$12(generator_003)
     {return caml_call1(Base_quickcheck_Export[35],generator_003)}
    function quickcheck_observer$10(observer_002)
     {return caml_call1(Base_quickcheck_Export[40],observer_002)}
    function quickcheck_shrinker$10(shrinker_001)
     {return caml_call1(Base_quickcheck_Export[45],shrinker_001)}
    var
     t_of_sexp$44=Sexplib_Std[34],
     sexp_of_t$52=Sexplib_Std[33],
     Typename_of_t$17=caml_call1(Typerep_lib_Make_typename[2],[0,name$26]),
     typename_of_t$17=Typename_of_t$17[2];
    function typerep_of_t$17(of_a)
     {var name_of_t=caml_call1(Typename_of_t$17[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_blt_){return caml_call1(_eR_,of_a)}]]]]}
    var
     map$21=include$73[12],
     compare$50=include$73[1],
     _KV_=include$73[1],
     hash_fold_lazy_t=include$73[3],
     lazy_t_of_sexp=include$73[4],
     sexp_of_lazy_t=include$73[5],
     _KX_=include$73[6],
     _KY_=include$73[7],
     _KZ_=include$73[8],
     _K0_=include$73[9],
     _K1_=include$73[10],
     _K2_=include$73[11],
     _K3_=include$73[12],
     _K4_=include$73[13],
     _K5_=include$73[14],
     _K6_=include$73[15],
     _K7_=include$73[16],
     _K8_=include$73[17],
     _K$_=include$73[20],
     _La_=include$73[21],
     _KW_=include$73[2],
     _K9_=include$73[18],
     _K__=include$73[19],
     _Lb_=include$73[22],
     _Lc_=include$73[23];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$232);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Lazy$0);
    var
     _Ld_=
      [0,
       [0,
        bin_shape_t$72,
        bin_size_t$54,
        bin_write_t$54,
        bin_read_t$111,
        bin_read_t$110,
        bin_writer_t$65,
        bin_reader_t$65,
        bin_t$65,
        compare$50,
        t_of_sexp$44,
        sexp_of_t$52,
        map$21]],
     include$74=
      [0,
       bin_shape_t$72,
       bin_size_t$54,
       bin_write_t$54,
       bin_read_t$111,
       bin_read_t$110,
       bin_writer_t$65,
       bin_reader_t$65,
       bin_t$65,
       quickcheck_generator$12,
       quickcheck_observer$10,
       quickcheck_shrinker$10,
       typerep_of_t$17,
       typename_of_t$17,
       _KV_,
       _KW_,
       hash_fold_lazy_t,
       lazy_t_of_sexp,
       sexp_of_lazy_t,
       _KX_,
       _KY_,
       _KZ_,
       _K0_,
       _K1_,
       _K2_,
       _K3_,
       _K4_,
       _K5_,
       _K6_,
       _K7_,
       _K8_,
       _K9_,
       _K__,
       _K$_,
       _La_,
       _Lb_,
       _Lc_,
       _Ld_];
    caml_register_global(5336,include$74,"Core__Lazy");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Nativeint);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$233);
    caml_call1(Expect_test_collector[5][1],cst_core_src_nativeint_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$234,cst$82);
    var
     _Le_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$149),0,_cy_],0],
     _Lf_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_nativeint_ml_7_6),
     group$73=caml_call2(Bin_prot_Shape[6],_Lf_,_Le_),
     _Lg_=caml_call1(Bin_prot_Shape[2][1],cst_t$150),
     bin_shape_t$73=caml_call1(caml_call2(Bin_prot_Shape[14],group$73,_Lg_),0),
     bin_writer_t$66=[0,bin_size_t$7,bin_write_t$7],
     bin_reader_t$66=[0,bin_read_t$15,bin_read_t$16],
     bin_t$66=[0,bin_shape_t$73,bin_writer_t$66,bin_reader_t$66],
     _Lh_=
      [0,
       bin_size_t$7,
       bin_write_t$7,
       bin_read_t$15,
       bin_read_t$16,
       bin_shape_t$73,
       bin_writer_t$66,
       bin_reader_t$66,
       bin_t$66],
     _Li_=
      [0,
       Base_Nativeint[6],
       Base_Nativeint[7],
       Base_Nativeint[8],
       Base_Nativeint[9],
       Base_Nativeint[10],
       Base_Nativeint[11],
       Base_Nativeint[12],
       Base_Nativeint[13],
       Base_Nativeint[14],
       Base_Nativeint[15],
       Base_Nativeint[16],
       Base_Nativeint[17],
       Base_Nativeint[18],
       Base_Nativeint[19],
       Base_Nativeint[20],
       Base_Nativeint[21],
       Base_Nativeint[22],
       Base_Nativeint[23],
       Base_Nativeint[24],
       Base_Nativeint[25],
       Base_Nativeint[26],
       Base_Nativeint[27],
       Base_Nativeint[28],
       Base_Nativeint[29]],
     _Lj_=function(_bls_){return _AS_(_Li_,_bls_)}(_Lh_),
     bin_size_nativeint=_Lj_[1],
     bin_write_nativeint=_Lj_[2],
     bin_read_nativeint=_Lj_[3],
     bin_read_nativeint$0=_Lj_[4],
     bin_shape_t$74=_Lj_[5],
     bin_writer_t$67=_Lj_[6],
     bin_reader_t$67=_Lj_[7],
     bin_t$67=_Lj_[8],
     Replace_polymorphic_compare$7=_Lj_[32],
     Map$12=_Lj_[34],
     Set$12=_Lj_[35],
     Table$10=_Lj_[39],
     Hash_set$10=_Lj_[40],
     Hash_queue$9=_Lj_[41],
     nativeint_sexp_grammar=Base_Nativeint[1],
     of_float$5=Base_Nativeint[2],
     to_float$4=Base_Nativeint[3],
     of_int_exn$3=Base_Nativeint[4],
     to_int_exn$3=Base_Nativeint[5],
     hash_fold_nativeint=Base_Nativeint[6],
     hash$24=Base_Nativeint[7],
     nativeint_of_sexp=Base_Nativeint[8],
     sexp_of_nativeint=Base_Nativeint[9],
     of_string$13=Base_Nativeint[10],
     to_string$14=Base_Nativeint[11],
     symbol$118=Base_Nativeint[12],
     symbol$119=Base_Nativeint[13],
     symbol$120=Base_Nativeint[14],
     symbol$121=Base_Nativeint[15],
     symbol$122=Base_Nativeint[16],
     symbol$123=Base_Nativeint[17],
     equal_nativeint=Base_Nativeint[18],
     compare_nativeint=Base_Nativeint[19],
     min$11=Base_Nativeint[20],
     max$11=Base_Nativeint[21],
     ascending$10=Base_Nativeint[22],
     descending$10=Base_Nativeint[23],
     between$10=Base_Nativeint[24],
     clamp_exn$10=Base_Nativeint[25],
     clamp$10=Base_Nativeint[26],
     comparator$15=Base_Nativeint[27],
     pp$8=Base_Nativeint[28],
     hashable$10=Base_Nativeint[29],
     is_positive$4=Base_Nativeint[30],
     is_non_negative$4=Base_Nativeint[31],
     is_negative$4=Base_Nativeint[32],
     is_non_positive$4=Base_Nativeint[33],
     sign$4=Base_Nativeint[34],
     invariant$10=Base_Nativeint[35],
     Hex$5=Base_Nativeint[36],
     to_string_hum$7=Base_Nativeint[37],
     zero$5=Base_Nativeint[38],
     one$3=Base_Nativeint[39],
     minus_one$3=Base_Nativeint[40],
     symbol$124=Base_Nativeint[41],
     symbol$125=Base_Nativeint[42],
     symbol$126=Base_Nativeint[43],
     symbol$127=Base_Nativeint[44],
     neg$3=Base_Nativeint[45],
     symbol$128=Base_Nativeint[46],
     symbol$129=Base_Nativeint[47],
     symbol$130=Base_Nativeint[48],
     symbol$131=Base_Nativeint[49],
     rem$3=Base_Nativeint[50],
     symbol$132=Base_Nativeint[51],
     land$1=Base_Nativeint[52],
     lor$1=Base_Nativeint[53],
     lxor$1=Base_Nativeint[54],
     lnot$3=Base_Nativeint[55],
     lsl$1=Base_Nativeint[56],
     asr$1=Base_Nativeint[57],
     round$3=Base_Nativeint[58],
     round_towards_zero$3=Base_Nativeint[59],
     round_down$3=Base_Nativeint[60],
     round_up$3=Base_Nativeint[61],
     round_nearest$3=Base_Nativeint[62],
     abs$5=Base_Nativeint[63],
     succ$2=Base_Nativeint[64],
     pred$2=Base_Nativeint[65],
     pow$3=Base_Nativeint[66],
     bit_and$3=Base_Nativeint[67],
     bit_or$3=Base_Nativeint[68],
     bit_xor$3=Base_Nativeint[69],
     bit_not$3=Base_Nativeint[70],
     popcount$3=Base_Nativeint[71],
     shift_left$3=Base_Nativeint[72],
     shift_right$3=Base_Nativeint[73],
     decr$4=Base_Nativeint[74],
     incr$4=Base_Nativeint[75],
     of_int32_exn$3=Base_Nativeint[76],
     to_int32_exn$3=Base_Nativeint[77],
     of_int64_exn$3=Base_Nativeint[78],
     to_int64$3=Base_Nativeint[79],
     of_nativeint_exn$3=Base_Nativeint[80],
     to_nativeint_exn$3=Base_Nativeint[81],
     of_float_unchecked$3=Base_Nativeint[82],
     num_bits$3=Base_Nativeint[83],
     max_value$3=Base_Nativeint[84],
     min_value$3=Base_Nativeint[85],
     lsr$1=Base_Nativeint[86],
     shift_right_logical$3=Base_Nativeint[87],
     ceil_pow2$3=Base_Nativeint[88],
     floor_pow2$3=Base_Nativeint[89],
     ceil_log2$3=Base_Nativeint[90],
     floor_log2$3=Base_Nativeint[91],
     is_pow2$3=Base_Nativeint[92],
     clz$3=Base_Nativeint[93],
     ctz$3=Base_Nativeint[94],
     of_int$3=Base_Nativeint[96],
     to_int$4=Base_Nativeint[97],
     of_int32$2=Base_Nativeint[98],
     to_int32$3=Base_Nativeint[99],
     of_nativeint$3=Base_Nativeint[100],
     to_nativeint$3=Base_Nativeint[101],
     of_int64$2=Base_Nativeint[102],
     to_int_trunc$1=Base_Nativeint[103],
     to_int32_trunc$0=Base_Nativeint[104],
     of_int64_trunc$1=Base_Nativeint[105],
     bswap=Base_Nativeint[106],
     include$75=
      _w0_([0,Base_Nativeint[19],Base_Nativeint[9],Base_Nativeint[38]]),
     validate_lbound$9=include$75[1],
     validate_ubound$9=include$75[2],
     validate_bound$9=include$75[3],
     validate_positive$4=include$75[4],
     validate_non_negative$4=include$75[5],
     validate_negative$4=include$75[6],
     validate_non_positive$4=include$75[7],
     Typename_of_t$18=caml_call1(Typerep_lib_Make_typename[1],[0,name$27]),
     typename_of_t$18=Typename_of_t$18[2],
     name_of_t$13=Typename_of_t$18[1],
     typerep_of_t$18=[9,[0,name_of_t$13,[0,_e3_]]],
     t_of_sexp$45=Hex$5[1],
     sexp_of_t$53=Hex$5[2],
     t_sexp_grammar$17=Hex$5[3],
     compare$51=Hex$5[4],
     hash_fold_t$25=Hex$5[5],
     hash$25=Hex$5[6],
     of_string$14=Hex$5[7],
     to_string$15=Hex$5[8],
     to_string_hum$8=Hex$5[9],
     Typename_of_t$19=caml_call1(Typerep_lib_Make_typename[1],[0,name$28]),
     typename_of_t$19=Typename_of_t$19[2],
     name_of_t$14=Typename_of_t$19[1],
     typerep_of_t$19=[9,[0,name_of_t$14,[0,typerep_of_t$18]]],
     _Lk_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$151),0,bin_shape_t$74],0],
     _Ll_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_nativeint_ml_18_2),
     group$74=caml_call2(Bin_prot_Shape[6],_Ll_,_Lk_),
     _Lm_=caml_call1(Bin_prot_Shape[2][1],cst_t$152),
     bin_shape_t$75=caml_call1(caml_call2(Bin_prot_Shape[14],group$74,_Lm_),0),
     bin_writer_t$68=[0,bin_size_nativeint,bin_write_nativeint],
     bin_reader_t$68=[0,bin_read_nativeint,bin_read_nativeint$0],
     bin_t$68=[0,bin_shape_t$75,bin_writer_t$68,bin_reader_t$68],
     _Ln_=Base_quickcheck_Generator[10],
     _Lo_=Base_quickcheck_Observer[11],
     _Lp_=Base_quickcheck_Shrinker[11],
     _Lq_=Base_quickcheck_Generator[73],
     _Lr_=Base_quickcheck_Generator[78],
     _Ls_=Base_quickcheck_Generator[88],
     _Lt_=Base_quickcheck_Generator[83];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$235);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Nativeint$0);
    var
     Core_Nativeint=
      [0,
       nativeint_sexp_grammar,
       of_float$5,
       to_float$4,
       of_int_exn$3,
       to_int_exn$3,
       is_positive$4,
       is_non_negative$4,
       is_negative$4,
       is_non_positive$4,
       sign$4,
       invariant$10,
       to_string_hum$7,
       zero$5,
       one$3,
       minus_one$3,
       symbol$124,
       symbol$125,
       symbol$126,
       symbol$127,
       neg$3,
       symbol$128,
       symbol$129,
       symbol$130,
       symbol$131,
       rem$3,
       symbol$132,
       land$1,
       lor$1,
       lxor$1,
       lnot$3,
       lsl$1,
       asr$1,
       round$3,
       round_towards_zero$3,
       round_down$3,
       round_up$3,
       round_nearest$3,
       abs$5,
       succ$2,
       pred$2,
       pow$3,
       bit_and$3,
       bit_or$3,
       bit_xor$3,
       bit_not$3,
       popcount$3,
       shift_left$3,
       shift_right$3,
       decr$4,
       incr$4,
       of_int32_exn$3,
       to_int32_exn$3,
       of_int64_exn$3,
       to_int64$3,
       of_nativeint_exn$3,
       to_nativeint_exn$3,
       of_float_unchecked$3,
       num_bits$3,
       max_value$3,
       min_value$3,
       lsr$1,
       shift_right_logical$3,
       ceil_pow2$3,
       floor_pow2$3,
       ceil_log2$3,
       floor_log2$3,
       is_pow2$3,
       clz$3,
       ctz$3,
       of_int$3,
       to_int$4,
       of_int32$2,
       to_int32$3,
       of_nativeint$3,
       to_nativeint$3,
       of_int64$2,
       to_int_trunc$1,
       to_int32_trunc$0,
       of_int64_trunc$1,
       bswap,
       typerep_of_t$18,
       typename_of_t$18,
       [0,
        bin_size_nativeint,
        bin_write_nativeint,
        bin_read_nativeint,
        bin_read_nativeint$0,
        bin_shape_t$75,
        bin_writer_t$68,
        bin_reader_t$68,
        bin_t$68,
        t_of_sexp$45,
        sexp_of_t$53,
        t_sexp_grammar$17,
        compare$51,
        hash_fold_t$25,
        hash$25,
        typerep_of_t$19,
        typename_of_t$19,
        of_string$14,
        to_string$15,
        to_string_hum$8],
       bin_size_nativeint,
       bin_write_nativeint,
       bin_read_nativeint,
       bin_read_nativeint$0,
       bin_shape_t$74,
       bin_writer_t$67,
       bin_reader_t$67,
       bin_t$67,
       nativeint_of_sexp,
       sexp_of_nativeint,
       of_string$13,
       to_string$14,
       pp$8,
       symbol$118,
       symbol$119,
       symbol$120,
       symbol$121,
       symbol$122,
       symbol$123,
       equal_nativeint,
       compare_nativeint,
       min$11,
       max$11,
       ascending$10,
       descending$10,
       between$10,
       clamp_exn$10,
       clamp$10,
       Replace_polymorphic_compare$7,
       comparator$15,
       Map$12,
       Set$12,
       hash_fold_nativeint,
       hash$24,
       hashable$10,
       Table$10,
       Hash_set$10,
       Hash_queue$9,
       validate_lbound$9,
       validate_ubound$9,
       validate_bound$9,
       validate_positive$4,
       validate_non_negative$4,
       validate_negative$4,
       validate_non_positive$4,
       _Ln_,
       _Lo_,
       _Lp_,
       _Lq_,
       _Lr_,
       _Lt_,
       _Ls_];
    caml_register_global(5338,Core_Nativeint,"Core__Nativeint");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Nothing);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$236);
    caml_call1(Expect_test_collector[5][1],cst_core_src_nothing_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$237,cst$83);
    var
     _Lu_=caml_call1(Bin_prot_Shape[9],0),
     _Lv_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$153),0,_Lu_],0],
     _Lw_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_nothing_ml_8_6),
     group$75=caml_call2(Bin_prot_Shape[6],_Lw_,_Lv_),
     _Lx_=caml_call1(Bin_prot_Shape[2][1],cst_t$154),
     bin_shape_t$76=caml_call1(caml_call2(Bin_prot_Shape[14],group$75,_Lx_),0),
     _Ly_=Base_Nothing[3],
     tp_loc=caml_call2(_a0_,_Lz_[1],cst_Stable_V1_t),
     all$2=0;
    function hash_fold_t$26(param,t){return caml_call1(_Ly_,t)}
    function compare$52(a,param){return caml_call1(_Ly_,a)}
    function bin_write_t$55(buf,param,t){return caml_call1(_Ly_,t)}
    var bin_writer_t$69=[0,_Ly_,bin_write_t$55];
    function bin_read_t$112(buf,pos_ref,param)
     {return caml_call2(Bin_prot_Common[19],tp_loc,pos_ref[1])}
    function bin_read_t$113(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[18],[6,tp_loc],pos_ref[1])}
    var
     bin_reader_t$69=[0,bin_read_t$113,bin_read_t$112],
     bin_t$69=[0,bin_shape_t$76,bin_writer_t$69,bin_reader_t$69];
    function t_of_sexp$46(sexp)
     {return caml_call2(Sexplib_Conv_error[26],tp_loc,sexp)}
    var
     _LC_=Base_Nothing[3],
     _LA_=Base_Nothing[1],
     _LB_=Base_Nothing[2],
     _LD_=
      [0,
       _Ly_,
       bin_write_t$55,
       bin_read_t$113,
       bin_read_t$112,
       bin_shape_t$76,
       bin_writer_t$69,
       bin_reader_t$69,
       bin_t$69],
     _LE_=
      [0,
       Base_Nothing[4],
       Base_Nothing[5],
       Base_Nothing[6],
       Base_Nothing[7],
       Base_Nothing[8],
       Base_Nothing[9],
       Base_Nothing[10],
       Base_Nothing[11],
       Base_Nothing[12],
       Base_Nothing[13],
       Base_Nothing[14],
       Base_Nothing[15],
       Base_Nothing[16],
       Base_Nothing[17],
       Base_Nothing[18],
       Base_Nothing[19],
       Base_Nothing[20],
       Base_Nothing[21],
       Base_Nothing[22],
       Base_Nothing[23],
       Base_Nothing[24],
       Base_Nothing[25],
       Base_Nothing[26],
       Base_Nothing[27]],
     include$76=function(_blr_){return _AS_(_LE_,_blr_)}(_LD_),
     sexp_of_never_returns=include$76[10],
     _LF_=include$76[1],
     _LG_=include$76[2],
     _LH_=include$76[3],
     _LI_=include$76[4],
     _LJ_=include$76[5],
     _LK_=include$76[6],
     _LL_=include$76[7],
     _LM_=include$76[8],
     _LN_=include$76[9],
     _LO_=include$76[11],
     _LP_=include$76[12],
     _LQ_=include$76[13],
     _LR_=include$76[14],
     _LS_=include$76[15],
     _LT_=include$76[16],
     _LU_=include$76[17],
     _LV_=include$76[18],
     _LW_=include$76[19],
     _LX_=include$76[20],
     _LY_=include$76[21],
     _LZ_=include$76[22],
     _L0_=include$76[23],
     _L1_=include$76[24],
     _L2_=include$76[25],
     _L3_=include$76[26],
     _L4_=include$76[27],
     _L5_=include$76[28],
     _L6_=include$76[29],
     _L7_=include$76[30],
     _L8_=include$76[31],
     _L9_=include$76[32],
     _L__=include$76[33],
     _L$_=include$76[34],
     _Ma_=include$76[35],
     _Mb_=include$76[36],
     _Mc_=include$76[37],
     _Md_=include$76[38],
     _Me_=include$76[39],
     _Mf_=include$76[40],
     _Mg_=include$76[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$238);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Nothing$0);
    var
     Core_Nothing=
      [0,
       _LA_,
       _LB_,
       _LC_,
       _LF_,
       _LG_,
       _LH_,
       _LI_,
       _LJ_,
       _LK_,
       _LL_,
       _LM_,
       _LN_,
       sexp_of_never_returns,
       _LO_,
       _LP_,
       _LQ_,
       _LR_,
       _LS_,
       _LT_,
       _LU_,
       _LV_,
       _LW_,
       _LX_,
       _LY_,
       _LZ_,
       _L0_,
       _L1_,
       _L2_,
       _L3_,
       _L4_,
       _L5_,
       _L6_,
       _L7_,
       _L8_,
       _L9_,
       _L__,
       _L$_,
       _Ma_,
       _Mb_,
       _Mc_,
       _Md_,
       _Me_,
       _Mf_,
       _Mg_,
       [0,
        [0,
         _Ly_,
         bin_write_t$55,
         bin_read_t$113,
         bin_read_t$112,
         bin_shape_t$76,
         bin_writer_t$69,
         bin_reader_t$69,
         bin_t$69,
         compare$52,
         all$2,
         hash_fold_t$26,
         _Ly_,
         t_of_sexp$46,
         _Ly_]]];
    caml_register_global(5340,Core_Nothing,"Core__Nothing");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Never_returns);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$239);
    caml_call1(Expect_test_collector[5][1],cst_core_src_never_returns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$240,cst$84);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$241);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Never_returns$0);
    var Core_Never_returns=[0,sexp_of_never_returns,_LC_];
    caml_register_global(5341,Core_Never_returns,"Core__Never_returns");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Ordering);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$242);
    caml_call1(Expect_test_collector[5][1],cst_core_src_ordering_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$243,cst$85);
    var
     _Mi_=caml_call1(Bin_prot_Shape[9],_Mh_),
     _Mj_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$155),0,_Mi_],0],
     _Mk_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_ordering_ml_3_0),
     group$76=caml_call2(Bin_prot_Shape[6],_Mk_,_Mj_),
     _Ml_=caml_call1(Bin_prot_Shape[2][1],cst_t$156),
     bin_shape_t$77=caml_call1(caml_call2(Bin_prot_Shape[14],group$76,_Ml_),0);
    function bin_size_t$55(param){return 1}
    function bin_write_t$56(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[31],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[31],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[31],buf,pos,2)}}
    var bin_writer_t$70=[0,bin_size_t$55,bin_write_t$56];
    function bin_read_t$114(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_ordering_ml_t,pos_ref[1])}
    function bin_read_t$115(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_Mm_,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_t$70=[0,bin_read_t$115,bin_read_t$114],
     bin_t$70=[0,bin_shape_t$77,bin_writer_t$70,bin_reader_t$70],
     _Mn_=include$77[1],
     _Mo_=include$77[2],
     _Mp_=include$77[3],
     _Mq_=include$77[4],
     _Mr_=include$77[5],
     _Ms_=include$77[6],
     _Mt_=include$77[7],
     _Mu_=include$77[8],
     _Mv_=include$77[9],
     _Mw_=include$77[10],
     _Mx_=include$77[11];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$244);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Ordering$0);
    var
     Core_Ordering=
      [0,
       bin_size_t$55,
       bin_write_t$56,
       bin_read_t$115,
       bin_read_t$114,
       bin_shape_t$77,
       bin_writer_t$70,
       bin_reader_t$70,
       bin_t$70,
       _Mn_,
       _Mo_,
       _Mp_,
       _Mq_,
       _Mr_,
       _Ms_,
       _Mt_,
       _Mu_,
       _Mv_,
       _Mw_,
       _Mx_];
    caml_register_global(5343,Core_Ordering,"Core__Ordering");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Ref);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$245);
    caml_call1(Expect_test_collector[5][1],cst_core_src_ref_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$246,cst$86);
    var
     _My_=include$78[1],
     _Mz_=include$78[2],
     ref_of_sexp=include$78[3],
     sexp_of_ref=include$78[4],
     _MA_=include$78[5],
     _MB_=include$78[6],
     _MC_=include$78[7],
     _MD_=include$78[8],
     _ME_=include$78[10],
     _MF_=caml_call1(Bin_prot_Shape[3][1],cst_a$60),
     _MG_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_ref_ml_9_16),
     _MH_=caml_call1(_cC_,caml_call2(Bin_prot_Shape[15],_MG_,_MF_)),
     _MI_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$61),0],
     _MJ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$157),_MI_,_MH_],0],
     _MK_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_ref_ml_9_4),
     group$77=caml_call2(Bin_prot_Shape[6],_MK_,_MJ_);
    function bin_shape_t$78(a)
     {var _blq_=caml_call1(Bin_prot_Shape[2][1],cst_t$158);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$77,_blq_),[0,a,0])}
    function bin_size_t$56(size_of_a,v){return caml_call2(_bg_,size_of_a,v)}
    function bin_write_t$57(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_cE_,write_a),buf,pos,v)}
    function bin_writer_t$71(bin_writer_a)
     {function _blm_(v)
       {var _bln_=bin_writer_a[2];
        return function(_blo_,_blp_)
         {return bin_write_t$57(_bln_,v,_blo_,_blp_)}}
      return [0,function(v){return bin_size_t$56(bin_writer_a[1],v)},_blm_]}
    function bin_read_t$116(of_a,buf,pos_ref,vint)
     {return caml_call3(caml_call1(_cH_,of_a),buf,pos_ref,vint)}
    function bin_read_t$117(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_cG_,of_a),buf,pos_ref)}
    function bin_reader_t$71(bin_reader_a)
     {function _bll_(buf,pos_ref,vtag)
       {return bin_read_t$116(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$117(bin_reader_a[1],buf,pos_ref)},
              _bll_]}
    function bin_t$71(bin_a)
     {var _blj_=bin_reader_t$71(bin_a[3]),_blk_=bin_writer_t$71(bin_a[2]);
      return [0,bin_shape_t$78(bin_a[1]),_blk_,_blj_]}
    function quickcheck_generator$13(generator_003)
     {return caml_call1(Base_quickcheck_Export[34],generator_003)}
    function quickcheck_observer$11(observer_002)
     {return caml_call1(Base_quickcheck_Export[39],observer_002)}
    function quickcheck_shrinker$11(shrinker_001)
     {return caml_call1(Base_quickcheck_Export[44],shrinker_001)}
    var
     Typename_of_t$20=caml_call1(Typerep_lib_Make_typename[2],[0,name$29]),
     typename_of_t$20=Typename_of_t$20[2];
    function typerep_of_t$20(of_a)
     {var name_of_t=caml_call1(Typename_of_t$20[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_bli_){return caml_call1(_eQ_,of_a)}]]]]}
    var
     _ML_=caml_call1(Bin_prot_Shape[3][1],cst_a$62),
     _MM_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_ref_ml_22_25),
     _MN_=bin_shape_t$78(caml_call2(Bin_prot_Shape[15],_MM_,_ML_)),
     _MO_=[0,caml_call1(Bin_prot_Shape[3][1],cst_perms$4),0],
     _MP_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$63),_MO_],
     _MQ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$159),_MP_,_MN_],0],
     _MR_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_ref_ml_22_2),
     group$78=caml_call2(Bin_prot_Shape[6],_MR_,_MQ_);
    function bin_shape_t$79(a,perms)
     {var _blh_=caml_call1(Bin_prot_Shape[2][1],cst_t$160);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$78,_blh_),
               [0,a,[0,perms,0]])}
    function bin_size_t$57(size_of_a,size_of_perms,v)
     {return bin_size_t$56(size_of_a,v)}
    function bin_write_t$58(write_a,write_perms,buf,pos,v)
     {return bin_write_t$57(write_a,buf,pos,v)}
    function bin_writer_t$72(bin_writer_a,bin_writer_perms)
     {function _blc_(v)
       {var _bld_=bin_writer_perms[2],_ble_=bin_writer_a[2];
        return function(_blf_,_blg_)
         {return bin_write_t$58(_ble_,_bld_,v,_blf_,_blg_)}}
      return [0,
              function(v)
               {return bin_size_t$57(bin_writer_a[1],bin_writer_perms[1],v)},
              _blc_]}
    function bin_read_t$118(of_a,of_perms,buf,pos_ref,vint)
     {return bin_read_t$116(of_a,buf,pos_ref,vint)}
    function bin_read_t$119(of_a,of_perms,buf,pos_ref)
     {return bin_read_t$117(of_a,buf,pos_ref)}
    function bin_reader_t$72(bin_reader_a,bin_reader_perms)
     {function _blb_(buf,pos_ref,vtag)
       {return bin_read_t$118
                (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$119
                        (bin_reader_a[1],bin_reader_perms[1],buf,pos_ref)},
              _blb_]}
    function bin_t$72(bin_a,bin_perms)
     {var
       _bk$_=bin_reader_t$72(bin_a[3],bin_perms[3]),
       _bla_=bin_writer_t$72(bin_a[2],bin_perms[2]);
      return [0,bin_shape_t$79(bin_a[1],bin_perms[1]),_bla_,_bk$_]}
    function t_of_sexp$47(of_a_004,of_perms_005,x_007)
     {return caml_call2(ref_of_sexp,of_a_004,x_007)}
    function sexp_of_t$54(of_a_008,of_perms_009,x_010)
     {return caml_call2(sexp_of_ref,of_a_008,x_010)}
    function read_only(_bk__){return _bk__}
    function of_ref(_bk9_){return _bk9_}
    function to_ref(_bk8_){return _bk8_}
    function set$7(_bk7_,_bk6_){_bk7_[1] = _bk6_;return 0}
    function get$2(_bk5_){return _bk5_[1]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$247);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Ref$0);
    function _MS_(_bk4_,_bk3_){_bk4_[1] = _bk3_;return 0}
    function _MT_(_bk2_){return _bk2_[1]}
    var
     Core_Ref=
      [0,
       bin_shape_t$78,
       bin_size_t$56,
       bin_write_t$57,
       bin_read_t$117,
       bin_read_t$116,
       bin_writer_t$71,
       bin_reader_t$71,
       bin_t$71,
       quickcheck_generator$13,
       quickcheck_observer$11,
       quickcheck_shrinker$11,
       typerep_of_t$20,
       typename_of_t$20,
       _My_,
       _Mz_,
       ref_of_sexp,
       sexp_of_ref,
       _MA_,
       _MB_,
       _MC_,
       _MD_,
       _ME_,
       [0,
        t_of_sexp$47,
        sexp_of_t$54,
        bin_shape_t$79,
        bin_size_t$57,
        bin_write_t$58,
        bin_read_t$119,
        bin_read_t$118,
        bin_writer_t$72,
        bin_reader_t$72,
        bin_t$72,
        function(_bk1_){return [0,_bk1_]},
        read_only,
        _MT_,
        get$2,
        set$7,
        _MS_,
        of_ref,
        to_ref,
        _MB_,
        _MC_,
        _MD_]];
    caml_register_global(5345,Core_Ref,"Core__Ref");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Source_code_position);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$248);
    caml_call1(Expect_test_collector[5][1],cst_core_src_source_code_posit$2);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$249,cst$87);
    var
     _MU_=[0,t_of_sexp$18,_mz_],
     _MV_=
      [0,
       include$18[4],
       include$18[5],
       include$18[6],
       include$18[7],
       include$18[8],
       include$18[9],
       include$18[10],
       include$18[11],
       include$18[12],
       include$18[13],
       include$18[14],
       include$18[15],
       include$18[16],
       include$18[17],
       include$18[18],
       include$18[19]],
     _MW_=function(_bk0_){return _w5_(_MV_,_bk0_)}(_MU_),
     _MX_=_MW_[1],
     _MY_=_MW_[2],
     _MZ_=_MW_[3],
     _M0_=_MW_[4],
     _M1_=_MW_[5],
     _M2_=_MW_[6],
     _M3_=_MW_[7],
     _M4_=_MW_[9],
     _M5_=_MW_[10],
     _M6_=_MW_[11],
     _M7_=_MW_[12],
     _M8_=_MW_[13],
     _M9_=_MW_[14],
     _M__=_MW_[15],
     _M$_=_MW_[16],
     _Na_=_MW_[17],
     _Nb_=_MW_[18],
     _Nc_=_MW_[19],
     _Nd_=_MW_[20],
     _Ne_=_MW_[21],
     _Nf_=_MW_[22],
     include$79=Make$4([0,hash_fold_t$7,t_of_sexp$18,compare$15,_mz_,hash$5]),
     _Ng_=include$79[1],
     _Nh_=include$79[2],
     _Ni_=include$79[3],
     _Nj_=include$79[4],
     _Nk_=include$79[5],
     _Nl_=include$79[6],
     _Nm_=include$79[7];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$250);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Source_code_position$0);
    var
     _Nn_=Stable$1[1],
     Core_Source_code_position=
      [0,
       _mz_,
       _my_,
       _mg_,
       pos_cnum,
       pos_bol,
       pos_lnum,
       pos_fname,
       Fields,
       _MX_,
       _MY_,
       _MZ_,
       _M0_,
       _M1_,
       _M2_,
       _M3_,
       _M4_,
       _M5_,
       _M6_,
       _M7_,
       _M8_,
       _M9_,
       _M__,
       _M$_,
       _Na_,
       _Nb_,
       _Nc_,
       _Nd_,
       _Ne_,
       _Nf_,
       _Ng_,
       _Nh_,
       _Ni_,
       _Nj_,
       _Nk_,
       _Nl_,
       _Nm_,
       [0,
        [0,
         _Nn_[1],
         _Nn_[2],
         _Nn_[3],
         _Nn_[4],
         _Nn_[5],
         _Nn_[6],
         _Nn_[7],
         _Nn_[8],
         _Nn_[9],
         _Nn_[12],
         _Nn_[13],
         _Nn_[14]]]];
    caml_register_global
     (5346,Core_Source_code_position,"Core__Source_code_position");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Std_internal);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$251);
    caml_call1(Expect_test_collector[5][1],cst_core_src_std_internal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$252,cst$88);
    var
     _No_=Replace_polymorphic_compare$3[1],
     _Np_=Replace_polymorphic_compare$3[2],
     _Nq_=Replace_polymorphic_compare$3[3],
     _Nr_=Replace_polymorphic_compare$3[4],
     _Ns_=Replace_polymorphic_compare$3[5],
     _Nt_=Replace_polymorphic_compare$3[6],
     _Nu_=Replace_polymorphic_compare$3[7],
     _Nv_=Replace_polymorphic_compare$3[8],
     _Nw_=Replace_polymorphic_compare$3[9],
     _Nx_=Replace_polymorphic_compare$3[10],
     _Ny_=Base_quickcheck_Export[1],
     _Nz_=Base_quickcheck_Export[2],
     _NA_=Base_quickcheck_Export[3],
     _NB_=Base_quickcheck_Export[4],
     _NC_=Base_quickcheck_Export[5],
     _ND_=Base_quickcheck_Export[6],
     _NE_=Base_quickcheck_Export[7],
     _NF_=Base_quickcheck_Export[8],
     _NG_=Base_quickcheck_Export[9],
     _NH_=Base_quickcheck_Export[10],
     _NI_=Base_quickcheck_Export[11],
     _NJ_=Base_quickcheck_Export[12],
     _NK_=Base_quickcheck_Export[13],
     _NL_=Base_quickcheck_Export[14],
     _NM_=Base_quickcheck_Export[15],
     _NN_=Base_quickcheck_Export[16],
     _NO_=Base_quickcheck_Export[17],
     _NP_=Base_quickcheck_Export[18],
     _NQ_=Base_quickcheck_Export[19],
     quickcheck_observer$12=Base_quickcheck_Export[20],
     _NR_=Base_quickcheck_Export[21],
     _NS_=Base_quickcheck_Export[22],
     _NT_=Base_quickcheck_Export[23],
     _NU_=Base_quickcheck_Export[24],
     _NV_=Base_quickcheck_Export[25],
     _NW_=Base_quickcheck_Export[26],
     _NX_=Base_quickcheck_Export[27],
     _NY_=Base_quickcheck_Export[28],
     _NZ_=Base_quickcheck_Export[29],
     quickcheck_shrinker$12=Base_quickcheck_Export[30],
     _N0_=Base_quickcheck_Export[31],
     _N1_=Base_quickcheck_Export[32],
     _N2_=Base_quickcheck_Export[33],
     _N3_=Base_quickcheck_Export[34],
     _N4_=Base_quickcheck_Export[35],
     _N5_=Base_quickcheck_Export[36],
     _N6_=Base_quickcheck_Export[37],
     _N7_=Base_quickcheck_Export[38],
     _N8_=Base_quickcheck_Export[39],
     _N9_=Base_quickcheck_Export[40],
     _N__=Base_quickcheck_Export[41],
     _N$_=Base_quickcheck_Export[42],
     _Oa_=Base_quickcheck_Export[43],
     _Ob_=Base_quickcheck_Export[44],
     _Oc_=Base_quickcheck_Export[45],
     _Od_=include[1],
     _Oe_=include[2],
     _Of_=include[3],
     _Og_=include[4],
     _Oh_=include[5],
     _Oi_=include[6],
     _Oj_=include[7],
     _Ok_=include[8],
     _Ol_=include[9],
     _Om_=include[10],
     _On_=include[11],
     _Oo_=include[12],
     _Op_=include[13],
     _Oq_=include$25[148][1],
     _Or_=_hc_[1],
     _Os_=_hc_[2],
     _Ot_=_hc_[3],
     _Ou_=_hc_[4],
     _Ov_=_hc_[5],
     _Ow_=_hc_[6],
     _Ox_=_hc_[7],
     _Oy_=_hc_[8],
     _Oz_=_hc_[9],
     _OA_=_hc_[10],
     _OB_=_hc_[11],
     _OC_=_hc_[12],
     _OD_=_hc_[13],
     _OE_=_hc_[14],
     _OF_=_hc_[15],
     _OG_=_hc_[16],
     _OH_=_hc_[17],
     _OI_=_hc_[18],
     _OJ_=_hc_[19],
     _OK_=_hc_[20],
     _OL_=_hc_[21],
     _OM_=_hc_[22],
     _ON_=_hc_[23],
     _OO_=_hc_[24],
     _OP_=_hc_[25],
     _OQ_=_hc_[26],
     _OR_=_hc_[27],
     _OS_=_hc_[28],
     _OT_=_hc_[29],
     _OU_=_hc_[30],
     _OV_=_hc_[31],
     _OW_=_hc_[32],
     _OX_=_hc_[33],
     _OY_=_hc_[34],
     _OZ_=_hc_[35],
     _O0_=_hc_[36],
     _O1_=_hc_[37],
     _O2_=_hc_[38],
     _O3_=_hc_[39],
     _O4_=_hc_[40],
     _O5_=_hc_[41],
     _O6_=_hc_[42],
     _O7_=_hc_[43],
     _O8_=_hc_[44],
     _O9_=_hc_[45],
     _O__=_hc_[46],
     _O$_=_hc_[47],
     _Pa_=_hc_[48],
     _Pb_=_hc_[49],
     _Pc_=_hc_[50],
     _Pd_=_hc_[51],
     _Pe_=_hc_[52],
     _Pf_=_hc_[53],
     _Pg_=_hc_[54],
     _Ph_=_hc_[55],
     _Pi_=_hc_[56],
     _Pj_=_h__[1],
     _Pk_=_h__[2],
     Bug=[248,cst_Bug,caml_fresh_oo_id(0)];
    function _Pl_(param)
     {if(param[1] === Bug)
       {var arg0_001=param[2],res0_002=caml_call1(_at_,arg0_001);
        return [1,[0,_Pm_,[0,res0_002,0]]]}
      throw [0,Assert_failure,_Pn_]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Bug,_Pl_);
    var C_malloc_exn=[248,cst_Core_Std_internal_C_malloc,caml_fresh_oo_id(0)];
    caml_call2(Stdlib_Callback[2],cst_C_malloc_exn,[0,C_malloc_exn,0,0]);
    var Finally=Base_Exn[3];
    function fst3(param){var x=param[1];return x}
    function snd3(param){var y=param[2];return y}
    function trd3(param){var z=param[3];return z}
    function uw(param){if(param){var x=param[1];return x}throw include$0[8]}
    function phys_same(a,b){return caml_call2(_a6_,a,b)}
    function symbol$133(a,b){var _bkY_=1 - a,_bkZ_=_bkY_ || b;return _bkZ_}
    var failwithf$0=include$4[6];
    function force(_bkW_)
     {var _bkX_=caml_obj_tag(_bkW_);
      return 250 === _bkX_
              ?_bkW_[1]
              :246 === _bkX_?caml_call1(CamlinternalLazy[2],_bkW_):_bkW_}
    function ident(_bkV_){return _bkV_}
    var
     _Po_=include$4[7],
     _Pp_=Base[203],
     _Pq_=Stdio[5],
     _Pr_=Stdio[6],
     _Ps_=Base_Exn[13],
     _Pt_=Base_Exn[12],
     _Pu_=Base[195],
     _Pv_=Base[194],
     _Pw_=Base_Staged[1],
     _Px_=Base_Staged[2],
     _Py_=Base_With_return[1],
     _Pz_=Base_With_return[2],
     _PA_=include$80[1],
     _PB_=include$80[6],
     _PC_=include$80[13],
     _PD_=include$80[19],
     _PE_=include$80[20],
     _PF_=include$80[21],
     _PG_=include$80[22],
     _PH_=include$80[23],
     _PI_=include$80[24],
     _PJ_=include$80[29],
     _PK_=include$80[41],
     _PL_=include$80[42],
     _PM_=include$80[43],
     _PN_=include$80[44],
     _PO_=include$80[45],
     _PP_=include$80[46],
     _PQ_=caml_call1(Bin_prot_Shape[3][1],cst_a$64),
     _PR_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1),
     _PS_=bin_shape_t$12(caml_call2(Bin_prot_Shape[15],_PR_,_PQ_)),
     _PT_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$65),0],
     _PU_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_array),_PT_,_PS_],0],
     _PV_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$0),
     group$79=caml_call2(Bin_prot_Shape[6],_PV_,_PU_);
    function bin_shape_array(a)
     {var _bkU_=caml_call1(Bin_prot_Shape[2][1],cst_array$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$79,_bkU_),[0,a,0])}
    function bin_size_array(size_of_a,v){return bin_size_t$20(size_of_a,v)}
    function bin_write_array(write_a,buf,pos,v)
     {return bin_write_t$20(write_a,buf,pos,v)}
    function bin_writer_array(bin_writer_a)
     {function _bkQ_(v)
       {var _bkR_=bin_writer_a[2];
        return function(_bkS_,_bkT_)
         {return bin_write_array(_bkR_,v,_bkS_,_bkT_)}}
      return [0,function(v){return bin_size_array(bin_writer_a[1],v)},_bkQ_]}
    function bin_read_array(of_a,buf,pos_ref,vint)
     {return bin_read_t$43(of_a,buf,pos_ref,vint)}
    function bin_read_array$0(of_a,buf,pos_ref)
     {return bin_read_t$44(of_a,buf,pos_ref)}
    function bin_reader_array(bin_reader_a)
     {function _bkP_(buf,pos_ref,vtag)
       {return bin_read_array(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_array$0(bin_reader_a[1],buf,pos_ref)},
              _bkP_]}
    function bin_array(bin_a)
     {var _bkN_=bin_reader_array(bin_a[3]),_bkO_=bin_writer_array(bin_a[2]);
      return [0,bin_shape_array(bin_a[1]),_bkO_,_bkN_]}
    function compare_array(cmp_a,a_003,b_004)
     {return caml_call3
              (_k9_,
               function(a_005,b_006){return caml_call2(cmp_a,a_005,b_006)},
               a_003,
               b_004)}
    function equal_array(cmp_a,a_007,b_008)
     {return caml_call3
              (equal$0,
               function(a_009,b_010){return caml_call2(cmp_a,a_009,b_010)},
               a_007,
               b_008)}
    function array_sexp_grammar(a_sexp_grammar)
     {return caml_call1(_k8_,a_sexp_grammar)}
    var
     Typename_of_array=caml_call1(Typerep_lib_Make_typename[2],[0,name$30]),
     typename_of_array=Typename_of_array[2];
    function typerep_of_array(of_a)
     {var name_of_array=caml_call1(Typename_of_array[1],of_a);
      return [9,
              [0,
               name_of_array,
               [0,[246,function(_bkM_){return typerep_of_t(of_a)}]]]]}
    var
     _PW_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_bool),0,bin_shape_t$47],0],
     _PX_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$1),
     group$80=caml_call2(Bin_prot_Shape[6],_PX_,_PW_),
     _PY_=caml_call1(Bin_prot_Shape[2][1],cst_bool$0),
     bin_shape_bool=caml_call1(caml_call2(Bin_prot_Shape[14],group$80,_PY_),0),
     bin_writer_bool=[0,bin_size_bool,bin_write_bool],
     bin_reader_bool=[0,bin_read_bool,bin_read_bool$0],
     bin_bool=[0,bin_shape_bool,bin_writer_bool,bin_reader_bool];
    function hash_bool(x){return caml_call1(hash$12,x)}
    var
     Typename_of_bool=caml_call1(Typerep_lib_Make_typename[1],[0,name$31]),
     typename_of_bool=Typename_of_bool[2],
     name_of_bool=Typename_of_bool[1],
     typerep_of_bool=[9,[0,name_of_bool,[0,typerep_of_t$4]]],
     _PZ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_char),0,_D0_],0],
     _P0_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$2),
     group$81=caml_call2(Bin_prot_Shape[6],_P0_,_PZ_),
     _P1_=caml_call1(Bin_prot_Shape[2][1],cst_char$0),
     bin_shape_char=caml_call1(caml_call2(Bin_prot_Shape[14],group$81,_P1_),0),
     bin_writer_char=[0,bin_size_char,bin_write_char],
     bin_reader_char=[0,bin_read_char,bin_read_char$0],
     bin_char=[0,bin_shape_char,bin_writer_char,bin_reader_char];
    function hash_char(x){return caml_call1(_EQ_,x)}
    var
     Typename_of_char=caml_call1(Typerep_lib_Make_typename[1],[0,name$32]),
     typename_of_char=Typename_of_char[2],
     name_of_char=Typename_of_char[1],
     typerep_of_char=[9,[0,name_of_char,[0,typerep_of_t$6]]],
     _P2_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_float),0,bin_shape_t$53],0],
     _P3_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$3),
     group$82=caml_call2(Bin_prot_Shape[6],_P3_,_P2_),
     _P4_=caml_call1(Bin_prot_Shape[2][1],cst_float$0),
     bin_shape_float=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$82,_P4_),0),
     bin_writer_float=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_float=[0,bin_read_t$9,bin_read_t$10],
     bin_float=[0,bin_shape_float,bin_writer_float,bin_reader_float];
    function hash_float(x){return caml_call1(hash$15,x)}
    var
     Typename_of_float=caml_call1(Typerep_lib_Make_typename[1],[0,name$33]),
     typename_of_float=Typename_of_float[2],
     name_of_float=Typename_of_float[1],
     typerep_of_float=[9,[0,name_of_float,[0,typerep_of_t$8]]],
     _P5_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_int),0,bin_shape_t$57],0],
     _P6_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$4),
     group$83=caml_call2(Bin_prot_Shape[6],_P6_,_P5_),
     _P7_=caml_call1(Bin_prot_Shape[2][1],cst_int$0),
     bin_shape_int=caml_call1(caml_call2(Bin_prot_Shape[14],group$83,_P7_),0),
     bin_writer_int=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_int=[0,bin_read_t$100,bin_read_t$101],
     bin_int=[0,bin_shape_int,bin_writer_int,bin_reader_int];
    function hash_int(x){return caml_call1(hash$16,x)}
    var
     Typename_of_int=caml_call1(Typerep_lib_Make_typename[1],[0,name$34]),
     typename_of_int=Typename_of_int[2],
     name_of_int=Typename_of_int[1],
     typerep_of_int=[9,[0,name_of_int,[0,typerep_of_t$9]]],
     _P8_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_int32),0,bin_shape_t$60],0],
     _P9_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$5),
     group$84=caml_call2(Bin_prot_Shape[6],_P9_,_P8_),
     _P__=caml_call1(Bin_prot_Shape[2][1],cst_int32$0),
     bin_shape_int32=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$84,_P__),0),
     bin_writer_int32=[0,bin_size_int32,bin_write_int32],
     bin_reader_int32=[0,bin_read_int32,bin_read_int32$0],
     bin_int32=[0,bin_shape_int32,bin_writer_int32,bin_reader_int32];
    function hash_int32(x){return caml_call1(hash$18,x)}
    var
     Typename_of_int32=caml_call1(Typerep_lib_Make_typename[1],[0,name$35]),
     typename_of_int32=Typename_of_int32[2],
     name_of_int32=Typename_of_int32[1],
     typerep_of_int32=[9,[0,name_of_int32,[0,typerep_of_t$11]]],
     _P$_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_int64),0,bin_shape_t$63],0],
     _Qa_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$6),
     group$85=caml_call2(Bin_prot_Shape[6],_Qa_,_P$_),
     _Qb_=caml_call1(Bin_prot_Shape[2][1],cst_int64$0),
     bin_shape_int64=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$85,_Qb_),0),
     bin_writer_int64=[0,bin_size_int64,bin_write_int64],
     bin_reader_int64=[0,bin_read_int64,bin_read_int64$0],
     bin_int64=[0,bin_shape_int64,bin_writer_int64,bin_reader_int64];
    function hash_int64(x){return caml_call1(hash$20,x)}
    var
     Typename_of_int64=caml_call1(Typerep_lib_Make_typename[1],[0,name$36]),
     typename_of_int64=Typename_of_int64[2],
     name_of_int64=Typename_of_int64[1],
     typerep_of_int64=[9,[0,name_of_int64,[0,typerep_of_t$13]]],
     _Qc_=caml_call1(Bin_prot_Shape[3][1],cst_a$66),
     _Qd_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$7),
     _Qe_=bin_shape_t$72(caml_call2(Bin_prot_Shape[15],_Qd_,_Qc_)),
     _Qf_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$67),0],
     _Qg_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_lazy_t),_Qf_,_Qe_],0],
     _Qh_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$8),
     group$86=caml_call2(Bin_prot_Shape[6],_Qh_,_Qg_);
    function bin_shape_lazy_t(a)
     {var _bkL_=caml_call1(Bin_prot_Shape[2][1],cst_lazy_t$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$86,_bkL_),[0,a,0])}
    function bin_size_lazy_t(size_of_a,v){return bin_size_t$54(size_of_a,v)}
    function bin_write_lazy_t(write_a,buf,pos,v)
     {return bin_write_t$54(write_a,buf,pos,v)}
    function bin_writer_lazy_t(bin_writer_a)
     {function _bkH_(v)
       {var _bkI_=bin_writer_a[2];
        return function(_bkJ_,_bkK_)
         {return bin_write_lazy_t(_bkI_,v,_bkJ_,_bkK_)}}
      return [0,function(v){return bin_size_lazy_t(bin_writer_a[1],v)},_bkH_]}
    function bin_read_lazy_t(of_a,buf,pos_ref,vint)
     {return bin_read_t$110(of_a,buf,pos_ref,vint)}
    function bin_read_lazy_t$0(of_a,buf,pos_ref)
     {return bin_read_t$111(of_a,buf,pos_ref)}
    function bin_reader_lazy_t(bin_reader_a)
     {function _bkG_(buf,pos_ref,vtag)
       {return bin_read_lazy_t(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_lazy_t$0(bin_reader_a[1],buf,pos_ref)},
              _bkG_]}
    function bin_lazy_t(bin_a)
     {var _bkE_=bin_reader_lazy_t(bin_a[3]),_bkF_=bin_writer_lazy_t(bin_a[2]);
      return [0,bin_shape_lazy_t(bin_a[1]),_bkF_,_bkE_]}
    function compare_lazy_t(cmp_a,a_046,b_047)
     {return caml_call3
              (_KV_,
               function(a_048,b_049){return caml_call2(cmp_a,a_048,b_049)},
               a_046,
               b_047)}
    function lazy_t_sexp_grammar(a_sexp_grammar)
     {return caml_call1(_KX_,a_sexp_grammar)}
    var
     Typename_of_lazy_t=caml_call1(Typerep_lib_Make_typename[2],[0,name$37]),
     typename_of_lazy_t=Typename_of_lazy_t[2];
    function typerep_of_lazy_t(of_a)
     {var name_of_lazy_t=caml_call1(Typename_of_lazy_t[1],of_a);
      return [9,
              [0,
               name_of_lazy_t,
               [0,[246,function(_bkD_){return typerep_of_t$17(of_a)}]]]]}
    var
     _Qi_=caml_call1(Bin_prot_Shape[3][1],cst_a$68),
     _Qj_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$9),
     _Qk_=bin_shape_t$27(caml_call2(Bin_prot_Shape[15],_Qj_,_Qi_)),
     _Ql_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$69),0],
     _Qm_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_list),_Ql_,_Qk_],0],
     _Qn_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$10),
     group$87=caml_call2(Bin_prot_Shape[6],_Qn_,_Qm_);
    function bin_shape_list(a)
     {var _bkC_=caml_call1(Bin_prot_Shape[2][1],cst_list$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$87,_bkC_),[0,a,0])}
    function bin_size_list(size_of_a,v){return bin_size_t$33(size_of_a,v)}
    function bin_write_list(write_a,buf,pos,v)
     {return bin_write_t$33(write_a,buf,pos,v)}
    function bin_writer_list(bin_writer_a)
     {function _bky_(v)
       {var _bkz_=bin_writer_a[2];
        return function(_bkA_,_bkB_)
         {return bin_write_list(_bkz_,v,_bkA_,_bkB_)}}
      return [0,function(v){return bin_size_list(bin_writer_a[1],v)},_bky_]}
    function bin_read_list(of_a,buf,pos_ref,vint)
     {return bin_read_t$68(of_a,buf,pos_ref,vint)}
    function bin_read_list$0(of_a,buf,pos_ref)
     {return bin_read_t$69(of_a,buf,pos_ref)}
    function bin_reader_list(bin_reader_a)
     {function _bkx_(buf,pos_ref,vtag)
       {return bin_read_list(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_list$0(bin_reader_a[1],buf,pos_ref)},
              _bkx_]}
    function bin_list(bin_a)
     {var _bkv_=bin_reader_list(bin_a[3]),_bkw_=bin_writer_list(bin_a[2]);
      return [0,bin_shape_list(bin_a[1]),_bkw_,_bkv_]}
    function compare_list(cmp_a,a_055,b_056)
     {return caml_call3
              (_pE_,
               function(a_057,b_058){return caml_call2(cmp_a,a_057,b_058)},
               a_055,
               b_056)}
    function equal_list(cmp_a,a_059,b_060)
     {return caml_call3
              (_rM_,
               function(a_061,b_062){return caml_call2(cmp_a,a_061,b_062)},
               a_059,
               b_060)}
    function list_sexp_grammar(a_sexp_grammar)
     {return caml_call1(_pF_,a_sexp_grammar)}
    var
     Typename_of_list=caml_call1(Typerep_lib_Make_typename[2],[0,name$38]),
     typename_of_list=Typename_of_list[2];
    function typerep_of_list(of_a)
     {var name_of_list=caml_call1(Typename_of_list[1],of_a);
      return [9,
              [0,
               name_of_list,
               [0,[246,function(_bku_){return typerep_of_t$1(of_a)}]]]]}
    var
     _Qo_=
      [0,
       [0,caml_call1(Bin_prot_Shape[2][1],cst_nativeint),0,bin_shape_t$74],
       0],
     _Qp_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$11),
     group$88=caml_call2(Bin_prot_Shape[6],_Qp_,_Qo_),
     _Qq_=caml_call1(Bin_prot_Shape[2][1],cst_nativeint$0),
     bin_shape_nativeint=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$88,_Qq_),0),
     bin_writer_nativeint=[0,bin_size_nativeint,bin_write_nativeint],
     bin_reader_nativeint=[0,bin_read_nativeint,bin_read_nativeint$0],
     bin_nativeint=
      [0,bin_shape_nativeint,bin_writer_nativeint,bin_reader_nativeint];
    function hash_nativeint(x){return caml_call1(hash$24,x)}
    var
     Typename_of_nativeint=
      caml_call1(Typerep_lib_Make_typename[1],[0,name$39]),
     typename_of_nativeint=Typename_of_nativeint[2],
     name_of_nativeint=Typename_of_nativeint[1],
     typerep_of_nativeint=[9,[0,name_of_nativeint,[0,typerep_of_t$18]]],
     _Qr_=caml_call1(Bin_prot_Shape[3][1],cst_a$70),
     _Qs_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$12),
     _Qt_=bin_shape_t$36(caml_call2(Bin_prot_Shape[15],_Qs_,_Qr_)),
     _Qu_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$71),0],
     _Qv_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_option),_Qu_,_Qt_],0],
     _Qw_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$13),
     group$89=caml_call2(Bin_prot_Shape[6],_Qw_,_Qv_);
    function bin_shape_option(a)
     {var _bkt_=caml_call1(Bin_prot_Shape[2][1],cst_option$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$89,_bkt_),[0,a,0])}
    function bin_size_option(size_of_a,v){return bin_size_t$42(size_of_a,v)}
    function bin_write_option(write_a,buf,pos,v)
     {return bin_write_t$42(write_a,buf,pos,v)}
    function bin_writer_option(bin_writer_a)
     {function _bkp_(v)
       {var _bkq_=bin_writer_a[2];
        return function(_bkr_,_bks_)
         {return bin_write_option(_bkq_,v,_bkr_,_bks_)}}
      return [0,function(v){return bin_size_option(bin_writer_a[1],v)},_bkp_]}
    function bin_read_option(of_a,buf,pos_ref,vint)
     {return bin_read_t$86(of_a,buf,pos_ref,vint)}
    function bin_read_option$0(of_a,buf,pos_ref)
     {return bin_read_t$87(of_a,buf,pos_ref)}
    function bin_reader_option(bin_reader_a)
     {function _bko_(buf,pos_ref,vtag)
       {return bin_read_option(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_option$0(bin_reader_a[1],buf,pos_ref)},
              _bko_]}
    function bin_option(bin_a)
     {var _bkm_=bin_reader_option(bin_a[3]),_bkn_=bin_writer_option(bin_a[2]);
      return [0,bin_shape_option(bin_a[1]),_bkn_,_bkm_]}
    function compare_option(cmp_a,a_073,b_074)
     {return caml_call3
              (_xj_,
               function(a_075,b_076){return caml_call2(cmp_a,a_075,b_076)},
               a_073,
               b_074)}
    function equal_option(cmp_a,a_077,b_078)
     {return caml_call3
              (_xl_,
               function(a_079,b_080){return caml_call2(cmp_a,a_079,b_080)},
               a_077,
               b_078)}
    function option_sexp_grammar(a_sexp_grammar)
     {return caml_call1(_xk_,a_sexp_grammar)}
    var
     Typename_of_option=caml_call1(Typerep_lib_Make_typename[2],[0,name$40]),
     typename_of_option=Typename_of_option[2];
    function typerep_of_option(of_a)
     {var name_of_option=caml_call1(Typename_of_option[1],of_a);
      return [9,
              [0,
               name_of_option,
               [0,[246,function(_bkl_){return typerep_of_t$2(of_a)}]]]]}
    var
     _Qx_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_string),0,bin_shape_t$44],0],
     _Qy_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$14),
     group$90=caml_call2(Bin_prot_Shape[6],_Qy_,_Qx_),
     _Qz_=caml_call1(Bin_prot_Shape[2][1],cst_string$0),
     bin_shape_string=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$90,_Qz_),0),
     bin_writer_string=[0,bin_size_t$47,bin_write_t$47],
     bin_reader_string=[0,bin_read_t$96,bin_read_t$97],
     bin_string=[0,bin_shape_string,bin_writer_string,bin_reader_string];
    function hash_string(x){return caml_call1(hash$11,x)}
    var
     Typename_of_string=caml_call1(Typerep_lib_Make_typename[1],[0,name$41]),
     typename_of_string=Typename_of_string[2],
     name_of_string=Typename_of_string[1],
     typerep_of_string=[9,[0,name_of_string,[0,typerep_of_t$3]]],
     _QA_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_bytes),0,bin_shape_t$49],0],
     _QB_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$15),
     group$91=caml_call2(Bin_prot_Shape[6],_QB_,_QA_),
     _QC_=caml_call1(Bin_prot_Shape[2][1],cst_bytes$0),
     bin_shape_bytes=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$91,_QC_),0),
     bin_writer_bytes=[0,bin_size_bytes,bin_write_bytes],
     bin_reader_bytes=[0,bin_read_bytes,bin_read_bytes$0],
     bin_bytes=[0,bin_shape_bytes,bin_writer_bytes,bin_reader_bytes],
     Typename_of_bytes=caml_call1(Typerep_lib_Make_typename[1],[0,name$42]),
     typename_of_bytes=Typename_of_bytes[2],
     name_of_bytes=Typename_of_bytes[1],
     typerep_of_bytes=[9,[0,name_of_bytes,[0,typerep_of_t$5]]],
     _QD_=caml_call1(Bin_prot_Shape[3][1],cst_a$72),
     _QE_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$16),
     _QF_=bin_shape_t$78(caml_call2(Bin_prot_Shape[15],_QE_,_QD_)),
     _QG_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$73),0],
     _QH_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_ref),_QG_,_QF_],0],
     _QI_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$17),
     group$92=caml_call2(Bin_prot_Shape[6],_QI_,_QH_);
    function bin_shape_ref(a)
     {var _bkk_=caml_call1(Bin_prot_Shape[2][1],cst_ref$0);
      return caml_call1(caml_call2(Bin_prot_Shape[14],group$92,_bkk_),[0,a,0])}
    function bin_size_ref(size_of_a,v){return bin_size_t$56(size_of_a,v)}
    function bin_write_ref(write_a,buf,pos,v)
     {return bin_write_t$57(write_a,buf,pos,v)}
    function bin_writer_ref(bin_writer_a)
     {function _bkg_(v)
       {var _bkh_=bin_writer_a[2];
        return function(_bki_,_bkj_)
         {return bin_write_ref(_bkh_,v,_bki_,_bkj_)}}
      return [0,function(v){return bin_size_ref(bin_writer_a[1],v)},_bkg_]}
    function bin_read_ref(of_a,buf,pos_ref,vint)
     {return bin_read_t$116(of_a,buf,pos_ref,vint)}
    function bin_read_ref$0(of_a,buf,pos_ref)
     {return bin_read_t$117(of_a,buf,pos_ref)}
    function bin_reader_ref(bin_reader_a)
     {function _bkf_(buf,pos_ref,vtag)
       {return bin_read_ref(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_ref$0(bin_reader_a[1],buf,pos_ref)},
              _bkf_]}
    function bin_ref(bin_a)
     {var _bkd_=bin_reader_ref(bin_a[3]),_bke_=bin_writer_ref(bin_a[2]);
      return [0,bin_shape_ref(bin_a[1]),_bke_,_bkd_]}
    function compare_ref(cmp_a,a_096,b_097)
     {return caml_call3
              (_My_,
               function(a_098,b_099){return caml_call2(cmp_a,a_098,b_099)},
               a_096,
               b_097)}
    function equal_ref(cmp_a,a_100,b_101)
     {return caml_call3
              (_Mz_,
               function(a_102,b_103){return caml_call2(cmp_a,a_102,b_103)},
               a_100,
               b_101)}
    function ref_sexp_grammar(a_sexp_grammar)
     {return caml_call1(_MA_,a_sexp_grammar)}
    var
     Typename_of_ref=caml_call1(Typerep_lib_Make_typename[2],[0,name$43]),
     typename_of_ref=Typename_of_ref[2];
    function typerep_of_ref(of_a)
     {var name_of_ref=caml_call1(Typename_of_ref[1],of_a);
      return [9,
              [0,
               name_of_ref,
               [0,[246,function(_bkc_){return typerep_of_t$20(of_a)}]]]]}
    var
     _QJ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_unit),0,bin_shape_t$71],0],
     _QK_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$18),
     group$93=caml_call2(Bin_prot_Shape[6],_QK_,_QJ_),
     _QL_=caml_call1(Bin_prot_Shape[2][1],cst_unit$0),
     bin_shape_unit=caml_call1(caml_call2(Bin_prot_Shape[14],group$93,_QL_),0),
     bin_writer_unit=[0,bin_size_unit,bin_write_unit],
     bin_reader_unit=[0,bin_read_unit,bin_read_unit$0],
     bin_unit=[0,bin_shape_unit,bin_writer_unit,bin_reader_unit];
    function hash_unit(x){return caml_call1(hash$23,x)}
    var
     Typename_of_unit=caml_call1(Typerep_lib_Make_typename[1],[0,name$44]),
     typename_of_unit=Typename_of_unit[2],
     name_of_unit=Typename_of_unit[1],
     typerep_of_unit=[9,[0,name_of_unit,[0,typerep_of_t$16]]],
     _QM_=bin_shape_array(bin_shape_float),
     _QN_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_float_array),0,_QM_],0],
     _QO_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_std_internal_ml_1$19),
     group$94=caml_call2(Bin_prot_Shape[6],_QO_,_QN_),
     _QP_=caml_call1(Bin_prot_Shape[2][1],cst_float_array$0),
     bin_shape_float_array=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$94,_QP_),0);
    function bin_size_float_array(v){return bin_size_array(bin_size_t$4,v)}
    function bin_write_float_array(buf,pos,v)
     {return bin_write_array(bin_write_t$4,buf,pos,v)}
    var bin_writer_float_array=[0,bin_size_float_array,bin_write_float_array];
    function bin_read_float_array(buf,pos_ref,vint)
     {return bin_read_array(bin_read_t$9,buf,pos_ref,vint)}
    function bin_read_float_array$0(buf,pos_ref)
     {return bin_read_array$0(bin_read_t$9,buf,pos_ref)}
    var
     bin_reader_float_array=[0,bin_read_float_array$0,bin_read_float_array],
     bin_float_array=
      [0,bin_shape_float_array,bin_writer_float_array,bin_reader_float_array];
    function compare_float_array(a_114,b_115)
     {return compare_array
              (function(a_116,b_117)
                {return caml_call2(compare$40,a_116,b_117)},
               a_114,
               b_115)}
    function float_array_of_sexp(x_119)
     {return caml_call2(array_of_sexp,float_of_sexp,x_119)}
    function sexp_of_float_array(x_120)
     {return caml_call2(sexp_of_array,sexp_of_t$44,x_120)}
    var
     float_array_sexp_grammar=
      [9,[246,function(_bkb_){return array_sexp_grammar(t_sexp_grammar$11)}]],
     Typename_of_float_array=
      caml_call1(Typerep_lib_Make_typename[1],[0,name$45]),
     typename_of_float_array=Typename_of_float_array[2],
     name_of_float_array=Typename_of_float_array[1],
     typerep_of_float_array=
      [9,
       [0,
        name_of_float_array,
        [0,[246,function(_bka_){return typerep_of_array(typerep_of_t$8)}]]]],
     sexp_of_exn=Base_Exn[1];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$253);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Std_internal$0);
    var
     Core_Std_internal=
      [0,
       _Fa_,
       _Fb_,
       _Fc_,
       _Ff_,
       _Fg_,
       _Fh_,
       _Fi_,
       _Fj_,
       _Fk_,
       _Fl_,
       _Fm_,
       _Fn_,
       _Fo_,
       _Fp_,
       _Fq_,
       _Fr_,
       _Fs_,
       _Ft_,
       _Fu_,
       _Fw_,
       _Fx_,
       _Fy_,
       _Fz_,
       _FA_,
       _FB_,
       _FC_,
       _FD_,
       _FE_,
       _FF_,
       _FG_,
       _FH_,
       _FI_,
       _FJ_,
       _FK_,
       _FL_,
       _FM_,
       _FN_,
       _FO_,
       _FP_,
       _FQ_,
       _FR_,
       _FS_,
       _FT_,
       _FU_,
       _FV_,
       _FW_,
       _FX_,
       _FY_,
       _FZ_,
       _F0_,
       _F1_,
       _F2_,
       _F3_,
       _F4_,
       _F5_,
       _F6_,
       _F7_,
       _F8_,
       _F9_,
       _F__,
       _F$_,
       _Ga_,
       _Gb_,
       _Gc_,
       _Gd_,
       _Ge_,
       _Gf_,
       _Gg_,
       _Gh_,
       _Gi_,
       _Gj_,
       _Gk_,
       _Gl_,
       _Gm_,
       _Gn_,
       _Go_,
       _Gp_,
       _Gq_,
       _Gr_,
       _Gs_,
       _Gt_,
       _Gu_,
       _Gv_,
       _No_,
       _Np_,
       _Nq_,
       _Nr_,
       _Ns_,
       _Nt_,
       _Nu_,
       _Nv_,
       _Nw_,
       _Nx_,
       _Ny_,
       _Nz_,
       _NA_,
       _NB_,
       _NC_,
       _ND_,
       _NE_,
       _NF_,
       _NG_,
       _NH_,
       _NI_,
       _NJ_,
       _NK_,
       _NL_,
       _NM_,
       _NN_,
       _NO_,
       _NP_,
       _NQ_,
       quickcheck_observer$12,
       _NR_,
       _NS_,
       _NT_,
       _NU_,
       _NV_,
       _NW_,
       _NX_,
       _NY_,
       _NZ_,
       quickcheck_shrinker$12,
       _N0_,
       _N1_,
       _N2_,
       _N3_,
       _N4_,
       _N5_,
       _N6_,
       _N7_,
       _N8_,
       _N9_,
       _N__,
       _N$_,
       _Oa_,
       _Ob_,
       _Oc_,
       symbol,
       _Od_,
       _Oe_,
       _Of_,
       _Og_,
       _Oh_,
       _Oi_,
       _Oj_,
       _Ok_,
       _Ol_,
       _Om_,
       _On_,
       _Oo_,
       _Op_,
       _Oq_,
       sexp_of_never_returns,
       _LC_,
       _Or_,
       _Os_,
       _Ot_,
       _Ou_,
       _Ov_,
       _Ow_,
       _Ox_,
       _Oy_,
       _Oz_,
       _OA_,
       _OB_,
       _OC_,
       _OD_,
       _OE_,
       _OF_,
       _OG_,
       _OH_,
       _OI_,
       _OJ_,
       _OK_,
       _OL_,
       _OM_,
       _ON_,
       _OO_,
       _OP_,
       _OQ_,
       _OR_,
       _OS_,
       _OT_,
       _OU_,
       _OV_,
       _OW_,
       _OX_,
       _OY_,
       _OZ_,
       _O0_,
       _O1_,
       _O2_,
       _O3_,
       _O4_,
       _O5_,
       _O6_,
       _O7_,
       _O8_,
       _O9_,
       _O__,
       _O$_,
       _Pa_,
       _Pb_,
       _Pc_,
       _Pd_,
       _Pe_,
       _Pf_,
       _Pg_,
       _Ph_,
       _Pi_,
       _Pj_,
       _Pk_,
       Bug,
       C_malloc_exn,
       Finally,
       fst3,
       snd3,
       trd3,
       uw,
       symbol$69,
       symbol$70,
       symbol$71,
       symbol$133,
       _fy_,
       _ip_,
       _fC_,
       _oB_,
       _oC_,
       failwithf$0,
       failwithp,
       failwiths,
       force,
       _fD_,
       ident,
       _Po_,
       _fw_,
       _xZ_,
       _x0_,
       _fz_,
       _oy_,
       _Pp_,
       phys_same,
       _Pq_,
       _Pr_,
       _fF_,
       _Ps_,
       _Pt_,
       _nX_,
       _HX_,
       _Pu_,
       _Pv_,
       _fx_,
       _Pw_,
       _Px_,
       _Py_,
       _Pz_,
       _PA_,
       _PB_,
       _PC_,
       _PD_,
       _PE_,
       _PF_,
       _PG_,
       _PH_,
       _PI_,
       _PJ_,
       _PK_,
       _PL_,
       _PM_,
       _PN_,
       _PO_,
       _PP_,
       bin_shape_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_read_array$0,
       bin_read_array,
       bin_reader_array,
       bin_array,
       compare_array,
       equal_array,
       sexp_of_array,
       array_of_sexp,
       array_sexp_grammar,
       typerep_of_array,
       typename_of_array,
       bin_shape_bool,
       bin_size_bool,
       bin_write_bool,
       bin_writer_bool,
       bin_read_bool,
       bin_read_bool$0,
       bin_reader_bool,
       bin_bool,
       compare_bool,
       equal_bool,
       hash_fold_bool,
       hash_bool,
       sexp_of_bool,
       bool_of_sexp,
       bool_sexp_grammar,
       typerep_of_bool,
       typename_of_bool,
       bin_shape_char,
       bin_size_char,
       bin_write_char,
       bin_writer_char,
       bin_read_char,
       bin_read_char$0,
       bin_reader_char,
       bin_char,
       compare_char,
       equal_char,
       hash_fold_char,
       hash_char,
       sexp_of_char,
       char_of_sexp,
       char_sexp_grammar,
       typerep_of_char,
       typename_of_char,
       bin_shape_float,
       bin_size_t$4,
       bin_write_t$4,
       bin_writer_float,
       bin_read_t$9,
       bin_read_t$10,
       bin_reader_float,
       bin_float,
       compare$40,
       equal$23,
       hash_fold_t$18,
       hash_float,
       sexp_of_t$44,
       float_of_sexp,
       t_sexp_grammar$11,
       typerep_of_float,
       typename_of_float,
       bin_shape_int,
       bin_size_t$49,
       bin_write_t$49,
       bin_writer_int,
       bin_read_t$100,
       bin_read_t$101,
       bin_reader_int,
       bin_int,
       compare$42,
       equal$24,
       hash_fold_t$19,
       hash_int,
       sexp_of_int,
       int_of_sexp,
       int_sexp_grammar,
       typerep_of_int,
       typename_of_int,
       bin_shape_int32,
       bin_size_int32,
       bin_write_int32,
       bin_writer_int32,
       bin_read_int32,
       bin_read_int32$0,
       bin_reader_int32,
       bin_int32,
       compare_int32,
       equal_int32,
       hash_fold_int32,
       hash_int32,
       sexp_of_int32,
       int32_of_sexp,
       int32_sexp_grammar,
       typerep_of_int32,
       typename_of_int32,
       bin_shape_int64,
       bin_size_int64,
       bin_write_int64,
       bin_writer_int64,
       bin_read_int64,
       bin_read_int64$0,
       bin_reader_int64,
       bin_int64,
       compare_int64,
       equal_int64,
       hash_fold_int64,
       hash_int64,
       sexp_of_int64,
       int64_of_sexp,
       int64_sexp_grammar,
       typerep_of_int64,
       typename_of_int64,
       bin_shape_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_read_lazy_t$0,
       bin_read_lazy_t,
       bin_reader_lazy_t,
       bin_lazy_t,
       compare_lazy_t,
       hash_fold_lazy_t,
       sexp_of_lazy_t,
       lazy_t_of_sexp,
       lazy_t_sexp_grammar,
       typerep_of_lazy_t,
       typename_of_lazy_t,
       bin_shape_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_read_list$0,
       bin_read_list,
       bin_reader_list,
       bin_list,
       compare_list,
       equal_list,
       hash_fold_list,
       sexp_of_list,
       list_of_sexp,
       list_sexp_grammar,
       typerep_of_list,
       typename_of_list,
       bin_shape_nativeint,
       bin_size_nativeint,
       bin_write_nativeint,
       bin_writer_nativeint,
       bin_read_nativeint,
       bin_read_nativeint$0,
       bin_reader_nativeint,
       bin_nativeint,
       compare_nativeint,
       equal_nativeint,
       hash_fold_nativeint,
       hash_nativeint,
       sexp_of_nativeint,
       nativeint_of_sexp,
       nativeint_sexp_grammar,
       typerep_of_nativeint,
       typename_of_nativeint,
       bin_shape_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_read_option$0,
       bin_read_option,
       bin_reader_option,
       bin_option,
       compare_option,
       equal_option,
       hash_fold_option,
       sexp_of_option,
       option_of_sexp,
       option_sexp_grammar,
       typerep_of_option,
       typename_of_option,
       bin_shape_string,
       bin_size_t$47,
       bin_write_t$47,
       bin_writer_string,
       bin_read_t$96,
       bin_read_t$97,
       bin_reader_string,
       bin_string,
       compare$37,
       equal$21,
       hash_fold_t$15,
       hash_string,
       sexp_of_t$41,
       t_of_sexp$34,
       t_sexp_grammar$8,
       typerep_of_string,
       typename_of_string,
       bin_shape_bytes,
       bin_size_bytes,
       bin_write_bytes,
       bin_writer_bytes,
       bin_read_bytes,
       bin_read_bytes$0,
       bin_reader_bytes,
       bin_bytes,
       compare_bytes,
       equal_bytes,
       sexp_of_bytes,
       bytes_of_sexp,
       bytes_sexp_grammar,
       typerep_of_bytes,
       typename_of_bytes,
       bin_shape_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_read_ref$0,
       bin_read_ref,
       bin_reader_ref,
       bin_ref,
       compare_ref,
       equal_ref,
       sexp_of_ref,
       ref_of_sexp,
       ref_sexp_grammar,
       typerep_of_ref,
       typename_of_ref,
       bin_shape_unit,
       bin_size_unit,
       bin_write_unit,
       bin_writer_unit,
       bin_read_unit,
       bin_read_unit$0,
       bin_reader_unit,
       bin_unit,
       compare_unit,
       equal_unit,
       hash_fold_unit,
       hash_unit,
       sexp_of_unit,
       unit_of_sexp,
       unit_sexp_grammar,
       typerep_of_unit,
       typename_of_unit,
       bin_shape_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_read_float_array$0,
       bin_read_float_array,
       bin_reader_float_array,
       bin_float_array,
       compare_float_array,
       sexp_of_float_array,
       float_array_of_sexp,
       float_array_sexp_grammar,
       typerep_of_float_array,
       typename_of_float_array,
       sexp_of_exn];
    caml_register_global(5349,Core_Std_internal,"Core__Std_internal");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Byte_units0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$254);
    caml_call1(Expect_test_collector[5][1],cst_core_src_byte_units0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$255,cst$89);
    function hash$26(x){return caml_call1(_Kh_,x)}
    function of_bytes_int63(_bj$_){return _bj$_}
    function bytes_int63(_bj__){return _bj__}
    function to_string$16(n)
     {var
       kib=caml_call1(of_int$2,1024),
       mib=caml_call2(symbol$105,kib,kib),
       gib=caml_call2(symbol$105,kib,mib),
       n_abs=caml_call1(abs$4,n);
      if(caml_call2(symbol$101,n_abs,kib))
       return caml_call2(_fx_,_QQ_,caml_call1(to_int_exn$2,n));
      if(caml_call2(symbol$101,n_abs,mib))
       {var _bj7_=caml_call1(to_float$3,kib);
        return caml_call2(_fx_,_QR_,caml_call1(to_float$3,n) / _bj7_)}
      if(caml_call2(symbol$101,n_abs,gib))
       {var _bj8_=caml_call1(to_float$3,mib);
        return caml_call2(_fx_,_QS_,caml_call1(to_float$3,n) / _bj8_)}
      var _bj9_=caml_call1(to_float$3,gib);
      return caml_call2(_fx_,_QT_,caml_call1(to_float$3,n) / _bj9_)}
    function sexp_of_t$55(n){return [0,to_string$16(n)]}
    function bytes_int_exn(t){return caml_call1(to_int_exn$2,t)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$256);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Byte_units0$0);
    var
     Core_Byte_units0=
      [0,
       compare$47,
       hash_fold_t$23,
       hash$26,
       sexp_of_t$55,
       to_string$16,
       of_bytes_int63,
       bytes_int63,
       bytes_int_exn];
    caml_register_global(5350,Core_Byte_units0,"Core__Byte_units0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Bigstring);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$257);
    caml_call1(Expect_test_collector[5][1],cst_core_src_bigstring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$258,cst$90);
    var
     _QU_=include$81[1],
     _QV_=include$81[2],
     _QW_=include$81[3],
     _QX_=include$81[4],
     _QY_=include$81[5],
     _QZ_=include$81[6],
     _Q0_=include$81[7],
     _Q1_=include$81[8],
     _Q5_=include$81[12],
     _Q6_=include$81[13],
     _Q7_=include$81[14],
     _Q8_=include$81[15],
     _Q__=include$81[17],
     _Q$_=include$81[18],
     _Ra_=include$81[19],
     bigstring_bigstring=include$81[21],
     _Re_=include$81[24],
     _Rh_=include$81[27],
     _Ri_=include$81[28],
     _Rj_=include$81[29],
     _Q2_=include$81[9],
     _Q3_=include$81[10],
     _Q4_=include$81[11],
     _Q9_=include$81[16],
     _Rb_=include$81[20],
     _Rc_=include$81[22],
     _Rd_=include$81[23],
     _Rf_=include$81[25],
     _Rg_=include$81[26],
     _Rk_=include$81[30],
     _Rl_=include$81[31],
     _Rm_=include$81[32],
     _Rn_=include$81[33],
     _Ro_=include$81[34],
     _Rp_=include$81[35],
     _Rq_=include$81[36],
     _Rr_=include$81[37],
     _Rs_=include$81[38],
     _Rt_=include$81[39],
     _Ru_=include$81[40],
     _Rv_=include$81[41],
     _Rw_=include$81[42],
     _Rx_=include$81[43],
     _Ry_=include$81[44],
     _Rz_=include$81[45],
     _RA_=include$81[46],
     _RB_=include$81[47],
     _RC_=include$81[48],
     _RD_=include$81[49],
     _RE_=include$81[50],
     _RF_=include$81[51],
     _RG_=include$81[52],
     _RH_=include$81[53],
     _RI_=include$81[54],
     _RJ_=include$81[55],
     _RK_=include$81[56],
     _RL_=include$81[57],
     _RM_=include$81[58],
     _RN_=include$81[59],
     _RO_=include$81[60],
     _RP_=include$81[61],
     _RQ_=include$81[62],
     _RR_=include$81[63],
     _RS_=include$81[64],
     _RT_=include$81[65],
     _RU_=include$81[66],
     _RV_=include$81[67],
     _RW_=include$81[68],
     _RX_=include$81[69],
     _RY_=include$81[70],
     _RZ_=include$81[71],
     _R0_=include$81[72],
     _R1_=include$81[73],
     _R2_=include$81[74],
     _R3_=include$81[75],
     _R4_=include$81[76],
     _R5_=include$81[77],
     _R6_=include$81[78],
     _R7_=include$81[79],
     _R8_=include$81[80],
     _R9_=include$81[81],
     _R__=include$81[82],
     _R$_=include$81[83],
     _Sa_=include$81[84],
     _Sb_=include$81[85],
     _Sc_=include$81[86],
     _Sd_=include$81[87],
     _Se_=include$81[88],
     _Sf_=include$81[89],
     _Sg_=include$81[90],
     _Sh_=include$81[91],
     _Si_=include$81[92],
     _Sj_=include$81[93],
     _Sk_=include$81[94],
     _Sl_=include$81[95],
     _Sm_=include$81[96],
     _Sn_=include$81[97],
     _So_=include$81[98],
     _Sp_=include$81[99],
     _Sq_=include$81[100],
     _Sr_=include$81[101],
     _Ss_=include$81[102],
     _St_=include$81[103],
     _Su_=include$81[104],
     _Sv_=include$81[105],
     _Sw_=include$81[106],
     _Sx_=include$81[107],
     _Sy_=include$81[108],
     _Sz_=include$81[109],
     _SA_=include$81[110],
     _SB_=include$81[111],
     _SC_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$161),0,_dn_],0],
     _SD_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_bigstring_ml_12_6),
     group$95=caml_call2(Bin_prot_Shape[6],_SD_,_SC_),
     _SE_=caml_call1(Bin_prot_Shape[2][1],cst_t$162),
     bin_shape_t$80=caml_call1(caml_call2(Bin_prot_Shape[14],group$95,_SE_),0),
     bin_writer_t$73=[0,bin_size_t_frozen,bin_write_t_frozen],
     bin_reader_t$73=[0,bin_read_t_frozen,bin_read_t_frozen$0],
     bin_t$73=[0,bin_shape_t$80,bin_writer_t$73,bin_reader_t$73],
     _SF_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t_frozen),0,bin_shape_t$80],0],
     _SG_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_bigstring_ml_17_4),
     group$96=caml_call2(Bin_prot_Shape[6],_SG_,_SF_),
     _SH_=caml_call1(Bin_prot_Shape[2][1],cst_t_frozen$0),
     bin_shape_t_frozen=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$96,_SH_),0),
     bin_writer_t_frozen=[0,bin_size_t_frozen,bin_write_t_frozen],
     bin_reader_t_frozen=[0,bin_read_t_frozen,bin_read_t_frozen$0],
     bin_t_frozen=
      [0,bin_shape_t_frozen,bin_writer_t_frozen,bin_reader_t_frozen];
    function arg(max_mem_waiting_gc,size)
     {var
       max_mem_waiting_gc_in_bytes=
        caml_call2(_xy_,max_mem_waiting_gc,bytes_int_exn);
      return caml_call2(_Q3_,max_mem_waiting_gc_in_bytes,size)}
    function sub_shared(opt,len,bstr)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var len$0=caml_call3(_Q$_,bstr,pos,len);
      return runtime.caml_ba_sub(bstr,pos,len$0)}
    function read_bin_prot_verbose_errors(t,opt,len,reader)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var len$0=caml_call3(_Q$_,t,pos,len),limit=pos + len$0 | 0;
      caml_call4(_Q__,cst_read_bin_prot_verbose_erro,pos,len$0,t);
      function invalid_data(message,a,sexp_of_a)
       {return [0,-810630190,caml_call5(_nL_,0,0,message,a,sexp_of_a)]}
      function read(bin_reader,pos,len)
       {if(caml_call2(_Nr_,len,limit - pos | 0))return 658743757;
        var pos_ref=[0,pos];
        try
         {var _bj6_=[0,17724,caml_call2(bin_reader,t,pos_ref)],_bj4_=_bj6_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          var _bj4_=[0,-810630190,caml_call2(_nT_,0,exn)]}
        if(17724 <= _bj4_[1])
         {var result=_bj4_[2],expected_pos=pos + len | 0;
          if(caml_call2(_Nq_,pos_ref[1],expected_pos))
           return [0,17724,[0,result,expected_pos]];
          var
           _bj5_=
            function(param)
             {var
               arg1_002=param[2],
               arg0_001=param[1],
               res0_003=caml_call1(sexp_of_int,arg0_001),
               res1_004=caml_call1(sexp_of_int,arg1_002);
              return [1,[0,res0_003,[0,res1_004,0]]]};
          return invalid_data
                  (cst_pos_ref_expected_pos,[0,pos_ref[1],expected_pos],_bj5_)}
        return _bj4_}
      var x=read(Bin_prot_Utils[2],pos,Bin_prot_Utils[1]);
      if(typeof x !== "number" && 17724 <= x[1])
       {var match=x[2],pos$0=match[2],element_length=match[1];
        return caml_call2(_Ns_,element_length,0)
                ?invalid_data
                  (cst_negative_element_length_d,element_length,sexp_of_int)
                :read(reader[1],pos$0,element_length)}
      return x}
    function read_bin_prot(t,pos,len,reader)
     {var match=read_bin_prot_verbose_errors(t,pos,len,reader);
      if(typeof match === "number")
       return caml_call1(_oD_,cst_not_enough_data);
      if(17724 <= match[1]){var x=match[2];return [0,x]}
      var e=match[2];
      return [1,caml_call2(_nO_,e,cst_Invalid_data)]}
    function write_bin_prot(t,opt,writer,v)
     {if(opt)var sth=opt[1],pos=sth;else var pos=0;
      var
       data_len=caml_call1(writer[1],v),
       total_len=data_len + Bin_prot_Utils[1] | 0;
      if(caml_call2(_Ns_,pos,0))
       failwiths(0,_SI_,cst_Bigstring_write_bin_prot_n,pos,sexp_of_int);
      if(caml_call2(_Nr_,pos + total_len | 0,caml_call1(_Ra_,t)))
       {var
         _bj2_=
          function(param)
           {var
             arg2_010=param[3],
             arg1_009=param[2],
             arg0_008=param[1],
             v_005=arg0_008[2],
             res0_011=[1,[0,_SJ_,[0,caml_call1(sexp_of_int,v_005),0]]],
             v_006=arg1_009[2],
             res1_012=[1,[0,_SK_,[0,caml_call1(sexp_of_int,v_006),0]]],
             v_007=arg2_010[2],
             res2_013=[1,[0,_SL_,[0,caml_call1(sexp_of_int,v_007),0]]];
            return [1,[0,res0_011,[0,res1_012,[0,res2_013,0]]]]};
        failwiths
         (0,
          _SM_,
          cst_Bigstring_write_bin_prot_n$0,
          [0,
           [0,5594516,pos],
           [0,179941454,pos + total_len | 0],
           [0,-978093804,caml_call1(_Ra_,t)]],
          _bj2_)}
      var
       pos_after_size_header=caml_call3(Bin_prot_Utils[3],t,pos,data_len),
       pos_after_data=caml_call3(writer[2],t,pos_after_size_header,v);
      if(caml_call2(_Nt_,pos_after_data - pos | 0,total_len))
       {var
         _bj3_=
          function(param)
           {var
             arg4_023=param[5],
             arg3_022=param[4],
             arg2_021=param[3],
             arg1_020=param[2],
             arg0_019=param[1],
             v_014=arg0_019[2],
             res0_024=[1,[0,_SN_,[0,caml_call1(sexp_of_int,v_014),0]]],
             v_015=arg1_020[2],
             res1_025=[1,[0,_SO_,[0,caml_call1(sexp_of_int,v_015),0]]],
             v_016=arg2_021[2],
             res2_026=[1,[0,_SP_,[0,caml_call1(sexp_of_int,v_016),0]]],
             v_017=arg3_022[2],
             res3_027=[1,[0,_SQ_,[0,caml_call1(sexp_of_int,v_017),0]]],
             v_018=arg4_023[2],
             res4_028=[1,[0,_SR_,[0,caml_call1(sexp_of_int,v_018),0]]];
            return [1,
                    [0,
                     res0_024,
                     [0,res1_025,[0,res2_026,[0,res3_027,[0,res4_028,0]]]]]]};
        failwiths
         (0,
          _SS_,
          cst_Bigstring_write_bin_prot_b,
          [0,
           [0,187782776,pos_after_data],
           [0,221966327,pos],
           [0,-494937222,Bin_prot_Utils[1]],
           [0,330843136,data_len],
           [0,-251717990,total_len]],
          _bj3_)}
      return pos_after_data}
    var
     get$3=caml_ba_get_1,
     include$82=_AR_([0,_Ra_,get$3]),
     _ST_=include$82[1];
    function get_tail_padded_fixed_string(padding,t,pos$1,len,param)
     {var pos$2=pos$1 + len | 0,pos=pos$2;
      for(;;)
       {var pos$0=pos - 1 | 0;
        if
         (caml_call2(_No_,pos$0,pos$1)
          &&
          caml_call2(_EL_,caml_ba_get_1(t,pos$0),padding))
         {var pos=pos$0;continue}
        return caml_call3(_Q7_,[0,pos$1],[0,pos - pos$1 | 0],t)}}
    function set_tail_padded_fixed_string(padding,t,pos,len,value)
     {var slen=caml_ml_string_length(value);
      if(caml_call2(_Nr_,slen,len))caml_call4(failwithf,_SU_,value,len,0);
      caml_call5(_Rh_[1],value,0,t,pos,slen);
      var _bjZ_=pos + slen | 0,_bj0_=(pos + len | 0) - 1 | 0;
      if(! (_bj0_ < _bjZ_))
       {var i=_bjZ_;
        for(;;)
         {caml_ba_set_1(t,i,padding);
          var _bj1_=i + 1 | 0;
          if(_bj0_ !== i){var i=_bj1_;continue}
          break}}
      return 0}
    function set_head_padded_fixed_string(padding,t,pos,len,value)
     {var slen=caml_ml_string_length(value);
      if(caml_call2(_Nr_,slen,len))caml_call4(failwithf,_SV_,value,len,0);
      caml_call5(_Rh_[1],value,0,t,(pos + len | 0) - slen | 0,slen);
      var _bjX_=((pos + len | 0) - slen | 0) - 1 | 0;
      if(! (_bjX_ < pos))
       {var i=pos;
        for(;;)
         {caml_ba_set_1(t,i,padding);
          var _bjY_=i + 1 | 0;
          if(_bjX_ !== i){var i=_bjY_;continue}
          break}}
      return 0}
    function get_head_padded_fixed_string(padding,t,pos$1,len,param)
     {var max_pos=(pos$1 + len | 0) - 1 | 0,pos=pos$1;
      for(;;)
       {if
         (caml_call2(_Np_,pos,max_pos)
          &&
          caml_call2(_EL_,caml_ba_get_1(t,pos),padding))
         {var pos$0=caml_call1(next$0,pos),pos=pos$0;continue}
        return caml_call3(_Q7_,[0,pos],[0,len - (pos - pos$1 | 0) | 0],t)}}
    var
     quickcheck_generator$14=Base_quickcheck_Generator[20],
     quickcheck_observer$13=Base_quickcheck_Observer[22],
     quickcheck_shrinker$13=Base_quickcheck_Shrinker[22];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$259);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Bigstring$0);
    var
     Core_Bigstring=
      [0,
       quickcheck_generator$14,
       quickcheck_observer$13,
       quickcheck_shrinker$13,
       _QU_,
       _QV_,
       _QW_,
       _QX_,
       _QY_,
       _QZ_,
       _Q0_,
       _Q1_,
       _Q2_,
       _Q4_,
       _Q5_,
       _Q6_,
       _Q7_,
       _Q8_,
       _Q9_,
       _Q__,
       _Q$_,
       _Ra_,
       _Rb_,
       bigstring_bigstring,
       _Rc_,
       _Rd_,
       _Re_,
       _Rf_,
       _Rg_,
       _Rh_,
       _Ri_,
       _Rj_,
       _Rk_,
       _Rl_,
       _Rm_,
       _Rn_,
       _Ro_,
       _Rp_,
       _Rq_,
       _Rr_,
       _Rs_,
       _Rt_,
       _Ru_,
       _Rv_,
       _Rw_,
       _Rx_,
       _Ry_,
       _Rz_,
       _RA_,
       _RB_,
       _RC_,
       _RD_,
       _RE_,
       _RF_,
       _RG_,
       _RH_,
       _RI_,
       _RJ_,
       _RK_,
       _RL_,
       _RM_,
       _RN_,
       _RO_,
       _RP_,
       _RQ_,
       _RR_,
       _RS_,
       _RT_,
       _RU_,
       _RV_,
       _RW_,
       _RX_,
       _RY_,
       _RZ_,
       _R0_,
       _R1_,
       _R2_,
       _R3_,
       _R4_,
       _R5_,
       _R6_,
       _R7_,
       _R8_,
       _R9_,
       _R__,
       _R$_,
       _Sa_,
       _Sb_,
       _Sc_,
       _Sd_,
       _Se_,
       _Sf_,
       _Sg_,
       _Sh_,
       _Si_,
       _Sj_,
       _Sk_,
       _Sl_,
       _Sm_,
       _Sn_,
       _So_,
       _Sp_,
       _Sq_,
       _Sr_,
       _Ss_,
       _St_,
       _Su_,
       _Sv_,
       _Sw_,
       _Sx_,
       _Sy_,
       _Sz_,
       _SA_,
       _SB_,
       _ST_,
       arg,
       sub_shared,
       write_bin_prot,
       read_bin_prot,
       read_bin_prot_verbose_errors,
       get_tail_padded_fixed_string,
       set_tail_padded_fixed_string,
       get_head_padded_fixed_string,
       set_head_padded_fixed_string,
       [0,
        bin_size_t_frozen,
        bin_write_t_frozen,
        bin_read_t_frozen,
        bin_read_t_frozen$0,
        bin_shape_t$80,
        bin_writer_t$73,
        bin_reader_t$73,
        bin_t$73,
        _QU_,
        _QW_,
        bin_shape_t_frozen,
        bin_size_t_frozen,
        bin_write_t_frozen,
        bin_writer_t_frozen,
        bin_read_t_frozen,
        bin_read_t_frozen$0,
        bin_reader_t_frozen,
        bin_t_frozen,
        _QX_,
        _QY_,
        _QZ_,
        _Q0_],
       [0,
        [0,
         bin_size_t_frozen,
         bin_write_t_frozen,
         bin_read_t_frozen,
         bin_read_t_frozen$0,
         bin_shape_t$80,
         bin_writer_t$73,
         bin_reader_t$73,
         bin_t$73,
         _QU_,
         _QV_,
         _QW_,
         bin_shape_t_frozen,
         bin_size_t_frozen,
         bin_write_t_frozen,
         bin_writer_t_frozen,
         bin_read_t_frozen,
         bin_read_t_frozen$0,
         bin_reader_t_frozen,
         bin_t_frozen,
         _QX_,
         _QY_,
         _QZ_,
         _Q0_,
         _Q1_]]];
    caml_register_global(5352,Core_Bigstring,"Core__Bigstring");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_bin_prot);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$260);
    caml_call1(Expect_test_collector[5][1],cst_core_src_core_bin_prot_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$261,cst$91);
    function to_string$17(t,v)
     {var len=caml_call1(t[1],v),buf=arg(0,len),pos=caml_call3(t[2],buf,0,v);
      if(pos === caml_call1(_Ra_,buf))
       {var str=caml_call3(_Q7_,0,0,buf);
        runtime.bigstring_destroy_stub(buf);
        return str}
      throw [0,Assert_failure,_SW_]}
    function to_bytes(t,v)
     {var len=caml_call1(t[1],v),buf=arg(0,len),pos=caml_call3(t[2],buf,0,v);
      if(pos === caml_call1(_Ra_,buf))
       {var str=caml_call3(_Q8_,0,0,buf);
        runtime.bigstring_destroy_stub(buf);
        return str}
      throw [0,Assert_failure,_SX_]}
    var Writer=[0,to_string$17,to_bytes];
    function of_string$15(t,string)
     {var
       buf=caml_call3(_Q5_,0,0,string),
       pos_ref=[0,0],
       v=caml_call2(t[1],buf,pos_ref),
       _bjW_=caml_call1(_Ra_,buf);
      if(pos_ref[1] === _bjW_){runtime.bigstring_destroy_stub(buf);return v}
      throw [0,Assert_failure,_SY_]}
    function of_bytes(t,bytes)
     {var
       buf=caml_call3(_Q6_,0,0,bytes),
       pos_ref=[0,0],
       v=caml_call2(t[1],buf,pos_ref),
       _bjV_=caml_call1(_Ra_,buf);
      if(pos_ref[1] === _bjV_){runtime.bigstring_destroy_stub(buf);return v}
      throw [0,Assert_failure,_SZ_]}
    var Reader=[0,of_string$15,of_bytes];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$262);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_bin_prot$0);
    var Core_Core_bin_prot=[0,Writer,Reader];
    caml_register_global(5353,Core_Core_bin_prot,"Core__Core_bin_prot");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Md5);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$263);
    caml_call1(Expect_test_collector[5][1],cst_core_src_md5_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$264,cst$92);
    var
     _S0_=include$83[6],
     _S1_=include$83[7],
     compare$53=include$83[8],
     _S2_=include$83[9],
     _S3_=include$83[10];
    function sexp_of_t$56(t)
     {return caml_call1(sexp_of_t$41,caml_call1(_S0_,t))}
    function t_of_sexp$48(s)
     {return caml_call1(_S1_,caml_call1(t_of_sexp$34,s))}
    var
     t_sexp_grammar$18=
      caml_call1(Sexplib_Sexp_grammar[1],t_sexp_grammar$8);
    function hash_fold_t$27(accum,t)
     {return caml_call2(hash_fold_t$15,accum,caml_call1(_S2_,t))}
    function hash$27(t){return caml_call1(hash$11,caml_call1(_S2_,t))}
    function sexp_of_t$57(x)
     {return caml_call1(sexp_of_t$41,caml_call1(_S2_,x))}
    function t_of_sexp$49(x)
     {return caml_call1(_S3_,caml_call1(t_of_sexp$34,x))}
    var
     t_sexp_grammar$19=caml_call1(Sexplib_Sexp_grammar[1],t_sexp_grammar$8),
     include$84=
      caml_call1
       (Bin_prot_Utils[11],
        [0,
         [0,
          bin_shape_t$44,
          bin_size_t$47,
          bin_write_t$47,
          bin_read_t$96,
          bin_read_t$97],
         _S2_,
         _S3_]),
     bin_size_t$58=include$84[1],
     bin_write_t$59=include$84[2],
     bin_read_t$120=include$84[3],
     bin_read_t$121=include$84[4],
     bin_shape_t$81=include$84[5],
     bin_writer_t$74=include$84[6],
     bin_reader_t$74=include$84[7],
     bin_t$74=include$84[8],
     _S4_=Make$2([0,compare$53,t_of_sexp$49,sexp_of_t$57]),
     symbol$134=_S4_[1],
     symbol$135=_S4_[2],
     symbol$136=_S4_[3],
     symbol$137=_S4_[4],
     symbol$138=_S4_[5],
     symbol$139=_S4_[6],
     equal$26=_S4_[7],
     min$12=_S4_[9],
     max$12=_S4_[10],
     ascending$11=_S4_[11],
     descending$11=_S4_[12],
     between$11=_S4_[13],
     clamp_exn$11=_S4_[14],
     clamp$11=_S4_[15],
     comparator$16=_S4_[16],
     validate_lbound$10=_S4_[17],
     validate_ubound$10=_S4_[18],
     validate_bound$10=_S4_[19],
     Replace_polymorphic_compare$8=_S4_[20],
     Map$13=_S4_[21],
     Set$13=_S4_[22],
     include$85=
      Make$4([0,hash_fold_t$27,t_of_sexp$49,compare$53,sexp_of_t$57,hash$27]),
     compare$54=include$85[1],
     hash_fold_t$28=include$85[2],
     hash$28=include$85[3],
     hashable$11=include$85[4],
     Table$11=include$85[5],
     Hash_set$11=include$85[6],
     Hash_queue$10=include$85[7];
    function to_binable$2(_bjU_){return _bjU_}
    function of_binable$2(_bjT_){return _bjT_}
    var
     include$86=
      caml_call1
       (Bin_prot_Utils[11],
        [0,
         [0,
          include$83[1],
          include$83[2],
          include$83[3],
          include$83[4],
          include$83[5]],
         to_binable$2,
         of_binable$2]),
     bin_size_t$59=include$86[1],
     bin_write_t$60=include$86[2],
     bin_read_t$122=include$86[3],
     bin_read_t$123=include$86[4],
     bin_shape_t$82=include$86[5],
     bin_writer_t$75=include$86[6],
     bin_reader_t$75=include$86[7],
     bin_t$75=include$86[8];
    function string(s){return caml_call1(Md5_lib[8],s)}
    var
     _S5_=Make$2([0,compare$53,t_of_sexp$48,sexp_of_t$56]),
     _S6_=_S5_[1],
     _S7_=_S5_[2],
     _S8_=_S5_[3],
     _S9_=_S5_[4],
     _S__=_S5_[5],
     _S$_=_S5_[6],
     _Ta_=_S5_[7],
     _Tb_=_S5_[9],
     _Tc_=_S5_[10],
     _Td_=_S5_[11],
     _Te_=_S5_[12],
     _Tf_=_S5_[13],
     _Tg_=_S5_[14],
     _Th_=_S5_[15],
     _Ti_=_S5_[16],
     _Tj_=_S5_[17],
     _Tk_=_S5_[18],
     _Tl_=_S5_[19],
     _Tm_=_S5_[20],
     _Tn_=_S5_[21],
     _To_=_S5_[22],
     include$87=
      Make$4([0,hash_fold_t$27,t_of_sexp$48,compare$53,sexp_of_t$56,hash$27]),
     _Tw_=Md5_lib[9],
     _Tp_=include$87[1],
     _Tq_=include$87[2],
     _Tr_=include$87[3],
     _Ts_=include$87[4],
     _Tt_=include$87[5],
     _Tu_=include$87[6],
     _Tv_=include$87[7],
     digest_num_bytes=16;
    function file(path)
     {var
       _bjP_=runtime.caml_sys_close,
       _bjQ_=runtime.caml_sys_open(path,_Tx_,0);
      function _bjR_(_bjS_){return runtime.core_md5_fd(_bjS_)}
      return caml_call1(_S3_,caml_call3(Base_Exn[12],_bjR_,_bjQ_,_bjP_))}
    function digest_channel_blocking_withou(channel,len)
     {return caml_call1(_S3_,runtime.caml_md5_chan(channel,len))}
    function channel(channel,len)
     {return digest_channel_blocking_withou(channel,len)}
    function output_blocking(t,oc)
     {var _bjO_=caml_call1(_S2_,t);
      return caml_call2(Stdlib_Digest[8],oc,_bjO_)}
    function output$0(oc,t){return output_blocking(t,oc)}
    function input(ic)
     {return caml_call1(_S3_,caml_call1(Stdlib_Digest[9],ic))}
    var _Ty_=Md5_lib[10];
    function subbytes(s,pos,len){return caml_call3(_Ty_,s,pos,len)}
    function digest_bin_prot(writer,value)
     {return string(caml_call2(Writer[1],writer,value))}
    function unsafe_digest_subbigstring(buf,pos,len)
     {var res=caml_call1(_Dw_,16);
      runtime.core_md5_digest_subbigstring(buf,pos,len,res);
      var _bjN_=caml_call1(_DO_,res);
      return caml_call1(Md5_lib[5],_bjN_)}
    function digest_subbigstring(buf,pos,len)
     {caml_call3(_iw_,pos,len,caml_call1(_Ra_,buf));
      return unsafe_digest_subbigstring(buf,pos,len)}
    function digest_bigstring(buf)
     {return unsafe_digest_subbigstring(buf,0,caml_call1(_Ra_,buf))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$265);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Md5$0);
    var
     _Tz_=
      [0,
       [0,
        [0,
         t_of_sexp$49,
         sexp_of_t$57,
         t_sexp_grammar$19,
         bin_size_t$58,
         bin_write_t$59,
         bin_read_t$120,
         bin_read_t$121,
         bin_shape_t$81,
         bin_writer_t$74,
         bin_reader_t$74,
         bin_t$74,
         compare$53,
         hash_fold_t$27,
         hash$27]],
       t_of_sexp$49,
       sexp_of_t$57,
       t_sexp_grammar$19,
       symbol$134,
       symbol$135,
       symbol$136,
       symbol$137,
       symbol$138,
       symbol$139,
       equal$26,
       min$12,
       max$12,
       ascending$11,
       descending$11,
       between$11,
       clamp_exn$11,
       clamp$11,
       comparator$16,
       validate_lbound$10,
       validate_ubound$10,
       validate_bound$10,
       Replace_polymorphic_compare$8,
       Map$13,
       Set$13,
       bin_size_t$58,
       bin_write_t$59,
       bin_read_t$120,
       bin_read_t$121,
       bin_shape_t$81,
       bin_writer_t$74,
       bin_reader_t$74,
       bin_t$74,
       compare$54,
       hash_fold_t$28,
       hash$28,
       hashable$11,
       Table$11,
       Hash_set$11,
       Hash_queue$10],
     Core_Md5=
      [0,
       [0,
        [0,
         t_of_sexp$48,
         sexp_of_t$56,
         t_sexp_grammar$18,
         bin_size_t$59,
         bin_write_t$60,
         bin_read_t$122,
         bin_read_t$123,
         bin_shape_t$82,
         bin_writer_t$75,
         bin_reader_t$75,
         bin_t$75,
         compare$53,
         hash_fold_t$27,
         hash$27]],
       _Tz_,
       t_of_sexp$48,
       sexp_of_t$56,
       t_sexp_grammar$18,
       _S6_,
       _S7_,
       _S8_,
       _S9_,
       _S__,
       _S$_,
       _Ta_,
       _Tb_,
       _Tc_,
       _Td_,
       _Te_,
       _Tf_,
       _Tg_,
       _Th_,
       _Ti_,
       _Tj_,
       _Tk_,
       _Tl_,
       _Tm_,
       _Tn_,
       _To_,
       bin_size_t$59,
       bin_write_t$60,
       bin_read_t$122,
       bin_read_t$123,
       bin_shape_t$82,
       bin_writer_t$75,
       bin_reader_t$75,
       bin_t$75,
       _Tp_,
       _Tq_,
       _Tr_,
       _Ts_,
       _Tt_,
       _Tu_,
       _Tv_,
       digest_num_bytes,
       _S2_,
       _S3_,
       _S0_,
       _S1_,
       string,
       _Tw_,
       _Ty_,
       file,
       digest_channel_blocking_withou,
       input,
       output_blocking,
       string,
       _Tw_,
       subbytes,
       _S1_,
       file,
       channel,
       output$0,
       input,
       digest_bin_prot,
       digest_bigstring,
       digest_subbigstring];
    caml_register_global(5357,Core_Md5,"Core__Md5");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Zone_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$266);
    caml_call1(Expect_test_collector[5][1],cst_core_src_zone_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$267,cst$93);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$268);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Zone_intf$0);
    var Core_Zone_intf=[0];
    caml_register_global(5358,Core_Zone_intf,"Core__Zone_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Binable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$269);
    caml_call1(Expect_test_collector[5][1],cst_core_src_binable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$270,cst$94);
    function of_string$16(m,string)
     {return of_bigstring(m,caml_call3(_Q5_,0,0,string))}
    function to_string$18(m,t)
     {return caml_call3(_Q7_,0,0,to_bigstring(0,m,t))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$271);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Binable$0);
    var
     Core_Binable=
      [0,
       Minimal,
       _fv_,
       _fu_,
       _ft_,
       _fs_,
       _fr_,
       _fq_,
       _fp_,
       _fo_,
       _fn_,
       _fm_,
       _fl_,
       _fk_,
       of_bigstring,
       to_bigstring,
       Stable$0,
       of_string$16,
       to_string$18];
    caml_register_global(5359,Core_Binable,"Core__Binable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Zone);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$272);
    caml_call1(Expect_test_collector[5][1],cst_core_src_zone_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$273,cst$95);
    var
     Invalid_file_format=
      [248,cst_Core_Zone_Invalid_file_for,caml_fresh_oo_id(0)];
    function _TA_(param)
     {if(param[1] === Invalid_file_format)
       {var arg0_001=param[2],res0_002=caml_call1(sexp_of_t$41,arg0_001);
        return [1,[0,_TB_,[0,res0_002,0]]]}
      throw [0,Assert_failure,_TC_]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Invalid_file_format,_TA_);
    var before_first_transition=-1;
    function to_external(t)
     {return caml_call2(Replace_polymorphic_compare$3[10],0,t)}
    function of_external(param){return -1}
    var
     include$88=
      caml_call1
       (caml_call1
         (_fr_,
          [0,
           bin_shape_t$57,
           bin_size_t$49,
           bin_write_t$49,
           bin_read_t$100,
           bin_read_t$101]),
        [0,to_external,of_external]),
     bin_size_t$60=include$88[1],
     bin_write_t$61=include$88[2],
     bin_read_t$124=include$88[3],
     bin_shape_t$83=include$88[5],
     include$89=
      caml_call1
       (caml_call1(Base_Sexpable[1],[0,int_of_sexp,sexp_of_int]),
        [0,to_external,of_external]),
     t_of_sexp$50=include$89[1],
     sexp_of_t$58=include$89[2],
     _TD_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_utc_offset_in_seconds,Stable$6[1][5]],
         [0,
          [0,cst_is_dst,bin_shape_bool],
          [0,[0,cst_abbrv,bin_shape_string],0]]]),
     _TE_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$163),0,_TD_],0],
     _TF_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_zone_ml_64_8),
     group$97=caml_call2(Bin_prot_Shape[6],_TF_,_TE_),
     _TG_=caml_call1(Bin_prot_Shape[2][1],cst_t$164),
     bin_shape_t$84=caml_call1(caml_call2(Bin_prot_Shape[14],group$97,_TG_),0);
    function bin_size_t$61(param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _bjK_=caml_call1(Stable$6[1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_bjK_),
       _bjL_=caml_call1(bin_size_bool,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_bjL_),
       _bjM_=caml_call1(bin_size_t$47,v3);
      return caml_call2(Bin_prot_Common[23],size$0,_bjM_)}
    function bin_write_t$62(buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(Stable$6[1][2],buf,pos,v1),
       pos$1=caml_call3(bin_write_bool,buf,pos$0,v2);
      return caml_call3(bin_write_t$47,buf,pos$1,v3)}
    function bin_read_t$125(buf,pos_ref)
     {var
       v_utc_offset_in_seconds=caml_call2(Stable$6[1][3],buf,pos_ref),
       v_is_dst=caml_call2(bin_read_bool,buf,pos_ref),
       v_abbrv=caml_call2(bin_read_t$96,buf,pos_ref);
      return [0,v_utc_offset_in_seconds,v_is_dst,v_abbrv]}
    function t_of_sexp$51(sexp_004)
     {if(0 === sexp_004[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_020$0,sexp_004);
      var
       field_sexps_005=sexp_004[1],
       utc_offset_in_seconds_006=[0,0],
       is_dst_008=[0,0],
       abbrv_010=[0,0],
       duplicates_012=[0,0],
       extra_013=[0,0],
       param=field_sexps_005;
      for(;;)
       {if(param)
         {var _bjB_=param[1];
          if(1 === _bjB_[0])
           {var _bjC_=_bjB_[1];
            if(_bjC_)
             {var _bjD_=_bjC_[1];
              if(0 === _bjD_[0])
               {var _bjE_=_bjC_[2],_bjF_=_bjD_[1],switch$0=0;
                if(! _bjE_ || ! _bjE_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_022=param[2],
                   field_sexp_015$3=
                    function(_bjJ_)
                     {function field_sexp_015(param)
                       {if(_bjJ_)
                         {if(_bjJ_[2])throw [0,Assert_failure,_TH_];
                          var x_023=_bjJ_[1];
                          return x_023}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_020$0,sexp_004)}
                      return field_sexp_015},
                   field_sexp_015=field_sexp_015$3(_bjE_);
                  if(caml_string_notequal(_bjF_,cst_abbrv$0))
                   if(caml_string_notequal(_bjF_,cst_is_dst$0))
                    if(caml_string_notequal(_bjF_,cst_utc_offset_in_seconds$0))
                     {if(Sexplib0_Sexp_conv[26][1])
                       extra_013[1] = [0,_bjF_,extra_013[1]]}
                    else
                     if(utc_offset_in_seconds_006[1])
                      duplicates_012[1] = [0,_bjF_,duplicates_012[1]];
                     else
                      {var
                        field_sexp_015$0=field_sexp_015(0),
                        fvalue_019=caml_call1(Stable$6[1][10],field_sexp_015$0);
                       utc_offset_in_seconds_006[1] = [0,fvalue_019]}
                   else
                    if(is_dst_008[1])
                     duplicates_012[1] = [0,_bjF_,duplicates_012[1]];
                    else
                     {var
                       field_sexp_015$1=field_sexp_015(0),
                       fvalue_018=caml_call1(bool_of_sexp,field_sexp_015$1);
                      is_dst_008[1] = [0,fvalue_018]}
                  else
                   if(abbrv_010[1])
                    duplicates_012[1] = [0,_bjF_,duplicates_012[1]];
                   else
                    {var
                      field_sexp_015$2=field_sexp_015(0),
                      fvalue_017=caml_call1(t_of_sexp$34,field_sexp_015$2);
                     abbrv_010[1] = [0,fvalue_017]}
                  var param=tail_022;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_020$0,_bjB_)}
        if(duplicates_012[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_020$0,
                  duplicates_012[1],
                  sexp_004);
        if(extra_013[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_020$0,
                  extra_013[1],
                  sexp_004);
        var
         _bjG_=utc_offset_in_seconds_006[1],
         _bjH_=is_dst_008[1],
         _bjI_=abbrv_010[1];
        if(_bjG_ && _bjH_ && _bjI_)
         {var
           abbrv_011=_bjI_[1],
           is_dst_009=_bjH_[1],
           utc_offset_in_seconds_007=_bjG_[1];
          return [0,utc_offset_in_seconds_007,is_dst_009,abbrv_011]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_020$0,
                 sexp_004,
                 [0,
                  [0,
                   0 === utc_offset_in_seconds_006[1]?1:0,
                   cst_utc_offset_in_seconds$1],
                  [0,
                   [0,0 === is_dst_008[1]?1:0,cst_is_dst$1],
                   [0,[0,0 === abbrv_010[1]?1:0,cst_abbrv$1],0]]])}}
    function sexp_of_t$59(param)
     {var
       abbrv_029=param[3],
       is_dst_027=param[2],
       utc_offset_in_seconds_025=param[1],
       arg_030=caml_call1(sexp_of_t$41,abbrv_029),
       bnds_024=[0,[1,[0,_TI_,[0,arg_030,0]]],0],
       arg_028=caml_call1(sexp_of_bool,is_dst_027),
       bnds_024$0=[0,[1,[0,_TJ_,[0,arg_028,0]]],bnds_024],
       arg_026=caml_call1(Stable$6[1][11],utc_offset_in_seconds_025),
       bnds_024$1=[0,[1,[0,_TK_,[0,arg_026,0]]],bnds_024$0];
      return [1,bnds_024$1]}
    var
     _TL_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_time_in_seconds_since_epoc,Stable$6[1][5]],
         [0,[0,cst_seconds,bin_shape_int],0]]),
     _TM_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$165),0,_TL_],0],
     _TN_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_zone_ml_76_8),
     group$98=caml_call2(Bin_prot_Shape[6],_TN_,_TM_),
     _TO_=caml_call1(Bin_prot_Shape[2][1],cst_t$166),
     bin_shape_t$85=caml_call1(caml_call2(Bin_prot_Shape[14],group$98,_TO_),0);
    function bin_size_t$62(param)
     {var
       v2=param[2],
       v1=param[1],
       _bjz_=caml_call1(Stable$6[1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_bjz_),
       _bjA_=caml_call1(bin_size_t$49,v2);
      return caml_call2(Bin_prot_Common[23],size,_bjA_)}
    function bin_write_t$63(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(Stable$6[1][2],buf,pos,v1);
      return caml_call3(bin_write_t$49,buf,pos$0,v2)}
    function bin_read_t$126(buf,pos_ref)
     {var
       v_time_in_seconds_since_epoch=caml_call2(Stable$6[1][3],buf,pos_ref),
       v_seconds=caml_call2(bin_read_t$100,buf,pos_ref);
      return [0,v_time_in_seconds_since_epoch,v_seconds]}
    function t_of_sexp$52(sexp_032)
     {if(0 === sexp_032[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_045,sexp_032);
      var
       field_sexps_033=sexp_032[1],
       time_in_seconds_since_epoch_03=[0,0],
       seconds_036=[0,0],
       duplicates_038=[0,0],
       extra_039=[0,0],
       param=field_sexps_033;
      for(;;)
       {if(param)
         {var _bjr_=param[1];
          if(1 === _bjr_[0])
           {var _bjs_=_bjr_[1];
            if(_bjs_)
             {var _bjt_=_bjs_[1];
              if(0 === _bjt_[0])
               {var _bju_=_bjs_[2],_bjv_=_bjt_[1],switch$0=0;
                if(! _bju_ || ! _bju_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_047=param[2],
                   field_sexp_041$2=
                    function(_bjy_)
                     {function field_sexp_041(param)
                       {if(_bjy_)
                         {if(_bjy_[2])throw [0,Assert_failure,_TP_];
                          var x_048=_bjy_[1];
                          return x_048}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_045,sexp_032)}
                      return field_sexp_041},
                   field_sexp_041=field_sexp_041$2(_bju_);
                  if(caml_string_notequal(_bjv_,cst_seconds$0))
                   if
                    (caml_string_notequal
                      (_bjv_,cst_time_in_seconds_since_epoc$0))
                    {if(Sexplib0_Sexp_conv[26][1])
                      extra_039[1] = [0,_bjv_,extra_039[1]]}
                   else
                    if(time_in_seconds_since_epoch_03[1])
                     duplicates_038[1] = [0,_bjv_,duplicates_038[1]];
                    else
                     {var
                       field_sexp_041$0=field_sexp_041(0),
                       fvalue_044=caml_call1(Stable$6[1][10],field_sexp_041$0);
                      time_in_seconds_since_epoch_03[1] = [0,fvalue_044]}
                  else
                   if(seconds_036[1])
                    duplicates_038[1] = [0,_bjv_,duplicates_038[1]];
                   else
                    {var
                      field_sexp_041$1=field_sexp_041(0),
                      fvalue_043=caml_call1(int_of_sexp,field_sexp_041$1);
                     seconds_036[1] = [0,fvalue_043]}
                  var param=tail_047;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_045,_bjr_)}
        if(duplicates_038[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_045,
                  duplicates_038[1],
                  sexp_032);
        if(extra_039[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_045,
                  extra_039[1],
                  sexp_032);
        var _bjw_=time_in_seconds_since_epoch_03[1],_bjx_=seconds_036[1];
        if(_bjw_ && _bjx_)
         {var seconds_037=_bjx_[1],time_in_seconds_since_epoch_03$0=_bjw_[1];
          return [0,time_in_seconds_since_epoch_03$0,seconds_037]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_045,
                 sexp_032,
                 [0,
                  [0,
                   0 === time_in_seconds_since_epoch_03[1]?1:0,
                   cst_time_in_seconds_since_epoc$1],
                  [0,[0,0 === seconds_036[1]?1:0,cst_seconds$1],0]])}}
    function sexp_of_t$60(param)
     {var
       seconds_052=param[2],
       time_in_seconds_since_epoch_05=param[1],
       arg_053=caml_call1(sexp_of_int,seconds_052),
       bnds_049=[0,[1,[0,_TQ_,[0,arg_053,0]]],0],
       arg_051=caml_call1(Stable$6[1][11],time_in_seconds_since_epoch_05),
       bnds_049$0=[0,[1,[0,_TR_,[0,arg_051,0]]],bnds_049];
      return [1,bnds_049$0]}
    var
     _TS_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_start_time_in_seconds_sinc,Stable$6[1][5]],
         [0,[0,cst_new_regime,bin_shape_t$84],0]]),
     _TT_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$167),0,_TS_],0],
     _TU_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_zone_ml_84_8),
     group$99=caml_call2(Bin_prot_Shape[6],_TU_,_TT_),
     _TV_=caml_call1(Bin_prot_Shape[2][1],cst_t$168),
     bin_shape_t$86=caml_call1(caml_call2(Bin_prot_Shape[14],group$99,_TV_),0);
    function bin_size_t$63(param)
     {var
       v2=param[2],
       v1=param[1],
       _bjp_=caml_call1(Stable$6[1][1],v1),
       size=caml_call2(Bin_prot_Common[23],0,_bjp_),
       _bjq_=bin_size_t$61(v2);
      return caml_call2(Bin_prot_Common[23],size,_bjq_)}
    function bin_write_t$64(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(Stable$6[1][2],buf,pos,v1);
      return bin_write_t$62(buf,pos$0,v2)}
    function bin_read_t$127(buf,pos_ref)
     {var
       v_start_time_in_seconds_since_=caml_call2(Stable$6[1][3],buf,pos_ref),
       v_new_regime=bin_read_t$125(buf,pos_ref);
      return [0,v_start_time_in_seconds_since_,v_new_regime]}
    function t_of_sexp$53(sexp_055)
     {if(0 === sexp_055[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_068,sexp_055);
      var
       field_sexps_056=sexp_055[1],
       start_time_in_seconds_since_ep=[0,0],
       new_regime_059=[0,0],
       duplicates_061=[0,0],
       extra_062=[0,0],
       param=field_sexps_056;
      for(;;)
       {if(param)
         {var _bjh_=param[1];
          if(1 === _bjh_[0])
           {var _bji_=_bjh_[1];
            if(_bji_)
             {var _bjj_=_bji_[1];
              if(0 === _bjj_[0])
               {var _bjk_=_bji_[2],_bjl_=_bjj_[1],switch$0=0;
                if(! _bjk_ || ! _bjk_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_070=param[2],
                   field_sexp_064$2=
                    function(_bjo_)
                     {function field_sexp_064(param)
                       {if(_bjo_)
                         {if(_bjo_[2])throw [0,Assert_failure,_TW_];
                          var x_071=_bjo_[1];
                          return x_071}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_068,sexp_055)}
                      return field_sexp_064},
                   field_sexp_064=field_sexp_064$2(_bjk_);
                  if(caml_string_notequal(_bjl_,cst_new_regime$0))
                   if
                    (caml_string_notequal
                      (_bjl_,cst_start_time_in_seconds_sinc$0))
                    {if(Sexplib0_Sexp_conv[26][1])
                      extra_062[1] = [0,_bjl_,extra_062[1]]}
                   else
                    if(start_time_in_seconds_since_ep[1])
                     duplicates_061[1] = [0,_bjl_,duplicates_061[1]];
                    else
                     {var
                       field_sexp_064$0=field_sexp_064(0),
                       fvalue_067=caml_call1(Stable$6[1][10],field_sexp_064$0);
                      start_time_in_seconds_since_ep[1] = [0,fvalue_067]}
                  else
                   if(new_regime_059[1])
                    duplicates_061[1] = [0,_bjl_,duplicates_061[1]];
                   else
                    {var
                      field_sexp_064$1=field_sexp_064(0),
                      fvalue_066=t_of_sexp$51(field_sexp_064$1);
                     new_regime_059[1] = [0,fvalue_066]}
                  var param=tail_070;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_068,_bjh_)}
        if(duplicates_061[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_068,
                  duplicates_061[1],
                  sexp_055);
        if(extra_062[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_068,
                  extra_062[1],
                  sexp_055);
        var _bjm_=start_time_in_seconds_since_ep[1],_bjn_=new_regime_059[1];
        if(_bjm_ && _bjn_)
         {var
           new_regime_060=_bjn_[1],
           start_time_in_seconds_since_ep$0=_bjm_[1];
          return [0,start_time_in_seconds_since_ep$0,new_regime_060]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_068,
                 sexp_055,
                 [0,
                  [0,
                   0 === start_time_in_seconds_since_ep[1]?1:0,
                   cst_start_time_in_seconds_sinc$1],
                  [0,[0,0 === new_regime_059[1]?1:0,cst_new_regime$1],0]])}}
    function sexp_of_t$61(param)
     {var
       new_regime_075=param[2],
       start_time_in_seconds_since_ep=param[1],
       arg_076=sexp_of_t$59(new_regime_075),
       bnds_072=[0,[1,[0,_TX_,[0,arg_076,0]]],0],
       arg_074=caml_call1(Stable$6[1][11],start_time_in_seconds_since_ep),
       bnds_072$0=[0,[1,[0,_TY_,[0,arg_074,0]]],bnds_072];
      return [1,bnds_072$0]}
    var
     _TZ_=
      [0,
       [0,cst_last_regime_index,bin_shape_t$83],
       [0,
        [0,cst_default_local_time_type,bin_shape_t$84],
        [0,[0,cst_leap_seconds,bin_shape_list(bin_shape_t$85)],0]]],
     _T0_=[0,[0,cst_transitions,bin_shape_array(bin_shape_t$86)],_TZ_],
     _T1_=[0,[0,cst_digest,bin_shape_option(_Tz_[30])],_T0_],
     _T2_=
      [0,
       [0,cst_name,bin_shape_string],
       [0,[0,cst_original_filename,bin_shape_option(bin_shape_string)],_T1_]],
     _T3_=caml_call1(Bin_prot_Shape[8],_T2_),
     _T4_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$169),0,_T3_],0],
     _T5_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_zone_ml_91_6),
     group$100=caml_call2(Bin_prot_Shape[6],_T5_,_T4_),
     _T6_=caml_call1(Bin_prot_Shape[2][1],cst_t$170),
     bin_shape_t$87=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$100,_T6_),0);
    function bin_size_t$64(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       v5=param[5],
       v7=param[7],
       v6=param[6],
       _bja_=caml_call1(bin_size_t$47,v1),
       size=caml_call2(Bin_prot_Common[23],0,_bja_),
       _bjb_=bin_size_option(bin_size_t$47,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_bjb_),
       _bjc_=bin_size_option(_Tz_[26],v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_bjc_),
       _bjd_=bin_size_array(bin_size_t$63,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_bjd_),
       _bje_=caml_call1(bin_size_t$60,v5),
       size$3=caml_call2(Bin_prot_Common[23],size$2,_bje_),
       _bjf_=bin_size_t$61(v6),
       size$4=caml_call2(Bin_prot_Common[23],size$3,_bjf_),
       _bjg_=bin_size_list(bin_size_t$62,v7);
      return caml_call2(Bin_prot_Common[23],size$4,_bjg_)}
    function bin_write_t$65(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       v5=param[5],
       v7=param[7],
       v6=param[6],
       pos$0=caml_call3(bin_write_t$47,buf,pos,v1),
       pos$3=bin_write_option(bin_write_t$47,buf,pos$0,v2),
       pos$4=bin_write_option(_Tz_[27],buf,pos$3,v3),
       pos$5=bin_write_array(bin_write_t$64,buf,pos$4,v4),
       pos$1=caml_call3(bin_write_t$61,buf,pos$5,v5),
       pos$2=bin_write_t$62(buf,pos$1,v6);
      return bin_write_list(bin_write_t$63,buf,pos$2,v7)}
    var bin_writer_t$76=[0,bin_size_t$64,bin_write_t$65];
    function bin_read_t$128(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_zone_ml_Stable_Fu,pos_ref[1])}
    function bin_read_t$129(buf,pos_ref)
     {var
       v_name=caml_call2(bin_read_t$96,buf,pos_ref),
       v_original_filename=bin_read_option$0(bin_read_t$96,buf,pos_ref),
       v_digest=bin_read_option$0(_Tz_[28],buf,pos_ref),
       v_transitions=bin_read_array$0(bin_read_t$127,buf,pos_ref),
       v_last_regime_index=caml_call2(bin_read_t$124,buf,pos_ref),
       v_default_local_time_type=bin_read_t$125(buf,pos_ref),
       v_leap_seconds=bin_read_list$0(bin_read_t$126,buf,pos_ref);
      return [0,
              v_name,
              v_original_filename,
              v_digest,
              v_transitions,
              v_last_regime_index,
              v_default_local_time_type,
              v_leap_seconds]}
    var
     bin_reader_t$76=[0,bin_read_t$129,bin_read_t$128],
     bin_t$76=[0,bin_shape_t$87,bin_writer_t$76,bin_reader_t$76];
    function t_of_sexp$54(sexp_078)
     {if(0 === sexp_078[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_106,sexp_078);
      var
       field_sexps_079=sexp_078[1],
       name_080=[0,0],
       original_filename_082=[0,0],
       digest_084=[0,0],
       transitions_086=[0,0],
       last_regime_index_088=[0,0],
       default_local_time_type_090=[0,0],
       leap_seconds_092=[0,0],
       duplicates_094=[0,0],
       extra_095=[0,0],
       param=field_sexps_079;
      for(;;)
       {if(param)
         {var _biZ_=param[1];
          if(1 === _biZ_[0])
           {var _bi0_=_biZ_[1];
            if(_bi0_)
             {var _bi1_=_bi0_[1];
              if(0 === _bi1_[0])
               {var _bi2_=_bi0_[2],_bi3_=_bi1_[1],switch$0=0;
                if(! _bi2_ || ! _bi2_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_108=param[2],
                   field_sexp_097$7=
                    function(_bi$_)
                     {function field_sexp_097(param)
                       {if(_bi$_)
                         {if(_bi$_[2])throw [0,Assert_failure,_T7_];
                          var x_109=_bi$_[1];
                          return x_109}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_106,sexp_078)}
                      return field_sexp_097},
                   field_sexp_097=field_sexp_097$7(_bi2_);
                  if
                   (caml_string_notequal(_bi3_,cst_default_local_time_type$0))
                   if(caml_string_notequal(_bi3_,cst_digest$0))
                    if(caml_string_notequal(_bi3_,cst_last_regime_index$0))
                     if(caml_string_notequal(_bi3_,cst_leap_seconds$0))
                      if(caml_string_notequal(_bi3_,cst_name$0))
                       if(caml_string_notequal(_bi3_,cst_original_filename$0))
                        if(caml_string_notequal(_bi3_,cst_transitions$0))
                         {if(Sexplib0_Sexp_conv[26][1])
                           extra_095[1] = [0,_bi3_,extra_095[1]]}
                        else
                         if(transitions_086[1])
                          duplicates_094[1] = [0,_bi3_,duplicates_094[1]];
                         else
                          {var
                            field_sexp_097$0=field_sexp_097(0),
                            fvalue_102=
                             caml_call2(array_of_sexp,t_of_sexp$53,field_sexp_097$0);
                           transitions_086[1] = [0,fvalue_102]}
                       else
                        if(original_filename_082[1])
                         duplicates_094[1] = [0,_bi3_,duplicates_094[1]];
                        else
                         {var
                           field_sexp_097$1=field_sexp_097(0),
                           fvalue_104=
                            caml_call2(option_of_sexp,t_of_sexp$34,field_sexp_097$1);
                          original_filename_082[1] = [0,fvalue_104]}
                      else
                       if(name_080[1])
                        duplicates_094[1] = [0,_bi3_,duplicates_094[1]];
                       else
                        {var
                          field_sexp_097$2=field_sexp_097(0),
                          fvalue_105=caml_call1(t_of_sexp$34,field_sexp_097$2);
                         name_080[1] = [0,fvalue_105]}
                     else
                      if(leap_seconds_092[1])
                       duplicates_094[1] = [0,_bi3_,duplicates_094[1]];
                      else
                       {var
                         field_sexp_097$3=field_sexp_097(0),
                         fvalue_099=
                          caml_call2(list_of_sexp,t_of_sexp$52,field_sexp_097$3);
                        leap_seconds_092[1] = [0,fvalue_099]}
                    else
                     if(last_regime_index_088[1])
                      duplicates_094[1] = [0,_bi3_,duplicates_094[1]];
                     else
                      {var
                        field_sexp_097$4=field_sexp_097(0),
                        fvalue_101=caml_call1(t_of_sexp$50,field_sexp_097$4);
                       last_regime_index_088[1] = [0,fvalue_101]}
                   else
                    if(digest_084[1])
                     duplicates_094[1] = [0,_bi3_,duplicates_094[1]];
                    else
                     {var
                       field_sexp_097$5=field_sexp_097(0),
                       fvalue_103=
                        caml_call2(option_of_sexp,_Tz_[2],field_sexp_097$5);
                      digest_084[1] = [0,fvalue_103]}
                  else
                   if(default_local_time_type_090[1])
                    duplicates_094[1] = [0,_bi3_,duplicates_094[1]];
                   else
                    {var
                      field_sexp_097$6=field_sexp_097(0),
                      fvalue_100=t_of_sexp$51(field_sexp_097$6);
                     default_local_time_type_090[1] = [0,fvalue_100]}
                  var param=tail_108;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_106,_biZ_)}
        if(duplicates_094[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_106,
                  duplicates_094[1],
                  sexp_078);
        if(extra_095[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_106,
                  extra_095[1],
                  sexp_078);
        var
         _bi4_=name_080[1],
         _bi5_=original_filename_082[1],
         _bi6_=digest_084[1],
         _bi7_=transitions_086[1],
         _bi8_=last_regime_index_088[1],
         _bi9_=default_local_time_type_090[1],
         _bi__=leap_seconds_092[1];
        if(_bi4_ && _bi5_ && _bi6_ && _bi7_ && _bi8_ && _bi9_ && _bi__)
         {var
           leap_seconds_093=_bi__[1],
           default_local_time_type_091=_bi9_[1],
           last_regime_index_089=_bi8_[1],
           transitions_087=_bi7_[1],
           digest_085=_bi6_[1],
           original_filename_083=_bi5_[1],
           name_081=_bi4_[1];
          return [0,
                  name_081,
                  original_filename_083,
                  digest_085,
                  transitions_087,
                  last_regime_index_089,
                  default_local_time_type_091,
                  leap_seconds_093]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_106,
                 sexp_078,
                 [0,
                  [0,0 === name_080[1]?1:0,cst_name$1],
                  [0,
                   [0,
                    0 === original_filename_082[1]?1:0,
                    cst_original_filename$1],
                   [0,
                    [0,0 === digest_084[1]?1:0,cst_digest$1],
                    [0,
                     [0,0 === transitions_086[1]?1:0,cst_transitions$1],
                     [0,
                      [0,
                       0 === last_regime_index_088[1]?1:0,
                       cst_last_regime_index$1],
                      [0,
                       [0,
                        0 === default_local_time_type_090[1]?1:0,
                        cst_default_local_time_type$1],
                       [0,[0,0 === leap_seconds_092[1]?1:0,cst_leap_seconds$1],0]]]]]]])}}
    function sexp_of_t$62(param)
     {var
       transitions_117=param[4],
       digest_115=param[3],
       original_filename_113=param[2],
       name_111=param[1],
       last_regime_index_119=param[5],
       leap_seconds_123=param[7],
       default_local_time_type_121=param[6],
       arg_124=caml_call2(sexp_of_list,sexp_of_t$60,leap_seconds_123),
       bnds_110=[0,[1,[0,_T8_,[0,arg_124,0]]],0],
       arg_122=sexp_of_t$59(default_local_time_type_121),
       bnds_110$0=[0,[1,[0,_T9_,[0,arg_122,0]]],bnds_110],
       arg_120=caml_call1(sexp_of_t$58,last_regime_index_119),
       bnds_110$1=[0,[1,[0,_T__,[0,arg_120,0]]],bnds_110$0],
       arg_118=caml_call2(sexp_of_array,sexp_of_t$61,transitions_117),
       bnds_110$2=[0,[1,[0,_T$_,[0,arg_118,0]]],bnds_110$1],
       arg_116=caml_call2(sexp_of_option,_Tz_[3],digest_115),
       bnds_110$3=[0,[1,[0,_Ua_,[0,arg_116,0]]],bnds_110$2],
       arg_114=caml_call2(sexp_of_option,sexp_of_t$41,original_filename_113),
       bnds_110$4=[0,[1,[0,_Ub_,[0,arg_114,0]]],bnds_110$3],
       arg_112=caml_call1(sexp_of_t$41,name_111),
       bnds_110$5=[0,[1,[0,_Uc_,[0,arg_112,0]]],bnds_110$4];
      return [1,bnds_110$5]}
    function compare$55(t1,t2){return caml_call2(compare$37,t1[1],t2[1])}
    function original_filename(zone){return zone[2]}
    function digest(zone){return zone[3]}
    function bool_of_int(i)
     {return caml_call2(Replace_polymorphic_compare$3[6],i,0)}
    var long$0=caml_call1(_Dw_,4);
    function int32_of_char(chr){return caml_call1(of_int_exn$0,chr)}
    function input_long_as_int32(ic)
     {caml_call4(Stdio_In_channel[8],ic,long$0,0,4);
      var
       sb1=
        caml_call2(shift_left$0,int32_of_char(caml_call2(_DD_,long$0,0)),24),
       sb2=
        caml_call2(shift_left$0,int32_of_char(caml_call2(_DD_,long$0,1)),16),
       sb3=caml_call2(shift_left$0,int32_of_char(caml_call2(_DD_,long$0,2)),8),
       sb4=int32_of_char(caml_call2(_DD_,long$0,3)),
       _biY_=caml_call2(bit_or$0,sb3,sb4);
      return caml_call2(bit_or$0,caml_call2(bit_or$0,sb1,sb2),_biY_)}
    function input_long_as_int(ic)
     {return caml_call1(to_int_exn$0,input_long_as_int32(ic))}
    function input_long_as_int63(ic)
     {return caml_call1(of_int32$1,input_long_as_int32(ic))}
    function input_long_long_as_int63(ic)
     {function int63_of_char(chr){return caml_call1(of_int_exn$2,chr)}
      function shift(c,bits)
       {return caml_call2(shift_left$2,int63_of_char(c),bits)}
      var long_long=caml_call1(_Dw_,8);
      caml_call4(Stdio_In_channel[8],ic,long_long,0,8);
      var
       result=shift(caml_call2(_DD_,long_long,0),56),
       result$0=
        caml_call2(bit_or$2,result,shift(caml_call2(_DD_,long_long,1),48)),
       result$1=
        caml_call2(bit_or$2,result$0,shift(caml_call2(_DD_,long_long,2),40)),
       result$2=
        caml_call2(bit_or$2,result$1,shift(caml_call2(_DD_,long_long,3),32)),
       result$3=
        caml_call2(bit_or$2,result$2,shift(caml_call2(_DD_,long_long,4),24)),
       result$4=
        caml_call2(bit_or$2,result$3,shift(caml_call2(_DD_,long_long,5),16)),
       result$5=
        caml_call2(bit_or$2,result$4,shift(caml_call2(_DD_,long_long,6),8)),
       result$6=
        caml_call2
         (bit_or$2,result$5,int63_of_char(caml_call2(_DD_,long_long,7)));
      return result$6}
    function input_list(ic,c,f)
     {var c$0=c,lst=0;
      for(;;)
       {if(caml_call2(Replace_polymorphic_compare$3[4],c$0,0))
         {var
           lst$0=[0,caml_call1(f,ic),lst],
           c$1=c$0 - 1 | 0,
           c$0=c$1,
           lst=lst$0;
          continue}
        return caml_call1(parts,lst)}}
    function input_array(ic,len,f)
     {return caml_call1(of_list,input_list(ic,len,f))}
    function input_regime(ic)
     {var
       utc_offset_in_seconds=input_long_as_int63(ic),
       is_dst=
        bool_of_int
         (caml_call4(_xE_,0,0,0,caml_call1(Stdio_In_channel[10],ic))),
       abbrv_index=caml_call4(_xE_,0,0,0,caml_call1(Stdio_In_channel[10],ic));
      function lt(abbrv){return [0,utc_offset_in_seconds,is_dst,abbrv]}
      return [0,lt,abbrv_index]}
    function input_tz_file_gen(input_transition,input_leap_second,ic)
     {var
       utc_local_count=input_long_as_int(ic),
       std_wall_count=input_long_as_int(ic),
       leap_count=input_long_as_int(ic),
       transition_count=input_long_as_int(ic),
       type_count=input_long_as_int(ic),
       len=input_long_as_int(ic),
       transition_times=input_list(ic,transition_count,input_transition),
       transition_indices=
        input_list
         (ic,
          transition_count,
          function(ic)
           {return caml_call4(_xE_,0,0,0,caml_call1(Stdio_In_channel[10],ic))}),
       regimes=input_list(ic,type_count,input_regime),
       raw_abbrvs=
        input_list
         (ic,
          len,
          function(ic)
           {return caml_call4(_xE_,0,0,0,caml_call1(Stdio_In_channel[9],ic))}),
       buf=caml_call1(Stdlib_Buffer[1],len);
      function _biW_(param,c)
       {var abbrvs=param[2],index=param[1];
        if(c){caml_call2(Stdlib_Buffer[12],buf,c);return [0,index,abbrvs]}
        var
         data=caml_call1(Stdlib_Buffer[2],buf),
         next_index=(index + caml_ml_string_length(data) | 0) + 1 | 0,
         abbrvs$0=caml_call3(set$2,abbrvs,index,data);
        caml_call1(Stdlib_Buffer[8],buf);
        return [0,next_index,abbrvs$0]}
      var
       match=caml_call3(_pI_,raw_abbrvs,[0,0,_vB_[14]],_biW_),
       indexed_abbrvs=match[2],
       _biX_=caml_call1(Stdlib_Buffer[7],buf);
      if(caml_call2(Replace_polymorphic_compare$3[6],_biX_,0))
       throw [0,Invalid_file_format,cst_missing_terminating_charac];
      var leap_seconds=input_list(ic,leap_count,input_leap_second);
      input_array
       (ic,
        std_wall_count,
        function(ic)
         {return bool_of_int
                  (caml_call4(_xE_,0,0,0,caml_call1(Stdio_In_channel[10],ic)))});
      input_array
       (ic,
        utc_local_count,
        function(ic)
         {return bool_of_int
                  (caml_call4(_xE_,0,0,0,caml_call1(Stdio_In_channel[10],ic)))});
      var
       regimes$0=
        caml_call1
         (of_list,
          caml_call2
           (_qF_,
            regimes,
            function(param)
             {var
               abbrv_index=param[2],
               lt=param[1],
               abbrv=caml_call2(find_exn$2,indexed_abbrvs,abbrv_index);
              return caml_call1(lt,abbrv)})),
       l=
        caml_call3
         (_qM_,
          transition_times,
          transition_indices,
          function(time,index)
           {var regime=caml_check_bound(regimes$0,index)[1 + index];
            return [0,time,regime]}),
       acc=0,
       l$0=l;
      for(;;)
       {if(l$0)
         {var
           l$1=l$0[2],
           match$0=l$0[1],
           new_regime=match$0[2],
           start_time_in_seconds_since_ep=match$0[1],
           acc$0=[0,[0,start_time_in_seconds_since_ep,new_regime],acc],
           acc=acc$0,
           l$0=l$1;
          continue}
        var
         transitions=caml_call1(of_list,caml_call1(parts,acc)),
         match$1=caml_call2(find,regimes$0,function(r){return 1 - r[2]});
        if(match$1)
         var ltt=match$1[1],default_local_time_type=ltt;
        else
         var default_local_time_type=caml_check_bound(regimes$0,0)[1];
        return function(name,original_filename,digest)
         {return [0,
                  name,
                  [0,original_filename],
                  [0,digest],
                  transitions,
                  before_first_transition,
                  default_local_time_type,
                  leap_seconds]}}}
    function input_leap_second_gen(input_leap_second,ic)
     {var
       time_in_seconds_since_epoch=caml_call1(input_leap_second,ic),
       seconds=input_long_as_int(ic);
      return [0,time_in_seconds_since_epoch,seconds]}
    function read_header(ic)
     {var buf=caml_call1(_Dw_,4);
      caml_call4(Stdio_In_channel[8],ic,buf,0,4);
      var magic=caml_call1(_DO_,buf);
      if(1 - caml_call2(equal$21,magic,cst_TZif))
       throw [0,Invalid_file_format,cst_magic_characters_TZif_not_];
      var match=caml_call1(Stdio_In_channel[9],ic);
      if(match)
       {var _biT_=match[1],switcher=_biT_ - 50 | 0;
        if(1 < switcher >>> 0)
         {if(-49 <= switcher)
           throw [0,Invalid_file_format,caml_call2(_fx_,_Ud_,_biT_)];
          var _biU_=19227}
        else
         var _biU_=switcher?19229:19228;
        var _biV_=caml_call1(_Dw_,15);
        caml_call4(Stdio_In_channel[8],ic,_biV_,0,15);
        return _biU_}
      throw [0,Invalid_file_format,cst_expected_version_found_not]}
    function input_tz_file_v1(ic)
     {function input_leap_second(_biS_)
       {return input_leap_second_gen(input_long_as_int63,_biS_)}
      return input_tz_file_gen(input_long_as_int63,input_leap_second,ic)}
    function input_tz_file(zonename,filename)
     {try
       {var
         _biN_=Stdio_In_channel[5],
         _biO_=caml_call2(Stdio_In_channel[3],0,filename),
         _biP_=
          caml_call3
           (_Pt_,
            function(ic)
             {var version=read_header(ic);
              if(19228 <= version)
               {input_tz_file_v1(ic);
                var x_125=read_header(ic);
                if(caml_call2(Ppx_compare_lib[1],x_125,version))
                 var match=0;
                else
                 {var switch$0=0;
                  if(19228 === x_125)
                   if(19228 === version)var match=0;else switch$0 = 1;
                  else
                   if(19229 <= x_125)
                    if(19229 === version)var match=0;else switch$0 = 1;
                   else
                    if(19227 === version)var match=0;else switch$0 = 1;
                  if(switch$0)var match=caml_int_compare(x_125,version)}
                var _biQ_=0 === match?1:0;
                if(! _biQ_)throw [0,Assert_failure,_Ue_];
                var
                 input_leap_second=
                  function(_biR_)
                   {return input_leap_second_gen
                            (input_long_long_as_int63,_biR_)},
                 make_zone=
                  input_tz_file_gen
                   (input_long_long_as_int63,input_leap_second,ic)}
              else
               var make_zone=input_tz_file_v1(ic);
              var
               digest=file(filename),
               r=caml_call3(make_zone,zonename,filename,digest);
              return r},
            _biO_,
            _biN_);
        return _biP_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === Invalid_file_format)
         {var reason=exn[2];
          throw [0,Invalid_file_format,caml_call3(_fx_,_Uf_,filename,reason)]}
        throw exn}}
    function of_utc_offset_explicit_name(name,offset)
     {if
       (caml_call2(Replace_polymorphic_compare$3[1],offset,-24)
        &&
        caml_call2(Replace_polymorphic_compare$3[2],offset,24))
       {var
         utc_offset_in_seconds=
          caml_call1(of_int$2,(offset * 60 | 0) * 60 | 0);
        return [0,
                name,
                0,
                0,
                [0],
                before_first_transition,
                [0,utc_offset_in_seconds,0,name],
                0]}
      throw [0,Assert_failure,_Ug_]}
    function of_utc_offset(offset)
     {if(caml_call2(Replace_polymorphic_compare$3[3],offset,0))
       var name=cst_UTC;
      else
       var
        _biL_=caml_call1(_Ff_,offset),
        _biM_=
         caml_call2(Replace_polymorphic_compare$3[5],offset,0)?cst$96:cst$97,
        name=caml_call3(_fx_,_Uh_,_biM_,_biL_);
      return of_utc_offset_explicit_name(name,offset)}
    function sexp_of_t$63(t){return [0,t[1]]}
    var likely_machine_zones=[0,_Ui_],utc=of_utc_offset(0);
    function name$46(zone){return zone[1]}
    function reset_transition_cache(t)
     {t[5] = before_first_transition;return 0}
    function get_regime_exn(t,index)
     {return caml_call2(Replace_polymorphic_compare$3[5],index,0)
              ?t[6]
              :caml_check_bound(t[4],index)[1 + index][2]}
    function effective_start_time(mode,x)
     {return mode?caml_call2(Base_Int63[94][1],x[1],x[2][1]):x[1]}
    function index_lower_bound_contains_sec(t,index,mode,seconds)
     {var _biK_=caml_call2(Replace_polymorphic_compare$3[5],index,0);
      return _biK_
              ?_biK_
              :caml_call2
                (symbol$97,
                 seconds,
                 effective_start_time
                  (mode,caml_check_bound(t[4],index)[1 + index]))}
    function index_upper_bound_contains_sec(t,index,mode,seconds)
     {var
       _biI_=
        caml_call2
         (Replace_polymorphic_compare$3[1],index + 1 | 0,t[4].length - 1);
      if(_biI_)return _biI_;
      var _biJ_=index + 1 | 0;
      return caml_call2
              (symbol$101,
               seconds,
               effective_start_time
                (mode,caml_check_bound(t[4],_biJ_)[1 + _biJ_]))}
    function binary_search_index_of_seconds(t,mode,seconds)
     {var _biG_=125585502;
      function _biH_(transition)
       {return caml_call2
                 (symbol$98,effective_start_time(mode,transition),seconds)
                ?847852583
                :-57574468}
      return caml_call2
              (_xD_,
               caml_call5(binary_search_segmented,0,0,t[4],_biH_,_biG_),
               before_first_transition)}
    function index_of_seconds_since_epoch(t,mode,seconds)
     {var index=t[5];
      if(index_lower_bound_contains_sec(t,index,mode,seconds))
       if(index_upper_bound_contains_sec(t,index,mode,seconds))
        var index$0=index;
       else
        var
         index$1=index + 1 | 0,
         index$2=
          index_upper_bound_contains_sec(t,index$1,mode,seconds)
           ?index$1
           :binary_search_index_of_seconds(t,mode,seconds),
         index$0=index$2;
      else
       var
        index$3=index - 1 | 0,
        index$4=
         index_lower_bound_contains_sec(t,index$3,mode,seconds)
          ?index$3
          :binary_search_index_of_seconds(t,mode,seconds),
        index$0=index$4;
      t[5] = index$0;
      return index$0}
    function of_int63_seconds(_biF_){return _biF_}
    function to_int63_seconds_round_down_ex(_biE_){return _biE_}
    var Span=[0,of_int63_seconds,to_int63_seconds_round_down_ex];
    function of_span_since_epoch(_biD_){return _biD_}
    function to_span_since_epoch(_biC_){return _biC_}
    function of_synthetic_span_since_epoch(_biB_){return _biB_}
    function to_synthetic_span_since_epoch(_biA_){return _biA_}
    var
     Date_and_ofday=
      [0,of_synthetic_span_since_epoch,to_synthetic_span_since_epoch],
     Time_in_seconds=
      [0,Span,Date_and_ofday,of_span_since_epoch,to_span_since_epoch];
    function index(t,time)
     {var _biz_=caml_call1(Time_in_seconds[4],time);
      return index_of_seconds_since_epoch
              (t,0,caml_call1(Time_in_seconds[1][2],_biz_))}
    function index_of_date_and_ofday(t,time)
     {var _biy_=caml_call1(Time_in_seconds[2][2],time);
      return index_of_seconds_since_epoch
              (t,1,caml_call1(Time_in_seconds[1][2],_biy_))}
    function index_has_prev_clock_shift(t,index)
     {var _bix_=caml_call2(Replace_polymorphic_compare$3[1],index,0);
      return _bix_
              ?caml_call2
                (Replace_polymorphic_compare$3[5],index,t[4].length - 1)
              :_bix_}
    function index_has_next_clock_shift(t,index)
     {return index_has_prev_clock_shift(t,index + 1 | 0)}
    function index_prev_clock_shift_time_ex(t,index)
     {var
       transition=caml_check_bound(t[4],index)[1 + index],
       _biw_=caml_call1(Time_in_seconds[1][1],transition[1]);
      return caml_call1(Time_in_seconds[3],_biw_)}
    function index_next_clock_shift_time_ex(t,index)
     {return index_prev_clock_shift_time_ex(t,index + 1 | 0)}
    function index_prev_clock_shift_amount_(t,index)
     {var
       transition=caml_check_bound(t[4],index)[1 + index],
       after=transition[2];
      if(caml_call2(Replace_polymorphic_compare$3[3],index,0))
       var before=t[6];
      else
       var
        _biv_=index - 1 | 0,
        before=caml_check_bound(t[4],_biv_)[1 + _biv_][2];
      var _biu_=caml_call2(symbol$104,after[1],before[1]);
      return caml_call1(Time_in_seconds[1][1],_biu_)}
    function index_next_clock_shift_amount_(t,index)
     {return index_prev_clock_shift_amount_(t,index + 1 | 0)}
    function index_abbreviation_exn(t,index)
     {var regime=get_regime_exn(t,index);return regime[3]}
    function index_offset_from_utc_exn(t,index)
     {var regime=get_regime_exn(t,index);
      return caml_call1(Time_in_seconds[1][1],regime[1])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$274);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Zone$0);
    var
     include$90=
      [0,
       [0,
        [0,
         bin_size_t$64,
         bin_write_t$65,
         bin_read_t$129,
         bin_read_t$128,
         bin_shape_t$87,
         bin_writer_t$76,
         bin_reader_t$76,
         bin_t$76,
         compare$55,
         t_of_sexp$54,
         sexp_of_t$62]]],
     Index=[0,next$0,prev$1],
     include$91=
      [0,
       sexp_of_t$63,
       compare$55,
       input_tz_file,
       likely_machine_zones,
       of_utc_offset,
       of_utc_offset_explicit_name,
       utc,
       name$46,
       original_filename,
       digest,
       Time_in_seconds,
       reset_transition_cache,
       Index,
       index,
       index_of_date_and_ofday,
       index_offset_from_utc_exn,
       index_abbreviation_exn,
       index_has_prev_clock_shift,
       index_prev_clock_shift_time_ex,
       index_prev_clock_shift_amount_,
       index_has_next_clock_shift,
       index_next_clock_shift_time_ex,
       index_next_clock_shift_amount_,
       include$90];
    caml_register_global(5362,include$91,"Core__Zone");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Validated_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$275);
    caml_call1(Expect_test_collector[5][1],cst_core_src_validated_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$276,cst$98);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$277);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Validated_intf$0);
    var Core_Validated_intf=[0];
    caml_register_global(5363,Core_Validated_intf,"Core__Validated_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Validated);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$278);
    caml_call1(Expect_test_collector[5][1],cst_core_src_validated_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$279,cst$99);
    function raw(t){return t}
    function Make$8(Raw)
     {var sexp_of_t=Raw[2];
      function validation_failed(t,error)
       {function _bit_(param)
         {var
           arg2_003=param[3],
           arg1_002=param[2],
           arg0_001=param[1],
           res0_004=caml_call1(Raw[2],arg0_001),
           res1_005=caml_call1(_nA_,arg1_002),
           res2_006=caml_call1(_mz_,arg2_003);
          return [1,[0,res0_004,[0,res1_005,[0,res2_006,0]]]]}
        return caml_call5
                (_nL_,0,0,cst_validation_failed,[0,t,error,Raw[3]],_bit_)}
      function create_exn(t)
       {var _bis_=caml_call1(Raw[4],t),match=caml_call1(Validate[15],_bis_);
        if(0 === match[0])return t;
        var error=match[1];
        return caml_call1(_nW_,validation_failed(t,error))}
      function create(t)
       {var _bir_=caml_call1(Raw[4],t),match=caml_call1(Validate[15],_bir_);
        if(0 === match[0])return [0,t];
        var error=match[1];
        return [1,validation_failed(t,error)]}
      function t_of_sexp(sexp){return create_exn(caml_call1(Raw[1],sexp))}
      function raw(t){return t}
      return [0,sexp_of_t,validation_failed,create_exn,create,t_of_sexp,raw]}
    function Add_bin_io(Raw,Validated)
     {function of_binable(raw)
       {return Raw[13]?caml_call1(Validated[4],raw):raw}
      function to_binable(_biq_){return _biq_}
      var
       include=
        caml_call1
         (caml_call1(_fr_,[0,Raw[5],Raw[1],Raw[2],Raw[3],Raw[4]]),
          [0,to_binable,of_binable]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function Add_compare(Raw,symbol)
     {function compare(a_007,b_008){return caml_call2(Raw[1],a_007,b_008)}
      return [0,compare]}
    function Add_hash(Raw,Validated)
     {function hash_fold_t(state,t)
       {var _bip_=caml_call1(Validated[5],t);
        return caml_call2(Raw[1],state,_bip_)}
      function hash(t)
       {var _bio_=caml_call1(Validated[5],t);return caml_call1(Raw[2],_bio_)}
      return [0,hash_fold_t,hash]}
    function Make_binable$0(Raw)
     {var
       T0=Make$8([0,Raw[9],Raw[10],Raw[11],Raw[12]]),
       sexp_of_t=T0[1],
       validation_failed=T0[2],
       create_exn=T0[3],
       create=T0[4],
       t_of_sexp=T0[5],
       raw=T0[6],
       include=Add_bin_io(Raw,[0,T0[5],T0[1],T0[4],T0[3],T0[6]]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              T0,
              sexp_of_t,
              validation_failed,
              create_exn,
              create,
              t_of_sexp,
              raw,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$280);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Validated$0);
    function _Uj_(Raw,_bin_)
     {var
       Typename_of_t=caml_call1(Typerep_lib_Make_typename[1],[0,name$47]),
       typename_of_t=Typename_of_t[2],
       name_of_t=Typename_of_t[1],
       typerep_of_t=[9,[0,name_of_t,[0,Raw[1]]]];
      return [0,typerep_of_t,typename_of_t]}
    function _Uk_(Raw)
     {var
       T=
        Make_binable$0
         ([0,
           Raw[4],
           Raw[5],
           Raw[6],
           Raw[7],
           Raw[8],
           Raw[9],
           Raw[10],
           Raw[11],
           Raw[12],
           Raw[13],
           Raw[14],
           Raw[15],
           Raw[16]]),
       sexp_of_t=T[2],
       create_exn=T[4],
       create=T[5],
       t_of_sexp=T[6],
       raw=T[7],
       bin_size_t=T[8],
       bin_write_t=T[9],
       bin_read_t=T[10],
       bin_read_t$0=T[11],
       bin_shape_t=T[12],
       bin_writer_t=T[13],
       bin_reader_t=T[14],
       bin_t=T[15],
       compare=
        Add_compare
          ([0,Raw[1],Raw[12],Raw[13],Raw[14],Raw[15]],
           [0,T[6],T[2],T[5],T[4],T[7]])
         [1],
       include=
        Add_hash
         ([0,Raw[2],Raw[3],Raw[12],Raw[13],Raw[14],Raw[15]],
          [0,T[6],T[2],T[5],T[4],T[7]]),
       hash_fold_t=include[1],
       hash=include[2];
      return [0,
              t_of_sexp,
              sexp_of_t,
              create,
              create_exn,
              raw,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              hash_fold_t,
              hash]}
    function _Ul_(_bil_)
     {var _bim_=Make_binable$0(_bil_);
      return [0,
              _bim_[6],
              _bim_[2],
              _bim_[5],
              _bim_[4],
              _bim_[7],
              _bim_[8],
              _bim_[9],
              _bim_[10],
              _bim_[11],
              _bim_[12],
              _bim_[13],
              _bim_[14],
              _bim_[15]]}
    var
     Core_Validated=
      [0,
       raw,
       function(_bij_)
        {var _bik_=Make$8(_bij_);
         return [0,_bik_[5],_bik_[1],_bik_[4],_bik_[3],_bik_[6]]},
       _Ul_,
       _Uk_,
       Add_bin_io,
       Add_compare,
       Add_hash,
       _Uj_];
    caml_register_global(5364,Core_Validated,"Core__Validated");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Type_equal);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$281);
    caml_call1(Expect_test_collector[5][1],cst_core_src_type_equal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$282,cst$100);
    var
     refl=include$92[2],
     sym=include$92[3],
     trans=include$92[4],
     conv=include$92[5],
     detuple2=include$92[9],
     tuple2$2=include$92[10],
     Id=include$92[12],
     sexp_of_t$64=Id[1],
     uid=Id[3],
     create$14=Id[4],
     hash$29=Id[5],
     name$48=Id[6],
     to_sexp=Id[7],
     hash_fold_t$29=Id[8],
     same=Id[9],
     same_witness=Id[10],
     same_witness_exn=Id[11],
     include$93=include$92[12][2],
     t_of_sexp$55=include$93[3],
     sexp_of_t$65=include$93[4],
     t_of_sexp$56=include$92[12][2][3],
     sexp_of_t$66=include$92[12][2][4],
     _Uo_=include$92[12][2],
     _Um_=include$92[1],
     _Un_=[0,t_of_sexp$56,sexp_of_t$66],
     _Up_=
      [0,
       _Uo_[5],
       _Uo_[6],
       _Uo_[7],
       _Uo_[8],
       _Uo_[9],
       _Uo_[10],
       _Uo_[11],
       _Uo_[12],
       _Uo_[13],
       _Uo_[14],
       _Uo_[15],
       _Uo_[16],
       _Uo_[17],
       _Uo_[18],
       _Uo_[19],
       _Uo_[20]],
     _Uq_=function(_bii_){return _w5_(_Up_,_bii_)}(_Un_),
     symbol$140=_Uq_[1],
     symbol$141=_Uq_[2],
     symbol$142=_Uq_[3],
     symbol$143=_Uq_[4],
     symbol$144=_Uq_[5],
     symbol$145=_Uq_[6],
     equal$27=_Uq_[7],
     min$13=_Uq_[9],
     max$13=_Uq_[10],
     ascending$12=_Uq_[11],
     descending$12=_Uq_[12],
     between$12=_Uq_[13],
     clamp_exn$12=_Uq_[14],
     clamp$12=_Uq_[15],
     comparator$17=_Uq_[16],
     validate_lbound$11=_Uq_[17],
     validate_ubound$11=_Uq_[18],
     validate_bound$11=_Uq_[19],
     Replace_polymorphic_compare$9=_Uq_[20],
     Map$14=_Uq_[21],
     Set$14=_Uq_[22],
     _Ur_=include$92[12][2],
     include$94=Make$4([0,_Ur_[1],_Ur_[3],_Ur_[12],_Ur_[4],_Ur_[2]]),
     compare$56=include$94[1],
     hash_fold_t$30=include$94[2],
     hash$30=include$94[3],
     hashable$12=include$94[4],
     Table$12=include$94[5],
     Hash_set$12=include$94[6],
     Hash_queue$11=include$94[7],
     Uid=
      [0,
       t_of_sexp$55,
       sexp_of_t$65,
       symbol$140,
       symbol$141,
       symbol$142,
       symbol$143,
       symbol$144,
       symbol$145,
       equal$27,
       min$13,
       max$13,
       ascending$12,
       descending$12,
       between$12,
       clamp_exn$12,
       clamp$12,
       comparator$17,
       validate_lbound$11,
       validate_ubound$11,
       validate_bound$11,
       Replace_polymorphic_compare$9,
       Map$14,
       Set$14,
       compare$56,
       hash_fold_t$30,
       hash$30,
       hashable$12,
       Table$12,
       Hash_set$12,
       Hash_queue$11],
     Id$0=
      [0,
       sexp_of_t$64,
       uid,
       create$14,
       hash$29,
       name$48,
       to_sexp,
       hash_fold_t$29,
       same,
       same_witness,
       same_witness_exn,
       Uid];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$283);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Type_equal$0);
    var Core_Type_equal=[0,_Um_,refl,sym,trans,conv,detuple2,tuple2$2,Id$0];
    caml_register_global(5366,Core_Type_equal,"Core__Type_equal");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Type_equal_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$284);
    caml_call1(Expect_test_collector[5][1],cst_core_src_type_equal_intf_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$285,cst$101);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$286);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Type_equal_intf$0);
    var Core_Type_equal_intf=[0];
    caml_register_global(5367,Core_Type_equal_intf,"Core__Type_equal_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Univ_map_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$287);
    caml_call1(Expect_test_collector[5][1],cst_core_src_univ_map_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$288,cst$102);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$289);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Univ_map_intf$0);
    var Core_Univ_map_intf=[0];
    caml_register_global(5368,Core_Univ_map_intf,"Core__Univ_map_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Univ_map);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$290);
    caml_call1(Expect_test_collector[5][1],cst_core_src_univ_map_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$291,cst$103);
    function Make1$0(Key,Data)
     {var sexp_of_t=Key[1];
      function sexp_of_type_id(type_id)
       {var _bid_=0,_bie_=0;
        if(_e8_)
         var _bif_=_Us_;
        else
         var
          _bih_=caml_call1(Id$0[2],type_id),
          _bif_=caml_call1(Id$0[11][2],_bih_);
        var
         _big_=
          [0,[1,[0,_Ut_,[0,caml_call1(sexp_of_t$35,_bif_),_bie_]]],_bid_];
        return [1,
                [0,
                 [1,
                  [0,
                   _Uu_,
                   [0,caml_call1(sexp_of_t$41,caml_call1(Id$0[5],type_id)),0]]],
                 _big_]]}
      function type_id(key)
       {var type_id1=caml_call1(Key[2],key),type_id2=caml_call1(Key[2],key);
        if(caml_call2(Id$0[8],type_id1,type_id2))return type_id1;
        var
         _bh__=[0,[1,[0,_Uv_,[0,sexp_of_type_id(type_id2),0]]],0],
         _bh$_=[0,[1,[0,_Uw_,[0,sexp_of_type_id(type_id1),0]]],_bh__],
         _bia_=0;
        function _bib_(param){return _Ux_}
        var
         _bic_=
          [0,[1,[0,_Uy_,[0,caml_call2(Key[1],_bib_,key),_bia_]]],_bh$_];
        return caml_call1
                (_nX_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Key_type_id_must_not_provi),
                   _bic_]])}
      var Key$0=[0,sexp_of_t,sexp_of_type_id,type_id];
      function name_of_key(key)
       {var _bh9_=caml_call1(Key$0[3],key);return caml_call1(Id$0[5],_bh9_)}
      function uid_of_key(key)
       {var _bh8_=caml_call1(Key$0[3],key);return caml_call1(Id$0[2],_bh8_)}
      function sexp_of_t$0(sexp_of_a,param)
       {var
         data=param[2],
         key=param[1],
         _bh6_=caml_call1(Key$0[3],key),
         _bh7_=caml_call1(Id$0[6],_bh6_);
        return caml_call3(Data[1],sexp_of_a,_bh7_,data)}
      function type_id_name(param){var key=param[1];return name_of_key(key)}
      function type_id_uid(param){var key=param[1];return uid_of_key(key)}
      function compare(t1,t2)
       {var
         _bh3_=type_id_name(t2),
         c=caml_call2(compare$37,type_id_name(t1),_bh3_);
        if(caml_call2(_Nt_,c,0))return c;
        var _bh4_=type_id_uid(t2),_bh5_=type_id_uid(t1);
        return caml_call2(Id$0[11][24],_bh5_,_bh4_)}
      var Packed=[0,sexp_of_t$0,type_id_name,type_id_uid,compare];
      function to_alist(t)
       {var _bh2_=Packed[4];
        return caml_call2(_qr_,caml_call1(data$1,t),_bh2_)}
      function sexp_of_t$1(sexp_of_a,t)
       {function _bh1_(packed){return [0,caml_call1(Packed[2],packed),packed]}
        var x_008=caml_call2(_qF_,to_alist(t),_bh1_);
        return caml_call2
                (sexp_of_list,
                 function(param)
                  {var
                    arg1_005=param[2],
                    arg0_004=param[1],
                    res0_006=caml_call1(sexp_of_t$41,arg0_004),
                    res1_007=caml_call2(Packed[1],sexp_of_a,arg1_005);
                   return [1,[0,res0_006,[0,res1_007,0]]]},
                 x_008)}
      function invariant(t)
       {function _bhY_(param)
         {return caml_call2
                  (iteri$2,
                   t,
                   function(key,data)
                    {var _bh0_=caml_call1(Packed[3],data);
                     if(caml_call2(Id$0[11][9],key,_bh0_))return 0;
                     throw [0,Assert_failure,_Uz_]})}
        function _bhZ_(x_009)
         {return sexp_of_t$1(function(param){return _UA_},x_009)}
        return caml_call4(Base_Invariant[1],_UB_,t,_bhZ_,_bhY_)}
      function set(t,key,data)
       {return caml_call3(set$2,t,uid_of_key(key),[0,key,data])}
      function mem_by_id(t,id){return caml_call2(mem$3,t,id)}
      function mem(t,key){return mem_by_id(t,uid_of_key(key))}
      function remove_by_id(t,id){return caml_call2(remove$2,t,id)}
      function remove(t,key){return remove_by_id(t,uid_of_key(key))}
      var empty=Id$0[11][22][3];
      function singleton(key,data)
       {var _bhX_=uid_of_key(key);
        return caml_call2(Id$0[11][22][4],_bhX_,[0,key,data])}
      function find(t,key)
       {var match=caml_call2(find$3,t,uid_of_key(key));
        if(match)
         {var
           match$0=match[1],
           value=match$0[2],
           key$0=match$0[1],
           _bhV_=caml_call1(Key$0[3],key$0),
           _bhW_=caml_call1(Key$0[3],key);
          caml_call2(Id$0[10],_bhW_,_bhV_);
          return [0,value]}
        return 0}
      function find_exn(t,key)
       {var match=find(t,key);
        if(match){var data=match[1];return data}
        return caml_call3(failwithf$0,_UC_,name_of_key(key),0)}
      function add(t,key,data)
       {return mem(t,key)?-1024851605:[0,17724,set(t,key,data)]}
      function add_exn(t,key,data)
       {var match=add(t,key,data);
        if(typeof match === "number")
         return caml_call3(failwithf$0,_UD_,name_of_key(key),0);
        var t$0=match[2];
        return t$0}
      function change_exn(t,key,update)
       {var match=find(t,key);
        if(match){var data=match[1];return set(t,key,caml_call1(update,data))}
        return caml_call3(failwithf$0,_UE_,name_of_key(key),0)}
      function change(t,key,update)
       {var orig=find(t,key),next=caml_call1(update,orig);
        if(next){var data=next[1];return set(t,key,data)}
        return caml_call1(_xZ_,orig)?t:remove(t,key)}
      function update(t,key,f)
       {return change(t,key,function(data){return [0,caml_call1(f,data)]})}
      function of_alist_exn(t)
       {var
         _bhU_=
          caml_call2(_qF_,t,function(p){return [0,caml_call1(Packed[3],p),p]});
        return caml_call1(Id$0[11][22][9],_bhU_)}
      return [0,
              Key$0,
              name_of_key,
              uid_of_key,
              Packed,
              to_alist,
              sexp_of_t$1,
              invariant,
              set,
              mem_by_id,
              mem,
              remove_by_id,
              remove,
              empty,
              singleton,
              is_empty$4,
              find,
              find_exn,
              add,
              add_exn,
              change_exn,
              change,
              update,
              of_alist_exn]}
    function Make$9(Key,Data)
     {function sexp_of_t(of_a_011,of_a_012,x_013)
       {return caml_call2(Data[1],of_a_012,x_013)}
      var M=Make1$0(Key,[0,sexp_of_t]);
      function sexp_of_t$0(x_014){return caml_call2(M[6],sexp_of_unit,x_014)}
      var
       invariant=M[7],
       empty=M[13],
       singleton=M[14],
       is_empty=M[15],
       set=M[8],
       mem=M[10],
       mem_by_id=M[9],
       find=M[16],
       find_exn=M[17],
       add=M[18],
       add_exn=M[19],
       change=M[21],
       change_exn=M[20],
       update=M[22],
       remove=M[12],
       remove_by_id=M[11],
       Packed=[0];
      function to_alist(t)
       {function _bhT_(param)
         {var data=param[2],key=param[1];return [0,key,data]}
        return caml_call2(_qF_,caml_call1(M[5],t),_bhT_)}
      function of_alist_exn(t)
       {var
         _bhS_=
          caml_call2
           (_qF_,
            t,
            function(param)
             {var data=param[2],key=param[1];return [0,key,data]});
        return caml_call1(M[23],_bhS_)}
      return [0,
              M,
              sexp_of_t$0,
              Key,
              invariant,
              empty,
              singleton,
              is_empty,
              set,
              mem,
              mem_by_id,
              find,
              find_exn,
              add,
              add_exn,
              change,
              change_exn,
              update,
              remove,
              remove_by_id,
              Packed,
              to_alist,
              of_alist_exn]}
    var sexp_of_t$67=Id$0[1];
    function type_id(_bhR_){return _bhR_}
    var Type_id_key=[0,sexp_of_t$67,type_id];
    function sexp_of_t$68(of_a_017){return of_a_017}
    var
     _UF_=[0,sexp_of_t$68],
     _UG_=function(_bhQ_){return Make$9(Type_id_key,_bhQ_)}(_UF_),
     of_alist_exn$5=_UG_[22],
     to_alist$4=_UG_[21],
     Packed=_UG_[20],
     remove_by_id=_UG_[19],
     remove$10=_UG_[18],
     update$4=_UG_[17],
     change_exn=_UG_[16],
     change$4=_UG_[15],
     add_exn$4=_UG_[14],
     add$10=_UG_[13],
     find_exn$9=_UG_[12],
     find$10=_UG_[11],
     mem_by_id=_UG_[10],
     mem$10=_UG_[9],
     set$8=_UG_[8],
     is_empty$12=_UG_[7],
     singleton$9=_UG_[6],
     empty$9=_UG_[5],
     invariant$11=_UG_[4],
     sexp_of_t$69=_UG_[2];
    function create$15(default$0,name,sexp_of)
     {return [0,caml_call2(Id$0[3],name,sexp_of),default$0]}
    function id(t){return t[1]}
    var Key=[0,create$15,id];
    function find$11(t,param)
     {var default$0=param[2],key=param[1];
      return caml_call2(_xD_,caml_call2(find$10,t,key),default$0)}
    function set$9(t,param,data)
     {var key=param[1];return caml_call3(set$8,t,key,data)}
    function change$5(t,key,update)
     {return set$9(t,key,caml_call1(update,find$11(t,key)))}
    function create$16(init,f,name,sexp_of)
     {return [0,caml_call3(Key[1],init,name,sexp_of),f]}
    function id$0(t){return caml_call1(Key[2],t[1])}
    var Key$0=[0,create$16,id$0];
    function find$12(t,param){var key=param[1];return find$11(t,key)}
    function set$10(t,param,data){var key=param[1];return set$9(t,key,data)}
    function change$6(t,param,update)
     {var key=param[1];return change$5(t,key,update)}
    function add$11(t,param,data)
     {var f=param[2],key=param[1];
      return change$5(t,key,function(acc){return caml_call2(f,acc,data)})}
    function create$17(name,sexp_of)
     {var _bhO_=caml_call1(sexp_of_list,sexp_of);
      function _bhP_(xs,x){return [0,x,xs]}
      return caml_call4(Key$0[1],0,_bhP_,name,_bhO_)}
    var
     id$1=Key$0[2],
     Key$1=[0,create$17,id$1],
     Multi=[0,Key$1,set$10,find$12,add$11,change$6];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$292);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Univ_map$0);
    var
     With_fold=[0,Key$0,set$10,find$12,add$11,change$6],
     With_default=[0,Key,set$9,find$11,change$5];
    function Merge1(Key,_bhG_,_bhF_,Output_data)
     {function merge(t1,t2,param)
       {var f=param[1];
        function f$0(key,merge_result)
         {function _bhN_(data){return [0,key,data]}
          return caml_call2(_xy_,caml_call2(f,key,merge_result),_bhN_)}
        return caml_call3
                (merge$2,
                 t1,
                 t2,
                 function(param,_bhH_)
                  {var _bhI_=_bhH_[1];
                   if(737457313 === _bhI_)
                    {var
                      _bhJ_=_bhH_[2],
                      _bhK_=_bhJ_[2],
                      right_data=_bhK_[2],
                      right_key=_bhK_[1],
                      match=_bhJ_[1],
                      left_data=match[2],
                      left_key=match[1],
                      _bhL_=caml_call1(Key[2],right_key),
                      _bhM_=caml_call1(Key[2],left_key);
                     caml_call2(Id$0[10],_bhM_,_bhL_);
                     return f$0(left_key,[0,737457313,[0,left_data,right_data]])}
                   if(847852583 <= _bhI_)
                    {var match$0=_bhH_[2],data=match$0[2],key=match$0[1];
                     return f$0(key,[0,847852583,data])}
                   var match$1=_bhH_[2],data$0=match$1[2],key$0=match$1[1];
                   return f$0(key$0,[0,-57574468,data$0])})}
      return [0,merge]}
    function Merge(Key,_bhx_,_bhw_,Output_data)
     {function merge(t1,t2,param)
       {var f=param[1];
        function f$0(key,merge_result)
         {function _bhE_(data){return [0,key,data]}
          return caml_call2(_xy_,caml_call2(f,key,merge_result),_bhE_)}
        return caml_call3
                (merge$2,
                 t1,
                 t2,
                 function(param,_bhy_)
                  {var _bhz_=_bhy_[1];
                   if(737457313 === _bhz_)
                    {var
                      _bhA_=_bhy_[2],
                      _bhB_=_bhA_[2],
                      right_data=_bhB_[2],
                      right_key=_bhB_[1],
                      match=_bhA_[1],
                      left_data=match[2],
                      left_key=match[1],
                      _bhC_=caml_call1(Key[2],right_key),
                      _bhD_=caml_call1(Key[2],left_key);
                     caml_call2(Id$0[10],_bhD_,_bhC_);
                     return f$0(left_key,[0,737457313,[0,left_data,right_data]])}
                   if(847852583 <= _bhz_)
                    {var match$0=_bhy_[2],data=match$0[2],key=match$0[1];
                     return f$0(key,[0,847852583,data])}
                   var match$1=_bhy_[2],data$0=match$1[2],key$0=match$1[1];
                   return f$0(key$0,[0,-57574468,data$0])})}
      return [0,merge]}
    function Make1$1(_bht_,_bhs_)
     {var _bhu_=Make1$0(_bht_,_bhs_),_bhv_=_bhu_[1];
      return [0,
              _bhu_[6],
              [0,_bhv_[1],_bhv_[3]],
              _bhu_[7],
              _bhu_[13],
              _bhu_[14],
              _bhu_[15],
              _bhu_[8],
              _bhu_[10],
              _bhu_[9],
              _bhu_[16],
              _bhu_[17],
              _bhu_[18],
              _bhu_[19],
              _bhu_[21],
              _bhu_[20],
              _bhu_[22],
              _bhu_[12],
              _bhu_[11],
              [0],
              _bhu_[5],
              _bhu_[23]]}
    function Make$10(_bhq_,_bhp_)
     {var _bhr_=Make$9(_bhq_,_bhp_);
      return [0,
              _bhr_[2],
              _bhr_[3],
              _bhr_[4],
              _bhr_[5],
              _bhr_[6],
              _bhr_[7],
              _bhr_[8],
              _bhr_[9],
              _bhr_[10],
              _bhr_[11],
              _bhr_[12],
              _bhr_[13],
              _bhr_[14],
              _bhr_[15],
              _bhr_[16],
              _bhr_[17],
              _bhr_[18],
              _bhr_[19],
              _bhr_[20],
              _bhr_[21],
              _bhr_[22]]}
    var
     include$95=
      [0,
       Type_id_key,
       sexp_of_t$69,
       invariant$11,
       empty$9,
       singleton$9,
       is_empty$12,
       set$8,
       mem$10,
       mem_by_id,
       find$10,
       find_exn$9,
       add$10,
       add_exn$4,
       change$4,
       change_exn,
       update$4,
       remove$10,
       remove_by_id,
       Packed,
       to_alist$4,
       of_alist_exn$5,
       Make$10,
       Make1$1,
       Merge,
       Merge1,
       With_default,
       With_fold,
       Multi];
    caml_register_global(5370,include$95,"Core__Univ_map");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Unit_of_time);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$293);
    caml_call1(Expect_test_collector[5][1],cst_core_src_unit_of_time_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$294,cst$104);
    function t_of_sexp$57(sexp_004)
     {if(0 === sexp_004[0])
       {var
         _bhj_=sexp_004[1],
         _bhk_=caml_string_compare(_bhj_,cst_day),
         switch$0=0;
        if(0 <= _bhk_)
         if(0 < _bhk_)
          if(caml_string_notequal(_bhj_,cst_hour))
           if(caml_string_notequal(_bhj_,cst_microsecond))
            if(caml_string_notequal(_bhj_,cst_millisecond))
             if(caml_string_notequal(_bhj_,cst_minute))
              if(caml_string_notequal(_bhj_,cst_nanosecond))
               {if(! caml_string_notequal(_bhj_,cst_second$1))switch$0 = 4}
              else
               switch$0 = 1;
             else
              switch$0 = 5;
            else
             switch$0 = 3;
           else
            switch$0 = 2;
          else
           switch$0 = 6;
         else
          switch$0 = 7;
        else
         if(caml_string_notequal(_bhj_,cst_Day))
          if(caml_string_notequal(_bhj_,cst_Hour))
           if(caml_string_notequal(_bhj_,cst_Microsecond))
            if(caml_string_notequal(_bhj_,cst_Millisecond))
             if(caml_string_notequal(_bhj_,cst_Minute))
              if(caml_string_notequal(_bhj_,cst_Nanosecond))
               {if(! caml_string_notequal(_bhj_,cst_Second$3))switch$0 = 4}
              else
               switch$0 = 1;
             else
              switch$0 = 5;
            else
             switch$0 = 3;
           else
            switch$0 = 2;
          else
           switch$0 = 6;
         else
          switch$0 = 7;
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6
          }}
      else
       {var _bhl_=sexp_004[1];
        if(! _bhl_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_003$0,sexp_004);
        var _bhm_=_bhl_[1];
        if(0 !== _bhm_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_003$0,sexp_004);
        var
         _bhn_=_bhm_[1],
         _bho_=caml_string_compare(_bhn_,cst_day$0),
         switch$1=0;
        if(0 <= _bho_)
         if(0 < _bho_)
          if(caml_string_notequal(_bhn_,cst_hour$0))
           if(caml_string_notequal(_bhn_,cst_microsecond$0))
            if(caml_string_notequal(_bhn_,cst_millisecond$0))
             if(caml_string_notequal(_bhn_,cst_minute$0))
              if(caml_string_notequal(_bhn_,cst_nanosecond$0))
               {if(! caml_string_notequal(_bhn_,cst_second$2))switch$1 = 4}
              else
               switch$1 = 1;
             else
              switch$1 = 5;
            else
             switch$1 = 3;
           else
            switch$1 = 2;
          else
           switch$1 = 6;
         else
          switch$1 = 7;
        else
         if(caml_string_notequal(_bhn_,cst_Day$0))
          if(caml_string_notequal(_bhn_,cst_Hour$0))
           if(caml_string_notequal(_bhn_,cst_Microsecond$0))
            if(caml_string_notequal(_bhn_,cst_Millisecond$0))
             if(caml_string_notequal(_bhn_,cst_Minute$0))
              if(caml_string_notequal(_bhn_,cst_Nanosecond$0))
               {if(! caml_string_notequal(_bhn_,cst_Second$4))switch$1 = 4}
              else
               switch$1 = 1;
             else
              switch$1 = 5;
            else
             switch$1 = 3;
           else
            switch$1 = 2;
          else
           switch$1 = 6;
         else
          switch$1 = 7;
        switch(switch$1)
         {case 1:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$0,sexp_004);
          case 2:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$0,sexp_004);
          case 3:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$0,sexp_004);
          case 4:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$0,sexp_004);
          case 5:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$0,sexp_004);
          case 6:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$0,sexp_004);
          case 7:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$0,sexp_004)
          }}
      return caml_call2
              (Sexplib0_Sexp_conv_error[8],error_source_003$0,sexp_004)}
    function sexp_of_t$70(param)
     {switch(param)
       {case 0:return _UH_;
        case 1:return _UI_;
        case 2:return _UJ_;
        case 3:return _UK_;
        case 4:return _UL_;
        case 5:return _UM_;
        default:return _UN_}}
    var compare$57=caml_int_compare;
    function hash_fold_t$31(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        default:return caml_call2(Base_Hash[3],hsv,6)}}
    function hash$31(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bhi_=hash_fold_t$31(hsv,x);
      return caml_call1(Base_Hash[9],_bhi_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$295);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Unit_of_time$0);
    var
     Core_Unit_of_time=
      [0,
       t_of_sexp$57,
       sexp_of_t$70,
       compare$57,
       unit_of_time_list,
       hash_fold_t$31,
       hash$31];
    caml_register_global(5371,Core_Unit_of_time,"Core__Unit_of_time");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Unique_id_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$296);
    caml_call1(Expect_test_collector[5][1],cst_core_src_unique_id_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$297,cst$105);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$298);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Unique_id_intf$0);
    var Core_Unique_id_intf=[0];
    caml_register_global(5372,Core_Unique_id_intf,"Core__Unique_id_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Unique_id);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$299);
    caml_call1(Expect_test_collector[5][1],cst_core_src_unique_id_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$300,cst$106);
    function race_free_create_loop(cell,make)
     {for(;;)
       {var x=cell[1],new_x=caml_call1(make,x);
        if(caml_call2(_Pp_,cell[1],x)){cell[1] = new_x;return x}
        continue}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$301);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Unique_id$0);
    function _UO_(_bhh_)
     {var current=[0,zero$4];
      function create(param){return race_free_create_loop(current,succ$1)}
      return [0,
              bin_size_t$52,
              bin_write_t$52,
              bin_read_t$106,
              bin_read_t$107,
              bin_shape_t$67,
              bin_writer_t$60,
              bin_reader_t$60,
              bin_t$60,
              _Ki_,
              _Kj_,
              _e2_,
              _eF_,
              symbol$97,
              symbol$98,
              symbol$99,
              symbol$100,
              symbol$101,
              symbol$102,
              equal$25,
              compare$47,
              min$9,
              max$9,
              ascending$8,
              descending$8,
              between$8,
              clamp_exn$8,
              clamp$8,
              validate_lbound$7,
              validate_ubound$7,
              validate_bound$7,
              include$68,
              comparator$13,
              Map$10,
              Set$10,
              hash_fold_t$23,
              _Kh_,
              hashable$8,
              Table$8,
              Hash_set$8,
              Hash_queue$7,
              of_int_exn$2,
              to_int_exn$2,
              _Kk_,
              _Kl_,
              create]}
    var
     Core_Unique_id=
      [0,
       function(_bhg_)
        {var current=[0,zero$1];
         function create(param){return race_free_create_loop(current,next$0)}
         return [0,
                 bin_size_t$49,
                 bin_write_t$49,
                 bin_read_t$100,
                 bin_read_t$101,
                 bin_shape_t$57,
                 bin_writer_t$50,
                 bin_reader_t$50,
                 bin_t$50,
                 int_of_sexp,
                 sexp_of_int,
                 typerep_of_t$9,
                 typename_of_t$9,
                 symbol$77,
                 symbol$76,
                 symbol$75,
                 symbol$74,
                 symbol$73,
                 symbol$72,
                 equal$24,
                 compare$42,
                 min$6,
                 max$6,
                 ascending$5,
                 descending$5,
                 between$5,
                 clamp_exn$5,
                 clamp$5,
                 validate_lbound$4,
                 validate_ubound$4,
                 validate_bound$4,
                 Replace_polymorphic_compare$3,
                 comparator$9,
                 Map$6,
                 Set$6,
                 hash_fold_t$19,
                 hash$16,
                 hashable$5,
                 Table$5,
                 Hash_set$5,
                 Hash_queue$4,
                 of_int_exn,
                 to_int_exn,
                 of_string$5,
                 to_string$6,
                 create]},
       _UO_];
    caml_register_global(5373,Core_Unique_id,"Core__Unique_id");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Uniform_array);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$302);
    caml_call1(Expect_test_collector[5][1],cst_core_src_uniform_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$303,cst$107);
    var
     t_of_sexp$58=include$96[1],
     sexp_of_t$71=include$96[2],
     t_sexp_grammar$20=include$96[3],
     compare$58=include$96[4],
     invariant$12=include$96[5],
     empty$10=include$96[6],
     create$18=include$96[7],
     singleton$10=include$96[8],
     init$3=include$96[9],
     length$16=include$96[10],
     get$4=include$96[11],
     unsafe_get=include$96[12],
     set$11=include$96[13],
     unsafe_set=include$96[14],
     swap$1=include$96[15],
     unsafe_set_omit_phys_equal_che=include$96[16],
     unsafe_set_with_caml_modify=include$96[17],
     set_with_caml_modify=include$96[18],
     map$22=include$96[19],
     mapi$6=include$96[20],
     iter$18=include$96[21],
     iteri$6=include$96[22],
     foldi$1=include$96[23],
     of_array$4=include$96[24],
     to_array$5=include$96[25],
     of_list$8=include$96[26],
     to_list$8=include$96[27],
     blit$2=include$96[28],
     blito$2=include$96[29],
     unsafe_blit$0=include$96[30],
     sub$2=include$96[31],
     subo$2=include$96[32],
     copy$3=include$96[33],
     unsafe_create_uninitialized=include$96[34],
     create_obj_array=include$96[35],
     unsafe_set_assuming_currently_=include$96[36],
     unsafe_set_int_assuming_curren=include$96[37],
     unsafe_set_int=include$96[38],
     unsafe_clear_if_pointer=include$96[39],
     exists$12=include$96[40],
     for_all$12=include$96[41],
     map2_exn$0=include$96[42],
     min_elt$9=include$96[43],
     max_elt$9=include$96[44],
     include$97=
      caml_call1
       (caml_call1
         (_fq_,
          [0,
           bin_shape_t$12,
           bin_size_t$20,
           bin_write_t$20,
           bin_read_t$44,
           bin_read_t$43]),
        [0,to_array$5,of_array$4]),
     _UP_=include$97[1],
     _UQ_=include$97[2],
     _UR_=include$97[3],
     _US_=include$97[4],
     _UT_=include$97[5],
     _UU_=include$97[6],
     _UV_=include$97[7],
     _UW_=include$97[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$304);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Uniform_array$0);
    var
     Core_Uniform_array=
      [0,
       _UP_,
       _UQ_,
       _UR_,
       _US_,
       _UT_,
       _UU_,
       _UV_,
       _UW_,
       t_of_sexp$58,
       sexp_of_t$71,
       t_sexp_grammar$20,
       compare$58,
       invariant$12,
       empty$10,
       create$18,
       singleton$10,
       init$3,
       length$16,
       get$4,
       unsafe_get,
       set$11,
       unsafe_set,
       swap$1,
       unsafe_set_omit_phys_equal_che,
       unsafe_set_with_caml_modify,
       set_with_caml_modify,
       map$22,
       mapi$6,
       iter$18,
       iteri$6,
       foldi$1,
       of_array$4,
       to_array$5,
       of_list$8,
       to_list$8,
       blit$2,
       blito$2,
       unsafe_blit$0,
       sub$2,
       subo$2,
       copy$3,
       unsafe_create_uninitialized,
       create_obj_array,
       unsafe_set_assuming_currently_,
       unsafe_set_int_assuming_curren,
       unsafe_set_int,
       unsafe_clear_if_pointer,
       exists$12,
       for_all$12,
       map2_exn$0,
       min_elt$9,
       max_elt$9];
    caml_register_global(5375,Core_Uniform_array,"Core__Uniform_array");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Type_immediacy);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$305);
    caml_call1(Expect_test_collector[5][1],cst_core_src_type_immediacy_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$306,cst$108);
    function hash$32(x){return x}
    var Key$2=[0,compare,sexp_of_t$0,hash$32];
    function equal$28(x_005,x_006)
     {var match=caml_int_compare(x_005,x_006);return 0 === match?1:0}
    function to_string$19(param)
     {switch(param)
       {case 0:return cst_Always;
        case 1:return cst_Sometimes;
        case 2:return cst_Never;
        default:return cst_Unknown}}
    function create$19(typename,immediacy,allowed_ints)
     {return [0,
              immediacy,
              allowed_ints,
              caml_call1(Typerep_lib_Typename[10],typename)]}
    function never_with_name(name){return [0,2,0,name]}
    function never(typename){return create$19(typename,2,0)}
    function unknown(typename){return create$19(typename,3,0)}
    var
     option=[0,1,_UX_,cst_option$1],
     list$0=[0,1,_UY_,cst_list$1],
     int32=never(_eI_),
     int64=never(_eH_),
     nativeint=never(_eG_),
     float$0=never(_eD_),
     string$0=never(_eC_),
     bytes=never(_eB_),
     array=never_with_name(cst_array$1),
     ref=never_with_name(cst_ref$1),
     tuple2$3=never_with_name(cst_tuple2),
     tuple3$2=never_with_name(cst_tuple3),
     tuple4$2=never_with_name(cst_tuple4),
     tuple5$2=never_with_name(cst_tuple5),
     function$0=never_with_name(cst_function),
     int$2=create$19(_eJ_,0,1),
     unit$0=create$19(_ez_,0,_UZ_),
     bool$2=create$19(_eA_,0,_U0_),
     char$3=create$19(_eE_,0,_U1_),
     _U2_=caml_call1(Typerep_lib_Type_generic[1][1],[0]),
     Tag_internal=_U2_[1],
     Tag=_U2_[2],
     Variant_internal=_U2_[3],
     Variant=_U2_[4],
     Field_internal=_U2_[5],
     Field=_U2_[6],
     Record_internal=_U2_[7],
     Record=_U2_[8];
    function ref$0(param){return ref}
    function array$0(param){return array}
    function tuple2$4(param,_bhf_){return tuple2$3}
    function tuple3$3(param,_bhe_,_bhd_){return tuple3$2}
    function tuple4$3(param,_bhc_,_bhb_,_bha_){return tuple4$2}
    function tuple5$3(param,_bg$_,_bg__,_bg9_,_bg8_){return tuple5$2}
    function function$1(param,_bg7_){return function$0}
    function option$0(param){return option}
    function list$1(param){return list$0}
    function lazy_t(t)
     {var match=t[1],immediacy=2 === match?2:3 <= match?3:1;
      return [0,immediacy,t[2],cst_lazy_t$1]}
    function possibly_unboxed(typename,child_type)
     {var match=child_type[1];
      return 2 === match?never(typename):unknown(typename)}
    function record(r)
     {if(1 < caml_call1(Record[2],r))return never(caml_call1(Record[1],r));
      var
       match=caml_call2(Record[3],r,0),
       the_only_field=match[1],
       _bg6_=caml_call1(Field[6],the_only_field);
      return possibly_unboxed(caml_call1(Record[1],r),_bg6_)}
    function variant(variant)
     {function _bg1_(param,tag)
       {var
         t=tag[1],
         more=param[3],
         one=param[2],
         no=param[1],
         match=caml_call1(Tag[2],t);
        return 0 === match
                ?[0,[0,tag,no],one,more]
                :1 === match?[0,no,[0,tag,one],more]:[0,no,one,[0,tag,more]]}
      var
       match=caml_call3(Variant[6],variant,_U3_,_bg1_),
       more_arg_list=match[3],
       one_arg_list=match[2],
       no_arg_list=match[1];
      if(no_arg_list)
       {var no_arg_count=caml_call1(include$25[7],no_arg_list);
        if(caml_call1(Variant[4],variant))
         {var
           hash_set=caml_call3(include$33[2],0,[0,no_arg_count * 2 | 0],Key$2),
           _bg2_=
            function(param)
             {var tag=param[1],match=caml_call1(Tag[6],tag);
              if(0 === match[0])throw [0,Assert_failure,_U4_];
              var _bg5_=caml_call1(Tag[5],tag);
              return caml_call2(include$33[22],hash_set,_bg5_)};
          caml_call2(include$25[9],no_arg_list,_bg2_);
          var allowed_ints=[0,hash_set]}
        else
         var allowed_ints=[1,no_arg_count - 1 | 0];
        var switch$0=0;
        if
         (caml_call1(include$25[8],one_arg_list)
          &&
          caml_call1(include$25[8],more_arg_list))
         {var immediacy=0;switch$0 = 1}
        if(! switch$0)var immediacy=1;
        return create$19
                (caml_call1(Variant[1],variant),immediacy,allowed_ints)}
      if(one_arg_list)
       {var _bg3_=one_arg_list[1];
        if(! one_arg_list[2] && ! more_arg_list)
         {var tag=_bg3_[1];
          if(! caml_call1(Variant[4],variant))
           {var _bg4_=caml_call1(Tag[8],tag);
            return possibly_unboxed(caml_call1(Variant[1],variant),_bg4_)}}}
      else
       if(! more_arg_list)return unknown(caml_call1(Variant[1],variant));
      return never(caml_call1(Variant[1],variant))}
    var required=0;
    function create$20(param){return 0}
    var Context=[0,create$20];
    function init$4(param,name){return [0,create$19(name,1,0)]}
    function get_wip_computation(comp){return comp[1]}
    function set_final_computation(r,t){r[1] = t;return t}
    function share(param){return 1}
    var
     Named$2=
      [0,Context,init$4,get_wip_computation,set_final_computation,share],
     Generic=
      caml_call1
       (Typerep_lib_Type_generic[5],
        [0,
         name$49,
         required,
         Tag_internal,
         Tag,
         Variant_internal,
         Variant,
         Field_internal,
         Field,
         Record_internal,
         Record,
         int$2,
         int32,
         int64,
         nativeint,
         char$3,
         float$0,
         string$0,
         bytes,
         bool$2,
         unit$0,
         option$0,
         list$1,
         array$0,
         lazy_t,
         ref$0,
         function$1,
         tuple2$4,
         tuple3$3,
         tuple4$3,
         tuple5$3,
         record,
         variant,
         Named$2]);
    function of_typerep(typerep)
     {var match=caml_call1(Generic[10],typerep),t=match[2];return t}
    function For_all_parameters(M)
     {function witness(typerep1,typerep2)
       {var t1=of_typerep(typerep1),t2=of_typerep(typerep2),i1=t1[1],i2=t2[1];
        if(equal$28(i1,i2))
         {if(equal$28(i1,M[1]))return t1;
          var
           _bgX_=to_string$19(i1),
           _bgY_=to_string$19(M[1]),
           _bgZ_=caml_call1(include$80[1][14],typerep1);
          return caml_call1
                  (_a3_,
                   caml_call4
                    (_fx_,
                     _U5_,
                     caml_call1(Typerep_lib_Typename[10],_bgZ_),
                     _bgY_,
                     _bgX_))}
        var _bg0_=caml_call1(include$80[1][14],typerep1);
        return caml_call1
                (_a3_,
                 caml_call2
                  (_fx_,_U6_,caml_call1(Typerep_lib_Typename[10],_bg0_)))}
      var ra=0,rn=6;
      function For_all_parameters_S1(X)
       {var _bgW_=caml_call1(X[1],rn),t=witness(caml_call1(X[1],ra),_bgW_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S2(X)
       {var
         _bgV_=caml_call2(X[1],rn,rn),
         t=witness(caml_call2(X[1],ra,ra),_bgV_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S3(X)
       {var
         _bgU_=caml_call3(X[1],rn,rn,rn),
         t=witness(caml_call3(X[1],ra,ra,ra),_bgU_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S4(X)
       {var
         _bgT_=caml_call4(X[1],rn,rn,rn,rn),
         t=witness(caml_call4(X[1],ra,ra,ra,ra),_bgT_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      function For_all_parameters_S5(X)
       {var
         _bgS_=caml_call5(X[1],rn,rn,rn,rn,rn),
         t=witness(caml_call5(X[1],ra,ra,ra,ra,ra),_bgS_);
        function witness$0(param){return t}
        return [0,t,witness$0]}
      return [0,
              witness,
              ra,
              rn,
              For_all_parameters_S1,
              For_all_parameters_S2,
              For_all_parameters_S3,
              For_all_parameters_S4,
              For_all_parameters_S5]}
    function int_is_value(t,int$0)
     {var _bgR_=t[2];
      if(typeof _bgR_ === "number")
       return 0 === _bgR_?0:1;
      else
       {if(0 === _bgR_[0])
         {var hash_set=_bgR_[1];
          return caml_call2(include$33[20],hash_set,int$0)}
        var n=_bgR_[1],_bgP_=0 <= int$0?1:0,_bgQ_=_bgP_?int$0 <= n?1:0:_bgP_;
        return _bgQ_}}
    function int_as_value(t,int$0){return int_is_value(t,int$0)?[0,int$0]:0}
    function int_as_value_exn(t,int$0)
     {return int_is_value(t,int$0)
              ?int$0
              :caml_call1(_a3_,caml_call3(_fx_,_U7_,t[3],int$0))}
    function value_as_int_exn(t,a)
     {return typeof a === "number"
              ?a
              :caml_call1(_a3_,caml_call2(_fx_,_U8_,t[3]))}
    function value_as_int(param,a){return typeof a === "number"?[0,a]:0}
    function value_is_int(param,a){return typeof a === "number"?1:0}
    var
     include$98=For_all_parameters([0,0]),
     For_all_parameters_S1=include$98[4],
     For_all_parameters_S2=include$98[5],
     For_all_parameters_S3=include$98[6],
     For_all_parameters_S4=include$98[7],
     For_all_parameters_S5=include$98[8];
    function of_typerep$0(typerep)
     {var t=of_typerep(typerep),match=t[1];return match?0:[0,t]}
    function of_typerep_exn(here,typerep)
     {return caml_call4(_xE_,[0,here],0,0,of_typerep$0(typerep))}
    function value_as_int$0(param,a){return a}
    var
     include$99=For_all_parameters([0,1]),
     For_all_parameters_S1$0=include$99[4],
     For_all_parameters_S2$0=include$99[5],
     For_all_parameters_S3$0=include$99[6],
     For_all_parameters_S4$0=include$99[7],
     For_all_parameters_S5$0=include$99[8];
    function of_typerep$1(typerep)
     {var t=of_typerep(typerep),match=t[1];return 1 === match?[0,t]:0}
    function of_typerep_exn$0(here,typerep)
     {return caml_call4(_xE_,[0,here],0,0,of_typerep$1(typerep))}
    var
     _U9_=For_all_parameters([0,2]),
     For_all_parameters_S1$1=_U9_[4],
     For_all_parameters_S2$1=_U9_[5],
     For_all_parameters_S3$1=_U9_[6],
     For_all_parameters_S4$1=_U9_[7],
     For_all_parameters_S5$1=_U9_[8];
    function of_typerep$2(typerep)
     {var t=of_typerep(typerep),match=t[1];return 2 === match?[0,t]:0}
    function of_typerep_exn$1(here,typerep)
     {return caml_call4(_xE_,[0,here],0,0,of_typerep$2(typerep))}
    function dest(t)
     {var match=t[1];
      switch(match)
       {case 0:return [0,t];
        case 1:return [1,t];
        case 2:return [2,t];
        default:return 0}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$307);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Type_immediacy$0);
    function _U__(_bgO_)
     {return [0,caml_call1(For_all_parameters_S5$1,_bgO_)[2]]}
    function _U$_(_bgN_)
     {return [0,caml_call1(For_all_parameters_S4$1,_bgN_)[2]]}
    function _Va_(_bgM_)
     {return [0,caml_call1(For_all_parameters_S3$1,_bgM_)[2]]}
    function _Vb_(_bgL_)
     {return [0,caml_call1(For_all_parameters_S2$1,_bgL_)[2]]}
    var
     _Vc_=
      [0,
       of_typerep$2,
       of_typerep_exn$1,
       function(_bgK_)
        {return [0,caml_call1(For_all_parameters_S1$1,_bgK_)[2]]},
       _Vb_,
       _Va_,
       _U$_,
       _U__,
       int32,
       int64,
       nativeint,
       float$0,
       string$0,
       bytes,
       array,
       ref,
       tuple2$3,
       tuple3$2,
       tuple4$2,
       tuple5$2];
    function _Vd_(_bgJ_)
     {return [0,caml_call1(For_all_parameters_S5$0,_bgJ_)[2]]}
    function _Ve_(_bgI_)
     {return [0,caml_call1(For_all_parameters_S4$0,_bgI_)[2]]}
    function _Vf_(_bgH_)
     {return [0,caml_call1(For_all_parameters_S3$0,_bgH_)[2]]}
    function _Vg_(_bgG_)
     {return [0,caml_call1(For_all_parameters_S2$0,_bgG_)[2]]}
    var
     _Vh_=
      [0,
       of_typerep$1,
       of_typerep_exn$0,
       int_as_value,
       int_as_value_exn,
       int_is_value,
       value_as_int,
       value_as_int_exn,
       value_is_int,
       function(_bgF_)
        {return [0,caml_call1(For_all_parameters_S1$0,_bgF_)[2]]},
       _Vg_,
       _Vf_,
       _Ve_,
       _Vd_,
       option,
       list$0];
    function _Vi_(_bgE_)
     {return [0,caml_call1(For_all_parameters_S5,_bgE_)[2]]}
    function _Vj_(_bgD_)
     {return [0,caml_call1(For_all_parameters_S4,_bgD_)[2]]}
    function _Vk_(_bgC_)
     {return [0,caml_call1(For_all_parameters_S3,_bgC_)[2]]}
    function _Vl_(_bgB_)
     {return [0,caml_call1(For_all_parameters_S2,_bgB_)[2]]}
    var
     Core_Type_immediacy=
      [0,
       [0,
        of_typerep$0,
        of_typerep_exn,
        int_as_value,
        int_as_value_exn,
        int_is_value,
        value_as_int$0,
        function(_bgA_){return [0,caml_call1(For_all_parameters_S1,_bgA_)[2]]},
        _Vl_,
        _Vk_,
        _Vj_,
        _Vi_,
        int$2,
        char$3,
        bool$2,
        unit$0],
       _Vh_,
       _Vc_,
       of_typerep,
       dest,
       int_as_value,
       int_as_value_exn,
       int_is_value,
       value_as_int,
       value_as_int_exn,
       value_is_int];
    caml_register_global(5377,Core_Type_immediacy,"Core__Type_immediacy");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Tuple);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$308);
    caml_call1(Expect_test_collector[5][1],cst_core_src_tuple_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$309,cst$109);
    function Make$11(T1,T2){return [0]}
    function t_of_sexp$59(of_a_001,of_b_002,sexp_008)
     {if(1 === sexp_008[0])
       {var _bgy_=sexp_008[1];
        if(_bgy_)
         {var _bgz_=_bgy_[2];
          if(_bgz_ && ! _bgz_[2])
           {var
             arg1_005=_bgz_[1],
             arg0_004=_bgy_[1],
             res0_006=caml_call1(of_a_001,arg0_004),
             res1_007=caml_call1(of_b_002,arg1_005);
            return [0,res0_006,res1_007]}}}
      return caml_call3
              (Sexplib0_Sexp_conv_error[2],error_source_009$0,2,sexp_008)}
    function sexp_of_t$72(of_a_010,of_b_011,param)
     {var
       arg1_013=param[2],
       arg0_012=param[1],
       res0_014=caml_call1(of_a_010,arg0_012),
       res1_015=caml_call1(of_b_011,arg1_013);
      return [1,[0,res0_014,[0,res1_015,0]]]}
    var
     Typename_of_t$21=caml_call1(Typerep_lib_Make_typename[3],[0,name$50]),
     typename_of_t$21=Typename_of_t$21[2];
    function typerep_of_t$21(of_a,of_b)
     {var name_of_t=caml_call2(Typename_of_t$21[1],of_a,of_b);
      return [9,
              [0,
               name_of_t,
               [0,[246,function(_bgx_){return caml_call2(_eN_,of_a,of_b)}]]]]}
    function create$21(a,b){return [0,a,b]}
    function curry(f){return function(a,b){return caml_call1(f,[0,a,b])}}
    function uncurry(f)
     {return function(param)
       {var b=param[2],a=param[1];return caml_call2(f,a,b)}}
    function map$23(param,f)
     {var y=param[2],x=param[1],_bgw_=caml_call1(f,y);
      return [0,caml_call1(f,x),_bgw_]}
    function map_fst(param,f)
     {var y=param[2],x=param[1];return [0,caml_call1(f,x),y]}
    function map_snd(param,f)
     {var y=param[2],x=param[1];return [0,x,caml_call1(f,y)]}
    function map2$0(param,_bgu_,f)
     {var
       y2=_bgu_[2],
       x2=_bgu_[1],
       y1=param[2],
       x1=param[1],
       _bgv_=caml_call2(f,y1,y2);
      return [0,caml_call2(f,x1,x2),_bgv_]}
    function compare$59(cmp1,cmp2,param,_bgt_)
     {var
       y=_bgt_[2],
       x=_bgt_[1],
       y$0=param[2],
       x$0=param[1],
       i=caml_call2(cmp1,x$0,x);
      return 0 === i?caml_call2(cmp2,y$0,y):i}
    function equal$29(eq1,eq2,param,_bgr_)
     {var
       y=_bgr_[2],
       x=_bgr_[1],
       y$0=param[2],
       x$0=param[1],
       _bgs_=caml_call2(eq1,x$0,x);
      return _bgs_?caml_call2(eq2,y$0,y):_bgs_}
    function swap$2(param){var b=param[2],a=param[1];return [0,b,a]}
    function compare$60(cmp1,cmp2)
     {return function(_bgp_,_bgq_){return compare$59(cmp1,cmp2,_bgp_,_bgq_)}}
    var
     include$100=caml_call1(Derived2,[0,compare$60,sexp_of_t$72]),
     comparator$18=include$100[1];
    function t_of_sexp$60(of_a_019,of_b_020,of_c_021,sexp_029)
     {if(1 === sexp_029[0])
       {var _bgm_=sexp_029[1];
        if(_bgm_)
         {var _bgn_=_bgm_[2];
          if(_bgn_)
           {var _bgo_=_bgn_[2];
            if(_bgo_ && ! _bgo_[2])
             {var
               arg2_025=_bgo_[1],
               arg1_024=_bgn_[1],
               arg0_023=_bgm_[1],
               res0_026=caml_call1(of_a_019,arg0_023),
               res1_027=caml_call1(of_b_020,arg1_024),
               res2_028=caml_call1(of_c_021,arg2_025);
              return [0,res0_026,res1_027,res2_028]}}}}
      return caml_call3
              (Sexplib0_Sexp_conv_error[2],error_source_030,3,sexp_029)}
    function sexp_of_t$73(of_a_031,of_b_032,of_c_033,param)
     {var
       arg2_036=param[3],
       arg1_035=param[2],
       arg0_034=param[1],
       res0_037=caml_call1(of_a_031,arg0_034),
       res1_038=caml_call1(of_b_032,arg1_035),
       res2_039=caml_call1(of_c_033,arg2_036);
      return [1,[0,res0_037,[0,res1_038,[0,res2_039,0]]]]}
    var
     Typename_of_t$22=caml_call1(Typerep_lib_Make_typename[4],[0,name$51]),
     typename_of_t$22=Typename_of_t$22[2];
    function typerep_of_t$22(of_a,of_b,of_c)
     {var name_of_t=caml_call3(Typename_of_t$22[1],of_a,of_b,of_c);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,function(_bgl_){return caml_call3(_eM_,of_a,of_b,of_c)}]]]]}
    function create$22(a,b,c){return [0,a,b,c]}
    function curry$0(f)
     {return function(a,b,c){return caml_call1(f,[0,a,b,c])}}
    function uncurry$0(f)
     {return function(param)
       {var c=param[3],b=param[2],a=param[1];return caml_call3(f,a,b,c)}}
    function map$24(param,f)
     {var
       z=param[3],
       y=param[2],
       x=param[1],
       _bgj_=caml_call1(f,z),
       _bgk_=caml_call1(f,y);
      return [0,caml_call1(f,x),_bgk_,_bgj_]}
    function map_fst$0(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,caml_call1(f,x),y,z]}
    function map_snd$0(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,x,caml_call1(f,y),z]}
    function map_trd(param,f)
     {var z=param[3],y=param[2],x=param[1];return [0,x,y,caml_call1(f,z)]}
    function map2$1(param,_bgg_,f)
     {var
       z2=_bgg_[3],
       y2=_bgg_[2],
       x2=_bgg_[1],
       z1=param[3],
       y1=param[2],
       x1=param[1],
       _bgh_=caml_call2(f,z1,z2),
       _bgi_=caml_call2(f,y1,y2);
      return [0,caml_call2(f,x1,x2),_bgi_,_bgh_]}
    function get3(param){var a=param[3];return a}
    function compare$61(cmp1,cmp2,cmp3,param,_bgf_)
     {var
       z=_bgf_[3],
       y=_bgf_[2],
       x=_bgf_[1],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       c1=caml_call2(cmp1,x$0,x);
      if(0 === c1)
       {var c2=caml_call2(cmp2,y$0,y);
        return 0 === c2?caml_call2(cmp3,z$0,z):c2}
      return c1}
    function equal$30(eq1,eq2,eq3,param,_bgb_)
     {var
       z=_bgb_[3],
       y=_bgb_[2],
       x=_bgb_[1],
       z$0=param[3],
       y$0=param[2],
       x$0=param[1],
       _bgc_=caml_call2(eq1,x$0,x);
      if(_bgc_)
       {var _bgd_=caml_call2(eq2,y$0,y);
        if(_bgd_)return caml_call2(eq3,z$0,z);
        var _bge_=_bgd_}
      else
       var _bge_=_bgc_;
      return _bge_}
    function Sexpable(S1,S2)
     {function t_of_sexp(sexp_045)
       {if(1 === sexp_045[0])
         {var _bf$_=sexp_045[1];
          if(_bf$_)
           {var _bga_=_bf$_[2];
            if(_bga_ && ! _bga_[2])
             {var
               arg1_042=_bga_[1],
               arg0_041=_bf$_[1],
               res0_043=caml_call1(S1[1],arg0_041),
               res1_044=caml_call1(S2[1],arg1_042);
              return [0,res0_043,res1_044]}}}
        return caml_call3
                (Sexplib0_Sexp_conv_error[2],error_source_046,2,sexp_045)}
      function sexp_of_t(param)
       {var
         arg1_048=param[2],
         arg0_047=param[1],
         res0_049=caml_call1(S1[2],arg0_047),
         res1_050=caml_call1(S2[2],arg1_048);
        return [1,[0,res0_049,[0,res1_050,0]]]}
      return [0,t_of_sexp,sexp_of_t]}
    function Comparator(_bf__,_bf9_)
     {var comparator=caml_call2(comparator$18,_bf__[1],_bf9_[1]);
      return [0,comparator]}
    function Hasher(H1,H2)
     {function compare(a_051,b_052)
       {var
         t_054=a_051[2],
         t_053=a_051[1],
         t_056=b_052[2],
         t_055=b_052[1],
         n=caml_call2(H1[1],t_053,t_055);
        return 0 === n?caml_call2(H2[1],t_054,t_056):n}
      function hash_fold_t(hsv,arg)
       {var
         e1=arg[2],
         e0=arg[1],
         hsv$0=caml_call2(H1[2],hsv,e0),
         hsv$1=caml_call2(H2[2],hsv$0,e1);
        return hsv$1}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_bf8_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_bf8_)}
      function t_of_sexp(sexp_062)
       {if(1 === sexp_062[0])
         {var _bf6_=sexp_062[1];
          if(_bf6_)
           {var _bf7_=_bf6_[2];
            if(_bf7_ && ! _bf7_[2])
             {var
               arg1_059=_bf7_[1],
               arg0_058=_bf6_[1],
               res0_060=caml_call1(H1[4],arg0_058),
               res1_061=caml_call1(H2[4],arg1_059);
              return [0,res0_060,res1_061]}}}
        return caml_call3
                (Sexplib0_Sexp_conv_error[2],error_source_063,2,sexp_062)}
      function sexp_of_t(param)
       {var
         arg1_065=param[2],
         arg0_064=param[1],
         res0_066=caml_call1(H1[5],arg0_064),
         res1_067=caml_call1(H2[5],arg1_065);
        return [1,[0,res0_066,[0,res1_067,0]]]}
      var
       T=[0,compare,hash_fold_t,hash,t_of_sexp,sexp_of_t],
       t_of_sexp$0=T[4],
       sexp_of_t$0=T[5],
       include=Make$4([0,T[2],T[4],T[1],T[5],T[3]]),
       compare$0=include[1],
       hash_fold_t$0=include[2],
       hash$0=include[3],
       hashable=include[4],
       Table=include[5],
       Hash_set=include[6],
       Hash_queue=include[7];
      return [0,
              T,
              t_of_sexp$0,
              sexp_of_t$0,
              compare$0,
              hash_fold_t$0,
              hash$0,
              hashable,
              Table,
              Hash_set,
              Hash_queue]}
    function Hasher_sexpable_of_hashable_se(S)
     {var t_of_sexp=S[1],sexp_of_t=S[2],compare=S[3],hash=S[5];
      function hash_fold_t$0(state,t)
       {return caml_call2(hash_fold_t,state,caml_call1(hash,t))}
      return [0,compare,hash_fold_t$0,hash,t_of_sexp,sexp_of_t]}
    function Hashable_t(_bf4_,_bf3_)
     {var _bf5_=Hasher_sexpable_of_hashable_se(_bf3_);
      return Hasher(Hasher_sexpable_of_hashable_se(_bf4_),_bf5_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$310);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Tuple$0);
    function _Vm_(_bf1_,_bf0_)
     {var _bf2_=Hasher(_bf1_,_bf0_);
      return [0,
              _bf2_[2],
              _bf2_[3],
              _bf2_[4],
              _bf2_[5],
              _bf2_[6],
              _bf2_[7],
              _bf2_[8],
              _bf2_[9],
              _bf2_[10]]}
    function _Vn_(B1,B2)
     {var
       _bfU_=caml_call1(Bin_prot_Shape[7],[0,B1[5],[0,B2[5],0]]),
       _bfV_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$171),0,_bfU_],0],
       _bfW_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_tuple_ml_129_2),
       group=caml_call2(Bin_prot_Shape[6],_bfW_,_bfV_),
       _bfX_=caml_call1(Bin_prot_Shape[2][1],cst_t$172),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_bfX_),0);
      function bin_size_t(param)
       {var
         v2=param[2],
         v1=param[1],
         _bfY_=caml_call1(B1[1],v1),
         size=caml_call2(Bin_prot_Common[23],0,_bfY_),
         _bfZ_=caml_call1(B2[1],v2);
        return caml_call2(Bin_prot_Common[23],size,_bfZ_)}
      function bin_write_t(buf,pos,param)
       {var v2=param[2],v1=param[1],pos$0=caml_call3(B1[2],buf,pos,v1);
        return caml_call3(B2[2],buf,pos$0,v2)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_core_src_tuple_ml_Binable_,
                 pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var v1=caml_call2(B1[3],buf,pos_ref),v2=caml_call2(B2[3],buf,pos_ref);
        return [0,v1,v2]}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t$0,
              bin_read_t,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t]}
    function _Vo_(_bfS_,_bfR_)
     {var _bfT_=Hashable_t(_bfS_,_bfR_);
      return [0,
              _bfT_[2],
              _bfT_[3],
              _bfT_[4],
              _bfT_[5],
              _bfT_[6],
              _bfT_[7],
              _bfT_[8],
              _bfT_[9],
              _bfT_[10]]}
    function _Vp_(_bfP_,_bfO_)
     {var _bfQ_=Hashable_t(_bfP_,_bfO_);
      return [0,
              _bfQ_[2],
              _bfQ_[3],
              _bfQ_[4],
              _bfQ_[5],
              _bfQ_[6],
              _bfQ_[7],
              _bfQ_[8],
              _bfQ_[9],
              _bfQ_[10]]}
    function _Vq_(S1,S2)
     {var
       include$0=Sexpable([0,S1[1],S1[2]],[0,S2[1],S2[2]]),
       t_of_sexp=include$0[1],
       sexp_of_t=include$0[2];
      function compare(param,_bfN_)
       {var
         s2=_bfN_[2],
         s1=_bfN_[1],
         s2$0=param[2],
         s1$0=param[1],
         x=caml_call2(S1[10],s1$0,s1);
        return 0 === x?caml_call2(S2[10],s2$0,s2):x}
      var
       include=Make$2([0,compare,t_of_sexp,sexp_of_t]),
       symbol=include[1],
       symbol$0=include[2],
       symbol$1=include[3],
       symbol$2=include[4],
       symbol$3=include[5],
       symbol$4=include[6],
       equal=include[7],
       compare$0=include[8],
       min=include[9],
       max=include[10],
       ascending=include[11],
       descending=include[12],
       between=include[13],
       clamp_exn=include[14],
       clamp=include[15],
       comparator=include[16],
       validate_lbound=include[17],
       validate_ubound=include[18],
       validate_bound=include[19],
       Replace_polymorphic_compare=include[20],
       Map=include[21],
       Set=include[22];
      return [0,
              t_of_sexp,
              sexp_of_t,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare$0,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              comparator,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              Map,
              Set]}
    var
     Core_Tuple=
      [0,
       [0,
        t_of_sexp$59,
        sexp_of_t$72,
        typerep_of_t$21,
        typename_of_t$21,
        comparator$18,
        create$21,
        curry,
        uncurry,
        compare$59,
        equal$29,
        map$23,
        map_fst,
        map_snd,
        map2$0,
        swap$2],
       [0,
        t_of_sexp$60,
        sexp_of_t$73,
        typerep_of_t$22,
        typename_of_t$22,
        create$22,
        curry$0,
        uncurry$0,
        equal$30,
        compare$61,
        get3,
        map$24,
        map_fst$0,
        map_snd$0,
        map_trd,
        map2$1],
       Make$11,
       Comparator,
       function(S1,S2)
        {var
          include$0=Comparator([0,S1[16]],[0,S2[16]]),
          comparator=include$0[1],
          sexp_of_t=comparator[2],
          include=Make_plain_using_comparator$1([0,sexp_of_t,comparator]),
          symbol=include[1],
          symbol$0=include[2],
          symbol$1=include[3],
          symbol$2=include[4],
          symbol$3=include[5],
          symbol$4=include[6],
          equal=include[7],
          compare=include[8],
          min=include[9],
          max=include[10],
          ascending=include[11],
          descending=include[12],
          between=include[13],
          clamp_exn=include[14],
          clamp=include[15],
          comparator$0=include[16],
          validate_lbound=include[17],
          validate_ubound=include[18],
          validate_bound=include[19],
          Replace_polymorphic_compare=include[20],
          Map=include[21],
          Set=include[22];
         return [0,
                 symbol,
                 symbol$0,
                 symbol$1,
                 symbol$2,
                 symbol$3,
                 symbol$4,
                 equal,
                 compare,
                 min,
                 max,
                 ascending,
                 descending,
                 between,
                 clamp_exn,
                 clamp,
                 comparator$0,
                 validate_lbound,
                 validate_ubound,
                 validate_bound,
                 Replace_polymorphic_compare,
                 Map,
                 Set]},
       _Vq_,
       _Vp_,
       _Vo_,
       Sexpable,
       _Vn_,
       _Vm_];
    caml_register_global(5378,Core_Tuple,"Core__Tuple");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Day_of_week);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$311);
    caml_call1(Expect_test_collector[5][1],cst_core_src_day_of_week_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$312,cst$110);
    var
     _Vs_=caml_call1(Bin_prot_Shape[9],_Vr_),
     _Vt_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$173),0,_Vs_],0],
     _Vu_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_day_of_week_ml_8_),
     group$101=caml_call2(Bin_prot_Shape[6],_Vu_,_Vt_),
     _Vv_=caml_call1(Bin_prot_Shape[2][1],cst_t$174),
     bin_shape_t$88=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$101,_Vv_),0);
    function bin_size_t$65(param){return 1}
    function bin_write_t$66(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[31],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[31],buf,pos,1);
        case 2:return caml_call3(Bin_prot_Write[31],buf,pos,2);
        case 3:return caml_call3(Bin_prot_Write[31],buf,pos,3);
        case 4:return caml_call3(Bin_prot_Write[31],buf,pos,4);
        case 5:return caml_call3(Bin_prot_Write[31],buf,pos,5);
        default:return caml_call3(Bin_prot_Write[31],buf,pos,6)}}
    var bin_writer_t$77=[0,bin_size_t$65,bin_write_t$66];
    function bin_read_t$130(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_day_of_week_ml_St,pos_ref[1])}
    function bin_read_t$131(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(6 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_Vw_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    var
     bin_reader_t$77=[0,bin_read_t$131,bin_read_t$130],
     bin_t$77=[0,bin_shape_t$88,bin_writer_t$77,bin_reader_t$77],
     compare$62=caml_int_compare;
    function hash_fold_t$32(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        default:return caml_call2(Base_Hash[3],hsv,6)}}
    function hash$33(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_bfM_=hash_fold_t$32(hsv,x);
      return caml_call1(Base_Hash[9],_bfM_)}
    var _Vx_=0;
    function _Vy_(size_018,random_019){return 6}
    var _Vz_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_Vy_)],_Vx_];
    function _VA_(size_016,random_017){return 5}
    var _VB_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_VA_)],_Vz_];
    function _VC_(size_014,random_015){return 4}
    var _VD_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_VC_)],_VB_];
    function _VE_(size_012,random_013){return 3}
    var _VF_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_VE_)],_VD_];
    function _VG_(size_010,random_011){return 2}
    var _VH_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_VG_)],_VF_];
    function _VI_(size_008,random_009){return 1}
    var _VJ_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_VI_)],_VH_];
    function _VK_(size_006,random_007){return 0}
    var
     _VL_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_VK_)],_VJ_],
     quickcheck_generator$15=caml_call1(Base_quickcheck_Generator[60],_VL_);
    function _VM_(x_003,size_004,hash_005)
     {switch(x_003)
       {case 0:
         var hash_005$0=caml_call2(Base[116],hash_005,0);return hash_005$0;
        case 1:
         var hash_005$1=caml_call2(Base[116],hash_005,1);return hash_005$1;
        case 2:
         var hash_005$2=caml_call2(Base[116],hash_005,2);return hash_005$2;
        case 3:
         var hash_005$3=caml_call2(Base[116],hash_005,3);return hash_005$3;
        case 4:
         var hash_005$4=caml_call2(Base[116],hash_005,4);return hash_005$4;
        case 5:
         var hash_005$5=caml_call2(Base[116],hash_005,5);return hash_005$5;
        default:
         var hash_005$6=caml_call2(Base[116],hash_005,6);return hash_005$6}}
    var quickcheck_observer$14=caml_call1(Base_quickcheck_Observer[36],_VM_);
    function _VN_(param)
     {switch(param)
       {case 0:return caml_call1(include$9[68],0);
        case 1:return caml_call1(include$9[68],0);
        case 2:return caml_call1(include$9[68],0);
        case 3:return caml_call1(include$9[68],0);
        case 4:return caml_call1(include$9[68],0);
        case 5:return caml_call1(include$9[68],0);
        default:return caml_call1(include$9[68],0)}}
    var quickcheck_shrinker$14=caml_call1(Base_quickcheck_Shrinker[36],_VN_);
    function to_string$20(t)
     {switch(t)
       {case 0:return cst_SUN;
        case 1:return cst_MON;
        case 2:return cst_TUE;
        case 3:return cst_WED;
        case 4:return cst_THU;
        case 5:return cst_FRI;
        default:return cst_SAT}}
    function to_string_long(t)
     {switch(t)
       {case 0:return cst_Sunday;
        case 1:return cst_Monday;
        case 2:return cst_Tuesday;
        case 3:return cst_Wednesday;
        case 4:return cst_Thursday;
        case 5:return cst_Friday;
        default:return cst_Saturday}}
    function of_string_internal(s)
     {var
       match=caml_call1(_Bt_,s),
       _bfL_=caml_string_compare(match,cst_SUNDAY),
       switch$0=0;
      if(0 <= _bfL_)
       if(0 < _bfL_)
        {var switch$1=0;
         if
          (caml_string_notequal(match,cst_THU$0)
           &&
           caml_string_notequal(match,cst_THURSDAY))
          {var switch$2=0;
           if
            (caml_string_notequal(match,cst_TUE$0)
             &&
             caml_string_notequal(match,cst_TUESDAY))
            {var switch$3=0;
             if
              (caml_string_notequal(match,cst_WED$0)
               &&
               caml_string_notequal(match,cst_WEDNESDAY))
              {switch$1 = 1;switch$2 = 1;switch$3 = 1}
             if(! switch$3)return 3}
           if(! switch$2)return 2}
         if(! switch$1)return 4}
       else
        switch$0 = 1;
      else
       {var switch$4=0;
        if
         (caml_string_notequal(match,cst_FRI$0)
          &&
          caml_string_notequal(match,cst_FRIDAY))
         {var switch$5=0;
          if
           (caml_string_notequal(match,cst_MON$0)
            &&
            caml_string_notequal(match,cst_MONDAY))
           {var switch$6=0;
            if
             (caml_string_notequal(match,cst_SAT$0)
              &&
              caml_string_notequal(match,cst_SATURDAY))
             if(caml_string_notequal(match,cst_SUN$0))
              {switch$4 = 1;switch$5 = 1;switch$6 = 1}
             else
              {switch$0 = 1;switch$4 = 1;switch$5 = 1;switch$6 = 1}
            if(! switch$6)return 6}
          if(! switch$5)return 1}
        if(! switch$4)return 5}
      return switch$0?0:caml_call3(failwithf,_VO_,s,0)}
    function of_int_exn$4(i)
     {if(6 < i >>> 0)return caml_call3(failwithf,_VP_,i,0);
      switch(i)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    function of_string$17(s)
     {try
       {var _bfI_=of_string_internal(s);return _bfI_}
      catch(_bfJ_)
       {try
         {var _bfH_=of_int_exn$4(caml_call1(of_string$5,s));return _bfH_}
        catch(_bfK_){return caml_call3(failwithf,_VQ_,s,0)}}}
    var
     include$101=caml_call1(Stable[5][1],[0,of_string$17,to_string$20]),
     t_of_sexp$61=include$101[1],
     sexp_of_t$74=include$101[2],
     _VR_=
      _w7_
       ([0,
         bin_size_t$65,
         bin_write_t$66,
         bin_read_t$131,
         bin_read_t$130,
         bin_shape_t$88,
         bin_writer_t$77,
         bin_reader_t$77,
         bin_t$77,
         compare$62,
         t_of_sexp$61,
         sexp_of_t$74]),
     symbol$146=_VR_[1],
     symbol$147=_VR_[2],
     symbol$148=_VR_[3],
     symbol$149=_VR_[4],
     symbol$150=_VR_[5],
     symbol$151=_VR_[6],
     equal$31=_VR_[7],
     compare$63=_VR_[8],
     min$14=_VR_[9],
     max$14=_VR_[10],
     ascending$13=_VR_[11],
     descending$13=_VR_[12],
     between$13=_VR_[13],
     clamp_exn$13=_VR_[14],
     clamp$13=_VR_[15],
     validate_lbound$12=_VR_[16],
     validate_ubound$12=_VR_[17],
     validate_bound$12=_VR_[18],
     Replace_polymorphic_compare$10=_VR_[19],
     comparator$19=_VR_[20],
     Map$15=_VR_[21],
     Set$15=_VR_[22],
     include$102=
      Make_binable
       ([0,
         hash_fold_t$32,
         bin_size_t$65,
         bin_write_t$66,
         bin_read_t$131,
         bin_read_t$130,
         bin_shape_t$88,
         bin_writer_t$77,
         bin_reader_t$77,
         bin_t$77,
         t_of_sexp$61,
         compare$62,
         sexp_of_t$74,
         hash$33]),
     hash_fold_t$33=include$102[1],
     hash$34=include$102[2],
     hashable$13=include$102[3],
     Table$13=include$102[4],
     Hash_set$13=include$102[5],
     Hash_queue$12=include$102[6],
     _VS_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$65,
         bin_write_t$66,
         bin_read_t$131,
         bin_read_t$130,
         bin_shape_t$88,
         bin_writer_t$77,
         bin_reader_t$77,
         bin_t$77,
         compare$63,
         t_of_sexp$61,
         sexp_of_t$74,
         comparator$19]),
     Map$16=_VS_[1],
     Set$16=_VS_[2],
     include$103=
      caml_call1
       (Stable$3[1][1],
        [0,
         bin_size_t$65,
         bin_write_t$66,
         bin_read_t$131,
         bin_read_t$130,
         bin_shape_t$88,
         bin_writer_t$77,
         bin_reader_t$77,
         bin_t$77,
         t_of_sexp$61,
         compare$63,
         sexp_of_t$74,
         hash$34]),
     Table$14=include$103[1],
     Hash_set$14=include$103[2],
     hashable$14=include$103[3];
    function of_int$4(i)
     {try {var _bfF_=[0,of_int_exn$4(i)];return _bfF_}catch(_bfG_){return 0}}
    function to_int$5(t)
     {switch(t)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    function iso_8601_weekday_number(t)
     {switch(t)
       {case 0:return 7;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        default:return 6}}
    var num_days_in_week=7;
    function shift(t,i)
     {return of_int_exn$4
              (caml_call2(symbol$69,to_int$5(t) + i | 0,num_days_in_week))}
    function num_days(from,to)
     {var _bfE_=to_int$5(from),d=to_int$5(to) - _bfE_ | 0;
      return d < 0?d + 7 | 0:d}
    function is_sun_or_sat(t)
     {var _bfD_=caml_call2(symbol$148,t,0);
      return _bfD_?_bfD_:caml_call2(symbol$148,t,6)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$313);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Day_of_week$0);
    var
     Core_Day_of_week=
      [0,
       bin_size_t$65,
       bin_write_t$66,
       bin_read_t$131,
       bin_read_t$130,
       bin_shape_t$88,
       bin_writer_t$77,
       bin_reader_t$77,
       bin_t$77,
       quickcheck_generator$15,
       quickcheck_observer$14,
       quickcheck_shrinker$14,
       t_of_sexp$61,
       sexp_of_t$74,
       symbol$146,
       symbol$147,
       symbol$148,
       symbol$149,
       symbol$150,
       symbol$151,
       equal$31,
       compare$63,
       min$14,
       max$14,
       ascending$13,
       descending$13,
       between$13,
       clamp_exn$13,
       clamp$13,
       validate_lbound$12,
       validate_ubound$12,
       validate_bound$12,
       Replace_polymorphic_compare$10,
       comparator$19,
       Map$15,
       Set$15,
       hash_fold_t$33,
       hash$34,
       hashable$13,
       Table$13,
       Hash_set$13,
       Hash_queue$12,
       of_string$17,
       to_string$20,
       to_string_long,
       of_int_exn$4,
       of_int$4,
       to_int$5,
       iso_8601_weekday_number,
       shift,
       num_days,
       is_sun_or_sat,
       all$3,
       weekdays,
       weekends,
       [0,
        [0,
         bin_size_t$65,
         bin_write_t$66,
         bin_read_t$131,
         bin_read_t$130,
         bin_shape_t$88,
         bin_writer_t$77,
         bin_reader_t$77,
         bin_t$77,
         t_of_sexp$61,
         sexp_of_t$74,
         compare$62,
         hash_fold_t$32,
         hash$33,
         Map$16,
         Set$16,
         Table$14,
         Hash_set$14,
         hashable$14]]];
    caml_register_global(5379,Core_Day_of_week,"Core__Day_of_week");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Day_of_week_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$314);
    caml_call1(Expect_test_collector[5][1],cst_core_src_day_of_week_intf_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$315,cst$111);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$316);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Day_of_week_intf$0);
    var Core_Day_of_week_intf=[0];
    caml_register_global(5380,Core_Day_of_week_intf,"Core__Day_of_week_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Digit_string_helpers);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$317);
    caml_call1(Expect_test_collector[5][1],cst_core_src_digit_string_help);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$318,cst$112);
    var compare$64=caml_int_compare;
    function sexp_of_t$75(param){return param?_VT_:_VU_}
    var
     Round=[0,compare$64,sexp_of_t$75],
     divisor=caml_call1(of_int$2,2),
     int63_ten=caml_call1(of_int$2,10),
     int63_twenty=caml_call1(of_int$2,20),
     int63_billion=caml_call1(of_int$2,1000000000),
     max_billions=caml_call2(symbol$110,max_value$2,int63_billion);
    function digits_of_positive_int63(n)
     {return caml_call2(symbol$101,n,int63_ten)
              ?1
              :caml_call1
                (next$0,
                 digits_of_positive_int63(caml_call2(symbol$110,n,int63_ten)))}
    var digits_of_int63_max_value=digits_of_positive_int63(max_value$2);
    function max_int63_with(digits)
     {var switcher=digits - 1 | 0;
      if(8 < switcher >>> 0)
       {if
         (caml_call2
           (Replace_polymorphic_compare$3[1],digits,digits_of_int63_max_value))
         return max_value$2;
        var billions=caml_call1(succ$1,max_int63_with(digits - 9 | 0));
        return caml_call1
                (pred$1,caml_call2(symbol$105,int63_billion,billions))}
      switch(switcher)
       {case 0:return caml_call1(of_int$2,9);
        case 1:return caml_call1(of_int$2,99);
        case 2:return caml_call1(of_int$2,999);
        case 3:return caml_call1(of_int$2,9999);
        case 4:return caml_call1(of_int$2,99999);
        case 5:return caml_call1(of_int$2,999999);
        case 6:return caml_call1(of_int$2,9999999);
        case 7:return caml_call1(of_int$2,99999999);
        default:return caml_call1(of_int$2,999999999)}}
    function digit_of_char(char$0){return caml_call1(_Eh_,char$0)}
    function write_1_digit_int(bytes,pos,int$0)
     {caml_bytes_unsafe_set
       (bytes,pos,caml_call1(_Et_,caml_call1(_Ew_,48) + int$0 | 0));
      return 0}
    function return_tens_and_write_ones(bytes,pos,int$0)
     {var tens=int$0 / 10 | 0,ones=int$0 - (tens * 10 | 0) | 0;
      write_1_digit_int(bytes,pos,ones);
      return tens}
    function write_2_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 1 | 0,int$0);
      return write_1_digit_int(bytes,pos,tens)}
    function write_3_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 2 | 0,int$0);
      return write_2_digit_int(bytes,pos,tens)}
    function write_4_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 3 | 0,int$0);
      return write_3_digit_int(bytes,pos,tens)}
    function write_5_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 4 | 0,int$0);
      return write_4_digit_int(bytes,pos,tens)}
    function write_6_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 5 | 0,int$0);
      return write_5_digit_int(bytes,pos,tens)}
    function write_7_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 6 | 0,int$0);
      return write_6_digit_int(bytes,pos,tens)}
    function write_8_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 7 | 0,int$0);
      return write_7_digit_int(bytes,pos,tens)}
    function write_9_digit_int(bytes,pos,int$0)
     {var tens=return_tens_and_write_ones(bytes,pos + 8 | 0,int$0);
      return write_8_digit_int(bytes,pos,tens)}
    function read_1_digit_int(string,pos)
     {return digit_of_char(caml_string_unsafe_get(string,pos))}
    function read_2_digit_int(string,pos)
     {var _bfC_=read_1_digit_int(string,pos + 1 | 0);
      return (read_1_digit_int(string,pos) * 10 | 0) + _bfC_ | 0}
    function read_3_digit_int(string,pos)
     {var _bfB_=read_1_digit_int(string,pos + 2 | 0);
      return (read_2_digit_int(string,pos) * 10 | 0) + _bfB_ | 0}
    function read_4_digit_int(string,pos)
     {var _bfA_=read_1_digit_int(string,pos + 3 | 0);
      return (read_3_digit_int(string,pos) * 10 | 0) + _bfA_ | 0}
    function read_5_digit_int(string,pos)
     {var _bfz_=read_1_digit_int(string,pos + 4 | 0);
      return (read_4_digit_int(string,pos) * 10 | 0) + _bfz_ | 0}
    function read_6_digit_int(string,pos)
     {var _bfy_=read_1_digit_int(string,pos + 5 | 0);
      return (read_5_digit_int(string,pos) * 10 | 0) + _bfy_ | 0}
    function read_7_digit_int(string,pos)
     {var _bfx_=read_1_digit_int(string,pos + 6 | 0);
      return (read_6_digit_int(string,pos) * 10 | 0) + _bfx_ | 0}
    function read_8_digit_int(string,pos)
     {var _bfw_=read_1_digit_int(string,pos + 7 | 0);
      return (read_7_digit_int(string,pos) * 10 | 0) + _bfw_ | 0}
    function read_9_digit_int(string,pos)
     {var _bfv_=read_1_digit_int(string,pos + 8 | 0);
      return (read_8_digit_int(string,pos) * 10 | 0) + _bfv_ | 0}
    function raise_int63_overflow(name)
     {return caml_call4(_Po_,_VV_,module_name$6,name,0)}
    function read_int63(string,pos,digits)
     {var switcher=digits - 1 | 0;
      if(8 < switcher >>> 0)
       {var
         digits_of_billions=digits - 9 | 0,
         billions=read_int63(string,pos,digits_of_billions),
         remainder=
          caml_call1
           (of_int$2,read_9_digit_int(string,pos + digits_of_billions | 0));
        if(caml_call2(symbol$100,billions,max_billions))
         raise_int63_overflow(cst_read_int63);
        var
         sum=
          caml_call2
           (symbol$103,
            caml_call2(symbol$105,billions,int63_billion),
            remainder);
        if(caml_call2(symbol$101,sum,zero$4))
         raise_int63_overflow(cst_read_int63$0);
        return sum}
      switch(switcher)
       {case 0:return caml_call1(of_int$2,read_1_digit_int(string,pos));
        case 1:return caml_call1(of_int$2,read_2_digit_int(string,pos));
        case 2:return caml_call1(of_int$2,read_3_digit_int(string,pos));
        case 3:return caml_call1(of_int$2,read_4_digit_int(string,pos));
        case 4:return caml_call1(of_int$2,read_5_digit_int(string,pos));
        case 5:return caml_call1(of_int$2,read_6_digit_int(string,pos));
        case 6:return caml_call1(of_int$2,read_7_digit_int(string,pos));
        case 7:return caml_call1(of_int$2,read_8_digit_int(string,pos));
        default:return caml_call1(of_int$2,read_9_digit_int(string,pos))}}
    function divide_and_round_up(numerator,denominator)
     {var
       _bft_=caml_call2(Base_Int63[94][1],numerator,denominator),
       _bfu_=caml_call2(Base_Int63[94][2],_bft_,one$2);
      return caml_call2(Base_Int63[94][17],_bfu_,denominator)}
    var max_scale=caml_call2(symbol$110,max_value$2,int63_twenty);
    function check_digits(name,digits)
     {var _bfs_=caml_call2(Replace_polymorphic_compare$3[5],digits,1);
      return _bfs_?caml_call5(_Po_,_VY_,module_name$6,name,digits,0):_bfs_}
    function check_pos(name,len,pos,digits)
     {var
       _bfq_=caml_call2(Replace_polymorphic_compare$3[5],pos,0),
       _bfr_=
        _bfq_
        ||
        caml_call2(Replace_polymorphic_compare$3[4],pos + digits | 0,len);
      if(_bfr_)
       {if
         (!
          caml_call2(Replace_polymorphic_compare$3[5],pos,0)
          &&
          !
          caml_call2(Replace_polymorphic_compare$3[1],pos,len))
         return caml_call7(_Po_,_V1_,module_name$6,name,digits,pos,len,0);
        return caml_call6(_Po_,_V0_,module_name$6,name,pos,len,0)}
      return _bfr_}
    function check_write(name,bytes,pos,digits,max,int$0)
     {var len=caml_ml_bytes_length(bytes);
      check_pos(name,len,pos,digits);
      var
       _bfo_=caml_call2(Replace_polymorphic_compare$3[5],int$0,0),
       _bfp_=_bfo_ || caml_call2(Replace_polymorphic_compare$3[4],int$0,max);
      return _bfp_?caml_call6(_Po_,_V2_,module_name$6,name,int$0,max,0):_bfp_}
    function write_1_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_1_digit_int,bytes,pos,1,9,int$0);
      return write_1_digit_int(bytes,pos,int$0)}
    function write_2_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_2_digit_int,bytes,pos,2,99,int$0);
      return write_2_digit_int(bytes,pos,int$0)}
    function write_3_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_3_digit_int,bytes,pos,3,999,int$0);
      return write_3_digit_int(bytes,pos,int$0)}
    function write_4_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_4_digit_int,bytes,pos,4,9999,int$0);
      return write_4_digit_int(bytes,pos,int$0)}
    function write_5_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_5_digit_int,bytes,pos,5,99999,int$0);
      return write_5_digit_int(bytes,pos,int$0)}
    function write_6_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_6_digit_int,bytes,pos,6,999999,int$0);
      return write_6_digit_int(bytes,pos,int$0)}
    function write_7_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_7_digit_int,bytes,pos,7,9999999,int$0);
      return write_7_digit_int(bytes,pos,int$0)}
    function write_8_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_8_digit_int,bytes,pos,8,99999999,int$0);
      return write_8_digit_int(bytes,pos,int$0)}
    function write_9_digit_int$0(bytes,pos,int$0)
     {check_write(cst_write_9_digit_int,bytes,pos,9,999999999,int$0);
      return write_9_digit_int(bytes,pos,int$0)}
    function write_int63(bytes,pos$0,digits$1,int63$1)
     {check_digits(name$53,digits$1);
      var max=max_int63_with(digits$1),len=caml_ml_bytes_length(bytes);
      check_pos(name$53,len,pos$0,digits$1);
      var
       _bfm_=caml_call2(symbol$101,int63$1,zero$4),
       _bfn_=_bfm_ || caml_call2(symbol$100,int63$1,max);
      if(_bfn_)
       {var
         _bfk_=0,
         _bfl_=
          [11,
           cst_out_of_range_0,
           [24,
            _V4_,
            function(param,custom_printf_003)
             {return caml_call1(_Kl_,custom_printf_003)},
            _V3_]];
        caml_call6
         (_Po_,
          [0,
           [2,
            0,
            [12,
             46,
             [2,
              0,
              [11,
               cst$113,
               [24,
                _V5_,
                function(param,custom_printf_004)
                 {return caml_call1(_Kl_,custom_printf_004)},
                _bfl_]]]]],
           cst_s_s_Int63_out_of_range_0_I],
          module_name$6,
          name$53,
          int63$1,
          max,
          _bfk_)}
      var digits=digits$1,int63$0=int63$1;
      for(;;)
       {var switcher=digits - 1 | 0;
        if(8 < switcher >>> 0)
         {var
           digits$0=digits - 9 | 0,
           pos=pos$0 + digits$0 | 0,
           int63=caml_call2(symbol$110,int63$0,int63_billion),
           remainder=
            caml_call2
             (symbol$104,int63$0,caml_call2(symbol$105,int63,int63_billion));
          write_9_digit_int(bytes,pos,caml_call1(to_int_exn$2,remainder));
          var digits=digits$0,int63$0=int63;
          continue}
        switch(switcher)
         {case 0:
           return write_1_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 1:
           return write_2_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 2:
           return write_3_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 3:
           return write_4_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 4:
           return write_5_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 5:
           return write_6_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 6:
           return write_7_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          case 7:
           return write_8_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0));
          default:
           return write_9_digit_int
                   (bytes,pos$0,caml_call1(to_int_exn$2,int63$0))}}}
    function check_read(name,string,pos,digits)
     {var len=caml_ml_string_length(string);
      return check_pos(name,len,pos,digits)}
    function read_1_digit_int$0(string,pos)
     {check_read(cst_read_1_digit_int,string,pos,1);
      return read_1_digit_int(string,pos)}
    function read_2_digit_int$0(string,pos)
     {check_read(cst_read_2_digit_int,string,pos,2);
      return read_2_digit_int(string,pos)}
    function read_3_digit_int$0(string,pos)
     {check_read(cst_read_3_digit_int,string,pos,3);
      return read_3_digit_int(string,pos)}
    function read_4_digit_int$0(string,pos)
     {check_read(cst_read_4_digit_int,string,pos,4);
      return read_4_digit_int(string,pos)}
    function read_5_digit_int$0(string,pos)
     {check_read(cst_read_5_digit_int,string,pos,5);
      return read_5_digit_int(string,pos)}
    function read_6_digit_int$0(string,pos)
     {check_read(cst_read_6_digit_int,string,pos,6);
      return read_6_digit_int(string,pos)}
    function read_7_digit_int$0(string,pos)
     {check_read(cst_read_7_digit_int,string,pos,7);
      return read_7_digit_int(string,pos)}
    function read_8_digit_int$0(string,pos)
     {check_read(cst_read_8_digit_int,string,pos,8);
      return read_8_digit_int(string,pos)}
    function read_9_digit_int$0(string,pos)
     {check_read(cst_read_9_digit_int,string,pos,9);
      return read_9_digit_int(string,pos)}
    function read_int63$0(string,pos,digits)
     {check_digits(name$54,digits);
      var len=caml_ml_string_length(string);
      check_pos(name$54,len,pos,digits);
      return read_int63(string,pos,digits)}
    function read_int63_decimal
     (string,pos$0,decimals,scale$0,round_ties,allow_underscore)
     {var len=caml_ml_string_length(string);
      if(caml_call2(Replace_polymorphic_compare$3[5],decimals,0))
       caml_call5(_Po_,_VX_,module_name$6,name$55,decimals,0);
      var
       _bfi_=caml_call2(symbol$101,scale$0,one$2),
       _bfj_=_bfi_ || caml_call2(symbol$100,scale$0,max_scale);
      if(_bfj_)
       {var
         _bfg_=caml_call1(to_int64$2,max_scale),
         _bfh_=caml_call1(to_int64$2,one$2);
        caml_call7
         (_Po_,
          _VZ_,
          module_name$6,
          name$55,
          caml_call1(to_int64$2,scale$0),
          _bfh_,
          _bfg_,
          0)}
      check_pos(name$55,len,pos$0,decimals);
      var
       scale=caml_call2(symbol$105,scale$0,divisor),
       until=pos$0 + decimals | 0,
       divisor$0=[0,divisor],
       round_at=[0,one$2],
       sum=[0,zero$4],
       pos=[0,pos$0];
      for(;;)
       {if
         (pos[1]
          !==
          until
          &&
          caml_call2(Base_Int63[94][11],round_at[1],scale))
         {var char$0=caml_string_unsafe_get(string,pos[1]),switch$0=0;
          if(58 <= char$0)
           {if(95 === char$0 && allow_underscore)switch$0 = 1}
          else
           if(48 <= char$0)
            {var digit=caml_call1(of_int$2,digit_of_char(char$0));
             divisor$0[1]
             =
             caml_call2(Base_Int63[94][3],divisor$0[1],int63_ten);
             round_at[1]
             =
             caml_call2(Base_Int63[94][3],round_at[1],int63_ten);
             var
              _bfd_=round_at[1],
              _bfe_=caml_call2(Base_Int63[94][3],digit,scale),
              numerator=caml_call2(Base_Int63[94][2],_bfe_,_bfd_),
              denominator=divisor$0[1],
              increment=divide_and_round_up(numerator,denominator),
              _bff_=caml_call2(Base_Int63[94][3],increment,denominator),
              remainder=caml_call2(Base_Int63[94][2],numerator,_bff_);
             round_at[1] = caml_call1(Base_Int63[94][5],remainder);
             sum[1] = caml_call2(Base_Int63[94][1],sum[1],increment);
             divisor$0[1] = caml_call2(min$9,denominator,scale);
             switch$0 = 1}
          if(! switch$0)caml_call4(_Po_,_VW_,module_name$6,name$52,0);
          pos[1] = caml_call1(next$0,pos[1]);
          continue}
        if
         (caml_call2(Base_Int63[94][9],round_at[1],Base_Int63[94][15])
          &&
          !
          round_ties)
         sum[1] = caml_call2(Base_Int63[94][1],sum[1],one$2);
        return sum[1]}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$319);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Digit_string_helpers$0);
    var
     Core_Digit_string_helpers=
      [0,
       write_int63,
       write_1_digit_int$0,
       write_2_digit_int$0,
       write_3_digit_int$0,
       write_4_digit_int$0,
       write_5_digit_int$0,
       write_6_digit_int$0,
       write_7_digit_int$0,
       write_8_digit_int$0,
       write_9_digit_int$0,
       read_int63$0,
       read_1_digit_int$0,
       read_2_digit_int$0,
       read_3_digit_int$0,
       read_4_digit_int$0,
       read_5_digit_int$0,
       read_6_digit_int$0,
       read_7_digit_int$0,
       read_8_digit_int$0,
       read_9_digit_int$0,
       Round,
       read_int63_decimal,
       max_int63_with,
       [0,divide_and_round_up]];
    caml_register_global
     (5381,Core_Digit_string_helpers,"Core__Digit_string_helpers");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Month);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$320);
    caml_call1(Expect_test_collector[5][1],cst_core_src_month_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$321,cst$114);
    function t_of_sexp$62(sexp_004)
     {if(0 === sexp_004[0])
       {var
         _be5_=sexp_004[1],
         _be6_=caml_string_compare(_be5_,cst_apr),
         switch$0=0;
        if(0 <= _be6_)
         if(0 < _be6_)
          {var _be7_=caml_string_compare(_be5_,cst_jun);
           if(0 <= _be7_)
            if(0 < _be7_)
             if(caml_string_notequal(_be5_,cst_mar))
              if(caml_string_notequal(_be5_,cst_may))
               if(caml_string_notequal(_be5_,cst_nov))
                if(caml_string_notequal(_be5_,cst_oct))
                 {if(! caml_string_notequal(_be5_,cst_sep))switch$0 = 9}
                else
                 switch$0 = 10;
               else
                switch$0 = 11;
              else
               switch$0 = 5;
             else
              switch$0 = 3;
            else
             switch$0 = 6;
           else
            if(caml_string_notequal(_be5_,cst_aug))
             if(caml_string_notequal(_be5_,cst_dec))
              if(caml_string_notequal(_be5_,cst_feb))
               if(caml_string_notequal(_be5_,cst_jan))
                {if(! caml_string_notequal(_be5_,cst_jul))switch$0 = 7}
               else
                switch$0 = 1;
              else
               switch$0 = 2;
             else
              switch$0 = 12;
            else
             switch$0 = 8}
         else
          switch$0 = 4;
        else
         {var _be8_=caml_string_compare(_be5_,cst_Jun);
          if(0 <= _be8_)
           if(0 < _be8_)
            if(caml_string_notequal(_be5_,cst_Mar))
             if(caml_string_notequal(_be5_,cst_May))
              if(caml_string_notequal(_be5_,cst_Nov))
               if(caml_string_notequal(_be5_,cst_Oct))
                {if(! caml_string_notequal(_be5_,cst_Sep))switch$0 = 9}
               else
                switch$0 = 10;
              else
               switch$0 = 11;
             else
              switch$0 = 5;
            else
             switch$0 = 3;
           else
            switch$0 = 6;
          else
           if(caml_string_notequal(_be5_,cst_Apr))
            if(caml_string_notequal(_be5_,cst_Aug))
             if(caml_string_notequal(_be5_,cst_Dec))
              if(caml_string_notequal(_be5_,cst_Feb))
               if(caml_string_notequal(_be5_,cst_Jan))
                {if(! caml_string_notequal(_be5_,cst_Jul))switch$0 = 7}
               else
                switch$0 = 1;
              else
               switch$0 = 2;
             else
              switch$0 = 12;
            else
             switch$0 = 8;
           else
            switch$0 = 4}
        switch(switch$0)
         {case 1:return 0;
          case 2:return 1;
          case 3:return 2;
          case 4:return 3;
          case 5:return 4;
          case 6:return 5;
          case 7:return 6;
          case 8:return 7;
          case 9:return 8;
          case 10:return 9;
          case 11:return 10;
          case 12:return 11
          }}
      else
       {var _be9_=sexp_004[1];
        if(! _be9_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_003$1,sexp_004);
        var _be__=_be9_[1];
        if(0 !== _be__[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_003$1,sexp_004);
        var
         _be$_=_be__[1],
         _bfa_=caml_string_compare(_be$_,cst_apr$0),
         switch$1=0;
        if(0 <= _bfa_)
         if(0 < _bfa_)
          {var _bfb_=caml_string_compare(_be$_,cst_jun$0);
           if(0 <= _bfb_)
            if(0 < _bfb_)
             if(caml_string_notequal(_be$_,cst_mar$0))
              if(caml_string_notequal(_be$_,cst_may$0))
               if(caml_string_notequal(_be$_,cst_nov$0))
                if(caml_string_notequal(_be$_,cst_oct$0))
                 {if(! caml_string_notequal(_be$_,cst_sep$0))switch$1 = 9}
                else
                 switch$1 = 10;
               else
                switch$1 = 11;
              else
               switch$1 = 5;
             else
              switch$1 = 3;
            else
             switch$1 = 6;
           else
            if(caml_string_notequal(_be$_,cst_aug$0))
             if(caml_string_notequal(_be$_,cst_dec$0))
              if(caml_string_notequal(_be$_,cst_feb$0))
               if(caml_string_notequal(_be$_,cst_jan$0))
                {if(! caml_string_notequal(_be$_,cst_jul$0))switch$1 = 7}
               else
                switch$1 = 1;
              else
               switch$1 = 2;
             else
              switch$1 = 12;
            else
             switch$1 = 8}
         else
          switch$1 = 4;
        else
         {var _bfc_=caml_string_compare(_be$_,cst_Jun$0);
          if(0 <= _bfc_)
           if(0 < _bfc_)
            if(caml_string_notequal(_be$_,cst_Mar$0))
             if(caml_string_notequal(_be$_,cst_May$0))
              if(caml_string_notequal(_be$_,cst_Nov$0))
               if(caml_string_notequal(_be$_,cst_Oct$0))
                {if(! caml_string_notequal(_be$_,cst_Sep$0))switch$1 = 9}
               else
                switch$1 = 10;
              else
               switch$1 = 11;
             else
              switch$1 = 5;
            else
             switch$1 = 3;
           else
            switch$1 = 6;
          else
           if(caml_string_notequal(_be$_,cst_Apr$0))
            if(caml_string_notequal(_be$_,cst_Aug$0))
             if(caml_string_notequal(_be$_,cst_Dec$0))
              if(caml_string_notequal(_be$_,cst_Feb$0))
               if(caml_string_notequal(_be$_,cst_Jan$0))
                {if(! caml_string_notequal(_be$_,cst_Jul$0))switch$1 = 7}
               else
                switch$1 = 1;
              else
               switch$1 = 2;
             else
              switch$1 = 12;
            else
             switch$1 = 8;
           else
            switch$1 = 4}
        switch(switch$1)
         {case 1:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004);
          case 2:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004);
          case 3:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004);
          case 4:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004);
          case 5:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004);
          case 6:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004);
          case 7:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004);
          case 8:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004);
          case 9:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004);
          case 10:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004);
          case 11:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004);
          case 12:
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$1,sexp_004)
          }}
      return caml_call2
              (Sexplib0_Sexp_conv_error[8],error_source_003$1,sexp_004)}
    function sexp_of_t$76(param)
     {switch(param)
       {case 0:return _V6_;
        case 1:return _V7_;
        case 2:return _V8_;
        case 3:return _V9_;
        case 4:return _V__;
        case 5:return _V$_;
        case 6:return _Wa_;
        case 7:return _Wb_;
        case 8:return _Wc_;
        case 9:return _Wd_;
        case 10:return _We_;
        default:return _Wf_}}
    var compare$65=caml_int_compare;
    function equal$32(_be4_,_be3_){return _be4_ === _be3_?1:0}
    function hash_fold_t$34(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        case 3:return caml_call2(Base_Hash[3],hsv,3);
        case 4:return caml_call2(Base_Hash[3],hsv,4);
        case 5:return caml_call2(Base_Hash[3],hsv,5);
        case 6:return caml_call2(Base_Hash[3],hsv,6);
        case 7:return caml_call2(Base_Hash[3],hsv,7);
        case 8:return caml_call2(Base_Hash[3],hsv,8);
        case 9:return caml_call2(Base_Hash[3],hsv,9);
        case 10:return caml_call2(Base_Hash[3],hsv,10);
        default:return caml_call2(Base_Hash[3],hsv,11)}}
    function hash$35(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_be2_=hash_fold_t$34(hsv,x);
      return caml_call1(Base_Hash[9],_be2_)}
    var _Wg_=0;
    function _Wh_(size_034,random_035){return 11}
    var _Wi_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_Wh_)],_Wg_];
    function _Wj_(size_032,random_033){return 10}
    var _Wk_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_Wj_)],_Wi_];
    function _Wl_(size_030,random_031){return 9}
    var _Wm_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_Wl_)],_Wk_];
    function _Wn_(size_028,random_029){return 8}
    var _Wo_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_Wn_)],_Wm_];
    function _Wp_(size_026,random_027){return 7}
    var _Wq_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_Wp_)],_Wo_];
    function _Wr_(size_024,random_025){return 6}
    var _Ws_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_Wr_)],_Wq_];
    function _Wt_(size_022,random_023){return 5}
    var _Wu_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_Wt_)],_Ws_];
    function _Wv_(size_020,random_021){return 4}
    var _Ww_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_Wv_)],_Wu_];
    function _Wx_(size_018,random_019){return 3}
    var _Wy_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_Wx_)],_Ww_];
    function _Wz_(size_016,random_017){return 2}
    var _WA_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_Wz_)],_Wy_];
    function _WB_(size_014,random_015){return 1}
    var _WC_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_WB_)],_WA_];
    function _WD_(size_012,random_013){return 0}
    var
     _WE_=[0,[0,1.,caml_call1(Base_quickcheck_Generator[117],_WD_)],_WC_],
     quickcheck_generator$16=caml_call1(Base_quickcheck_Generator[60],_WE_);
    function _WF_(x_009,size_010,hash_011)
     {switch(x_009)
       {case 0:
         var hash_011$0=caml_call2(Base[116],hash_011,0);return hash_011$0;
        case 1:
         var hash_011$1=caml_call2(Base[116],hash_011,1);return hash_011$1;
        case 2:
         var hash_011$2=caml_call2(Base[116],hash_011,2);return hash_011$2;
        case 3:
         var hash_011$3=caml_call2(Base[116],hash_011,3);return hash_011$3;
        case 4:
         var hash_011$4=caml_call2(Base[116],hash_011,4);return hash_011$4;
        case 5:
         var hash_011$5=caml_call2(Base[116],hash_011,5);return hash_011$5;
        case 6:
         var hash_011$6=caml_call2(Base[116],hash_011,6);return hash_011$6;
        case 7:
         var hash_011$7=caml_call2(Base[116],hash_011,7);return hash_011$7;
        case 8:
         var hash_011$8=caml_call2(Base[116],hash_011,8);return hash_011$8;
        case 9:
         var hash_011$9=caml_call2(Base[116],hash_011,9);return hash_011$9;
        case 10:
         var hash_011$10=caml_call2(Base[116],hash_011,10);return hash_011$10;
        default:
         var hash_011$11=caml_call2(Base[116],hash_011,11);return hash_011$11}}
    var quickcheck_observer$15=caml_call1(Base_quickcheck_Observer[36],_WF_);
    function _WG_(param)
     {switch(param)
       {case 0:return caml_call1(include$9[68],0);
        case 1:return caml_call1(include$9[68],0);
        case 2:return caml_call1(include$9[68],0);
        case 3:return caml_call1(include$9[68],0);
        case 4:return caml_call1(include$9[68],0);
        case 5:return caml_call1(include$9[68],0);
        case 6:return caml_call1(include$9[68],0);
        case 7:return caml_call1(include$9[68],0);
        case 8:return caml_call1(include$9[68],0);
        case 9:return caml_call1(include$9[68],0);
        case 10:return caml_call1(include$9[68],0);
        default:return caml_call1(include$9[68],0)}}
    var
     quickcheck_shrinker$15=caml_call1(Base_quickcheck_Shrinker[36],_WG_),
     jan=0,
     feb=1,
     mar=2,
     apr=3,
     may=4,
     jun=5,
     jul=6,
     aug=7,
     sep=8,
     oct=9,
     nov=10,
     dec=11;
    function is_jan(param){return param?0:1}
    function is_feb(param){return 1 === param?1:0}
    function is_mar(param){return 2 === param?1:0}
    function is_apr(param){return 3 === param?1:0}
    function is_may(param){return 4 === param?1:0}
    function is_jun(param){return 5 === param?1:0}
    function is_jul(param){return 6 === param?1:0}
    function is_aug(param){return 7 === param?1:0}
    function is_sep(param){return 8 === param?1:0}
    function is_oct(param){return 9 === param?1:0}
    function is_nov(param){return 10 === param?1:0}
    function is_dec(param){return 11 <= param?1:0}
    function jan_val(param){return param?0:_WH_}
    function feb_val(param){return 1 === param?_WI_:0}
    function mar_val(param){return 2 === param?_WJ_:0}
    function apr_val(param){return 3 === param?_WK_:0}
    function may_val(param){return 4 === param?_WL_:0}
    function jun_val(param){return 5 === param?_WM_:0}
    function jul_val(param){return 6 === param?_WN_:0}
    function aug_val(param){return 7 === param?_WO_:0}
    function sep_val(param){return 8 === param?_WP_:0}
    function oct_val(param){return 9 === param?_WQ_:0}
    function nov_val(param){return 10 === param?_WR_:0}
    function dec_val(param){return 11 <= param?_WS_:0}
    var
     jan$0=[0,cst_Jan$1,0,jan],
     feb$0=[0,cst_Feb$1,1,feb],
     mar$0=[0,cst_Mar$1,2,mar],
     apr$0=[0,cst_Apr$1,3,apr],
     may$0=[0,cst_May$1,4,may],
     jun$0=[0,cst_Jun$1,5,jun],
     jul$0=[0,cst_Jul$1,6,jul],
     aug$0=[0,cst_Aug$1,7,aug],
     sep$0=[0,cst_Sep$1,8,sep],
     oct$0=[0,cst_Oct$1,9,oct],
     nov$0=[0,cst_Nov$1,10,nov],
     dec$0=[0,cst_Dec$1,11,dec];
    function fold$13
     (init,
      jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun)
     {return caml_call2
              (dec_fun,
               caml_call2
                (nov_fun,
                 caml_call2
                  (oct_fun,
                   caml_call2
                    (sep_fun,
                     caml_call2
                      (aug_fun,
                       caml_call2
                        (jul_fun,
                         caml_call2
                          (jun_fun,
                           caml_call2
                            (may_fun,
                             caml_call2
                              (apr_fun,
                               caml_call2
                                (mar_fun,
                                 caml_call2(feb_fun,caml_call2(jan_fun,init,jan$0),feb$0),
                                 mar$0),
                               apr$0),
                             may$0),
                           jun$0),
                         jul$0),
                       aug$0),
                     sep$0),
                   oct$0),
                 nov$0),
               dec$0)}
    function iter$19
     (jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun)
     {caml_call1(jan_fun,jan$0);
      caml_call1(feb_fun,feb$0);
      caml_call1(mar_fun,mar$0);
      caml_call1(apr_fun,apr$0);
      caml_call1(may_fun,may$0);
      caml_call1(jun_fun,jun$0);
      caml_call1(jul_fun,jul$0);
      caml_call1(aug_fun,aug$0);
      caml_call1(sep_fun,sep$0);
      caml_call1(oct_fun,oct$0);
      caml_call1(nov_fun,nov$0);
      return caml_call1(dec_fun,dec$0)}
    function map$25
     (t,
      jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun)
     {switch(t)
       {case 0:return caml_call1(jan_fun,jan$0);
        case 1:return caml_call1(feb_fun,feb$0);
        case 2:return caml_call1(mar_fun,mar$0);
        case 3:return caml_call1(apr_fun,apr$0);
        case 4:return caml_call1(may_fun,may$0);
        case 5:return caml_call1(jun_fun,jun$0);
        case 6:return caml_call1(jul_fun,jul$0);
        case 7:return caml_call1(aug_fun,aug$0);
        case 8:return caml_call1(sep_fun,sep$0);
        case 9:return caml_call1(oct_fun,oct$0);
        case 10:return caml_call1(nov_fun,nov$0);
        default:return caml_call1(dec_fun,dec$0)}}
    function make_matcher
     (jan_fun,
      feb_fun,
      mar_fun,
      apr_fun,
      may_fun,
      jun_fun,
      jul_fun,
      aug_fun,
      sep_fun,
      oct_fun,
      nov_fun,
      dec_fun,
      compile_acc)
     {var
       match=caml_call2(jan_fun,jan$0,compile_acc),
       compile_acc$0=match[2],
       jan_gen=match[1],
       match$0=caml_call2(feb_fun,feb$0,compile_acc$0),
       compile_acc$1=match$0[2],
       feb_gen=match$0[1],
       match$1=caml_call2(mar_fun,mar$0,compile_acc$1),
       compile_acc$2=match$1[2],
       mar_gen=match$1[1],
       match$2=caml_call2(apr_fun,apr$0,compile_acc$2),
       compile_acc$3=match$2[2],
       apr_gen=match$2[1],
       match$3=caml_call2(may_fun,may$0,compile_acc$3),
       compile_acc$4=match$3[2],
       may_gen=match$3[1],
       match$4=caml_call2(jun_fun,jun$0,compile_acc$4),
       compile_acc$5=match$4[2],
       jun_gen=match$4[1],
       match$5=caml_call2(jul_fun,jul$0,compile_acc$5),
       compile_acc$6=match$5[2],
       jul_gen=match$5[1],
       match$6=caml_call2(aug_fun,aug$0,compile_acc$6),
       compile_acc$7=match$6[2],
       aug_gen=match$6[1],
       match$7=caml_call2(sep_fun,sep$0,compile_acc$7),
       compile_acc$8=match$7[2],
       sep_gen=match$7[1],
       match$8=caml_call2(oct_fun,oct$0,compile_acc$8),
       compile_acc$9=match$8[2],
       oct_gen=match$8[1],
       match$9=caml_call2(nov_fun,nov$0,compile_acc$9),
       compile_acc$10=match$9[2],
       nov_gen=match$9[1],
       match$10=caml_call2(dec_fun,dec$0,compile_acc$10),
       compile_acc$11=match$10[2],
       dec_gen=match$10[1];
      function _beP_(param){return caml_call1(jan_gen,0)}
      function _beQ_(param){return caml_call1(feb_gen,0)}
      function _beR_(param){return caml_call1(mar_gen,0)}
      function _beS_(param){return caml_call1(apr_gen,0)}
      function _beT_(param){return caml_call1(may_gen,0)}
      function _beU_(param){return caml_call1(jun_gen,0)}
      function _beV_(param){return caml_call1(jul_gen,0)}
      function _beW_(param){return caml_call1(aug_gen,0)}
      function _beX_(param){return caml_call1(sep_gen,0)}
      function _beY_(param){return caml_call1(oct_gen,0)}
      function _beZ_(param){return caml_call1(nov_gen,0)}
      function _be0_(param){return caml_call1(dec_gen,0)}
      return [0,
              function(_be1_)
               {return map$25
                        (_be1_,
                         _beP_,
                         _beQ_,
                         _beR_,
                         _beS_,
                         _beT_,
                         _beU_,
                         _beV_,
                         _beW_,
                         _beX_,
                         _beY_,
                         _beZ_,
                         _be0_)},
              compile_acc$11]}
    function to_rank(param)
     {switch(param)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        case 6:return 6;
        case 7:return 7;
        case 8:return 8;
        case 9:return 9;
        case 10:return 10;
        default:return 11}}
    function to_name(param)
     {switch(param)
       {case 0:return cst_Jan$2;
        case 1:return cst_Feb$2;
        case 2:return cst_Mar$2;
        case 3:return cst_Apr$2;
        case 4:return cst_May$2;
        case 5:return cst_Jun$2;
        case 6:return cst_Jul$2;
        case 7:return cst_Aug$2;
        case 8:return cst_Sep$2;
        case 9:return cst_Oct$2;
        case 10:return cst_Nov$2;
        default:return cst_Dec$2}}
    var
     Variants=
      [0,
       jan$0,
       feb$0,
       mar$0,
       apr$0,
       may$0,
       jun$0,
       jul$0,
       aug$0,
       sep$0,
       oct$0,
       nov$0,
       dec$0,
       fold$13,
       iter$19,
       map$25,
       make_matcher,
       to_rank,
       to_name,
       descriptions];
    function of_int_exn$5(i)
     {var switcher=i - 1 | 0;
      if(11 < switcher >>> 0)return caml_call3(failwithf,_WT_,i,0);
      switch(switcher)
       {case 0:return 0;
        case 1:return 1;
        case 2:return 2;
        case 3:return 3;
        case 4:return 4;
        case 5:return 5;
        case 6:return 6;
        case 7:return 7;
        case 8:return 8;
        case 9:return 9;
        case 10:return 10;
        default:return 11}}
    function of_int$5(i)
     {try {var _beN_=[0,of_int_exn$5(i)];return _beN_}catch(_beO_){return 0}}
    function to_int$6(t)
     {switch(t)
       {case 0:return 1;
        case 1:return 2;
        case 2:return 3;
        case 3:return 4;
        case 4:return 5;
        case 5:return 6;
        case 6:return 7;
        case 7:return 8;
        case 8:return 9;
        case 9:return 10;
        case 10:return 11;
        default:return 12}}
    function to_binable$3(t){return to_int$6(t) - 1 | 0}
    function of_binable$3(i){return of_int_exn$5(i + 1 | 0)}
    var
     include$104=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$57,
           bin_size_t$49,
           bin_write_t$49,
           bin_read_t$100,
           bin_read_t$101]),
        [0,to_binable$3,of_binable$3]),
     bin_size_t$66=include$104[1],
     bin_write_t$67=include$104[2],
     bin_read_t$132=include$104[3],
     bin_read_t$133=include$104[4],
     bin_shape_t$89=include$104[5],
     bin_writer_t$78=include$104[6],
     bin_reader_t$78=include$104[7],
     bin_t$78=include$104[8],
     include$105=caml_call2(_hd_[1][1],compare$65,sexp_of_t$76),
     comparator$20=include$105[1],
     _WU_=
      Make_binable
       ([0,
         hash_fold_t$34,
         bin_size_t$66,
         bin_write_t$67,
         bin_read_t$132,
         bin_read_t$133,
         bin_shape_t$89,
         bin_writer_t$78,
         bin_reader_t$78,
         bin_t$78,
         t_of_sexp$62,
         compare$65,
         sexp_of_t$76,
         to_int$6]),
     hash_fold_t$35=_WU_[1],
     hash$36=_WU_[2],
     hashable$15=_WU_[3],
     Table$15=_WU_[4],
     Hash_set$15=_WU_[5],
     Hash_queue$13=_WU_[6],
     num_months=12;
    function t_of_sexp$63(sexp)
     {var
       match=
        caml_call1(_xU_,function(param){return caml_call1(int_of_sexp,sexp)});
      if(match){var i=match[1];return of_int_exn$5(i + 1 | 0)}
      return t_of_sexp$62(sexp)}
    var
     include$106=
      _w6_
       ([0,
         bin_size_t$66,
         bin_write_t$67,
         bin_read_t$132,
         bin_read_t$133,
         bin_shape_t$89,
         bin_writer_t$78,
         bin_reader_t$78,
         bin_t$78,
         t_of_sexp$63,
         sexp_of_t$76,
         comparator$20]),
     symbol$152=include$106[1],
     symbol$153=include$106[2],
     symbol$154=include$106[3],
     symbol$155=include$106[4],
     symbol$156=include$106[5],
     symbol$157=include$106[6],
     equal$33=include$106[7],
     compare$66=include$106[8],
     min$15=include$106[9],
     max$15=include$106[10],
     ascending$14=include$106[11],
     descending$14=include$106[12],
     between$14=include$106[13],
     clamp_exn$14=include$106[14],
     clamp$14=include$106[15],
     validate_lbound$13=include$106[16],
     validate_ubound$13=include$106[17],
     validate_bound$13=include$106[18],
     Replace_polymorphic_compare$11=include$106[19],
     comparator$21=include$106[20],
     Map$17=include$106[21],
     Set$17=include$106[22];
    function shift$0(t,i)
     {return of_int_exn$5
              (1
               +
               caml_call2(symbol$69,(to_int$6(t) - 1 | 0) + i | 0,num_months)
               |
               0)}
    var
     all_strings=
      [246,
       function(_beM_)
        {return caml_call1
                 (of_list,
                  caml_call2
                   (_qF_,
                    all$4,
                    function(variant)
                     {return caml_call1(to_string$0,sexp_of_t$76(variant))}))}];
    function to_string$21(t)
     {var
       _beK_=caml_obj_tag(all_strings),
       all_strings$0=
        250 === _beK_
         ?all_strings[1]
         :246 === _beK_
           ?caml_call1(CamlinternalLazy[2],all_strings)
           :all_strings,
       _beL_=to_int$6(t) - 1 | 0;
      return caml_check_bound(all_strings$0,_beL_)[1 + _beL_]}
    var
     table$0=
      [246,
       function(_beE_)
        {var table=caml_call3(Table$1[4],0,[0,num_months],0);
         function _beF_(i,s)
          {var t=of_int_exn$5(i + 1 | 0);
           caml_call3(Core_Hashtbl[34],table,s,t);
           var _beI_=caml_call1(_Bu_,s);
           caml_call3(Core_Hashtbl[34],table,_beI_,t);
           var _beJ_=caml_call1(_Bt_,s);
           return caml_call3(Core_Hashtbl[34],table,_beJ_,t)}
         var
          _beG_=caml_obj_tag(all_strings),
          _beH_=
           250 === _beG_
            ?all_strings[1]
            :246 === _beG_
              ?caml_call1(CamlinternalLazy[2],all_strings)
              :all_strings;
         caml_call2(iteri,_beH_,_beF_);
         return table}];
    function of_string$18(str)
     {var
       _beC_=caml_obj_tag(table$0),
       _beD_=
        250 === _beC_
         ?table$0[1]
         :246 === _beC_?caml_call1(CamlinternalLazy[2],table$0):table$0,
       match=caml_call2(Core_Hashtbl[53],_beD_,str);
      if(match){var x=match[1];return x}
      return caml_call3(failwithf,_WV_,str,0)}
    var Export=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$322);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Month$0);
    var
     _WW_=
      [0,
       [0,
        hash_fold_t$34,
        hash$35,
        equal$32,
        bin_size_t$66,
        bin_write_t$67,
        bin_read_t$132,
        bin_read_t$133,
        bin_shape_t$89,
        bin_writer_t$78,
        bin_reader_t$78,
        bin_t$78,
        compare$65,
        t_of_sexp$62,
        sexp_of_t$76,
        comparator$20]],
     Core_Month=
      [0,
       bin_size_t$66,
       bin_write_t$67,
       bin_read_t$132,
       bin_read_t$133,
       bin_shape_t$89,
       bin_writer_t$78,
       bin_reader_t$78,
       bin_t$78,
       quickcheck_generator$16,
       quickcheck_observer$15,
       quickcheck_shrinker$15,
       t_of_sexp$62,
       sexp_of_t$76,
       jan,
       feb,
       mar,
       apr,
       may,
       jun,
       jul,
       aug,
       sep,
       oct,
       nov,
       dec,
       is_jan,
       is_feb,
       is_mar,
       is_apr,
       is_may,
       is_jun,
       is_jul,
       is_aug,
       is_sep,
       is_oct,
       is_nov,
       is_dec,
       jan_val,
       feb_val,
       mar_val,
       apr_val,
       may_val,
       jun_val,
       jul_val,
       aug_val,
       sep_val,
       oct_val,
       nov_val,
       dec_val,
       Variants,
       symbol$152,
       symbol$153,
       symbol$154,
       symbol$155,
       symbol$156,
       symbol$157,
       equal$33,
       compare$66,
       min$15,
       max$15,
       ascending$14,
       descending$14,
       between$14,
       clamp_exn$14,
       clamp$14,
       validate_lbound$13,
       validate_ubound$13,
       validate_bound$13,
       Replace_polymorphic_compare$11,
       comparator$21,
       Map$17,
       Set$17,
       hash_fold_t$35,
       hash$36,
       hashable$15,
       Table$15,
       Hash_set$15,
       Hash_queue$13,
       of_string$18,
       to_string$21,
       all$4,
       of_int$5,
       of_int_exn$5,
       to_int$6,
       shift$0,
       Export,
       _WW_];
    caml_register_global(5382,Core_Month,"Core__Month");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Month_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$323);
    caml_call1(Expect_test_collector[5][1],cst_core_src_month_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$324,cst$115);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$325);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Month_intf$0);
    var Core_Month_intf=[0];
    caml_register_global(5383,Core_Month_intf,"Core__Month_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Date0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$326);
    caml_call1(Expect_test_collector[5][1],cst_core_src_date0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$327,cst$116);
    function is_leap_year(year)
     {var
       _beA_=caml_call2(_Nq_,year % 4 | 0,0),
       _beB_=_beA_?1 - caml_call2(_Nq_,year % 100 | 0,0):_beA_;
      return _beB_?_beB_:caml_call2(_Nq_,year % 400 | 0,0)}
    function hash$37(x){return hash_int(x)}
    var
     Typename_of_t$23=caml_call1(Typerep_lib_Make_typename[1],[0,name$56]),
     typename_of_t$23=Typename_of_t$23[2],
     name_of_t$15=Typename_of_t$23[1],
     typerep_of_t$23=[9,[0,name_of_t$15,[0,typerep_of_int]]],
     _WX_=caml_call1(Bin_prot_Shape[5][1],cst_899ee3e0_490a_11e6_a10a_a3),
     bin_shape_t$90=caml_call1(caml_call1(Bin_prot_Shape[16],_WX_),0);
    function create0(year,month,day)
     {return year << 16 | to_int$6(month) << 8 | day}
    function year(t){return t >>> 16 | 0}
    function month(t){return of_int_exn$5((t >>> 8 | 0) & 255)}
    function day(t){return t & 255}
    function days_in_month(year,month)
     {switch(month)
       {case 1:return is_leap_year(year)?29:28;
        case 3:
        case 5:
        case 8:
        case 10:return 30;
        default:return 31}}
    function create_exn(year,month,day)
     {function invalid(year,month,day,msg)
       {var _bez_=0;
        return caml_call6
                (_Po_,
                 [0,
                  [11,
                   cst_Date_create_exn_y,
                   [4,
                    0,
                    0,
                    0,
                    [11,
                     cst_m,
                     [24,
                      _WZ_,
                      function(param,custom_printf_003)
                       {return to_string$21(custom_printf_003)},
                      _WY_]]]],
                  cst_Date_create_exn_y_d_m_Mont],
                 year,
                 month,
                 day,
                 msg,
                 _bez_)}
      var
       _bex_=caml_call2(_Ns_,year,0),
       _bey_=_bex_ || caml_call2(_Nr_,year,9999);
      if(_bey_)invalid(year,month,day,cst_year_outside_of_0_9999);
      if(caml_call2(_Np_,day,0))invalid(year,month,day,cst_day_0);
      var days_in_month$0=days_in_month(year,month);
      if(caml_call2(_Nr_,day,days_in_month$0))
       invalid(year,month,day,caml_call2(_fx_,_W0_,days_in_month$0));
      return create0(year,month,day)}
    function bin_read_t$134(buf,pos_ref)
     {var
       year=caml_call2(bin_read_t$100,buf,pos_ref),
       month=caml_call2(_WW_[1][6],buf,pos_ref),
       day=caml_call2(bin_read_t$100,buf,pos_ref);
      return create0(year,month,day)}
    function bin_read_t$135(buf,pos_ref)
     {return caml_call2(Bin_prot_Common[19],cst_Date_t,pos_ref[1])}
    var bin_reader_t$79=[0,bin_read_t$134,bin_read_t$135];
    function bin_size_t$67(t)
     {var
       _bev_=caml_call1(bin_size_t$49,t & 255),
       _bew_=caml_call1(bin_size_t$66,month(t));
      return (caml_call1(bin_size_t$49,t >>> 16 | 0) + _bew_ | 0) + _bev_ | 0}
    function bin_write_t$68(buf,pos,t)
     {var
       pos$0=caml_call3(bin_write_t$49,buf,pos,t >>> 16 | 0),
       pos$1=caml_call3(bin_write_t$67,buf,pos$0,month(t));
      return caml_call3(bin_write_t$49,buf,pos$1,t & 255)}
    var
     bin_writer_t$79=[0,bin_size_t$67,bin_write_t$68],
     bin_t$79=[0,bin_shape_t$90,bin_writer_t$79,bin_reader_t$79];
    function to_int$7(t){return t}
    function unchecked_value(n)
     {return create_exn(n >>> 16 | 0,month(n),n & 255)}
    var none$0=0;
    function _W1_(param)
     {function _beu_(param){return unchecked_value(none$0)}
      return caml_call1(Base_Exn[17],_beu_)}
    caml_call8
     (Ppx_inline_test_lib_Runtime[4],
      Inline_test_config,
      cst_invalid_value,
      0,
      cst_core_src_date0_ml$0,
      122,
      8,
      123,
      _W1_);
    function to_string$22(t)
     {var buf=caml_call1(_Dw_,10);
      write_4_digit_int$0(buf,0,t >>> 16 | 0);
      caml_call3(_DE_,buf,4,45);
      write_2_digit_int$0(buf,5,to_int$6(month(t)));
      caml_call3(_DE_,buf,7,45);
      write_2_digit_int$0(buf,8,t & 255);
      return caml_call1(_DO_,buf)}
    function to_string_iso8601_basic(t)
     {var buf=caml_call1(_Dw_,8);
      write_4_digit_int$0(buf,0,t >>> 16 | 0);
      write_2_digit_int$0(buf,4,to_int$6(month(t)));
      write_2_digit_int$0(buf,6,t & 255);
      return caml_call1(_DO_,buf)}
    function to_string_american(t)
     {var buf=caml_call1(_Dw_,10);
      write_2_digit_int$0(buf,0,to_int$6(month(t)));
      caml_call3(_DE_,buf,2,47);
      write_2_digit_int$0(buf,3,t & 255);
      caml_call3(_DE_,buf,5,47);
      write_4_digit_int$0(buf,6,t >>> 16 | 0);
      return caml_call1(_DO_,buf)}
    function parse_year4(str,pos){return read_4_digit_int$0(str,pos)}
    function parse_month(str,pos)
     {return of_int_exn$5(read_2_digit_int$0(str,pos))}
    function parse_day(str,pos){return read_2_digit_int$0(str,pos)}
    function of_string_iso8601_basic(str,pos)
     {if(caml_call2(_Nr_,pos + 8 | 0,caml_ml_string_length(str)))
       caml_call1(_Fa_,cst_Date_of_string_iso8601_bas);
      var _bes_=parse_day(str,pos + 6 | 0),_bet_=parse_month(str,pos + 4 | 0);
      return create_exn(parse_year4(str,pos),_bet_,_bes_)}
    function _W2_(s)
     {function invalid(param)
       {return caml_call1(_Fb_,caml_call2(_Fp_,cst_invalid_date,s))}
      function ensure(b){var _ber_=1 - b;return _ber_?invalid(0):_ber_}
      function month_num(year,month,day)
       {var _bep_=parse_day(s,day),_beq_=parse_month(s,month);
        return create_exn(parse_year4(s,year),_beq_,_bep_)}
      function month_abrv(year,month,day)
       {var
         _ben_=parse_day(s,day),
         _beo_=of_string$18(caml_call3(_AY_,s,month,3));
        return create_exn(parse_year4(s,year),_beo_,_ben_)}
      if(caml_call4(_Bs_,0,0,s,47))
       {var match=caml_call2(_BV_,s,47),switch$0=0;
        if(match)
         {var _bee_=match[2];
          if(_bee_)
           {var _bef_=_bee_[2];
            if(_bef_ && ! _bef_[2])
             {var c=_bef_[1],b=_bee_[1],a=match[1];
              if(caml_call2(_Nq_,caml_ml_string_length(a),4))
               {var d=c,m=b,y=a;switch$0 = 1}
              else
               {var d=b,m=a,y=c;switch$0 = 1}}}}
        if(! switch$0)var _beg_=invalid(0),d=_beg_[3],m=_beg_[2],y=_beg_[1];
        var
         year=caml_call1(of_string$5,y),
         year$0=
          caml_call2(_No_,year,100)
           ?year
           :caml_call2(_Ns_,year,75)?2000 + year | 0:1900 + year | 0,
         month=of_int_exn$5(caml_call1(of_string$5,m)),
         day=caml_call1(of_string$5,d);
        return create_exn(year$0,month,day)}
      if(caml_call4(_Bs_,0,0,s,45))
       {var _beh_=caml_call2(_Nq_,caml_ml_string_length(s),10);
        if(_beh_)
         var
          _bei_=caml_call2(_EL_,caml_string_get(s,4),45),
          _bej_=_bei_?caml_call2(_EL_,caml_string_get(s,7),45):_bei_;
        else
         var _bej_=_beh_;
        ensure(_bej_);
        return month_num(0,5,8)}
      if(caml_call4(_Bs_,0,0,s,32))
       {if
         (caml_call2(_Nq_,caml_ml_string_length(s),11)
          &&
          caml_call2(_EL_,caml_string_get(s,2),32)
          &&
          caml_call2(_EL_,caml_string_get(s,6),32))
         return month_abrv(7,3,0);
        var _bek_=caml_call2(_Nq_,caml_ml_string_length(s),11);
        if(_bek_)
         var
          _bel_=caml_call2(_EL_,caml_string_get(s,4),32),
          _bem_=_bel_?caml_call2(_EL_,caml_string_get(s,8),32):_bel_;
        else
         var _bem_=_bek_;
        ensure(_bem_);
        return month_abrv(0,5,9)}
      return caml_call2(_Nq_,caml_ml_string_length(s),9)
              ?month_abrv(5,2,0)
              :caml_call2(_Nq_,caml_ml_string_length(s),8)
                ?month_num(0,4,6)
                :invalid(0)}
    function of_string$19(s)
     {try
       {var _bed_=_W2_(s);return _bed_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call4(_Po_,_W3_,s,caml_call1(Base_Exn[10],exn),0)}}
    function _W5_(sexp_005)
     {if(0 === sexp_005[0]){var s=sexp_005[1];return of_string$19(s)}
      if(0 === sexp_005[0])
       var
        _beb_=
         caml_call2(Sexplib0_Sexp_conv_error[16],error_source_021,sexp_005);
      else
       {var
         field_sexps_006=sexp_005[1],
         y_007=[0,0],
         m_009=[0,0],
         d_011=[0,0],
         duplicates_013=[0,0],
         extra_014=[0,0],
         param=field_sexps_006;
        for(;;)
         {if(param)
           {var _bd3_=param[1];
            if(1 === _bd3_[0])
             {var _bd4_=_bd3_[1];
              if(_bd4_)
               {var _bd5_=_bd4_[1];
                if(0 === _bd5_[0])
                 {var _bd6_=_bd4_[2],_bd7_=_bd5_[1],switch$0=0;
                  if(! _bd6_ || ! _bd6_[2])switch$0 = 1;
                  if(switch$0)
                   {var
                     tail_023=param[2],
                     field_sexp_016$3=
                      function(_bec_)
                       {function field_sexp_016(param)
                         {if(_bec_)
                           {if(_bec_[2])throw [0,Assert_failure,_W4_];
                            var x_024=_bec_[1];
                            return x_024}
                          return caml_call2
                                  (Sexplib0_Sexp_conv_error[10],error_source_021,sexp_005)}
                        return field_sexp_016},
                     field_sexp_016=field_sexp_016$3(_bd6_);
                    if(caml_string_notequal(_bd7_,cst_d))
                     if(caml_string_notequal(_bd7_,cst_m$0))
                      if(caml_string_notequal(_bd7_,cst_y))
                       {if(Sexplib0_Sexp_conv[26][1])
                         extra_014[1] = [0,_bd7_,extra_014[1]]}
                      else
                       if(y_007[1])
                        duplicates_013[1] = [0,_bd7_,duplicates_013[1]];
                       else
                        {var
                          field_sexp_016$0=field_sexp_016(0),
                          fvalue_020=caml_call1(int_of_sexp,field_sexp_016$0);
                         y_007[1] = [0,fvalue_020]}
                     else
                      if(m_009[1])
                       duplicates_013[1] = [0,_bd7_,duplicates_013[1]];
                      else
                       {var
                         field_sexp_016$1=field_sexp_016(0),
                         fvalue_019=caml_call1(int_of_sexp,field_sexp_016$1);
                        m_009[1] = [0,fvalue_019]}
                    else
                     if(d_011[1])
                      duplicates_013[1] = [0,_bd7_,duplicates_013[1]];
                     else
                      {var
                        field_sexp_016$2=field_sexp_016(0),
                        fvalue_018=caml_call1(int_of_sexp,field_sexp_016$2);
                       d_011[1] = [0,fvalue_018]}
                    var param=tail_023;
                    continue}}}}
            caml_call2(Sexplib0_Sexp_conv_error[10],error_source_021,_bd3_)}
          if(duplicates_013[1])
           var
            _beb_=
             caml_call3
              (Sexplib0_Sexp_conv_error[12],
               error_source_021,
               duplicates_013[1],
               sexp_005);
          else
           if(extra_014[1])
            var
             _beb_=
              caml_call3
               (Sexplib0_Sexp_conv_error[13],
                error_source_021,
                extra_014[1],
                sexp_005);
           else
            {var _bd8_=y_007[1],_bd9_=m_009[1],_bd__=d_011[1],switch$1=0;
             if(_bd8_ && _bd9_ && _bd__)
              var
               d_012=_bd__[1],
               m_010=_bd9_[1],
               y_008=_bd8_[1],
               _beb_=[0,y_008,m_010,d_012];
             else
              switch$1 = 1;
             if(switch$1)
              var
               _beb_=
                caml_call3
                 (Sexplib0_Sexp_conv_error[15],
                  error_source_021,
                  sexp_005,
                  [0,
                   [0,0 === y_007[1]?1:0,cst_y$0],
                   [0,
                    [0,0 === m_009[1]?1:0,cst_m$1],
                    [0,[0,0 === d_011[1]?1:0,cst_d$0],0]]])}
          break}}
      var _bd$_=_beb_[3],_bea_=of_int_exn$5(_beb_[2]);
      return create_exn(_beb_[1],_bea_,_bd$_)}
    function t_of_sexp$64(s)
     {try
       {var _bd2_=_W5_(s);return _bd2_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        if(exn[1] === _On_)throw exn;
        if(exn[1] === Stdlib[6]){var a=exn[2];return caml_call2(_Oo_,a,s)}
        throw exn}}
    function sexp_of_t$77(t){return [0,to_string$22(t)]}
    var t_sexp_grammar$21=caml_call1(Sexplib_Sexp_grammar[1],include$19[62]);
    function compare$67(t1,t2)
     {var n=caml_call2(compare$42,t1 >>> 16 | 0,t2 >>> 16 | 0);
      if(caml_call2(_Nt_,n,0))return n;
      var _bd1_=month(t2),n$0=caml_call2(compare$66,month(t1),_bd1_);
      return caml_call2(_Nt_,n$0,0)
              ?n$0
              :caml_call2(compare$42,t1 & 255,t2 & 255)}
    var
     include$107=caml_call2(_hd_[1][1],compare$67,sexp_of_t$77),
     comparator$22=include$107[1],
     _W6_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$67,
         bin_write_t$68,
         bin_read_t$134,
         bin_read_t$135,
         bin_shape_t$90,
         bin_writer_t$79,
         bin_reader_t$79,
         bin_t$79,
         compare$67,
         t_of_sexp$64,
         sexp_of_t$77,
         comparator$22]),
     Map$18=_W6_[1],
     Set$18=_W6_[2],
     include$108=
      caml_call1
       (Stable$3[1][1],
        [0,
         bin_size_t$67,
         bin_write_t$68,
         bin_read_t$134,
         bin_read_t$135,
         bin_shape_t$90,
         bin_writer_t$79,
         bin_reader_t$79,
         bin_t$79,
         t_of_sexp$64,
         compare$67,
         sexp_of_t$77,
         hash$37]),
     Table$16=include$108[1],
     Hash_set$16=include$108[2],
     hashable$16=include$108[3],
     _W7_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$175),0,bin_shape_int],0],
     _W8_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_date0_ml_283_6),
     group$102=caml_call2(Bin_prot_Shape[6],_W8_,_W7_),
     _W9_=caml_call1(Bin_prot_Shape[2][1],cst_t$176),
     bin_shape_t$91=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$102,_W9_),0),
     bin_writer_t$80=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$80=[0,bin_read_t$100,bin_read_t$101],
     bin_t$80=[0,bin_shape_t$91,bin_writer_t$80,bin_reader_t$80],
     _W__=caml_call1(Bin_prot_Shape[5][1],cst_826a3e79_3321_451a_9707_ed),
     bin_shape_t$92=caml_call1(caml_call1(Bin_prot_Shape[16],_W__),0);
    function hash$38(x){return hash_int(x)}
    var
     Typename_of_t$24=caml_call1(Typerep_lib_Make_typename[1],[0,name$57]),
     typename_of_t$24=Typename_of_t$24[2],
     name_of_t$16=Typename_of_t$24[1],
     typerep_of_t$24=[9,[0,name_of_t$16,[0,typerep_of_int]]];
    function is_none(t){return caml_call2(_Nq_,t,none$0)}
    function is_some(t){return 1 - is_none(t)}
    function some_is_representable(param){return 1}
    function some(t){return t}
    function to_option(t){return is_some(t)?[0,unchecked_value(t)]:0}
    function of_option(opt){if(opt){var v=opt[1];return v}return none$0}
    function value_exn(t)
     {if(is_some(t))return unchecked_value(t);
      var
       _bd0_=
        [0,caml_call1(Sexplib0_Sexp_conv[7],cst_Date_Option_value_exn_none),0];
      return caml_call1
              (_nX_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_core_src_date0_ml_308_31),
                 _bd0_]])}
    function value$2(t,default$0)
     {return is_some(t)?unchecked_value(t):default$0}
    function sexp_of_t$78(t)
     {return caml_call2(sexp_of_option,sexp_of_t$77,to_option(t))}
    function t_of_sexp$65(sexp)
     {return of_option
              (caml_call1(caml_call1(option_of_sexp,t_of_sexp$64),sexp))}
    var
     _W$_=caml_call1(_xk_,t_sexp_grammar$21),
     t_sexp_grammar$22=caml_call1(Sexplib_Sexp_grammar[1],_W$_),
     C$0=
      _w6_
       ([0,
         bin_size_t$67,
         bin_write_t$68,
         bin_read_t$134,
         bin_read_t$135,
         bin_shape_t$90,
         bin_writer_t$79,
         bin_reader_t$79,
         bin_t$79,
         t_of_sexp$64,
         sexp_of_t$77,
         comparator$22]),
     symbol$158=C$0[1],
     symbol$159=C$0[2],
     symbol$160=C$0[3],
     symbol$161=C$0[4],
     symbol$162=C$0[5],
     symbol$163=C$0[6],
     equal$34=C$0[7],
     compare$68=C$0[8],
     min$16=C$0[9],
     max$16=C$0[10],
     ascending$15=C$0[11],
     descending$15=C$0[12],
     between$15=C$0[13],
     clamp_exn$15=C$0[14],
     clamp$15=C$0[15],
     validate_lbound$14=C$0[16],
     validate_ubound$14=C$0[17],
     validate_bound$14=C$0[18],
     Replace_polymorphic_compare$12=C$0[19],
     comparator$23=C$0[20],
     Map$19=C$0[21],
     Set$19=C$0[22],
     symbol$164=C$0[6],
     symbol$165=C$0[5],
     symbol$166=C$0[4],
     symbol$167=C$0[3],
     symbol$168=C$0[2],
     symbol$169=C$0[1],
     O$1=[0,symbol$169,symbol$168,symbol$167,symbol$166,symbol$165,symbol$164];
    function compare$69(a,b){return caml_call2(compare$68,a,b)}
    var
     include$109=
      Make_binable
       ([0,
         hash_fold_t$19,
         bin_size_t$67,
         bin_write_t$68,
         bin_read_t$134,
         bin_read_t$135,
         bin_shape_t$90,
         bin_writer_t$79,
         bin_reader_t$79,
         bin_t$79,
         t_of_sexp$64,
         compare$69,
         sexp_of_t$77,
         hash$37]),
     hash_fold_t$36=include$109[1],
     hash$39=include$109[2],
     hashable$17=include$109[3],
     Table$17=include$109[4],
     Hash_set$17=include$109[5],
     Hash_queue$14=include$109[6],
     include$110=
      caml_call1(Base_Pretty_printer[2],[0,module_name$7,to_string$22]),
     _Xa_=include$110[1],
     unix_epoch=create_exn(1970,0,1);
    function of_year(y)
     {return (((365 * y | 0) + (y / 4 | 0) | 0) - (y / 100 | 0) | 0)
             +
             (y / 400 | 0)
             |
             0}
    function of_date(date)
     {var
       m=caml_call2(symbol$69,to_int$6(month(date)) + 9 | 0,12),
       y=(date >>> 16 | 0) - (m / 10 | 0) | 0;
      return (of_year(y) + (((m * 306 | 0) + 5 | 0) / 10 | 0) | 0)
             +
             ((date & 255) - 1 | 0)
             |
             0}
    var
     c_10_000=caml_call1(of_int$2,10000),
     c_14_780=caml_call1(of_int$2,14780),
     c_3_652_425=caml_call1(of_int$2,3652425);
    function to_date(days)
     {var
       y=
        caml_call1
         (to_int_exn$2,
          caml_call2
           (symbol$110,
            caml_call2
             (symbol$103,
              caml_call2(symbol$105,c_10_000,caml_call1(of_int$2,days)),
              c_14_780),
            c_3_652_425)),
       ddd=days - of_year(y) | 0;
      if(ddd < 0)
       var y$0=y - 1 | 0,ddd$0=days - of_year(y$0) | 0,y$1=y$0;
      else
       var ddd$0=ddd,y$1=y;
      var
       mi=((100 * ddd$0 | 0) + 52 | 0) / 3060 | 0,
       y$2=y$1 + ((mi + 2 | 0) / 12 | 0) | 0,
       m=caml_call2(symbol$69,mi + 2 | 0,12) + 1 | 0,
       d=(ddd$0 - (((mi * 306 | 0) + 5 | 0) / 10 | 0) | 0) + 1 | 0;
      return create_exn(y$2,of_int_exn$5(m),d)}
    var unix_epoch$0=of_date(unix_epoch);
    function add_days(t,days){return t + days | 0}
    function diff$4(t1,t2){return t1 - t2 | 0}
    var Days=[0,of_date,to_date,diff$4,add_days,unix_epoch$0];
    function add_days$0(t,days)
     {var _bdY_=caml_call1(Days[1],t),_bdZ_=caml_call2(Days[4],_bdY_,days);
      return caml_call1(Days[2],_bdZ_)}
    function diff$5(t1,t2)
     {var _bdW_=caml_call1(Days[1],t2),_bdX_=caml_call1(Days[1],t1);
      return caml_call2(Days[3],_bdX_,_bdW_)}
    function add_months(t,n)
     {var
       total_months=to_int$6(month(t)) + n | 0,
       y=(t >>> 16 | 0) + caml_call2(symbol$70,total_months,12) | 0,
       m=caml_call2(symbol$69,total_months,12);
      if(m === 0)var m$0=m + 12 | 0,y$0=y - 1 | 0;else var m$0=m,y$0=y;
      var m$1=of_int_exn$5(m$0);
      function try_create(d)
       {var d$0=d;
        for(;;)
         try
          {var _bdU_=create_exn(y$0,m$1,d$0);return _bdU_}
         catch(_bdV_)
          {if(1 <= d$0){var d$1=d$0 - 1 | 0,d$0=d$1;continue}
           throw [0,Assert_failure,_Xb_]}}
      return try_create(t & 255)}
    function add_years(t,n){return add_months(t,n * 12 | 0)}
    var table$1=_Xc_.slice();
    function day_of_week(t)
     {var
       m=to_int$6(month(t)),
       y=m < 3?(t >>> 16 | 0) - 1 | 0:t >>> 16 | 0,
       _bdT_=m - 1 | 0;
      return of_int_exn$4
              (caml_call2
                (symbol$69,
                 ((((y + (y / 4 | 0) | 0) - (y / 100 | 0) | 0)
                   +
                   (y / 400 | 0)
                   |
                   0)
                  +
                  caml_check_bound(table$1,_bdT_)[1 + _bdT_]
                  |
                  0)
                 +
                 (t & 255)
                 |
                 0,
                 7))}
    var non_leap_year_table=_Xd_.slice(),leap_year_table=_Xe_.slice();
    function ordinal_date(t)
     {var
       table=is_leap_year(t >>> 16 | 0)?leap_year_table:non_leap_year_table,
       _bdS_=to_int$6(month(t)) - 1 | 0,
       offset=caml_check_bound(table,_bdS_)[1 + _bdS_];
      return (t & 255) + offset | 0}
    function last_week_of_year(y)
     {var first_of_year=create_exn(y,0,1);
      function is(t,day){return caml_call2(equal$31,day_of_week(t),day)}
      if(! is(first_of_year,4))
       {var switch$0=0;
        if(! is_leap_year(y) || ! is(first_of_year,3))switch$0 = 1;
        if(switch$0)return 52}
      return 53}
    function call_with_week_and_year(t,f)
     {var
       ordinal=ordinal_date(t),
       weekday=iso_8601_weekday_number(day_of_week(t)),
       week=((ordinal - weekday | 0) + 10 | 0) / 7 | 0,
       year=t >>> 16 | 0;
      return week < 1
              ?caml_call2(f,last_week_of_year(year - 1 | 0),year - 1 | 0)
              :last_week_of_year(year) < week
                ?caml_call2(f,1,year + 1 | 0)
                :caml_call2(f,week,year)}
    function week_number_and_year(t)
     {return call_with_week_and_year
              (t,function(week,year){return [0,week,year]})}
    function week_number(t)
     {return call_with_week_and_year(t,function(week,param){return week})}
    function is_weekend(t){return is_sun_or_sat(day_of_week(t))}
    function is_weekday(t){return 1 - is_weekend(t)}
    function is_business_day(t,is_holiday)
     {var _bdQ_=is_weekday(t),_bdR_=_bdQ_?1 - caml_call1(is_holiday,t):_bdQ_;
      return _bdR_}
    function diff_weekend_days(t1,t2)
     {if(caml_call2(symbol$162,t1,t2))return - diff_weekend_days(t2,t1) | 0;
      var
       diff=diff$5(t1,t2),
       d1=day_of_week(t1),
       d2=day_of_week(t2),
       _bdN_=to_int$5(d2),
       num_satsun_crossings=
        to_int$5(d1) < _bdN_?1 + (diff / 7 | 0) | 0:diff / 7 | 0,
       _bdO_=caml_call2(symbol$148,d1,0)?-1:0,
       _bdP_=caml_call2(symbol$148,d2,0)?1:0;
      return ((num_satsun_crossings * 2 | 0) + _bdP_ | 0) + _bdO_ | 0}
    function diff_weekdays(t1,t2)
     {var _bdM_=diff_weekend_days(t1,t2);return diff$5(t1,t2) - _bdM_ | 0}
    function add_days_skipping(t,skip,n)
     {var step=0 <= n?1:-1,k$1=caml_call1(_Ff_,n),t$0=t,k=k$1;
      for(;;)
       {var t$1=add_days$0(t$0,step);
        if(caml_call1(skip,t$0)){var t$0=t$1;continue}
        if(k === 0)return t$0;
        var k$0=k - 1 | 0,t$0=t$1,k=k$0;
        continue}}
    function first_day_satisfying(t,step,condition)
     {var t$0=t;
      for(;;)
       {if(caml_call1(condition,t$0))return t$0;
        var t$1=add_days$0(t$0,step),t$0=t$1;
        continue}}
    function next_day_satisfying(t,step,condition)
     {var next_day=add_days$0(t,step);
      return first_day_satisfying(next_day,step,condition)}
    function following_weekday(t){return next_day_satisfying(t,1,is_weekday)}
    function previous_weekday(t){return next_day_satisfying(t,-1,is_weekday)}
    function add_weekdays_rounding_in_direc(t,n)
     {return add_days_skipping(t,is_weekend,n)}
    function add_weekdays_rounding_forward(t,n)
     {return add_days_skipping
              (first_day_satisfying(t,1,is_weekday),is_weekend,n)}
    function add_weekdays_rounding_backward(t,n)
     {return add_days_skipping
              (first_day_satisfying(t,-1,is_weekday),is_weekend,n)}
    function add_business_days_rounding_in_(t,is_holiday,n)
     {return add_days_skipping
              (t,
               function(d)
                {var _bdL_=is_weekend(d);
                 return _bdL_?_bdL_:caml_call1(is_holiday,d)},
               n)}
    function add_business_days_rounding_for(t,is_holiday,n)
     {function _bdJ_(d){return 1 - is_business_day(d,is_holiday)}
      return add_days_skipping
              (first_day_satisfying
                (t,
                 1,
                 function(_bdK_){return is_business_day(_bdK_,is_holiday)}),
               _bdJ_,
               n)}
    function add_business_days_rounding_bac(t,is_holiday,n)
     {function _bdH_(d){return 1 - is_business_day(d,is_holiday)}
      return add_days_skipping
              (first_day_satisfying
                (t,
                 -1,
                 function(_bdI_){return is_business_day(_bdI_,is_holiday)}),
               _bdH_,
               n)}
    function dates_between(t1,t)
     {var t$0=t,l=0;
      for(;;)
       {if(caml_call2(symbol$162,t$0,t1))return l;
        var l$0=[0,t$0,l],t$1=add_days$0(t$0,-1),t$0=t$1,l=l$0;
        continue}}
    function weekdays_between(min,max)
     {var all_dates=dates_between(min,max);
      function _bdG_(first_date)
       {var
         first_weekday=day_of_week(first_date),
         date_and_weekdays=
          caml_call2
           (_qZ_,
            all_dates,
            function(i,date){return [0,date,shift(first_weekday,i)]});
        return caml_call2
                (_rr_,
                 date_and_weekdays,
                 function(param)
                  {var weekday=param[2],date=param[1];
                   return is_sun_or_sat(weekday)?0:[0,date]})}
      return caml_call3(_xF_,caml_call1(_qu_,all_dates),0,_bdG_)}
    function business_dates_between(min,max,is_holiday)
     {function _bdF_(d){return 1 - caml_call1(is_holiday,d)}
      return caml_call2(_qj_,weekdays_between(min,max),_bdF_)}
    function first_strictly_after(t,dow)
     {var
       dow$0=to_int$5(dow),
       tplus1=add_days$0(t,1),
       cur=to_int$5(day_of_week(tplus1)),
       diff=((dow$0 + 7 | 0) - cur | 0) % 7 | 0;
      return add_days$0(tplus1,diff)}
    function gen_uniform_incl(d1,d2)
     {if(caml_call2(symbol$161,d1,d2))
       {var
         _bdB_=[0,[1,[0,_Xf_,[0,sexp_of_t$77(d2),0]]],0],
         _bdC_=[0,[1,[0,_Xg_,[0,sexp_of_t$77(d1),0]]],_bdB_];
        caml_call1
         (_nX_,
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Date_gen_uniform_incl_boun),
            _bdC_]])}
      function _bdD_(days){return add_days$0(d1,days)}
      var _bdE_=caml_call2(_Jx_,0,diff$5(d2,d1));
      return caml_call2(_pD_[10],_bdE_,_bdD_)}
    function gen_incl(d1,d2)
     {var
       _bdy_=[0,[0,18.,gen_uniform_incl(d1,d2)],0],
       _bdz_=[0,[0,1.,caml_call1(_pD_[9],d2)],_bdy_],
       _bdA_=[0,[0,1.,caml_call1(_pD_[9],d1)],_bdz_];
      return caml_call1(_pD_[64],_bdA_)}
    var
     _Xh_=of_string$19(cst_2100_01_01),
     quickcheck_generator$17=gen_incl(of_string$19(cst_1900_01_01),_Xh_);
    function _Xi_(t,param,hash){return caml_call2(hash_fold_t$36,hash,t)}
    var
     quickcheck_observer$16=caml_call1(_pC_[1],_Xi_),
     quickcheck_shrinker$16=caml_call1(_pB_[3],0),
     Private$2=[0,leap_year_table,non_leap_year_table,ordinal_date],
     Optional_syntax=[0,is_none,unchecked_value],
     Optional_syntax$0=[0,Optional_syntax],
     _Xj_=caml_call1(_yd_,quickcheck_generator$17),
     quickcheck_generator$18=caml_call2(_pD_[10],_Xj_,of_option),
     _Xk_=caml_call1(_yf_,quickcheck_shrinker$16),
     quickcheck_shrinker$17=caml_call3(_pB_[6],_Xk_,of_option,to_option);
    function hash$40(x){return hash$38(x)}
    var
     quickcheck_observer$17=caml_call1(_pC_[3],[0,hash_fold_t$19,hash$40]),
     include$111=Make_plain$1([0,compare$42,sexp_of_t$78]),
     symbol$170=include$111[1],
     symbol$171=include$111[2],
     symbol$172=include$111[3],
     symbol$173=include$111[4],
     symbol$174=include$111[5],
     symbol$175=include$111[6],
     equal$35=include$111[7],
     compare$70=include$111[8],
     min$17=include$111[9],
     max$17=include$111[10],
     ascending$16=include$111[11],
     descending$16=include$111[12],
     between$16=include$111[13],
     clamp_exn$16=include$111[14],
     clamp$16=include$111[15],
     comparator$24=include$111[16],
     validate_lbound$15=include$111[17],
     validate_ubound$15=include$111[18],
     validate_bound$15=include$111[19],
     Replace_polymorphic_compare$13=include$111[20],
     Map$20=include$111[21],
     Set$20=include$111[22];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$328);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Date0$0);
    var
     Stable$7=
      [0,
       [0,
        equal$24,
        hash_fold_t$19,
        hash$37,
        t_sexp_grammar$21,
        to_int$7,
        unchecked_value,
        bin_size_t$67,
        bin_write_t$68,
        bin_read_t$134,
        bin_read_t$135,
        bin_shape_t$90,
        bin_writer_t$79,
        bin_reader_t$79,
        bin_t$79,
        compare$67,
        t_of_sexp$64,
        sexp_of_t$77,
        comparator$22,
        Map$18,
        Set$18,
        Table$16,
        Hash_set$16,
        hashable$16],
       [0,
        [0,
         bin_size_t$49,
         bin_write_t$49,
         bin_read_t$100,
         bin_read_t$101,
         bin_shape_t$92,
         bin_writer_t$80,
         bin_reader_t$80,
         bin_t$80,
         compare$42,
         t_of_sexp$65,
         sexp_of_t$78,
         t_sexp_grammar$22]]],
     Option=
      [0,
       t_sexp_grammar$22,
       hash_fold_t$19,
       hash$38,
       sexp_of_t$78,
       typerep_of_t$24,
       typename_of_t$24,
       none$0,
       some,
       some_is_representable,
       is_none,
       is_some,
       value$2,
       value_exn,
       unchecked_value,
       to_option,
       of_option,
       Optional_syntax$0,
       symbol$170,
       symbol$171,
       symbol$172,
       symbol$173,
       symbol$174,
       symbol$175,
       equal$35,
       compare$70,
       min$17,
       max$17,
       ascending$16,
       descending$16,
       between$16,
       clamp_exn$16,
       clamp$16,
       comparator$24,
       validate_lbound$15,
       validate_ubound$15,
       validate_bound$15,
       Replace_polymorphic_compare$13,
       Map$20,
       Set$20,
       quickcheck_generator$18,
       quickcheck_observer$17,
       quickcheck_shrinker$17],
     include$112=
      [0,
       bin_size_t$67,
       bin_write_t$68,
       bin_read_t$134,
       bin_read_t$135,
       bin_shape_t$90,
       bin_writer_t$79,
       bin_reader_t$79,
       bin_t$79,
       t_of_sexp$64,
       sexp_of_t$77,
       t_sexp_grammar$21,
       typerep_of_t$23,
       typename_of_t$23,
       hash_fold_t$36,
       hash$39,
       hashable$17,
       Table$17,
       Hash_set$17,
       Hash_queue$14,
       of_string$19,
       to_string$22,
       symbol$158,
       symbol$159,
       symbol$160,
       symbol$161,
       symbol$162,
       symbol$163,
       equal$34,
       compare$68,
       min$16,
       max$16,
       ascending$15,
       descending$15,
       between$15,
       clamp_exn$15,
       clamp$15,
       validate_lbound$14,
       validate_ubound$14,
       validate_bound$14,
       Replace_polymorphic_compare$12,
       comparator$23,
       Map$19,
       Set$19,
       _Xa_,
       create_exn,
       of_string_iso8601_basic,
       to_string_iso8601_basic,
       to_string_american,
       day,
       month,
       year,
       day_of_week,
       week_number_and_year,
       week_number,
       is_weekend,
       is_weekday,
       is_business_day,
       add_days$0,
       add_months,
       add_years,
       diff$5,
       diff_weekdays,
       diff_weekend_days,
       add_weekdays_rounding_backward,
       add_weekdays_rounding_forward,
       add_business_days_rounding_bac,
       add_business_days_rounding_for,
       add_weekdays_rounding_in_direc,
       add_weekdays_rounding_in_direc,
       add_business_days_rounding_in_,
       add_business_days_rounding_in_,
       add_days_skipping,
       dates_between,
       business_dates_between,
       weekdays_between,
       previous_weekday,
       following_weekday,
       first_strictly_after,
       days_in_month,
       is_leap_year,
       unix_epoch,
       quickcheck_generator$17,
       quickcheck_observer$16,
       quickcheck_shrinker$16,
       gen_incl,
       gen_uniform_incl,
       Days,
       Option,
       Stable$7,
       O$1,
       Private$2];
    caml_register_global(5384,include$112,"Core__Date0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Immediate_option_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$329);
    caml_call1(Expect_test_collector[5][1],cst_core_src_immediate_option_);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$330,cst$117);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$331);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Immediate_option_intf$0);
    var Core_Immediate_option_intf=[0];
    caml_register_global
     (5385,Core_Immediate_option_intf,"Core__Immediate_option_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Date0_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$332);
    caml_call1(Expect_test_collector[5][1],cst_core_src_date0_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$333,cst$118);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$334);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Date0_intf$0);
    var Core_Date0_intf=[0];
    caml_register_global(5386,Core_Date0_intf,"Core__Date0_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Immediate_option);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$335);
    caml_call1(Expect_test_collector[5][1],cst_core_src_immediate_option_$0);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$336,cst$119);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$337);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Immediate_option$0);
    var Core_Immediate_option=[0];
    caml_register_global(5387,Core_Immediate_option,"Core__Immediate_option");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Ofday_helpers);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$338);
    caml_call1(Expect_test_collector[5][1],cst_core_src_ofday_helpers_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$339,cst$120);
    function suffixes(char$0)
     {function _bdt_(suffix)
       {var _bdx_=[0,caml_call1(_Bt_,suffix),0];
        return [0,caml_call1(_Bu_,suffix),_bdx_]}
      var
       _bdu_=[0,caml_call2(_fx_,_Xl_,char$0),0],
       _bdv_=[0,caml_call2(_fx_,_Xm_,char$0),_bdu_],
       _bdw_=[0,caml_call2(_fx_,_Xn_,char$0),_bdv_];
      return caml_call2(_qK_,[0,caml_call2(_fx_,_Xo_,char$0),_bdw_],_bdt_)}
    var
     am_suffixes=[246,function(_bds_){return suffixes(65)}],
     pm_suffixes=[246,function(_bdr_){return suffixes(80)}];
    function find_suffix(string,suffixes)
     {var suffixes$0=suffixes;
      for(;;)
       {if(suffixes$0)
         {var suffixes$1=suffixes$0[2],suffix=suffixes$0[1];
          if(caml_call2(_BP_,string,suffix))return suffix;
          var suffixes$0=suffixes$1;
          continue}
        return cst$121}}
    function has_colon(string,pos,until)
     {var _bdq_=caml_call2(_Ns_,pos,until);
      return _bdq_?caml_call2(equal_char,58,caml_string_get(string,pos)):_bdq_}
    function decrement_length_if_ends_in_sp(string,len)
     {if
       (caml_call2(_Nr_,len,0)
        &&
        caml_call2(equal_char,32,caml_string_get(string,len - 1 | 0)))
       return len - 1 | 0;
      return len}
    function invalid_string(string,reason)
     {var
       _bdo_=[0,caml_call1(Sexplib0_Sexp_conv[7],reason),0],
       _bdp_=[0,caml_call1(Sexplib0_Sexp_conv[7],string),_bdo_];
      return caml_call1
              (_nX_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Time_Ofday_invalid_string),
                 _bdp_]])}
    function parse$0(string,f)
     {var
       len=caml_ml_string_length(string),
       _bdf_=caml_obj_tag(am_suffixes),
       _bdg_=
        250 === _bdf_
         ?am_suffixes[1]
         :246 === _bdf_
           ?caml_call1(CamlinternalLazy[2],am_suffixes)
           :am_suffixes,
       match$0=find_suffix(string,_bdg_),
       _bdh_=caml_obj_tag(pm_suffixes),
       _bdi_=
        250 === _bdh_
         ?pm_suffixes[1]
         :246 === _bdh_
           ?caml_call1(CamlinternalLazy[2],pm_suffixes)
           :pm_suffixes,
       match$1=find_suffix(string,_bdi_),
       switch$0=0;
      if
       (caml_string_notequal(match$0,cst$122)
        ||
        caml_string_notequal(match$1,cst$125))
       switch$0 = 1;
      else
       var until=len,am_or_pm=760146199;
      if(switch$0)
       if(caml_string_notequal(match$1,cst$123))
        {if(caml_string_notequal(match$0,cst$124))
          throw [0,Assert_failure,_Xp_];
         var
          until=
           decrement_length_if_ends_in_sp
            (string,len - caml_ml_string_length(match$1) | 0),
          am_or_pm=760152914}
       else
        var
         until=
          decrement_length_if_ends_in_sp
           (string,len - caml_ml_string_length(match$0) | 0),
         am_or_pm=760149569;
      var pos$0=0;
      if(has_colon(string,1,until))
       var
        expect_minutes_and_seconds=1047113856,
        hr=read_1_digit_int$0(string,pos$0),
        pos$1=2;
      else
       if(has_colon(string,2,until))
        var
         expect_minutes_and_seconds=1047113856,
         hr=read_2_digit_int$0(string,pos$0),
         pos$1=3;
       else
        if(caml_call2(_Nq_,1,until))
         var
          expect_minutes_and_seconds=866457669,
          hr=read_1_digit_int$0(string,pos$0),
          pos$1=1;
        else
         if(caml_call2(_Nq_,2,until))
          var
           expect_minutes_and_seconds=866457669,
           hr=read_2_digit_int$0(string,pos$0),
           pos$1=2;
         else
          var
           hr$1=read_2_digit_int$0(string,pos$0),
           expect_minutes_and_seconds=-316951979,
           hr=hr$1,
           pos$1=2;
      if(866457669 === expect_minutes_and_seconds)
       var expect_seconds=0,min=0,pos$2=pos$1;
      else
       if(has_colon(string,pos$1 + 2 | 0,until))
        var
         _bdm_=
          1047113856 <= expect_minutes_and_seconds
           ?1
           :invalid_string(string,cst_expected_end_of_string_aft),
         expect_seconds=_bdm_,
         min=read_2_digit_int$0(string,pos$1),
         pos$2=pos$1 + 3 | 0;
       else
        if(caml_call2(_Nq_,pos$1 + 2 | 0,until))
         var
          expect_seconds=0,
          min=read_2_digit_int$0(string,pos$1),
          pos$2=pos$1 + 2 | 0;
        else
         var
          _bdn_=invalid_string(string,cst_expected_colon_or_am_pm_su),
          expect_seconds=_bdn_[3],
          min=_bdn_[2],
          pos$2=_bdn_[1];
      if(expect_seconds)
       if(caml_call2(_Nr_,pos$2 + 2 | 0,until))
        var
         _bdj_=invalid_string(string,cst_expected_two_digits_of_sec),
         subsec_nonzero=_bdj_[4],
         subsec_len=_bdj_[3],
         subsec_pos=_bdj_[2],
         sec=_bdj_[1];
       else
        {var sec$1=read_2_digit_int$0(string,pos$2),pos$3=pos$2 + 2 | 0;
         if(caml_call2(_Nq_,pos$3,until))
          var subsec_nonzero=0,subsec_len=0,subsec_pos=pos$3,sec=sec$1;
         else
          {var switch$1=0;
           if
            (caml_call2(_Ns_,pos$3,until)
             &&
             caml_call2(equal_char,46,caml_string_get(string,pos$3)))
            {var pos$4=pos$3 + 1 | 0,nonzero=[0,0],_bdd_=until - 1 | 0;
             if(! (_bdd_ < pos$4))
              {var pos=pos$4;
               for(;;)
                {var
                  match=caml_string_get(string,pos),
                  switcher=match - 48 | 0,
                  switch$2=0;
                 if(9 < switcher >>> 0)
                  if(47 === switcher)
                   switch$2 = 1;
                  else
                   invalid_string(string,cst_expected_digits_and_or_und);
                 else
                  if(switcher)nonzero[1] = 1;else switch$2 = 1;
                 var _bde_=pos + 1 | 0;
                 if(_bdd_ !== pos){var pos=_bde_;continue}
                 break}}
             var
              subsec_nonzero=nonzero[1],
              subsec_len=until - pos$3 | 0,
              subsec_pos=pos$3,
              sec=sec$1}
           else
            switch$1 = 1;
           if(switch$1)
            var
             _bdk_=invalid_string(string,cst_expected_decimal_point_or_),
             subsec_nonzero=_bdk_[4],
             subsec_len=_bdk_[3],
             subsec_pos=_bdk_[2],
             sec=_bdk_[1]}}
      else
       if(caml_call2(_Nq_,pos$2,until))
        var subsec_nonzero=0,subsec_len=0,subsec_pos=pos$2,sec=0;
       else
        var
         _bdl_=invalid_string(string,cst_BUG_did_not_expect_seconds),
         subsec_nonzero=_bdl_[4],
         subsec_len=_bdl_[3],
         subsec_pos=_bdl_[2],
         sec=_bdl_[1];
      if(760149569 === am_or_pm)
       {var switch$3=0;
        if(caml_call2(_Ns_,hr,1) || caml_call2(_Nr_,hr,12))
         switch$3 = 1;
        else
         var hr$0=caml_call2(_Nq_,hr,12)?0:hr;
        if(switch$3)var hr$0=invalid_string(string,cst_hours_out_of_bounds)}
      else
       if(760152914 <= am_or_pm)
        {var switch$4=0;
         if(caml_call2(_Ns_,hr,1) || caml_call2(_Nr_,hr,12))
          switch$4 = 1;
         else
          var hr$0=caml_call2(_Nq_,hr,12)?12:hr + 12 | 0;
         if(switch$4)var hr$0=invalid_string(string,cst_hours_out_of_bounds$0)}
       else
        if(866457669 === expect_minutes_and_seconds)
         var hr$0=invalid_string(string,cst_hours_without_minutes_or_A);
        else
         if(caml_call2(_Nr_,hr,24))
          var hr$0=invalid_string(string,cst_hours_out_of_bounds$1);
         else
          {var switch$5=0;
           if(caml_call2(_Nq_,hr,24))
            {var switch$6=0;
             if
              (!
               caml_call2(_Nr_,min,0)
               &&
               !
               caml_call2(_Nr_,sec,0)
               &&
               !
               subsec_nonzero)
              {switch$5 = 1;switch$6 = 1}
             if(! switch$6)
              var hr$0=invalid_string(string,cst_time_is_past_24_00_00)}
           else
            switch$5 = 1;
           if(switch$5)var hr$0=hr}
      var
       min$0=
        caml_call2(_Nr_,min,59)
         ?invalid_string(string,cst_minutes_out_of_bounds)
         :min,
       sec$0=
        caml_call2(_Nr_,sec,60)
         ?invalid_string(string,cst_seconds_out_of_bounds)
         :sec,
       switch$7=0;
      if(! caml_call2(_Nq_,sec$0,60) && subsec_nonzero)
       {var subsec_len$0=subsec_len;switch$7 = 1}
      if(! switch$7)var subsec_len$0=0;
      return caml_call6(f,string,hr$0,min$0,sec$0,subsec_pos,subsec_len$0)}
    function parse_iso8601_extended(pos$0,len,str,f)
     {var match$0=caml_call4(_ix_,pos$0,len,0,caml_ml_string_length(str));
      if(0 === match$0[0])
       var z=match$0[1],match$1=z;
      else
       var
        s=match$0[1],
        match$1=caml_call3(failwithf$0,_Xr_,caml_call1(_nE_,s),0);
      var len$0=match$1[2],pos$1=match$1[1];
      if(caml_call2(_Ns_,len$0,2))return caml_call1(_Fb_,cst_len_2);
      var hr=read_2_digit_int$0(str,pos$1);
      if(caml_call2(_Nr_,hr,24))caml_call1(_Fb_,cst_hour_24);
      if(caml_call2(_Nq_,len$0,2))
       return caml_call6(f,str,hr,0,0,pos$1 + len$0 | 0,0);
      if(caml_call2(_Ns_,len$0,5))return caml_call1(_Fb_,cst_2_len_5);
      if(caml_call2(equal_char,caml_string_get(str,pos$1 + 2 | 0),58))
       {var min=read_2_digit_int$0(str,pos$1 + 3 | 0);
        if(caml_call2(_No_,min,60))caml_call1(_Fb_,cst_minute_60);
        var
         _bc$_=caml_call2(_Nq_,hr,24),
         _bda_=_bc$_?caml_call2(_Nt_,min,0):_bc$_;
        if(_bda_)caml_call1(_Fb_,cst_24_hours_and_non_zero_minu);
        if(caml_call2(_Nq_,len$0,5))
         return caml_call6(f,str,hr,min,0,pos$1 + len$0 | 0,0);
        if(caml_call2(_Ns_,len$0,8))return caml_call1(_Fb_,cst_5_len_8);
        if(caml_call2(equal_char,caml_string_get(str,pos$1 + 5 | 0),58))
         {var sec=read_2_digit_int$0(str,pos$1 + 6 | 0);
          if(caml_call2(_Nr_,sec,60))caml_call3(failwithf$0,_Xq_,sec,0);
          var
           _bdb_=caml_call2(_Nq_,hr,24),
           _bdc_=_bdb_?caml_call2(_Nt_,sec,0):_bdb_;
          if(_bdc_)caml_call1(_Fb_,cst_24_hours_and_non_zero_seco);
          if(caml_call2(_Nq_,len$0,8))
           return caml_call6(f,str,hr,min,sec,pos$1 + len$0 | 0,0);
          if(caml_call2(_Nq_,len$0,9))return caml_call1(_Fb_,cst_length_9);
          var match$2=caml_string_get(str,pos$1 + 8 | 0);
          if(44 !== match$2 && 46 !== match$2)
           return caml_call1(_Fb_,cst_missing_subsecond_separato);
          var
           subsec_pos=pos$1 + 8 | 0,
           until=pos$1 + len$0 | 0,
           pos$2=subsec_pos + 1 | 0,
           nonzero=[0,0],
           _bc9_=until - 1 | 0;
          if(! (_bc9_ < pos$2))
           {var pos=pos$2;
            for(;;)
             {var match=caml_string_get(str,pos),switch$0=0;
              if(49 <= match)
               if(58 <= match)switch$0 = 1;else nonzero[1] = 1;
              else
               if(! (48 <= match))switch$0 = 1;
              if(switch$0)invalid_string(str,cst_expected_digits_after_deci);
              var _bc__=pos + 1 | 0;
              if(_bc9_ !== pos){var pos=_bc__;continue}
              break}}
          var switch$1=0;
          if(nonzero[1])
           if(caml_call2(_Nq_,sec,60))
            var subsec_len=0;
           else
            if(caml_call2(_Nq_,hr,24))
             var subsec_len=caml_call1(_Fb_,cst_24_hours_and_non_zero_subs);
            else
             switch$1 = 1;
          else
           switch$1 = 1;
          if(switch$1)var subsec_len=len$0 - 8 | 0;
          return caml_call6(f,str,hr,min,sec,subsec_pos,subsec_len)}
        return caml_call1(_Fb_,cst_second_colon_missing)}
      return caml_call1(_Fb_,cst_first_colon_missing)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$340);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Ofday_helpers$0);
    var
     Core_Ofday_helpers=
      [0,
       parse$0,
       parse_iso8601_extended,
       invalid_string,
       am_suffixes,
       pm_suffixes];
    caml_register_global(5388,Core_Ofday_helpers,"Core__Ofday_helpers");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Stable_internal);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$341);
    caml_call1(Expect_test_collector[5][1],cst_core_src_stable_internal_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$342,cst$126);
    var
     _Xs_=Bin_prot_Std[1],
     _Xt_=Bin_prot_Std[2],
     _Xu_=Bin_prot_Std[3],
     _Xv_=Bin_prot_Std[4],
     _Xw_=Bin_prot_Std[5],
     _Xx_=Bin_prot_Std[6],
     _Xy_=Bin_prot_Std[7],
     _Xz_=Bin_prot_Std[8],
     _XA_=Bin_prot_Std[9],
     _XB_=Bin_prot_Std[10],
     _XC_=Bin_prot_Std[11],
     _XD_=Bin_prot_Std[12],
     _XE_=Bin_prot_Std[13],
     _XF_=Bin_prot_Std[14],
     _XG_=Bin_prot_Std[15],
     _XH_=Bin_prot_Std[16],
     _XI_=Bin_prot_Std[17],
     _XJ_=Bin_prot_Std[18],
     _XK_=Bin_prot_Std[19],
     _XL_=Bin_prot_Std[20],
     _XM_=Bin_prot_Std[21],
     _XN_=Bin_prot_Std[22],
     _XO_=Bin_prot_Std[23],
     _XP_=Bin_prot_Std[24],
     _XQ_=Bin_prot_Std[25],
     _XR_=Bin_prot_Std[26],
     _XS_=Bin_prot_Std[27],
     _XT_=Bin_prot_Std[28],
     _XU_=Bin_prot_Std[29],
     _XV_=Bin_prot_Std[30],
     _XW_=Bin_prot_Std[31],
     _XX_=Bin_prot_Std[32],
     _XY_=Bin_prot_Std[33],
     _XZ_=Bin_prot_Std[34],
     _X0_=Bin_prot_Std[35],
     _X1_=Bin_prot_Std[36],
     _X2_=Bin_prot_Std[37],
     _X3_=Bin_prot_Std[38],
     _X4_=Bin_prot_Std[39],
     _X5_=Bin_prot_Std[40],
     _X6_=Bin_prot_Std[41],
     _X7_=Bin_prot_Std[42],
     _X8_=Bin_prot_Std[43],
     _X9_=Bin_prot_Std[44],
     _X__=Bin_prot_Std[45],
     _X$_=Bin_prot_Std[46],
     _Ya_=Bin_prot_Std[47],
     _Yb_=Bin_prot_Std[48],
     _Yc_=Bin_prot_Std[49],
     _Yd_=Bin_prot_Std[50],
     _Ye_=Bin_prot_Std[51],
     _Yf_=Bin_prot_Std[52],
     _Yg_=Bin_prot_Std[53],
     _Yh_=Bin_prot_Std[54],
     _Yi_=Bin_prot_Std[55],
     _Yj_=Bin_prot_Std[56],
     _Yk_=Bin_prot_Std[57],
     _Yl_=Bin_prot_Std[58],
     _Ym_=Bin_prot_Std[59],
     _Yn_=Bin_prot_Std[60],
     _Yo_=Bin_prot_Std[61],
     _Yp_=Bin_prot_Std[62],
     _Yq_=Bin_prot_Std[63],
     _Yr_=Bin_prot_Std[64],
     _Ys_=Bin_prot_Std[65],
     _Yt_=Bin_prot_Std[66],
     _Yu_=Bin_prot_Std[67],
     _Yv_=Bin_prot_Std[68],
     _Yw_=Bin_prot_Std[69],
     _Yx_=Bin_prot_Std[70],
     _Yy_=Bin_prot_Std[71],
     _Yz_=Bin_prot_Std[72],
     _YA_=Bin_prot_Std[73],
     _YB_=Bin_prot_Std[74],
     _YC_=Bin_prot_Std[75],
     _YD_=Bin_prot_Std[76],
     _YE_=Bin_prot_Std[77],
     _YF_=Bin_prot_Std[78],
     _YG_=Bin_prot_Std[79],
     _YH_=Bin_prot_Std[80],
     _YI_=Bin_prot_Std[81],
     _YJ_=Bin_prot_Std[82],
     _YK_=Bin_prot_Std[83],
     _YL_=Bin_prot_Std[84],
     _YM_=Bin_prot_Std[85],
     _YN_=Bin_prot_Std[86],
     _YO_=Bin_prot_Std[87],
     _YP_=Bin_prot_Std[88],
     _YQ_=Bin_prot_Std[89],
     _YR_=Bin_prot_Std[90],
     _YS_=Bin_prot_Std[91],
     _YT_=Bin_prot_Std[92],
     _YU_=Bin_prot_Std[93],
     _YV_=Bin_prot_Std[94],
     _YW_=Bin_prot_Std[95],
     _YX_=Bin_prot_Std[96],
     _YY_=Bin_prot_Std[97],
     _YZ_=Bin_prot_Std[98],
     _Y0_=Bin_prot_Std[99],
     _Y1_=Bin_prot_Std[100],
     _Y2_=Bin_prot_Std[101],
     _Y3_=Bin_prot_Std[102],
     _Y4_=Bin_prot_Std[103],
     _Y5_=Bin_prot_Std[104],
     _Y6_=Bin_prot_Std[105],
     _Y7_=Bin_prot_Std[106],
     _Y8_=Bin_prot_Std[107],
     _Y9_=Bin_prot_Std[108],
     _Y__=Bin_prot_Std[109],
     _Y$_=Bin_prot_Std[110],
     _Za_=Bin_prot_Std[111],
     _Zb_=Bin_prot_Std[112],
     _Zc_=Bin_prot_Std[113],
     _Zd_=Bin_prot_Std[114],
     _Ze_=Bin_prot_Std[115],
     _Zf_=Bin_prot_Std[116],
     _Zg_=Bin_prot_Std[117],
     _Zh_=Bin_prot_Std[118],
     _Zi_=Bin_prot_Std[119],
     _Zj_=Bin_prot_Std[120],
     _Zk_=Bin_prot_Std[121],
     _Zl_=Bin_prot_Std[122],
     _Zm_=Bin_prot_Std[123],
     _Zn_=Bin_prot_Std[124],
     _Zo_=Bin_prot_Std[125],
     _Zp_=Bin_prot_Std[126],
     _Zq_=Bin_prot_Std[127],
     _Zr_=Bin_prot_Std[128],
     _Zs_=Bin_prot_Std[129],
     _Zt_=Bin_prot_Std[130],
     _Zu_=Bin_prot_Std[131],
     _Zv_=Bin_prot_Std[132],
     _Zw_=Bin_prot_Std[133],
     _Zx_=Bin_prot_Std[134],
     _Zy_=Bin_prot_Std[135],
     _Zz_=Bin_prot_Std[136],
     _ZA_=Bin_prot_Std[137],
     _ZB_=Bin_prot_Std[138],
     _ZC_=Bin_prot_Std[139],
     _ZD_=Bin_prot_Std[140],
     _ZE_=Bin_prot_Std[141],
     _ZF_=Bin_prot_Std[142],
     _ZG_=Bin_prot_Std[143],
     _ZH_=Bin_prot_Std[144],
     _ZI_=Bin_prot_Std[145],
     _ZJ_=Bin_prot_Std[146],
     _ZK_=Bin_prot_Std[147],
     _ZL_=Bin_prot_Std[148],
     _ZM_=Bin_prot_Std[149],
     _ZN_=Bin_prot_Std[150],
     _ZO_=Bin_prot_Std[151],
     _ZP_=Bin_prot_Std[152],
     _ZQ_=Bin_prot_Std[153],
     _ZR_=Bin_prot_Std[154],
     _ZS_=Bin_prot_Std[155],
     _ZT_=Bin_prot_Std[156],
     _ZU_=Bin_prot_Std[157],
     _ZV_=Bin_prot_Std[158],
     _ZW_=Bin_prot_Std[159],
     _ZX_=Bin_prot_Std[160],
     _ZY_=Bin_prot_Std[161],
     _ZZ_=Bin_prot_Std[162],
     _Z0_=Bin_prot_Std[163],
     _Z1_=Bin_prot_Std[164],
     _Z2_=Bin_prot_Std[165],
     _Z3_=Bin_prot_Std[166],
     _Z4_=Bin_prot_Std[167],
     _Z5_=Bin_prot_Std[168],
     _Z6_=Bin_prot_Std[169],
     _Z7_=Bin_prot_Std[170],
     _Z8_=Bin_prot_Std[171],
     _Z9_=Bin_prot_Std[172],
     _Z__=Bin_prot_Std[173],
     _Z$_=Bin_prot_Std[174],
     __a_=Bin_prot_Std[175],
     __b_=Bin_prot_Std[176],
     __c_=Bin_prot_Std[177],
     __d_=Bin_prot_Std[178],
     __e_=Bin_prot_Std[179],
     __f_=Bin_prot_Std[180],
     __g_=Bin_prot_Std[181],
     __h_=Bin_prot_Std[182],
     __i_=Bin_prot_Std[183],
     __j_=Bin_prot_Std[184],
     __k_=Bin_prot_Std[185],
     __l_=Bin_prot_Std[186],
     __m_=Bin_prot_Std[187],
     __n_=Bin_prot_Std[188],
     __o_=Bin_prot_Std[189],
     __p_=Bin_prot_Std[190],
     __q_=Bin_prot_Std[191],
     __r_=Bin_prot_Std[192],
     __s_=Bin_prot_Std[193],
     __t_=Bin_prot_Std[194],
     __u_=Bin_prot_Std[195],
     __v_=Bin_prot_Std[196],
     __w_=Bin_prot_Std[197],
     __x_=Bin_prot_Std[198],
     __y_=Bin_prot_Std[199],
     __z_=Bin_prot_Std[200],
     __A_=Bin_prot_Std[201],
     __B_=Bin_prot_Std[202],
     __C_=Bin_prot_Std[203],
     __D_=Bin_prot_Std[204],
     __E_=Bin_prot_Std[205],
     __F_=Bin_prot_Std[206],
     __G_=Bin_prot_Std[207],
     __H_=Bin_prot_Std[208],
     __I_=Bin_prot_Std[209],
     __J_=Bin_prot_Std[210],
     __K_=Bin_prot_Std[211],
     __L_=Bin_prot_Std[212],
     __M_=Bin_prot_Std[213],
     __N_=Bin_prot_Std[214],
     __O_=Bin_prot_Std[215],
     __P_=Bin_prot_Std[216],
     __Q_=Bin_prot_Std[217],
     __R_=Bin_prot_Std[218],
     __S_=Bin_prot_Std[219],
     __T_=Bin_prot_Std[220],
     __U_=Bin_prot_Std[221],
     __V_=Bin_prot_Std[222],
     __W_=Bin_prot_Std[223],
     __X_=Bin_prot_Std[224],
     __Y_=Bin_prot_Std[225],
     __Z_=Base_Hash[13],
     __0_=__Z_[1],
     __1_=__Z_[2],
     __2_=__Z_[3],
     __3_=__Z_[4],
     __4_=__Z_[5],
     __5_=__Z_[6],
     __6_=__Z_[7],
     hash_fold_t$37=__Z_[8],
     __7_=__Z_[9],
     __8_=__Z_[10],
     __9_=__Z_[11],
     ____=__Z_[12],
     __$_=__Z_[13],
     _$a_=__Z_[14],
     _$b_=__Z_[15],
     _$c_=__Z_[16],
     _$d_=__Z_[17],
     _$e_=__Z_[18],
     _$f_=__Z_[19],
     _$g_=__Z_[20],
     _$h_=__Z_[21],
     _$i_=__Z_[22],
     _$j_=__Z_[23],
     _$k_=Base[177],
     _$l_=Base[175],
     _$m_=Base[176],
     _$n_=Base[170],
     _$o_=Base[168],
     _$p_=Base[169],
     _$q_=Base[165],
     _$r_=Base[163],
     _$s_=Base[164],
     _$t_=Base[158],
     _$u_=Base[156],
     _$v_=Base[157],
     _$w_=Base[153],
     _$x_=Base[151],
     _$y_=Base[152],
     _$z_=Base[147],
     _$A_=Base[145],
     _$B_=Base[146],
     _$C_=Base[140],
     _$D_=Base[138],
     _$E_=Base[139],
     _$F_=Base[134],
     _$G_=Base[132],
     _$H_=Base[133],
     _$I_=Base[127],
     _$J_=Base[125],
     _$K_=Base[126],
     _$L_=Base[120],
     _$M_=Base[118],
     _$N_=Base[119],
     _$O_=Base[113],
     _$P_=Base[111],
     _$Q_=Base[112],
     _$R_=Base[106],
     _$S_=Base[105],
     _$T_=Base[103],
     _$U_=Base[104],
     _$V_=Base[98],
     _$W_=Base[96],
     _$X_=Base[97],
     _$Y_=Base[91],
     _$Z_=Base[89],
     _$0_=Base[90];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$343);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Stable_internal$0);
    var
     include$113=
      [0,
       _Xs_,
       _Xt_,
       _Xu_,
       _Xv_,
       _Xw_,
       _Xx_,
       _Xy_,
       _Xz_,
       _XA_,
       _XB_,
       _XC_,
       _XD_,
       _XE_,
       _XF_,
       _XG_,
       _XH_,
       _XI_,
       _XJ_,
       _XK_,
       _XL_,
       _XM_,
       _XN_,
       _XO_,
       _XP_,
       _XQ_,
       _XR_,
       _XS_,
       _XT_,
       _XU_,
       _XV_,
       _XW_,
       _XX_,
       _XY_,
       _XZ_,
       _X0_,
       _X1_,
       _X2_,
       _X3_,
       _X4_,
       _X5_,
       _X6_,
       _X7_,
       _X8_,
       _X9_,
       _X__,
       _X$_,
       _Ya_,
       _Yb_,
       _Yc_,
       _Yd_,
       _Ye_,
       _Yf_,
       _Yg_,
       _Yh_,
       _Yi_,
       _Yj_,
       _Yk_,
       _Yl_,
       _Ym_,
       _Yn_,
       _Yo_,
       _Yp_,
       _Yq_,
       _Yr_,
       _Ys_,
       _Yt_,
       _Yu_,
       _Yv_,
       _Yw_,
       _Yx_,
       _Yy_,
       _Yz_,
       _YA_,
       _YB_,
       _YC_,
       _YD_,
       _YE_,
       _YF_,
       _YG_,
       _YH_,
       _YI_,
       _YJ_,
       _YK_,
       _YL_,
       _YM_,
       _YN_,
       _YO_,
       _YP_,
       _YQ_,
       _YR_,
       _YS_,
       _YT_,
       _YU_,
       _YV_,
       _YW_,
       _YX_,
       _YY_,
       _YZ_,
       _Y0_,
       _Y1_,
       _Y2_,
       _Y3_,
       _Y4_,
       _Y5_,
       _Y6_,
       _Y7_,
       _Y8_,
       _Y9_,
       _Y__,
       _Y$_,
       _Za_,
       _Zb_,
       _Zc_,
       _Zd_,
       _Ze_,
       _Zf_,
       _Zg_,
       _Zh_,
       _Zi_,
       _Zj_,
       _Zk_,
       _Zl_,
       _Zm_,
       _Zn_,
       _Zo_,
       _Zp_,
       _Zq_,
       _Zr_,
       _Zs_,
       _Zt_,
       _Zu_,
       _Zv_,
       _Zw_,
       _Zx_,
       _Zy_,
       _Zz_,
       _ZA_,
       _ZB_,
       _ZC_,
       _ZD_,
       _ZE_,
       _ZF_,
       _ZG_,
       _ZH_,
       _ZI_,
       _ZJ_,
       _ZK_,
       _ZL_,
       _ZM_,
       _ZN_,
       _ZO_,
       _ZP_,
       _ZQ_,
       _ZR_,
       _ZS_,
       _ZT_,
       _ZU_,
       _ZV_,
       _ZW_,
       _ZX_,
       _ZY_,
       _ZZ_,
       _Z0_,
       _Z1_,
       _Z2_,
       _Z3_,
       _Z4_,
       _Z5_,
       _Z6_,
       _Z7_,
       _Z8_,
       _Z9_,
       _Z__,
       _Z$_,
       __a_,
       __b_,
       __c_,
       __d_,
       __e_,
       __f_,
       __g_,
       __h_,
       __i_,
       __j_,
       __k_,
       __l_,
       __m_,
       __n_,
       __o_,
       __p_,
       __q_,
       __r_,
       __s_,
       __t_,
       __u_,
       __v_,
       __w_,
       __x_,
       __y_,
       __z_,
       __A_,
       __B_,
       __C_,
       __D_,
       __E_,
       __F_,
       __G_,
       __H_,
       __I_,
       __J_,
       __K_,
       __L_,
       __M_,
       __N_,
       __O_,
       __P_,
       __Q_,
       __R_,
       __S_,
       __T_,
       __U_,
       __V_,
       __W_,
       __X_,
       __Y_,
       __0_,
       __1_,
       __2_,
       __3_,
       __4_,
       __5_,
       __6_,
       hash_fold_t$37,
       __7_,
       __8_,
       __9_,
       ____,
       __$_,
       _$a_,
       _$b_,
       _$c_,
       _$d_,
       _$e_,
       _$f_,
       _$g_,
       _$h_,
       _$i_,
       _$j_,
       _$0_,
       _$Z_,
       _$Y_,
       _$X_,
       _$W_,
       _$V_,
       _$U_,
       _$T_,
       _$S_,
       _$R_,
       _$Q_,
       _$P_,
       _$O_,
       _$N_,
       _$M_,
       _$L_,
       _$K_,
       _$J_,
       _$I_,
       _$H_,
       _$G_,
       _$F_,
       _$E_,
       _$D_,
       _$C_,
       _$B_,
       _$A_,
       _$z_,
       _$y_,
       _$x_,
       _$w_,
       _$v_,
       _$u_,
       _$t_,
       _$s_,
       _$r_,
       _$q_,
       _$p_,
       _$o_,
       _$n_,
       _$m_,
       _$l_,
       _$k_];
    caml_register_global(5389,include$113,"Core__Stable_internal");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Float_with_finite_onl);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$344);
    caml_call1(Expect_test_collector[5][1],cst_core_src_float_with_finite);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$345,cst$127);
    var Nan_or_inf=[248,cst_Core_Float_with_finite_onl$0,caml_fresh_oo_id(0)];
    function _$1_(param)
     {if(param === Nan_or_inf)return _$2_;throw [0,Assert_failure,_$3_]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Nan_or_inf,_$1_);
    var compare$71=Ppx_compare_lib[6][3];
    function hash$41(x){return caml_call1(_$i_,x)}
    var equal$36=Ppx_compare_lib[6][16];
    function verify(t)
     {var match=runtime.caml_classify_float(t);
      if(3 <= match)throw Nan_or_inf;
      return 0}
    function of_binable$4(t){verify(t);return t}
    function to_binable$4(t){verify(t);return t}
    var
     include$114=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$53,
           bin_size_t$4,
           bin_write_t$4,
           bin_read_t$9,
           bin_read_t$10]),
        [0,to_binable$4,of_binable$4]),
     bin_size_t$68=include$114[1],
     bin_write_t$69=include$114[2],
     bin_read_t$136=include$114[3],
     bin_read_t$137=include$114[4],
     bin_shape_t$93=include$114[5],
     bin_writer_t$81=include$114[6],
     bin_reader_t$81=include$114[7],
     bin_t$81=include$114[8];
    function t_of_sexp$66(sexp)
     {if(0 === sexp[0])
       {var t=caml_call1(float_of_sexp,sexp);
        try
         {verify(t)}
        catch(e)
         {e = caml_wrap_exception(e);
          caml_call2(_ef_,caml_call1(Base_Exn[10],e),sexp)}
        return t}
      return caml_call2(_ef_,cst_Decimal_t_of_sexp_Expected,sexp)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$346);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Float_with_finite_onl$1);
    var
     Core_Float_with_finite_only_se=
      [0,
       bin_size_t$68,
       bin_write_t$69,
       bin_read_t$136,
       bin_read_t$137,
       bin_shape_t$93,
       bin_writer_t$81,
       bin_reader_t$81,
       bin_t$81,
       t_of_sexp$66,
       sexp_of_t$44,
       t_sexp_grammar$11,
       compare$71,
       hash_fold_t$37,
       hash$41,
       equal$36,
       [0,
        [0,
         bin_size_t$68,
         bin_write_t$69,
         bin_read_t$136,
         bin_read_t$137,
         bin_shape_t$93,
         bin_writer_t$81,
         bin_reader_t$81,
         bin_t$81,
         t_of_sexp$66,
         sexp_of_t$44,
         t_sexp_grammar$11,
         compare$71,
         hash_fold_t$37,
         hash$41,
         equal$36]]];
    caml_register_global
     (5390,
      Core_Float_with_finite_only_se,
      "Core__Float_with_finite_only_serialization");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Percent);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$347);
    caml_call1(Expect_test_collector[5][1],cst_core_src_percent_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$348,cst$128);
    function hash$42(x){return hash_float(x)}
    var
     Typename_of_t$25=caml_call1(Typerep_lib_Make_typename[1],[0,name$58]),
     typename_of_t$25=Typename_of_t$25[2],
     name_of_t$17=Typename_of_t$25[1],
     typerep_of_t$25=[9,[0,name_of_t$17,[0,typerep_of_float]]];
    function of_mult(f){return f}
    function to_mult(t){return t}
    function of_percentage(f){return f / 100.}
    function to_percentage(t){return t * 100.}
    function of_bp(f){return f / 10000.}
    function to_bp(t){return t * 10000.}
    function of_bp_int(i){return caml_call1(_HS_,i) / 10000.}
    function to_bp_int(t){return caml_call1(_HT_,t * 10000.)}
    function round_significant(p,significant_digits)
     {return caml_call2(_Ii_,p,significant_digits)}
    function round_decimal_mult(p,decimal_digits)
     {return caml_call2(_Ij_,p,decimal_digits)}
    function round_decimal_percentage(p,decimal_digits)
     {return caml_call2(_Ij_,p * 100.,decimal_digits) / 100.}
    function round_decimal_bp(p,decimal_digits)
     {return caml_call2(_Ij_,p * 10000.,decimal_digits) / 10000.}
    function sexp_of_t$79(param)
     {if(typeof param === "number")
       return _$4_;
      else
       switch(param[0])
        {case 0:
          var arg0_003=param[1],res0_004=caml_call1(sexp_of_int,arg0_003);
          return [1,[0,_$5_,[0,res0_004,0]]];
         case 1:
          var arg0_005=param[1],res0_006=caml_call1(sexp_of_int,arg0_005);
          return [1,[0,_$6_,[0,res0_006,0]]];
         case 2:
          var arg0_007=param[1],res0_008=caml_call1(sexp_of_int,arg0_007);
          return [1,[0,_$7_,[0,res0_008,0]]];
         case 3:
          var arg0_009=param[1],res0_010=caml_call1(sexp_of_int,arg0_009);
          return [1,[0,_$8_,[0,res0_010,0]]];
         case 4:
          var arg0_011=param[1],res0_012=caml_call1(sexp_of_int,arg0_011);
          return [1,[0,_$9_,[0,res0_012,0]]];
         case 5:
          var arg0_013=param[1],res0_014=caml_call1(sexp_of_int,arg0_013);
          return [1,[0,_$__,[0,res0_014,0]]];
         default:
          var arg0_015=param[1],res0_016=caml_call1(sexp_of_int,arg0_015);
          return [1,[0,_$$_,[0,res0_016,0]]]}}
    function exponent(precision){return [0,precision]}
    function exponent_E(precision){return [1,precision]}
    function decimal(precision){return [2,precision]}
    var ocaml=0;
    function compact(precision){return [3,precision]}
    function compact_E(precision){return [4,precision]}
    function hex(precision){return [5,precision]}
    function hex_E(precision){return [6,precision]}
    function format_float(t)
     {if(typeof t === "number")
       return caml_call1(_fx_,_aaa_);
      else
       switch(t[0])
        {case 0:var precision=t[1];return caml_call2(_fx_,_aab_,precision);
         case 1:
          var precision$0=t[1];return caml_call2(_fx_,_aac_,precision$0);
         case 2:
          var precision$1=t[1];return caml_call2(_fx_,_aad_,precision$1);
         case 3:
          var precision$2=t[1];return caml_call2(_fx_,_aae_,precision$2);
         case 4:
          var precision$3=t[1];return caml_call2(_fx_,_aaf_,precision$3);
         case 5:
          var precision$4=t[1];return caml_call2(_fx_,_aag_,precision$4);
         default:
          var precision$5=t[1];return caml_call2(_fx_,_aah_,precision$5)}}
    function format(x,format)
     {var x_abs=caml_call1(abs,x);
      function string(float$0)
       {return caml_call1(format_float(format),float$0)}
      return caml_call2(symbol$35,x_abs,0.)
              ?cst_0x
              :caml_call2(symbol$33,x_abs,1.)
                ?caml_call2(_Fp_,string(x * 1.),cst_x)
                :caml_call2(symbol$33,x_abs,0.01)
                  ?caml_call2(_Fp_,string(x * 100.),cst$129)
                  :caml_call2(_Fp_,string(x * 10000.),cst_bp)}
    function to_string$23(x)
     {var x_abs=caml_call1(abs,x);
      function string(float$0){return caml_call2(_fx_,_aai_,float$0)}
      return caml_call2(symbol$35,x_abs,0.)
              ?cst_0x$0
              :caml_call2(symbol$33,x_abs,1.)
                ?caml_call2(_Fp_,string(x * 1.),cst_x$0)
                :caml_call2(symbol$33,x_abs,0.01)
                  ?caml_call2(_Fp_,string(x * 100.),cst$130)
                  :caml_call2(_Fp_,string(x * 10000.),cst_bp$0)}
    function really_of_string(str,float_of_string)
     {var match=caml_call2(_Cb_,str,cst_x$1);
      if(match){var str$0=match[1];return caml_call1(float_of_string,str$0)}
      var match$0=caml_call2(_Cb_,str,cst$131);
      if(match$0)
       {var str$1=match$0[1];return caml_call1(float_of_string,str$1) * 0.01}
      var match$1=caml_call2(_Cb_,str,cst_bp$1);
      if(match$1)
       {var str$2=match$1[1];
        return caml_call1(float_of_string,str$2) / 10000.}
      return caml_call3(failwithf$0,_aaj_,str,0)}
    function of_string$20(str)
     {function float$0(str){return t_of_sexp$66([0,str])}
      return really_of_string(str,float$0)}
    var
     t_sexp_grammar$23=caml_call1(Sexplib_Sexp_grammar[1],t_sexp_grammar$8),
     _aak_=caml_call1(Stable[5][1],[0,of_string$20,to_string$23]),
     _aal_=_aak_[1],
     _aam_=_aak_[2],
     _aan_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$177),0,bin_shape_t$53],0],
     _aao_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_percent_ml_135_8),
     group$103=caml_call2(Bin_prot_Shape[6],_aao_,_aan_),
     _aap_=caml_call1(Bin_prot_Shape[2][1],cst_t$178),
     bin_shape_t$94=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$103,_aap_),0),
     bin_writer_t$82=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_t$82=[0,bin_read_t$9,bin_read_t$10],
     bin_t$82=[0,bin_shape_t$94,bin_writer_t$82,bin_reader_t$82];
    function t_of_sexp$67(sexp)
     {try
       {var float$0=caml_call1(float_of_sexp,sexp);return float$0}
      catch(_bc8_){return caml_call1(_aal_,sexp)}}
    var
     include$115=
      _w7_
       ([0,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$94,
         bin_writer_t$82,
         bin_reader_t$82,
         bin_t$82,
         compare$40,
         t_of_sexp$67,
         _aam_]),
     symbol$176=include$115[1],
     symbol$177=include$115[2],
     symbol$178=include$115[3],
     symbol$179=include$115[4],
     symbol$180=include$115[5],
     symbol$181=include$115[6],
     equal$37=include$115[7],
     compare$72=include$115[8],
     min$18=include$115[9],
     max$18=include$115[10],
     ascending$17=include$115[11],
     descending$17=include$115[12],
     between$17=include$115[13],
     clamp_exn$17=include$115[14],
     clamp$17=include$115[15],
     Replace_polymorphic_compare$14=include$115[19],
     comparator$25=include$115[20],
     Map$21=include$115[21],
     Set$21=include$115[22],
     _aaq_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$179),0,bin_shape_t$53],0],
     _aar_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_percent_ml_150_6),
     group$104=caml_call2(Bin_prot_Shape[6],_aar_,_aaq_),
     _aas_=caml_call1(Bin_prot_Shape[2][1],cst_t$180),
     bin_shape_t$95=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$104,_aas_),0),
     bin_writer_t$83=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_t$83=[0,bin_read_t$9,bin_read_t$10],
     bin_t$83=[0,bin_shape_t$95,bin_writer_t$83,bin_reader_t$83];
    function hash$43(x){return hash$42(x)}
    var
     Typename_of_t$26=caml_call1(Typerep_lib_Make_typename[1],[0,name$59]),
     typename_of_t$26=Typename_of_t$26[2],
     name_of_t$18=Typename_of_t$26[1],
     typerep_of_t$26=[9,[0,name_of_t$18,[0,typerep_of_t$25]]];
    function is_none$0(t){return caml_call1(is_nan,t)}
    function some_is_representable$0(t){return 1 - is_none$0(t)}
    function some$0(_bc7_){return _bc7_}
    function unchecked_value$0(_bc6_){return _bc6_}
    function to_option$0(t){return some_is_representable$0(t)?[0,t]:0}
    function apply_with_none_as_nan(_bc5_,_bc4_){return _bc5_ * _bc4_}
    function of_mult_with_nan_as_none(_bc3_){return _bc3_}
    function to_mult_with_none_as_nan(_bc2_){return _bc2_}
    function of_option$0(opt){if(opt){var v=opt[1];return v}return none}
    function value_exn$0(t)
     {if(some_is_representable$0(t))return t;
      var
       _bc1_=
        [0,caml_call1(Sexplib0_Sexp_conv[7],cst_Percent_Option_value_exn_n),0];
      return caml_call1
              (_nX_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_core_src_percent_ml_172_31),
                 _bc1_]])}
    function value$3(t,default$0)
     {return some_is_representable$0(t)?t:default$0}
    function sexp_of_t$80(t)
     {return caml_call2(sexp_of_option,_aam_,to_option$0(t))}
    function t_of_sexp$68(sexp)
     {return of_option$0(caml_call1(caml_call1(option_of_sexp,_aal_),sexp))}
    var
     _aat_=caml_call1(_xk_,t_sexp_grammar$23),
     t_sexp_grammar$24=caml_call1(Sexplib_Sexp_grammar[1],_aat_),
     Optional_syntax$1=[0,is_none$0,unchecked_value$0],
     Optional_syntax$2=[0,Optional_syntax$1];
    function is_zero(t){return caml_call2(symbol$178,t,0.)}
    function apply$0(t,f){return t * f}
    function scale$0(t,f){return t * f}
    function symbol$182(x,y){return x / y}
    var
     include$116=_wZ_([0,compare$72,_aam_,zero]),
     is_positive$5=include$116[1],
     is_non_negative$5=include$116[2],
     is_negative$5=include$116[3],
     is_non_positive$5=include$116[4],
     sign$5=include$116[5],
     validate_lbound$16=include$116[6],
     validate_ubound$16=include$116[7],
     validate_bound$16=include$116[8],
     validate_positive$5=include$116[9],
     validate_non_negative$5=include$116[10],
     validate_negative$5=include$116[11],
     validate_non_positive$5=include$116[12];
    function of_string_allow_nan_and_inf(str)
     {return really_of_string(str,_Hw_)}
    function t_of_sexp_allow_nan_and_inf(sexp)
     {return of_string_allow_nan_and_inf(caml_call1(to_string$0,sexp))}
    function format$0(x,format)
     {return caml_call2
              (_Fp_,caml_call1(format_float(format),x * 100.),cst$132)}
    function to_string$24(x)
     {return caml_call2(_fx_,_aau_,caml_call2(symbol$42,x,100.))}
    function sexp_of_t$81(t){return [0,to_string$24(t)]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$349);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Percent$0);
    var
     Core_Percent=
      [0,
       hash_fold_t$18,
       hash$42,
       typerep_of_t$25,
       typename_of_t$25,
       of_string$20,
       to_string$23,
       _aal_,
       _aam_,
       bin_size_t$4,
       bin_write_t$4,
       bin_read_t$9,
       bin_read_t$10,
       bin_shape_t$53,
       bin_writer_t$46,
       bin_reader_t$46,
       bin_t$46,
       symbol$176,
       symbol$177,
       symbol$178,
       symbol$179,
       symbol$180,
       symbol$181,
       equal$37,
       compare$72,
       min$18,
       max$18,
       ascending$17,
       descending$17,
       between$17,
       clamp_exn$17,
       clamp$17,
       Replace_polymorphic_compare$14,
       comparator$25,
       Map$21,
       Set$21,
       is_positive$5,
       is_non_negative$5,
       is_negative$5,
       is_non_positive$5,
       validate_lbound$16,
       validate_ubound$16,
       validate_bound$16,
       validate_positive$5,
       validate_non_negative$5,
       validate_negative$5,
       validate_non_positive$5,
       symbol$43,
       symbol$44,
       symbol$45,
       symbol$46,
       symbol$47,
       symbol$48,
       robustly_compare,
       quickcheck_generator$10,
       quickcheck_observer$12,
       quickcheck_shrinker$12,
       [0,
        t_sexp_grammar$24,
        compare$72,
        hash_fold_t$18,
        hash$43,
        sexp_of_t$80,
        typerep_of_t$26,
        typename_of_t$26,
        none,
        some$0,
        some_is_representable$0,
        is_none$0,
        some_is_representable$0,
        value$3,
        value_exn$0,
        unchecked_value$0,
        to_option$0,
        of_option$0,
        Optional_syntax$2,
        apply_with_none_as_nan,
        of_mult_with_nan_as_none,
        to_mult_with_none_as_nan],
       symbol$42,
       symbol$39,
       symbol$40,
       symbol$41,
       symbol$182,
       zero,
       neg,
       abs,
       is_zero,
       is_nan,
       is_inf,
       apply$0,
       scale$0,
       of_mult,
       to_mult,
       of_percentage,
       to_percentage,
       of_bp,
       to_bp,
       of_bp_int,
       to_bp_int,
       round_significant,
       round_decimal_mult,
       round_decimal_percentage,
       round_decimal_bp,
       t_of_sexp_allow_nan_and_inf,
       of_string_allow_nan_and_inf,
       [0,
        sexp_of_t$79,
        exponent,
        exponent_E,
        decimal,
        ocaml,
        compact,
        compact_E,
        hex,
        hex_E],
       format,
       validate$5,
       sign$5,
       sign,
       [0,
        [0,
         _aal_,
         _aam_,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$53,
         bin_writer_t$46,
         bin_reader_t$46,
         bin_t$46,
         compare$72,
         hash_fold_t$18,
         hash$42,
         equal$37,
         typerep_of_t$25,
         typename_of_t$25],
        [0,
         [0,
          bin_size_t$4,
          bin_write_t$4,
          bin_read_t$9,
          bin_read_t$10,
          bin_shape_t$95,
          bin_writer_t$83,
          bin_reader_t$83,
          bin_t$83,
          compare$72,
          hash_fold_t$18,
          hash$43,
          t_of_sexp$68,
          sexp_of_t$80]]],
       [0,sexp_of_t$81,to_string$24,format$0]];
    caml_register_global(5391,Core_Percent,"Core__Percent");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Span_helpers);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$350);
    caml_call1(Expect_test_collector[5][1],cst_core_src_span_helpers_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$351,cst$133);
    function randomize(span,percent,scale)
     {var
       _bcX_=caml_call2(symbol$37,percent,0.),
       _bcY_=_bcX_ || caml_call2(symbol$36,percent,1.);
      if(_bcY_)
       {var _bcZ_=[0,[1,[0,_aav_,[0,caml_call1(_aam_,percent),0]]],0];
        caml_call1
         (_nX_,
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Span_randomize_percent_is_),
            _bcZ_]])}
      var
       _bc0_=caml_call2(_HR_,19067,1. + percent),
       factor=caml_call2(Base_Random[14],1. - percent,_bc0_);
      return caml_call2(scale,span,factor)}
    function format_decimal(n,tenths,units)
     {if(caml_call2(_No_,tenths,0) && caml_call2(_Ns_,tenths,10))
       {if(caml_call2(_Ns_,n,10) && caml_call2(_Nt_,tenths,0))
         return caml_call4(_fx_,_aaw_,n,tenths,units);
        return caml_call3(_fx_,_aax_,n,units)}
      throw [0,Assert_failure,_aay_]}
    function short_string(sign,hr,min,sec,ms,us,ns)
     {var
       s=
        caml_call2(_No_,hr,24)
         ?format_decimal
           (hr / 24 | 0,
            caml_call1
             (of_float$1,caml_call1(_HS_,caml_call2(symbol$69,hr,24)) / 2.4),
            cst_d$1)
         :caml_call2(_Nr_,hr,0)
           ?format_decimal(hr,min / 6 | 0,cst_h)
           :caml_call2(_Nr_,min,0)
             ?format_decimal(min,sec / 6 | 0,cst_m$2)
             :caml_call2(_Nr_,sec,0)
               ?format_decimal(sec,ms / 100 | 0,cst_s$4)
               :caml_call2(_Nr_,ms,0)
                 ?format_decimal(ms,us / 100 | 0,cst_ms)
                 :caml_call2(_Nr_,us,0)
                   ?format_decimal(us,ns / 100 | 0,cst_us)
                   :caml_call2(_fx_,_aaz_,ns);
      return sign?s:caml_call2(_Fp_,cst$134,s)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$352);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Span_helpers$0);
    var Core_Span_helpers=[0,randomize,short_string];
    caml_register_global(5392,Core_Span_helpers,"Core__Span_helpers");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Span_float);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$353);
    caml_call1(Expect_test_collector[5][1],cst_core_src_span_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$354,cst$135);
    function compare$73(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_G$_,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(compare$42,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare$42,a_001[3],b_002[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare$42,a_001[4],b_002[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare$42,a_001[5],b_002[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare$42,a_001[6],b_002[6]);
                return 0 === n$4?caml_call2(compare$42,a_001[7],b_002[7]):n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function t_of_sexp$69(sexp_004)
     {if(0 === sexp_004[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_032,sexp_004);
      var
       field_sexps_005=sexp_004[1],
       sign_006=[0,0],
       hr_008=[0,0],
       min_010=[0,0],
       sec_012=[0,0],
       ms_014=[0,0],
       us_016=[0,0],
       ns_018=[0,0],
       duplicates_020=[0,0],
       extra_021=[0,0],
       param=field_sexps_005;
      for(;;)
       {if(param)
         {var _bcK_=param[1];
          if(1 === _bcK_[0])
           {var _bcL_=_bcK_[1];
            if(_bcL_)
             {var _bcM_=_bcL_[1];
              if(0 === _bcM_[0])
               {var _bcN_=_bcL_[2],_bcO_=_bcM_[1],switch$0=0;
                if(! _bcN_ || ! _bcN_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_034=param[2],
                   field_sexp_023$7=
                    function(_bcW_)
                     {function field_sexp_023(param)
                       {if(_bcW_)
                         {if(_bcW_[2])throw [0,Assert_failure,_aaA_];
                          var x_035=_bcW_[1];
                          return x_035}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_032,sexp_004)}
                      return field_sexp_023},
                   field_sexp_023=field_sexp_023$7(_bcN_);
                  if(caml_string_notequal(_bcO_,cst_hr))
                   if(caml_string_notequal(_bcO_,cst_min))
                    if(caml_string_notequal(_bcO_,cst_ms$0))
                     if(caml_string_notequal(_bcO_,cst_ns))
                      if(caml_string_notequal(_bcO_,cst_sec))
                       if(caml_string_notequal(_bcO_,cst_sign))
                        if(caml_string_notequal(_bcO_,cst_us$0))
                         {if(Sexplib0_Sexp_conv[26][1])
                           extra_021[1] = [0,_bcO_,extra_021[1]]}
                        else
                         if(us_016[1])
                          duplicates_020[1] = [0,_bcO_,duplicates_020[1]];
                         else
                          {var
                            field_sexp_023$0=field_sexp_023(0),
                            fvalue_026=caml_call1(int_of_sexp,field_sexp_023$0);
                           us_016[1] = [0,fvalue_026]}
                       else
                        if(sign_006[1])
                         duplicates_020[1] = [0,_bcO_,duplicates_020[1]];
                        else
                         {var
                           field_sexp_023$1=field_sexp_023(0),
                           fvalue_031=caml_call1(_GZ_,field_sexp_023$1);
                          sign_006[1] = [0,fvalue_031]}
                      else
                       if(sec_012[1])
                        duplicates_020[1] = [0,_bcO_,duplicates_020[1]];
                       else
                        {var
                          field_sexp_023$2=field_sexp_023(0),
                          fvalue_028=caml_call1(int_of_sexp,field_sexp_023$2);
                         sec_012[1] = [0,fvalue_028]}
                     else
                      if(ns_018[1])
                       duplicates_020[1] = [0,_bcO_,duplicates_020[1]];
                      else
                       {var
                         field_sexp_023$3=field_sexp_023(0),
                         fvalue_025=caml_call1(int_of_sexp,field_sexp_023$3);
                        ns_018[1] = [0,fvalue_025]}
                    else
                     if(ms_014[1])
                      duplicates_020[1] = [0,_bcO_,duplicates_020[1]];
                     else
                      {var
                        field_sexp_023$4=field_sexp_023(0),
                        fvalue_027=caml_call1(int_of_sexp,field_sexp_023$4);
                       ms_014[1] = [0,fvalue_027]}
                   else
                    if(min_010[1])
                     duplicates_020[1] = [0,_bcO_,duplicates_020[1]];
                    else
                     {var
                       field_sexp_023$5=field_sexp_023(0),
                       fvalue_029=caml_call1(int_of_sexp,field_sexp_023$5);
                      min_010[1] = [0,fvalue_029]}
                  else
                   if(hr_008[1])
                    duplicates_020[1] = [0,_bcO_,duplicates_020[1]];
                   else
                    {var
                      field_sexp_023$6=field_sexp_023(0),
                      fvalue_030=caml_call1(int_of_sexp,field_sexp_023$6);
                     hr_008[1] = [0,fvalue_030]}
                  var param=tail_034;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_032,_bcK_)}
        if(duplicates_020[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_032,
                  duplicates_020[1],
                  sexp_004);
        if(extra_021[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_032,
                  extra_021[1],
                  sexp_004);
        var
         _bcP_=sign_006[1],
         _bcQ_=hr_008[1],
         _bcR_=min_010[1],
         _bcS_=sec_012[1],
         _bcT_=ms_014[1],
         _bcU_=us_016[1],
         _bcV_=ns_018[1];
        if(_bcP_ && _bcQ_ && _bcR_ && _bcS_ && _bcT_ && _bcU_ && _bcV_)
         {var
           ns_019=_bcV_[1],
           us_017=_bcU_[1],
           ms_015=_bcT_[1],
           sec_013=_bcS_[1],
           min_011=_bcR_[1],
           hr_009=_bcQ_[1],
           sign_007=_bcP_[1];
          return [0,sign_007,hr_009,min_011,sec_013,ms_015,us_017,ns_019]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_032,
                 sexp_004,
                 [0,
                  [0,0 === sign_006[1]?1:0,cst_sign$0],
                  [0,
                   [0,0 === hr_008[1]?1:0,cst_hr$0],
                   [0,
                    [0,0 === min_010[1]?1:0,cst_min$0],
                    [0,
                     [0,0 === sec_012[1]?1:0,cst_sec$0],
                     [0,
                      [0,0 === ms_014[1]?1:0,cst_ms$1],
                      [0,
                       [0,0 === us_016[1]?1:0,cst_us$1],
                       [0,[0,0 === ns_018[1]?1:0,cst_ns$0],0]]]]]]])}}
    function sexp_of_t$82(param)
     {var
       ns_049=param[7],
       us_047=param[6],
       ms_045=param[5],
       sec_043=param[4],
       min_041=param[3],
       hr_039=param[2],
       sign_037=param[1],
       arg_050=caml_call1(sexp_of_int,ns_049),
       bnds_036=[0,[1,[0,_aaB_,[0,arg_050,0]]],0],
       arg_048=caml_call1(sexp_of_int,us_047),
       bnds_036$0=[0,[1,[0,_aaC_,[0,arg_048,0]]],bnds_036],
       arg_046=caml_call1(sexp_of_int,ms_045),
       bnds_036$1=[0,[1,[0,_aaD_,[0,arg_046,0]]],bnds_036$0],
       arg_044=caml_call1(sexp_of_int,sec_043),
       bnds_036$2=[0,[1,[0,_aaE_,[0,arg_044,0]]],bnds_036$1],
       arg_042=caml_call1(sexp_of_int,min_041),
       bnds_036$3=[0,[1,[0,_aaF_,[0,arg_042,0]]],bnds_036$2],
       arg_040=caml_call1(sexp_of_int,hr_039),
       bnds_036$4=[0,[1,[0,_aaG_,[0,arg_040,0]]],bnds_036$3],
       arg_038=caml_call1(_G0_,sign_037),
       bnds_036$5=[0,[1,[0,_aaH_,[0,arg_038,0]]],bnds_036$4];
      return [1,bnds_036$5]}
    var
     t_sexp_grammar$25=
      [9,
       [246,
        function(_bcJ_)
         {return [2,
                  [2,
                   [0,
                    0,
                    [0,
                     [1,[0,cst_sign$1,1,[0,_GJ_,0]]],
                     [0,
                      [1,[0,cst_hr$1,1,[0,int_sexp_grammar,0]]],
                      [0,
                       [1,[0,cst_min$1,1,[0,int_sexp_grammar,0]]],
                       [0,
                        [1,[0,cst_sec$1,1,[0,int_sexp_grammar,0]]],
                        [0,
                         [1,[0,cst_ms$2,1,[0,int_sexp_grammar,0]]],
                         [0,
                          [1,[0,cst_us$2,1,[0,int_sexp_grammar,0]]],
                          [0,[1,[0,cst_ns$1,1,[0,int_sexp_grammar,0]]],0]]]]]]]]]]}]],
     Parts=[0,compare$73,t_of_sexp$69,sexp_of_t$82,t_sexp_grammar$25];
    function next$1(t){return caml_call2(_HR_,19067,t)}
    function prev$2(t){return caml_call2(_HR_,759637122,t)}
    var
     include$117=caml_call1(Robust_compare[1],[0,1e-06]),
     _aaI_=include$117[1],
     _aaJ_=include$117[2],
     _aaK_=include$117[3],
     _aaL_=include$117[4],
     _aaM_=include$117[5],
     _aaN_=include$117[6],
     _aaO_=include$117[7],
     _aaP_=include$117[8],
     nanosecond=caml_call1(of_float,1e-09),
     microsecond=caml_call1(of_float,1e-06),
     millisecond=caml_call1(of_float,0.001),
     second$0=caml_call1(of_float,1.),
     minute=caml_call1(of_float,60.),
     hour=caml_call1(of_float,3600.),
     day$0=caml_call1(of_float,86400.);
    function to_parts(t)
     {var
       sign$0=caml_call1(sign,t),
       t$0=caml_call1(abs,t),
       integral=caml_call1(_H1_,t$0),
       fractional=t$0 - integral,
       seconds=caml_call1(_H__,integral),
       nanoseconds=caml_call1(_Ia_,fractional * 1000000000.);
      if(caml_call2(equal$24,nanoseconds,1000000000))
       var nanoseconds$0=0,seconds$0=caml_call1(next$0,seconds);
      else
       var nanoseconds$0=nanoseconds,seconds$0=seconds;
      var
       sec=seconds$0 % 60 | 0,
       minutes=seconds$0 / 60 | 0,
       min=minutes % 60 | 0,
       hr=minutes / 60 | 0,
       ns=nanoseconds$0 % 1000 | 0,
       microseconds=nanoseconds$0 / 1000 | 0,
       us=microseconds % 1000 | 0,
       milliseconds=microseconds / 1000 | 0;
      return [0,sign$0,hr,min,sec,milliseconds,us,ns]}
    function symbol$183(t,f){return caml_call1(of_float,t / f)}
    function symbol$184(f,t){return f / t}
    function to_ns(x){return x * 1000000000.}
    function to_us(x){return x * 1000000.}
    function to_ms(x){return x * 1000.}
    function of_span_since_epoch$0(x){return x}
    function to_min(x){return x / minute}
    function to_hr(x){return x / hour}
    function to_day(x){return x / day$0}
    function to_int63_seconds_round_down_ex$0(x){return caml_call1(_Ib_,x)}
    function symbol$185(f,t){return caml_call1(of_float,f * t)}
    function of_ns(x){return caml_call1(of_float,x / 1000000000.)}
    function of_us(x){return caml_call1(of_float,x / 1000000.)}
    function of_ms(x){return caml_call1(of_float,x / 1000.)}
    function to_span_since_epoch$0(x){return caml_call1(of_float,x)}
    function of_int_sec(x){return to_span_since_epoch$0(caml_call1(_HS_,x))}
    function of_int32_seconds(sec)
     {return to_span_since_epoch$0(caml_call1(to_float$1,sec))}
    function of_int63_seconds$0(sec)
     {return to_span_since_epoch$0(caml_call1(to_float$3,sec))}
    function of_min(x){return symbol$185(x,minute)}
    function of_hr(x){return symbol$185(x,hour)}
    function of_day(x){return symbol$185(x,day$0)}
    function divide_by_unit_of_time(t,unit_of_time)
     {switch(unit_of_time)
       {case 0:return t * 1000000000.;
        case 1:return t * 1000000.;
        case 2:return t * 1000.;
        case 3:return t;
        case 4:return to_min(t);
        case 5:return to_hr(t);
        default:return to_day(t)}}
    function scale_by_unit_of_time(float$0,unit_of_time)
     {switch(unit_of_time)
       {case 0:return of_ns(float$0);
        case 1:return of_us(float$0);
        case 2:return of_ms(float$0);
        case 3:return to_span_since_epoch$0(float$0);
        case 4:return of_min(float$0);
        case 5:return of_hr(float$0);
        default:return of_day(float$0)}}
    function create$23(opt,_bcC_,_bcB_,_bcA_,_bcz_,_bcy_,_bcx_,_bcw_,param)
     {if(opt)var sth=opt[1],sign=sth;else var sign=2;
      if(_bcC_)var sth$0=_bcC_[1],day=sth$0;else var day=0;
      if(_bcB_)var sth$1=_bcB_[1],hr=sth$1;else var hr=0;
      if(_bcA_)var sth$2=_bcA_[1],min=sth$2;else var min=0;
      if(_bcz_)var sth$3=_bcz_[1],sec=sth$3;else var sec=0;
      if(_bcy_)var sth$4=_bcy_[1],ms=sth$4;else var ms=0;
      if(_bcx_)var sth$5=_bcx_[1],us=sth$5;else var us=0;
      if(_bcw_)var sth$6=_bcw_[1],ns=sth$6;else var ns=0;
      var
       _bcD_=of_ns(caml_call1(_HS_,ns)),
       _bcE_=of_us(caml_call1(_HS_,us)),
       _bcF_=of_ms(caml_call1(_HS_,ms)),
       _bcG_=to_span_since_epoch$0(caml_call1(_HS_,sec)),
       _bcH_=of_min(caml_call1(_HS_,min)),
       _bcI_=of_hr(caml_call1(_HS_,hr)),
       t=
        caml_call2
         (symbol$39,
          caml_call2
           (symbol$39,
            caml_call2
             (symbol$39,
              caml_call2
               (symbol$39,
                caml_call2
                 (symbol$39,
                  caml_call2(symbol$39,of_day(caml_call1(_HS_,day)),_bcI_),
                  _bcH_),
                _bcG_),
              _bcF_),
            _bcE_),
          _bcD_);
      return sign?t:caml_call2(symbol$40,zero,t)}
    function randomize$0(t,percent){return randomize(t,percent,scale)}
    function to_short_string(t)
     {var
       match=to_parts(t),
       ns=match[7],
       us=match[6],
       ms=match[5],
       sec=match[4],
       min=match[3],
       hr=match[2],
       sign=match[1];
      return short_string(sign,hr,min,sec,ms,us,ns)}
    function of_sexp_error_exn(exn,sexp)
     {return caml_call2(_Oo_,caml_call1(Base_Exn[10],exn),sexp)}
    var T_of_sexp=[248,cst_Core_Span_float_Stable_V1_,caml_fresh_oo_id(0)];
    function _aaR_(param)
     {if(param[1] === T_of_sexp)
       {var
         arg1_052=param[3],
         arg0_051=param[2],
         res0_053=caml_call1(sexp_of_t$35,arg0_051),
         res1_054=caml_call1(sexp_of_exn,arg1_052);
        return [1,[0,_aaS_,[0,res0_053,[0,res1_054,0]]]]}
      throw [0,Assert_failure,_aaT_]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,T_of_sexp,_aaR_);
    var
     T_of_sexp_expected_atom_but_go=
      [248,cst_Core_Span_float_Stable_V1_$0,caml_fresh_oo_id(0)];
    function _aaU_(param)
     {if(param[1] === T_of_sexp_expected_atom_but_go)
       {var arg0_055=param[2],res0_056=caml_call1(sexp_of_t$35,arg0_055);
        return [1,[0,_aaV_,[0,res0_056,0]]]}
      throw [0,Assert_failure,_aaW_]}
    caml_call4
     (Sexplib0_Sexp_conv[70][1],0,0,T_of_sexp_expected_atom_but_go,_aaU_);
    function t_of_sexp_v1_v2(sexp,is_v2)
     {if(0 === sexp[0])
       {var x=sexp[1];
        try
         {try
           {if(caml_string_notequal(x,cst$136))
             {var
               float$0=
                function(n)
                 {var s=caml_call2(_Ch_,x,n);
                  if(caml_string_notequal(s,cst$137))
                   {var v=caml_call1(_Hw_,s),_bcv_=validate$5(v);
                    caml_call1(Validate[17],_bcv_);
                    return v}
                  return caml_call1(_Fb_,cst_no_number_given)},
               len=caml_ml_string_length(x),
               match=caml_string_get(x,len - 1 | 0),
               switcher=match - 100 | 0,
               switch$0=0;
              if(15 < switcher >>> 0)
               switch$0 = 1;
              else
               {var switch$1=0;
                switch(switcher)
                 {case 0:var _bct_=of_day(float$0(1));break;
                  case 4:var _bct_=of_hr(float$0(1));break;
                  case 9:var _bct_=of_min(float$0(1));break;
                  case 15:
                   var switch$2=0;
                   if
                    (2
                     <=
                     len
                     &&
                     caml_call2(_EL_,caml_string_get(x,len - 2 | 0),109))
                    {var _bct_=of_ms(float$0(2));switch$2 = 1}
                   if(! switch$2)
                    {var switch$3=0;
                     if
                      (is_v2
                       &&
                       2
                       <=
                       len
                       &&
                       caml_call2(_EL_,caml_string_get(x,len - 2 | 0),117))
                      {var _bct_=of_us(float$0(2));switch$3 = 1}
                     if(! switch$3)
                      {var switch$4=0;
                       if
                        (is_v2
                         &&
                         2
                         <=
                         len
                         &&
                         caml_call2(_EL_,caml_string_get(x,len - 2 | 0),110))
                        {var _bct_=of_ns(float$0(2));switch$4 = 1}
                       if(! switch$4)var _bct_=caml_call1(of_float,float$0(1))}}
                   break;
                  default:switch$0 = 1;switch$1 = 1}
                if(! switch$1)var _bcr_=_bct_}
              if(switch$0)
               var
                _bcr_=
                 is_v2
                  ?caml_call1(_Fb_,cst_Time_spans_must_end_in_ns_)
                  :caml_call1(_Fb_,cst_Time_spans_must_end_in_ms_);
              var _bcs_=_bcr_}
            else
             var _bcs_=caml_call1(_Fb_,cst_empty_string);
            var _bcu_=_bcs_}
          catch(exn)
           {exn = caml_wrap_exception(exn);
            var _bcu_=caml_call4(_Po_,_aaQ_,x,caml_call1(Base_Exn[10],exn),0)}
          return _bcu_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return of_sexp_error_exn([0,T_of_sexp,sexp,exn],sexp)}}
      return of_sexp_error_exn([0,T_of_sexp_expected_atom_but_go,sexp],sexp)}
    function string$1(is_v2,suffix,float$0)
     {return is_v2
              ?caml_call2(_Fp_,caml_call1(Sexplib_Conv[1][1],float$0),suffix)
              :caml_call3(_fx_,_aaX_,float$0,suffix)}
    function sexp_of_t_v1_v2(t,is_v2)
     {var match=caml_call1(_ID_,t);
      switch(match)
       {case 0:var _bcq_=caml_call2(symbol$36,t,zero)?cst_inf:cst_inf$0;break;
        case 1:var _bcq_=cst_nan;break;
        case 2:
         var abs_t=caml_call1(of_float,caml_call1(abs,t)),switch$0=0;
         if(is_v2 && caml_call2(symbol$37,abs_t,microsecond))
          var _bcq_=string$1(is_v2,cst_ns$2,t * 1000000000.);
         else
          switch$0 = 1;
         if(switch$0)
          {var switch$1=0;
           if(is_v2 && caml_call2(symbol$37,abs_t,millisecond))
            var _bcq_=string$1(is_v2,cst_us$3,t * 1000000.);
           else
            switch$1 = 1;
           if(switch$1)
            var
             _bcq_=
              caml_call2(symbol$37,abs_t,second$0)
               ?string$1(is_v2,cst_ms$3,t * 1000.)
               :caml_call2(symbol$37,abs_t,minute)
                 ?string$1(is_v2,cst_s$5,t)
                 :caml_call2(symbol$37,abs_t,hour)
                   ?string$1(is_v2,cst_m$3,to_min(t))
                   :caml_call2(symbol$37,abs_t,day$0)
                     ?string$1(is_v2,cst_h$0,to_hr(t))
                     :string$1(is_v2,cst_d$2,to_day(t))}
         break;
        default:var _bcq_=cst_0s}
      return [0,_bcq_]}
    function t_of_sexp$70(sexp){return t_of_sexp_v1_v2(sexp,0)}
    function sexp_of_t$83(t){return sexp_of_t_v1_v2(t,0)}
    var
     t_sexp_grammar$26=
      caml_call1(Sexplib_Sexp_grammar[1],t_sexp_grammar$8);
    function t_of_sexp$71(sexp){return t_of_sexp_v1_v2(sexp,1)}
    function sexp_of_t$84(t){return sexp_of_t_v1_v2(t,1)}
    function to_unit_of_time(t)
     {var abs_t=caml_call1(abs,t);
      return caml_call2(symbol$33,abs_t,day$0)
              ?6
              :caml_call2(symbol$33,abs_t,hour)
                ?5
                :caml_call2(symbol$33,abs_t,minute)
                  ?4
                  :caml_call2(symbol$33,abs_t,second$0)
                    ?3
                    :caml_call2(symbol$33,abs_t,millisecond)
                      ?2
                      :caml_call2(symbol$33,abs_t,microsecond)?1:0}
    function of_unit_of_time(param)
     {switch(param)
       {case 0:return nanosecond;
        case 1:return microsecond;
        case 2:return millisecond;
        case 3:return second$0;
        case 4:return minute;
        case 5:return hour;
        default:return day$0}}
    function suffix_of_unit_of_time(unit_of_time)
     {switch(unit_of_time)
       {case 0:return cst_ns$3;
        case 1:return cst_us$4;
        case 2:return cst_ms$4;
        case 3:return cst_s$6;
        case 4:return cst_m$4;
        case 5:return cst_h$1;
        default:return cst_d$3}}
    function invalid_string$0(string,reason)
     {var
       message=caml_call2(_Fp_,cst_Time_Span_of_string,reason),
       _bcp_=[0,caml_call1(Sexplib0_Sexp_conv[7],string),0];
      return caml_call1
              (_nX_,[1,[0,caml_call1(Sexplib0_Sexp_conv[7],message),_bcp_]])}
    function parse_suffix(string,index)
     {var unit_of_time_list$0=unit_of_time_list;
      for(;;)
       {if(unit_of_time_list$0)
         {var
           rest=unit_of_time_list$0[2],
           unit_of_time=unit_of_time_list$0[1],
           suffix=suffix_of_unit_of_time(unit_of_time);
          if(caml_call3(_BM_,string,index,suffix))return unit_of_time;
          var unit_of_time_list$0=rest;
          continue}
        return invalid_string$0(string,cst_invalid_span_part_suffix)}}
    function state_is_final(param)
     {switch(param){case 1:case 3:case 6:return 1;default:return 0}}
    function invalid_string$1(string)
     {return invalid_string$0(string,cst_invalid_span_part_magnitud)}
    function of_string$21(string)
     {if(caml_string_notequal(string,cst_INFs))
       {if(caml_string_notequal(string,cst_INFs$0))
         {if(caml_string_notequal(string,cst_NANs))
           {var len=caml_ml_string_length(string);
            if(0 === len)invalid_string$0(string,cst_empty_input);
            var
             match$0=caml_string_get(string,0),
             switcher=match$0 - 43 | 0,
             switch$0=0;
            if(2 < switcher >>> 0)
             switch$0 = 1;
            else
             switch(switcher)
              {case 0:var index$3=1,negative=0;break;
               case 1:switch$0 = 1;break;
               default:var index$3=1,negative=1}
            if(switch$0)var index$3=0,negative=0;
            if(len <= index$3)invalid_string$0(string,cst_empty_input$0);
            var magnitude=zero,index$1=index$3;
            a:
            for(;;)
             {if(caml_call2(equal$24,index$1,len))
               return negative?caml_call1(neg,magnitude):magnitude;
              var index=index$1,state=0;
              for(;;)
               {if(index === len)
                 var
                  suffix_index=
                   state_is_final(state)?index:invalid_string$1(string);
                else
                 {var param=caml_string_get(string,index),switch$1=0;
                  if(70 <= param)
                   if(95 === param)
                    var match=_aaY_;
                   else
                    if(101 === param)switch$1 = 2;else switch$1 = 1;
                  else
                   if(58 <= param)
                    if(69 <= param)switch$1 = 2;else switch$1 = 1;
                   else
                    if(43 <= param)
                     switch(param - 43 | 0)
                      {case 3:var match=_aa1_;break;
                       case 0:
                       case 2:var match=_aa0_;break;
                       case 1:
                       case 4:switch$1 = 1;break;
                       default:var match=_aa2_}
                    else
                     switch$1 = 1;
                  switch(switch$1)
                   {case 1:var match=0;break;case 2:var match=_aaZ_;break}
                  if(match)
                   {var token=match[1];
                    switch(state)
                     {case 0:
                       var state$0=1 === token?2:token?invalid_string$1(string):1;
                       break;
                      case 1:
                       switch(token)
                        {case 1:var state$0=3;break;
                         case 3:var state$0=invalid_string$1(string);break;
                         case 4:var state$0=4;break;
                         default:var state$0=1}
                       break;
                      case 2:var state$0=token?invalid_string$1(string):3;break;
                      case 3:
                       switch(token)
                        {case 4:var state$0=4;break;
                         case 0:
                         case 2:var state$0=3;break;
                         default:var state$0=invalid_string$1(string)}
                       break;
                      case 4:
                       var state$0=3 === token?5:token?invalid_string$1(string):6;
                       break;
                      case 5:var state$0=token?invalid_string$1(string):6;break;
                      default:
                       var switch$2=0;
                       if(1 === token || 3 <= token)
                        switch$2 = 1;
                       else
                        var state$0=6;
                       if(switch$2)var state$0=invalid_string$1(string)}
                    var index$0=index + 1 | 0,index=index$0,state=state$0;
                    continue}
                  var
                   suffix_index=
                    state_is_final(state)?index:invalid_string$1(string)}
                var
                 unit_of_time=parse_suffix(string,suffix_index),
                 index$2=
                  suffix_index
                  +
                  caml_ml_string_length(suffix_of_unit_of_time(unit_of_time))
                  |
                  0,
                 float_string=
                  caml_call3(_AY_,string,index$1,suffix_index - index$1 | 0),
                 float$0=caml_call1(_Hw_,float_string),
                 magnitude$0=
                  caml_call2
                   (symbol$39,
                    magnitude,
                    scale_by_unit_of_time(float$0,unit_of_time)),
                 magnitude=magnitude$0,
                 index$1=index$2;
                continue a}}}
          return to_span_since_epoch$0(none)}
        return to_span_since_epoch$0(_HA_)}
      return to_span_since_epoch$0(_HB_)}
    function string_of_float_without_traili(float$0)
     {var string=caml_call1(_Iv_,float$0);
      return caml_call2(_BP_,string,suffix)
              ?caml_call2(_B$_,string,suffix)
              :string}
    function sum$5(sum_t,unit_of_time,magnitude)
     {return caml_call2
              (symbol$39,sum_t,scale_by_unit_of_time(magnitude,unit_of_time))}
    function to_float_string(abs_t,unit_of_time,fixup_unit_of_time)
     {var
       magnitude=divide_by_unit_of_time(abs_t,unit_of_time),
       sum_t=sum$5(zero,unit_of_time,magnitude);
      if(caml_call2(symbol$35,sum_t,abs_t))
       {var _bcl_=suffix_of_unit_of_time(unit_of_time);
        return caml_call2
                (_Fp_,string_of_float_without_traili(magnitude),_bcl_)}
      var
       magnitude$0=
        caml_call2(symbol$37,sum_t,abs_t)
         ?magnitude
         :divide_by_unit_of_time(prev$2(abs_t),unit_of_time),
       sum_t$0=sum$5(zero,unit_of_time,magnitude$0),
       rem_t=caml_call2(symbol$40,abs_t,sum_t$0),
       fixup_magnitude=divide_by_unit_of_time(rem_t,fixup_unit_of_time),
       _bcm_=suffix_of_unit_of_time(fixup_unit_of_time),
       _bcn_=caml_call2(_Fp_,caml_call2(_fx_,_aa3_,fixup_magnitude),_bcm_),
       _bco_=caml_call2(_Fp_,suffix_of_unit_of_time(unit_of_time),_bcn_);
      return caml_call2
              (_Fp_,string_of_float_without_traili(magnitude$0),_bco_)}
    function to_int_string_and_sum(unit_of_time,abs_t,sum_t)
     {var
       unit_span=of_unit_of_time(unit_of_time),
       rem_t=caml_call2(symbol$40,abs_t,sum_t),
       magnitude=caml_call1(_H1_,rem_t / unit_span),
       new_sum_t=sum$5(sum_t,unit_of_time,magnitude),
       new_rem_t=caml_call2(symbol$40,abs_t,new_sum_t);
      if(caml_call2(symbol$35,new_rem_t,zero))
       var magnitude$0=magnitude;
      else
       if(caml_call2(symbol$37,new_rem_t,zero))
        var magnitude$0=magnitude - 1.;
       else
        var
         next_magnitude=magnitude + 1.,
         next_sum_t=sum$5(sum_t,unit_of_time,next_magnitude),
         next_rem_t=caml_call2(symbol$40,abs_t,next_sum_t),
         magnitude$1=
          caml_call2(symbol$37,next_rem_t,zero)?magnitude:next_magnitude,
         magnitude$0=magnitude$1;
      if(caml_call2(symbol$34,magnitude$0,0.))return [0,cst$138,sum_t];
      var
       new_sum_t$0=sum$5(sum_t,unit_of_time,magnitude$0),
       _bck_=suffix_of_unit_of_time(unit_of_time),
       string=
        caml_call2
         (_Fp_,caml_call1(_Kl_,caml_call1(of_float$4,magnitude$0)),_bck_);
      return [0,string,new_sum_t$0]}
    function symbol$186(x,y)
     {return caml_call1(_A1_,x)?y:caml_call1(_A1_,y)?x:caml_call2(_Fp_,x,y)}
    function to_string$25(t)
     {var float$0=caml_call1(to_float,t);
      if(caml_call1(_Ik_,float$0))
       {if(caml_call2(symbol$35,t,zero))return cst_0s$0;
        var
         unit_of_time$0=to_unit_of_time(t),
         abs_t=caml_call1(abs,t),
         sign=caml_call2(symbol$37,t,zero)?cst$141:cst$142;
        if(4 <= unit_of_time$0)
         {var switch$0=0;
          if
           (6
            <=
            unit_of_time$0
            &&
            caml_call2
             (symbol$33,caml_call2(symbol$40,next$1(abs_t),abs_t),day$0))
           var magnitude_string=to_float_string(abs_t,unit_of_time$0,6);
          else
           switch$0 = 1;
          if(switch$0)
           {var
             match=to_int_string_and_sum(6,abs_t,zero),
             sum_t=match[2],
             day_string=match[1],
             match$0=to_int_string_and_sum(5,abs_t,sum_t),
             sum_t$0=match$0[2],
             hour_string=match$0[1],
             match$1=to_int_string_and_sum(4,abs_t,sum_t$0),
             sum_t$1=match$1[2],
             minute_string=match$1[1];
            if(caml_call2(symbol$33,sum_t$1,abs_t))
             var float_string=cst$139;
            else
             {var
               rem_t=caml_call2(symbol$40,abs_t,sum_t$1),
               unit_of_time=to_unit_of_time(rem_t),
               unit_span=of_unit_of_time(unit_of_time),
               magnitude=rem_t / unit_span,
               new_sum_t=sum$5(sum_t$1,unit_of_time,magnitude),
               new_rem_t=caml_call2(symbol$40,abs_t,new_sum_t),
               _bcj_=caml_call1(abs,new_rem_t);
              if(caml_call2(symbol$34,caml_call1(abs,rem_t),_bcj_))
               var float_string=cst$140;
              else
               var
                order_of_magnitude_of_first_di=
                 caml_call1(_H__,caml_log10_float(rem_t)),
                half_ulp=
                 symbol$183(caml_call2(symbol$40,abs_t,prev$2(abs_t)),2.),
                order_of_magnitude_of_final_di=
                 caml_call1
                  (prev$1,caml_call1(_H$_,caml_log10_float(half_ulp))),
                number_of_digits=
                 (1 + order_of_magnitude_of_first_di | 0)
                 -
                 order_of_magnitude_of_final_di
                 |
                 0,
                suffix=suffix_of_unit_of_time(unit_of_time),
                float_string=
                 caml_call2
                  (_Fp_,
                   caml_call3(_fx_,_aa4_,number_of_digits,magnitude),
                   suffix)}
            var
             magnitude_string=
              symbol$186
               (day_string,
                symbol$186(hour_string,symbol$186(minute_string,float_string)))}}
        else
         var magnitude_string=to_float_string(abs_t,unit_of_time$0,0);
        return symbol$186(sign,magnitude_string)}
      return caml_call1(is_nan,float$0)
              ?cst_NANs$0
              :caml_call1(is_negative,float$0)?cst_INFs$1:cst_INFs$2}
    function sexp_of_t$85(t){return [0,to_string$25(t)]}
    function t_of_sexp$72(s)
     {if(0 === s[0])
       {var x=s[1];
        try
         {var _bci_=of_string$21(x);return _bci_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call2(_Oo_,caml_call1(Base_Exn[10],exn),s)}}
      return caml_call2(_Oo_,cst_Time_Span_Stable_V3_t_of_s,s)}
    var
     t_sexp_grammar$27=
      caml_call1(Sexplib_Sexp_grammar[1],t_sexp_grammar$8);
    function to_string_hum$9(opt,_bch_,_bcg_,unit_of_time,t)
     {if(opt)var sth=opt[1],delimiter=sth;else var delimiter=95;
      if(_bch_)var sth$0=_bch_[1],decimals=sth$0;else var decimals=3;
      if(_bcg_)
       var sth$1=_bcg_[1],align_decimal=sth$1;
      else
       var align_decimal=0;
      var match=caml_call2(_xD_,unit_of_time,to_unit_of_time(t));
      switch(match)
       {case 0:var suffix=suffix$0,float$0=t * 1000000000.;break;
        case 1:var suffix=suffix$1,float$0=t * 1000000.;break;
        case 2:var suffix=suffix$2,float$0=t * 1000.;break;
        case 3:var suffix=suffix$3,float$0=t;break;
        case 4:var suffix=suffix$4,float$0=to_min(t);break;
        case 5:var suffix=suffix$5,float$0=to_hr(t);break;
        default:var float$1=to_day(t),suffix=suffix$6,float$0=float$1}
      var
       prefix=
        caml_call5
         (_Iw_,[0,delimiter],[0,decimals],[0,1 - align_decimal],0,float$0),
       switch$0=0;
      if(align_decimal && caml_ml_string_length(suffix) === 1)
       {var suffix$7=caml_call2(_Fp_,suffix,cst$143);switch$0 = 1}
      if(! switch$0)var suffix$7=suffix;
      return caml_call2(_Fp_,prefix,suffix$7)}
    function gen_incl$0(lo,hi)
     {var _bcf_=caml_call2(_IX_,lo,hi);
      return caml_call2(_pD_[10],_bcf_,to_span_since_epoch$0)}
    function gen_uniform_incl$0(lo,hi)
     {var _bce_=caml_call2(_IW_,lo,hi);
      return caml_call2(_pD_[10],_bce_,to_span_since_epoch$0)}
    var millenium=of_day(caml_call1(_H2_,365242.5));
    function _aa5_(t)
     {var _bcd_=caml_call2(symbol$34,caml_call1(neg,millenium),t);
      return _bcd_?caml_call2(symbol$34,t,millenium):_bcd_}
    var
     quickcheck_generator$19=caml_call2(_pD_[60],quickcheck_generator$9,_aa5_),
     include$118=
      caml_call1(Base_Pretty_printer[2],[0,module_name$8,to_string$25]),
     _aa6_=include$118[1],
     _aa7_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$181),0,bin_shape_t$53],0],
     _aa8_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_span_float_ml_764),
     group$105=caml_call2(Bin_prot_Shape[6],_aa8_,_aa7_),
     _aa9_=caml_call1(Bin_prot_Shape[2][1],cst_t$182),
     bin_shape_t$96=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$105,_aa9_),0),
     bin_writer_t$84=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_t$84=[0,bin_read_t$9,bin_read_t$10],
     bin_t$84=[0,bin_shape_t$96,bin_writer_t$84,bin_reader_t$84];
    function hash$44(x){return caml_call1(hash$15,x)}
    function t_of_sexp$73(sexp)
     {try
       {var float$0=caml_call1(float_of_sexp,sexp)}
      catch(_bcc_){return t_of_sexp$72(sexp)}
      return caml_call1(of_float,float$0)}
    var
     include$119=
      Make_binable
       ([0,
         hash_fold_t$18,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$96,
         bin_writer_t$84,
         bin_reader_t$84,
         bin_t$84,
         t_of_sexp$73,
         compare$40,
         sexp_of_t$85,
         hash$44]),
     _aa__=include$119[1],
     _aa$_=include$119[2],
     _aba_=include$119[3],
     _abb_=include$119[4],
     _abc_=include$119[5],
     _abd_=include$119[6],
     _abe_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$183),0,bin_shape_t$53],0],
     _abf_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_span_float_ml_777),
     group$106=caml_call2(Bin_prot_Shape[6],_abf_,_abe_),
     _abg_=caml_call1(Bin_prot_Shape[2][1],cst_t$184),
     bin_shape_t$97=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$106,_abg_),0),
     bin_writer_t$85=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_t$85=[0,bin_read_t$9,bin_read_t$10],
     bin_t$85=[0,bin_shape_t$97,bin_writer_t$85,bin_reader_t$85];
    function t_of_sexp$74(sexp)
     {var
       match=
        caml_call1
         (_xU_,
          function(param)
           {return caml_call1(of_float,caml_call1(float_of_sexp,sexp))});
      if(match){var t=match[1];return t}
      return t_of_sexp$72(sexp)}
    var
     Map$22=
      _vv_
       ([0,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$97,
         bin_writer_t$85,
         bin_reader_t$85,
         bin_t$85,
         t_of_sexp$74,
         sexp_of_t$85,
         comparator$7]),
     Set$22=
      _wR_
       ([0,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$97,
         bin_writer_t$85,
         bin_reader_t$85,
         bin_t$85,
         t_of_sexp$74,
         sexp_of_t$85,
         comparator$7]),
     include$120=_wZ_([0,compare$40,sexp_of_t$85,zero]),
     is_positive$6=include$120[1],
     is_non_negative$6=include$120[2],
     is_negative$6=include$120[3],
     is_non_positive$6=include$120[4],
     sign$6=include$120[5],
     validate_lbound$17=include$120[6],
     validate_ubound$17=include$120[7],
     validate_bound$17=include$120[8],
     validate_positive$6=include$120[9],
     validate_non_negative$6=include$120[10],
     validate_negative$6=include$120[11],
     validate_non_positive$6=include$120[12];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$355);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Span_float$0);
    var
     Core_Span_float=
      [0,
       bin_size_t$4,
       bin_write_t$4,
       bin_read_t$9,
       bin_read_t$10,
       bin_shape_t$53,
       bin_writer_t$46,
       bin_reader_t$46,
       bin_t$46,
       t_of_sexp$72,
       sexp_of_t$85,
       t_sexp_grammar$27,
       typerep_of_t$8,
       typename_of_t$8,
       Parts,
       symbol$33,
       symbol$34,
       symbol$35,
       symbol$36,
       symbol$37,
       symbol$38,
       equal$23,
       compare$40,
       min$5,
       max$5,
       ascending$4,
       descending$4,
       between$4,
       clamp_exn$4,
       clamp$4,
       Replace_polymorphic_compare$2,
       comparator$7,
       Map$22,
       Set$22,
       is_positive$6,
       is_non_negative$6,
       is_negative$6,
       is_non_positive$6,
       sign$6,
       validate_lbound$17,
       validate_ubound$17,
       validate_bound$17,
       validate_positive$6,
       validate_non_negative$6,
       validate_negative$6,
       validate_non_positive$6,
       _aa__,
       _aa$_,
       _aba_,
       _abb_,
       _abc_,
       _abd_,
       _aa6_,
       _aaJ_,
       _aaK_,
       _aaL_,
       _aaM_,
       _aaN_,
       _aaO_,
       _aaP_,
       quickcheck_generator$19,
       quickcheck_observer$8,
       quickcheck_shrinker$8,
       gen_incl$0,
       gen_uniform_incl$0,
       to_string$25,
       of_string$21,
       nanosecond,
       microsecond,
       millisecond,
       second$0,
       minute,
       hour,
       day$0,
       _aaI_,
       zero,
       create$23,
       to_parts,
       of_ns,
       of_us,
       of_ms,
       to_span_since_epoch$0,
       of_int_sec,
       of_int32_seconds,
       of_int63_seconds$0,
       of_min,
       of_hr,
       of_day,
       to_ns,
       to_us,
       to_ms,
       of_span_since_epoch$0,
       to_min,
       to_hr,
       to_day,
       to_int63_seconds_round_down_ex$0,
       to_float,
       symbol$39,
       symbol$40,
       abs,
       neg,
       scale,
       symbol$183,
       symbol$184,
       next$1,
       prev$2,
       to_short_string,
       to_unit_of_time,
       of_unit_of_time,
       to_string_hum$9,
       randomize$0,
       [0,
        [0,
         t_of_sexp$70,
         sexp_of_t$83,
         t_sexp_grammar$26,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$53,
         bin_writer_t$46,
         bin_reader_t$46,
         bin_t$46,
         compare$40,
         hash_fold_t$18,
         hash$15,
         equal$23],
        [0,
         t_of_sexp$71,
         sexp_of_t$84,
         t_sexp_grammar$26,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$53,
         bin_writer_t$46,
         bin_reader_t$46,
         bin_t$46,
         compare$40,
         hash_fold_t$18,
         hash$15,
         equal$23],
        [0,
         t_of_sexp$72,
         sexp_of_t$85,
         t_sexp_grammar$27,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$53,
         bin_writer_t$46,
         bin_reader_t$46,
         bin_t$46,
         compare$40,
         hash_fold_t$18,
         hash$15,
         typerep_of_t$8,
         typename_of_t$8,
         equal$23]],
       [0,parse_suffix,suffix_of_unit_of_time]];
    caml_register_global(5393,Core_Span_float,"Core__Span_float");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Span_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$356);
    caml_call1(Expect_test_collector[5][1],cst_core_src_span_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$357,cst$144);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$358);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Span_intf$0);
    var Core_Span_intf=[0];
    caml_register_global(5394,Core_Span_intf,"Core__Span_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Ofday_float);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$359);
    caml_call1(Expect_test_collector[5][1],cst_core_src_ofday_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$360,cst$145);
    var
     include$121=caml_call1(Robust_compare[1],[0,1e-06]),
     _abh_=include$121[2],
     _abi_=include$121[3],
     _abj_=include$121[4],
     _abk_=include$121[5],
     _abl_=include$121[6],
     _abm_=include$121[7],
     _abn_=include$121[8];
    function to_span_since_start_of_day(t){return to_span_since_epoch$0(t)}
    function is_valid(t)
     {var
       t$0=to_span_since_start_of_day(t),
       _bcb_=caml_call2(symbol$34,zero,t$0);
      return _bcb_?caml_call2(symbol$34,t$0,day$0):_bcb_}
    function of_span_since_start_of_day_unc(span){return span}
    function span_since_start_of_day_is_val(span){return is_valid(span)}
    function of_span_since_start_of_day(span)
     {var match=caml_call1(_ID_,span);
      if(1 === match)return caml_call1(_Fa_,cst_Ofday_of_span_since_start_);
      if(match)
       {if(is_valid(span))return span;
        var _bb$_=0,_bca_=0;
        return caml_call3
                (_Po_,
                 [0,
                  [11,
                   cst_Ofday_out_of_range,
                   [24,
                    _abo_,
                    function(param,custom_printf_001)
                     {return to_string$25(custom_printf_001)},
                    _bca_]],
                  cst_Ofday_out_of_range_Span],
                 span,
                 _bb$_)}
      return caml_call1(_Fa_,cst_Ofday_of_span_since_start_$0)}
    var start_of_next_day=of_span_since_start_of_day(day$0),start_of_day=0.;
    function add$12(t,span){var t$0=t + span;return is_valid(t$0)?[0,t$0]:0}
    function sub$3(t,span){var t$0=t - span;return is_valid(t$0)?[0,t$0]:0}
    function next$2(t)
     {var candidate=caml_call2(_HR_,19067,t);
      return is_valid(candidate)?[0,candidate]:0}
    function prev$3(t)
     {var candidate=caml_call2(_HR_,759637122,t);
      return is_valid(candidate)?[0,candidate]:0}
    function diff$6(t1,t2)
     {var _bb__=to_span_since_start_of_day(t2);
      return caml_call2(symbol$40,to_span_since_start_of_day(t1),_bb__)}
    var
     approximate_end_of_day=
      caml_call4(_xE_,0,0,0,sub$3(start_of_next_day,microsecond));
    function create$24(hr,min,sec,ms,us,ns,param)
     {var switch$0=0;
      if(sec && 60 === sec[1])
       {var ns$0=_abp_,us$0=_abq_,ms$0=_abr_;switch$0 = 1}
      if(! switch$0)var ns$0=ns,us$0=us,ms$0=ms;
      return of_span_since_start_of_day
              (create$23(0,0,hr,min,sec,ms$0,us$0,ns$0,0))}
    function to_parts$0(t){return to_parts(to_span_since_start_of_day(t))}
    function to_string_gen(drop_ms,drop_us,trim,t)
     {var drop_us$0=drop_ms?drop_us:1;
      if(drop_us$0)
       {var
         float_sec=to_span_since_start_of_day(t),
         us=caml_call1(_Id_,float_sec * 1000000.),
         us$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,us,caml_call1(of_int$2,1000))),
         ms=caml_call2(symbol$110,us,caml_call1(of_int$2,1000)),
         ms$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,ms,caml_call1(of_int$2,1000))),
         sec=caml_call2(symbol$110,ms,caml_call1(of_int$2,1000)),
         sec$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,sec,caml_call1(of_int$2,60))),
         min=caml_call2(symbol$110,sec,caml_call1(of_int$2,60)),
         min$0=
          caml_call1
           (to_int_exn$2,caml_call2(rem$2,min,caml_call1(of_int$2,60))),
         hr=caml_call2(symbol$110,min,caml_call1(of_int$2,60)),
         hr$0=caml_call1(to_int_exn$2,hr),
         dont_print_us=
          drop_us
          ||
          (trim?caml_call2(Replace_polymorphic_compare$3[3],us$0,0):trim);
        if(drop_ms)
         var dont_print_ms=drop_ms;
        else
         if(trim)
          var
           _bb9_=caml_call2(Replace_polymorphic_compare$3[3],ms$0,0),
           dont_print_ms=_bb9_?dont_print_us:_bb9_;
         else
          var dont_print_ms=trim;
        if(trim)
         var
          _bb8_=caml_call2(Replace_polymorphic_compare$3[3],sec$0,0),
          dont_print_s=_bb8_?dont_print_ms:_bb8_;
        else
         var dont_print_s=trim;
        var
         len=dont_print_s?5:dont_print_ms?8:dont_print_us?12:15,
         buf=caml_call1(_Dw_,len);
        write_2_digit_int$0(buf,0,hr$0);
        caml_call3(_DE_,buf,2,58);
        write_2_digit_int$0(buf,3,min$0);
        if(! dont_print_s)
         {caml_call3(_DE_,buf,5,58);
          write_2_digit_int$0(buf,6,sec$0);
          if(! dont_print_ms)
           {caml_call3(_DE_,buf,8,46);
            write_3_digit_int$0(buf,9,ms$0);
            if(! dont_print_us)write_3_digit_int$0(buf,12,us$0)}}
        return caml_call1(_DO_,buf)}
      throw [0,Assert_failure,_abs_]}
    function to_string_trimmed(t){return to_string_gen(0,0,1,t)}
    function to_sec_string(t){return to_string_gen(1,1,0,t)}
    function to_millisec_string(t){return to_string_gen(0,1,0,t)}
    var hour$0=3600.;
    function small_diff(ofday1,ofday2)
     {var
       ofday1$0=to_span_since_start_of_day(ofday1),
       ofday2$0=to_span_since_start_of_day(ofday2),
       diff=ofday1$0 - ofday2$0,
       d1=caml_call2(_Is_,diff,hour$0),
       d2=caml_call2(_Is_,d1 + 3600.,hour$0),
       d=caml_call2(symbol$36,d2,1800.)?d2 - 3600.:d2;
      return to_span_since_epoch$0(d)}
    function to_string$26(t){return to_string_gen(0,0,0,t)}
    var
     include$122=
      caml_call1(Base_Pretty_printer[2],[0,module_name$9,to_string$26]),
     _abt_=include$122[1];
    function create_from_parsed(string,hr,min,sec,subsec_pos,subsec_len)
     {var
       subsec=
        caml_call2(equal$24,subsec_len,0)
         ?0.
         :caml_call1(_Hw_,caml_call3(_AY_,string,subsec_pos,subsec_len));
      return of_span_since_start_of_day
              (to_span_since_epoch$0
                (caml_call1
                  (_HS_,((hr * 3600 | 0) + (min * 60 | 0) | 0) + sec | 0)
                 +
                 subsec))}
    function of_string$22(s){return parse$0(s,create_from_parsed)}
    function t_of_sexp$75(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _bb7_=of_string$22(s);return _bb7_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Stdlib[6])
           {var s$0=exn[2];
            return caml_call2
                    (_Oo_,caml_call2(_Fp_,cst_Ofday_t_of_sexp,s$0),sexp)}
          throw exn}}
      return caml_call2(_Oo_,cst_Ofday_t_of_sexp$0,sexp)}
    var
     t_sexp_grammar$28=
      caml_call1(Sexplib_Sexp_grammar[1],t_sexp_grammar$8);
    function sexp_of_t$86(span){return [0,to_string$26(span)]}
    function of_string_iso8601_extended(pos,len,str)
     {try
       {var _bb6_=parse_iso8601_extended(pos,len,str,create_from_parsed);
        return _bb6_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var _bb5_=caml_call1(Base_Exn[10],exn);
        return caml_call4(_Po_,_abu_,caml_call3(_AZ_,pos,len,str),_bb5_,0)}}
    function gen_incl$1(lo,hi)
     {var
       _bb3_=to_span_since_start_of_day(hi),
       _bb4_=gen_incl$0(to_span_since_start_of_day(lo),_bb3_);
      return caml_call2(_pD_[10],_bb4_,of_span_since_start_of_day)}
    function gen_uniform_incl$1(lo,hi)
     {var
       _bb1_=to_span_since_start_of_day(hi),
       _bb2_=gen_uniform_incl$0(to_span_since_start_of_day(lo),_bb1_);
      return caml_call2(_pD_[10],_bb2_,of_span_since_start_of_day)}
    var
     quickcheck_generator$20=gen_incl$1(start_of_day,start_of_next_day),
     quickcheck_observer$18=
      caml_call2(_pC_[18],quickcheck_observer$8,to_span_since_start_of_day),
     quickcheck_shrinker$18=caml_call1(_pB_[3],0),
     _abv_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$185),0,bin_shape_t$53],0],
     _abw_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_ofday_float_ml_27),
     group$107=caml_call2(Bin_prot_Shape[6],_abw_,_abv_),
     _abx_=caml_call1(Bin_prot_Shape[2][1],cst_t$186),
     bin_shape_t$98=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$107,_abx_),0),
     bin_writer_t$86=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_t$86=[0,bin_read_t$9,bin_read_t$10],
     bin_t$86=[0,bin_shape_t$98,bin_writer_t$86,bin_reader_t$86];
    function hash$45(x){return caml_call1(hash$15,x)}
    function t_of_sexp$76(sexp)
     {try
       {var float$0=caml_call1(float_of_sexp,sexp)}
      catch(_bb0_){return t_of_sexp$75(sexp)}
      return caml_call1(of_float,float$0)}
    var
     include$123=
      Make_binable
       ([0,
         hash_fold_t$18,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$98,
         bin_writer_t$86,
         bin_reader_t$86,
         bin_t$86,
         t_of_sexp$76,
         compare$40,
         sexp_of_t$86,
         hash$45]),
     _aby_=include$123[1],
     _abz_=include$123[2],
     _abA_=include$123[3],
     _abB_=include$123[4],
     _abC_=include$123[5],
     _abD_=include$123[6],
     _abE_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$187),0,bin_shape_t$53],0],
     _abF_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_ofday_float_ml_28),
     group$108=caml_call2(Bin_prot_Shape[6],_abF_,_abE_),
     _abG_=caml_call1(Bin_prot_Shape[2][1],cst_t$188),
     bin_shape_t$99=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$108,_abG_),0),
     bin_writer_t$87=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_t$87=[0,bin_read_t$9,bin_read_t$10],
     bin_t$87=[0,bin_shape_t$99,bin_writer_t$87,bin_reader_t$87],
     compare$74=comparator$7[1];
    function t_of_sexp$77(sexp)
     {var
       match=
        caml_call1
         (_xU_,
          function(param)
           {return caml_call1(of_float,caml_call1(float_of_sexp,sexp))});
      if(match){var t=match[1];return t}
      return t_of_sexp$75(sexp)}
    var
     Map$23=
      _vv_
       ([0,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$99,
         bin_writer_t$87,
         bin_reader_t$87,
         bin_t$87,
         t_of_sexp$77,
         sexp_of_t$86,
         comparator$7]),
     Set$23=
      _wR_
       ([0,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$99,
         bin_writer_t$87,
         bin_reader_t$87,
         bin_t$87,
         t_of_sexp$77,
         sexp_of_t$86,
         comparator$7]),
     include$124=Validate$0([0,compare$74,sexp_of_t$86]),
     _abH_=include$124[1],
     _abI_=include$124[2],
     _abJ_=include$124[3];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$361);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Ofday_float$0);
    var
     include$125=
      [0,
       [0,
        bin_size_t$4,
        bin_write_t$4,
        bin_read_t$9,
        bin_read_t$10,
        bin_shape_t$53,
        bin_writer_t$46,
        bin_reader_t$46,
        bin_t$46,
        compare$40,
        hash_fold_t$18,
        hash$15,
        t_of_sexp$75,
        sexp_of_t$86,
        t_sexp_grammar$28]],
     Core_Ofday_float=
      [0,
       bin_size_t$4,
       bin_write_t$4,
       bin_read_t$9,
       bin_read_t$10,
       bin_shape_t$53,
       bin_writer_t$46,
       bin_reader_t$46,
       bin_t$46,
       t_of_sexp$75,
       sexp_of_t$86,
       t_sexp_grammar$28,
       typerep_of_t$8,
       typename_of_t$8,
       symbol$33,
       symbol$34,
       symbol$35,
       symbol$36,
       symbol$37,
       symbol$38,
       equal$23,
       compare$40,
       min$5,
       max$5,
       ascending$4,
       descending$4,
       between$4,
       clamp_exn$4,
       clamp$4,
       _abH_,
       _abI_,
       _abJ_,
       Replace_polymorphic_compare$2,
       comparator$7,
       Map$23,
       Set$23,
       _aby_,
       _abz_,
       _abA_,
       _abB_,
       _abC_,
       _abD_,
       _abt_,
       _abh_,
       _abi_,
       _abj_,
       _abk_,
       _abl_,
       _abm_,
       _abn_,
       quickcheck_generator$20,
       quickcheck_observer$18,
       quickcheck_shrinker$18,
       gen_incl$1,
       gen_uniform_incl$1,
       of_string$22,
       to_string$26,
       create$24,
       to_parts$0,
       start_of_day,
       start_of_next_day,
       approximate_end_of_day,
       to_span_since_start_of_day,
       of_span_since_start_of_day,
       of_span_since_start_of_day,
       span_since_start_of_day_is_val,
       of_span_since_start_of_day_unc,
       add$12,
       sub$3,
       next$2,
       prev$3,
       diff$6,
       small_diff,
       to_string_trimmed,
       to_sec_string,
       of_string_iso8601_extended,
       to_millisec_string,
       to_millisec_string,
       include$125];
    caml_register_global(5395,Core_Ofday_float,"Core__Ofday_float");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Ofday_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$362);
    caml_call1(Expect_test_collector[5][1],cst_core_src_ofday_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$363,cst$146);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$364);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Ofday_intf$0);
    var Core_Ofday_intf=[0];
    caml_register_global(5396,Core_Ofday_intf,"Core__Ofday_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Time0_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$365);
    caml_call1(Expect_test_collector[5][1],cst_core_src_time0_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$366,cst$147);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$367);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Time0_intf$0);
    var Core_Time0_intf=[0];
    caml_register_global(5397,Core_Time0_intf,"Core__Time0_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Time_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$368);
    caml_call1(Expect_test_collector[5][1],cst_core_src_time_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$369,cst$148);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$370);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Time_intf$0);
    var Core_Time_intf=[0];
    caml_register_global(5398,Core_Time_intf,"Core__Time_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Time);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$371);
    caml_call1(Expect_test_collector[5][1],cst_core_src_time_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$372,cst$149);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$373);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Time$0);
    function _abZ_(Time0)
     {var
       _bao_=Time0[13],
       _bap_=Time0[14],
       _bas_=Time0[17],
       _bau_=Time0[19],
       _bav_=Time0[20],
       _bay_=Time0[23],
       _baz_=Time0[24],
       _baA_=Time0[25],
       _baD_=Time0[28],
       _baE_=Time0[29],
       _baF_=Time0[30],
       _baG_=Time0[31],
       _baJ_=Time0[34],
       _baY_=Time0[49],
       _bac_=Time0[1],
       _bad_=Time0[2],
       _bae_=Time0[3],
       _baf_=Time0[4],
       _bag_=Time0[5],
       _bah_=Time0[6],
       _bai_=Time0[7],
       _baj_=Time0[8],
       _bak_=Time0[9],
       _bal_=Time0[10],
       _bam_=Time0[11],
       _ban_=Time0[12],
       _baq_=Time0[15],
       _bar_=Time0[16],
       _bat_=Time0[18],
       _baw_=Time0[21],
       _bax_=Time0[22],
       _baB_=Time0[26],
       _baC_=Time0[27],
       _baH_=Time0[32],
       _baI_=Time0[33],
       _baK_=Time0[35],
       _baL_=Time0[36],
       _baM_=Time0[37],
       _baN_=Time0[38],
       _baO_=Time0[39],
       _baP_=Time0[40],
       _baQ_=Time0[41],
       _baR_=Time0[42],
       _baS_=Time0[43],
       _baT_=Time0[44],
       _baU_=Time0[45],
       _baV_=Time0[46],
       _baW_=Time0[47],
       _baX_=Time0[48],
       _baZ_=Time0[50],
       _ba0_=Time0[51],
       _ba1_=Time0[52],
       epoch=caml_call1(_baE_,_bao_[75]);
      function is_earlier(t1,t2){return caml_call2(_bav_,t1,t2)}
      function is_later(t1,t2){return caml_call2(_bau_,t1,t2)}
      function of_span_in_seconds(span_in_seconds)
       {var _bbZ_=caml_call1(Time_in_seconds[1][2],span_in_seconds);
        return caml_call1(Time0[13][84],_bbZ_)}
      function of_time_in_seconds(time_in_seconds)
       {var
         _bbW_=caml_call1(Time_in_seconds[4],time_in_seconds),
         _bbX_=caml_call1(Time_in_seconds[1][2],_bbW_),
         _bbY_=caml_call1(Time0[13][84],_bbX_);
        return caml_call1(Time0[29],_bbY_)}
      function index$0(t,time)
       {var
         _bbT_=caml_call1(Time0[28],time),
         _bbU_=caml_call1(Time0[13][95],_bbT_),
         _bbV_=caml_call1(Time_in_seconds[1][1],_bbU_);
        return index(t,caml_call1(Time_in_seconds[3],_bbV_))}
      function index_of_date_and_ofday$0(t,relative)
       {var
         _bbQ_=caml_call1(Time0[49][8],relative),
         _bbR_=caml_call1(Time0[13][95],_bbQ_),
         _bbS_=caml_call1(Time_in_seconds[1][1],_bbR_);
        return index_of_date_and_ofday
                (t,caml_call1(Time_in_seconds[2][1],_bbS_))}
      function index_offset_from_utc_exn$0(t,index)
       {return of_span_in_seconds(index_offset_from_utc_exn(t,index))}
      function index_prev_clock_shift_time_ex$0(t,index)
       {return of_time_in_seconds(index_prev_clock_shift_time_ex(t,index))}
      function index_next_clock_shift_time_ex$0(t,index)
       {return of_time_in_seconds(index_next_clock_shift_time_ex(t,index))}
      function index_prev_clock_shift_amount_$0(t,index)
       {return of_span_in_seconds(index_prev_clock_shift_amount_(t,index))}
      function index_next_clock_shift_amount_$0(t,index)
       {return of_span_in_seconds(index_next_clock_shift_amount_(t,index))}
      function abbreviation(t,time)
       {return index_abbreviation_exn(t,index$0(t,time))}
      function index_prev_clock_shift(t,index)
       {var match=index_has_prev_clock_shift(t,index);
        if(match)
         {var _bbP_=index_prev_clock_shift_amount_$0(t,index);
          return [0,[0,index_prev_clock_shift_time_ex$0(t,index),_bbP_]]}
        return 0}
      function prev_clock_shift(t,time)
       {return index_prev_clock_shift(t,index$0(t,time))}
      function next_clock_shift(t,time)
       {var index=index$0(t,time);
        return index_prev_clock_shift(t,caml_call1(Index[1],index))}
      function date_and_ofday_of_absolute_tim(t,time)
       {var
         index=index$0(t,time),
         offset_from_utc=index_offset_from_utc_exn$0(t,index);
        return caml_call2(Time0[49][5],time,offset_from_utc)}
      function absolute_time_of_date_and_ofda(t,relative)
       {var
         index=index_of_date_and_ofday$0(t,relative),
         offset_from_utc=index_offset_from_utc_exn$0(t,index);
        return caml_call2(Time0[49][6],relative,offset_from_utc)}
      var
       Zone=
        [0,
         sexp_of_t$63,
         compare$55,
         input_tz_file,
         likely_machine_zones,
         of_utc_offset,
         of_utc_offset_explicit_name,
         utc,
         name$46,
         original_filename,
         digest,
         reset_transition_cache,
         Index,
         index$0,
         index_of_date_and_ofday$0,
         index_offset_from_utc_exn$0,
         index_abbreviation_exn,
         index_has_prev_clock_shift,
         index_prev_clock_shift_time_ex$0,
         index_prev_clock_shift_amount_$0,
         index_has_next_clock_shift,
         index_next_clock_shift_time_ex$0,
         index_next_clock_shift_amount_$0,
         abbreviation,
         absolute_time_of_date_and_ofda,
         date_and_ofday_of_absolute_tim,
         next_clock_shift,
         prev_clock_shift];
      function abs_diff(t1,t2)
       {var _bbO_=caml_call2(_baA_,t1,t2);return caml_call1(_bao_[99],_bbO_)}
      function of_date_ofday(zone,date,ofday)
       {var relative=caml_call2(_baY_[1],date,ofday);
        return caml_call2(Zone[24],zone,relative)}
      function of_date_ofday_precise(date,ofday,zone)
       {var
         start_of_day=of_date_ofday(zone,date,_bap_[59]),
         proposed_time=
          caml_call2(_bay_,start_of_day,caml_call1(_bap_[62],ofday)),
         match=caml_call2(Zone[26],zone,start_of_day);
        if(match)
         {var
           match$0=match[1],
           shift_amount=match$0[2],
           shift_start=match$0[1],
           shift_backwards=caml_call2(_bao_[19],shift_amount,_bao_[75]);
          if(shift_backwards)
           var e=shift_start,s=caml_call2(_bay_,shift_start,shift_amount);
          else
           var
            e$0=caml_call2(_bay_,shift_start,shift_amount),
            e=e$0,
            s=shift_start;
          if(caml_call2(_baJ_,proposed_time,s))
           return [0,881568161,proposed_time];
          if
           (caml_call2(_baG_,s,proposed_time)
            &&
            caml_call2(_baJ_,proposed_time,e))
           return shift_backwards
                   ?[0,
                     748757384,
                     [0,
                      proposed_time,
                      caml_call2(_baz_,proposed_time,shift_amount)]]
                   :[0,744337004,shift_start];
          return [0,881568161,caml_call2(_baz_,proposed_time,shift_amount)]}
        return [0,881568161,proposed_time]}
      var date_cache=[0,Zone[7],epoch,epoch,epoch,unix_epoch];
      function reset_date_cache(param)
       {date_cache[1] = Zone[7];
        date_cache[2] = epoch;
        date_cache[3] = epoch;
        date_cache[4] = epoch;
        date_cache[5] = unix_epoch;
        return 0}
      function set_date_cache(time,zone)
       {var _bbH_=caml_call2(_Pp_,zone,date_cache[1]),switch$0=0;
        if(_bbH_)
         {var _bbI_=caml_call2(Time0[30],time,date_cache[2]);
          if(_bbI_)
           {var match=caml_call2(Time0[34],time,date_cache[3]);switch$0 = 1}
          else
           var _bbJ_=_bbI_}
        else
         var _bbJ_=_bbH_;
        if(! switch$0)var match=_bbJ_;
        if(match)return 0;
        var
         index=caml_call2(Zone[13],zone,time),
         offset_from_utc=caml_call2(Zone[15],zone,index),
         rel=caml_call2(_baY_[5],time,offset_from_utc),
         date=caml_call1(_baY_[3],rel),
         _bbK_=caml_call1(_baY_[4],rel),
         span=caml_call1(_bap_[62],_bbK_),
         _bbL_=caml_call2(_baY_[6],rel,offset_from_utc),
         effective_day_start=caml_call2(Time0[24],_bbL_,span),
         effective_day_until=
          caml_call2(Time0[23],effective_day_start,_bao_[73]),
         match$0=caml_call2(Zone[17],zone,index);
        if(match$0)
         var
          _bbM_=caml_call2(Zone[18],zone,index),
          cache_start_incl=caml_call2(Time0[39],_bbM_,effective_day_start);
        else
         var cache_start_incl=effective_day_start;
        var match$1=caml_call2(Zone[20],zone,index);
        if(match$1)
         var
          _bbN_=caml_call2(Zone[21],zone,index),
          cache_until_excl=caml_call2(Time0[38],_bbN_,effective_day_until);
        else
         var cache_until_excl=effective_day_until;
        date_cache[1] = zone;
        date_cache[2] = cache_start_incl;
        date_cache[3] = cache_until_excl;
        date_cache[4] = effective_day_start;
        date_cache[5] = date;
        return 0}
      function to_date(time,zone)
       {set_date_cache(time,zone);return date_cache[5]}
      var
       end_of_day=
        caml_call4(_xE_,_abK_,0,0,caml_call1(_bap_[70],_bap_[60]));
      function to_ofday(time,zone)
       {set_date_cache(time,zone);
        var
         _bbG_=caml_call2(Time0[25],time,date_cache[4]),
         of_day=caml_call1(_bap_[63],_bbG_);
        return caml_call2(_bap_[20],of_day,_bap_[60])?end_of_day:of_day}
      function to_date_ofday(time,zone)
       {var _bbF_=to_ofday(time,zone);return [0,to_date(time,zone),_bbF_]}
      function to_date_ofday_precise(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         clock_shift_after=caml_call2(Zone[26],zone,time),
         clock_shift_before_or_at=caml_call2(Zone[27],zone,time),
         switch$0=0;
        if(clock_shift_before_or_at)
         {var
           match$1=clock_shift_before_or_at[1],
           amount=match$1[2],
           start=match$1[1];
          if
           (caml_call2
             (_bau_,caml_call2(_bay_,start,caml_call1(_bao_[99],amount)),time))
           {if(caml_call2(_bao_[18],amount,_bao_[75]))
             {var match$0=caml_call2(_bap_[68],ofday,amount);
              if(match$0)
               var ofday$0=match$0[1],_bbC_=[0,-687020392,[0,date,ofday$0]];
              else
               var
                _bbz_=[0,[1,[0,_abL_,[0,caml_call1(Zone[1],zone),0]]],0],
                _bbA_=caml_call1(_baD_,time),
                _bbB_=
                 [0,[1,[0,_abM_,[0,caml_call1(_bao_[10],_bbA_),0]]],_bbz_],
                _bbC_=
                 caml_call1
                  (_nX_,
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7],cst_Time_to_date_ofday_precise),
                     _bbB_]]);
              var _bbD_=_bbC_}
            else
             {if(! caml_call2(_bao_[19],amount,_bao_[75]))
               throw [0,Assert_failure,_abN_];
              var
               _bbD_=
                [0,
                 1043984139,
                 caml_call2(_baz_,time,caml_call1(_bao_[99],amount))]}
            var ambiguity=_bbD_}
          else
           switch$0 = 1}
        else
         switch$0 = 1;
        if(switch$0)
         {var switch$1=0;
          if(clock_shift_after)
           {var
             match$2=clock_shift_after[1],
             amount$0=match$2[2],
             start$0=match$2[1];
            if
             (caml_call2
               (_bas_,
                caml_call2(_baz_,start$0,caml_call1(_bao_[99],amount$0)),
                time))
             {if(caml_call2(_bao_[18],amount$0,_bao_[75]))
               var _bbE_=881570188;
              else
               {if(! caml_call2(_bao_[19],amount$0,_bao_[75]))
                 throw [0,Assert_failure,_abO_];
                var
                 _bbE_=
                  [0,
                   1043984139,
                   caml_call2(_bay_,time,caml_call1(_bao_[99],amount$0))]}
              var ambiguity=_bbE_}
            else
             switch$1 = 1}
          else
           switch$1 = 1;
          if(switch$1)var ambiguity=881570188}
        return [0,date,ofday,ambiguity]}
      function convert(from_tz,to_tz,date,ofday)
       {var start_time=of_date_ofday(from_tz,date,ofday);
        return to_date_ofday(start_time,to_tz)}
      function utc_offset$0(t,zone)
       {var
         utc_epoch=caml_call2(Zone[25],zone,t),
         _bbx_=caml_call1(_baD_,t),
         _bby_=caml_call1(_baY_[8],utc_epoch);
        return caml_call2(_bao_[98],_bby_,_bbx_)}
      function offset_string(time,zone)
       {var
         utc_offset=utc_offset$0(time,zone),
         is_utc=caml_call2(_bao_[17],utc_offset,_bao_[75]);
        if(is_utc)return cst_Z;
        var
         _bbt_=caml_call1(_bao_[99],utc_offset),
         _bbu_=caml_call1(_bap_[63],_bbt_),
         _bbv_=[0,caml_call1(_bap_[73],_bbu_),0],
         _bbw_=caml_call2(_bao_[19],utc_offset,_bao_[75])?cst$150:cst$151;
        return caml_call2(_Bq_,0,[0,_bbw_,_bbv_])}
      function to_string_abs_parts(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         offset_string$0=offset_string(time,zone),
         _bbs_=
          [0,
           caml_call2
            (_Bq_,_abP_,[0,caml_call1(_bap_[56],ofday),[0,offset_string$0,0]]),
           0];
        return [0,to_string$22(date),_bbs_]}
      function to_string_abs_trimmed(time,zone)
       {var
         match=to_date_ofday(time,zone),
         ofday=match[2],
         date=match[1],
         offset_string$0=offset_string(time,zone),
         _bbr_=
          [0,caml_call2(_Fp_,caml_call1(_bap_[73],ofday),offset_string$0),0];
        return caml_call2(_Bq_,_abQ_,[0,to_string$22(date),_bbr_])}
      function to_string_abs(time,zone)
       {return caml_call2(_Bq_,_abR_,to_string_abs_parts(time,zone))}
      function to_string(t){return to_string_abs(t,Zone[7])}
      function to_string_iso8601_basic(time,zone)
       {return caml_call2(_Bq_,_abS_,to_string_abs_parts(time,zone))}
      function to_string_trimmed(t,zone)
       {var
         match=to_date_ofday(t,zone),
         sec=match[2],
         date=match[1],
         _bbq_=caml_call2(_Fp_,cst$152,caml_call1(_bap_[73],sec));
        return caml_call2(_Fp_,to_string$22(date),_bbq_)}
      function to_sec_string(t,zone)
       {var
         match=to_date_ofday(t,zone),
         sec=match[2],
         date=match[1],
         _bbp_=caml_call2(_Fp_,cst$153,caml_call1(_bap_[74],sec));
        return caml_call2(_Fp_,to_string$22(date),_bbp_)}
      function to_sec_string_with_zone(t,zone)
       {var _bbo_=offset_string(t,zone);
        return caml_call2(_Fp_,to_sec_string(t,zone),_bbo_)}
      function to_filename_string(t,zone)
       {var
         match=to_date_ofday(t,zone),
         ofday=match[2],
         date=match[1],
         _bbn_=
          caml_call2
           (_Fp_,cst$154,caml_call3(_B9_,58,45,caml_call1(_bap_[56],ofday)));
        return caml_call2(_Fp_,to_string$22(date),_bbn_)}
      function of_filename_string(s,zone)
       {try
         {var match=caml_call2(_BT_,s,95);
          if(match)
           var
            match$0=match[1],
            ofday=match$0[2],
            date=match$0[1],
            date$0=of_string$19(date),
            ofday$0=caml_call3(_B9_,45,58,ofday),
            ofday$1=caml_call1(_bap_[55],ofday$0),
            _bbm_=of_date_ofday(zone,date$0,ofday$1);
          else
           var _bbm_=caml_call1(_Fb_,cst_no_space_in_filename_strin);
          return _bbm_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call4(_Po_,_abT_,s,caml_call1(Base_Exn[10],exn),0)}}
      function of_localized_string(zone,str)
       {try
         {var match=caml_call2(_BT_,str,32);
          if(match)
           var
            match$0=match[1],
            time=match$0[2],
            date=match$0[1],
            date$0=of_string$19(date),
            ofday=caml_call1(_bap_[55],time),
            _bbl_=of_date_ofday(zone,date$0,ofday);
          else
           var _bbl_=caml_call1(_Fa_,caml_call2(_fx_,_abU_,str));
          return _bbl_}
        catch(e)
         {e = caml_wrap_exception(e);
          return caml_call2(Base_Exn[8],e,cst_Time_of_localized_string)}}
      function occurrence(before_or_after,t,ofday,zone)
       {var
         first_guess_date=to_date(t,zone),
         first_guess=of_date_ofday(zone,first_guess_date,ofday);
        if(476625469 <= before_or_after)
         var increment=1,cmp=_baF_;
        else
         var increment=-1,cmp=_baG_;
        return caml_call2(cmp,first_guess,t)
                ?first_guess
                :of_date_ofday
                  (zone,add_days$0(first_guess_date,increment),ofday)}
      function ensure_colon_in_offset(offset)
       {var offset_length=caml_ml_string_length(offset);
        if
         (offset_length
          <=
          2
          &&
          caml_call1(_Ep_,caml_string_get(offset,0))
          &&
          caml_call1(_Ep_,caml_string_get(offset,offset_length - 1 | 0)))
         return caml_call2(_Fp_,offset,cst_00);
        if
         (!
          caml_call2(_EL_,caml_string_get(offset,1),58)
          &&
          !
          caml_call2(_EL_,caml_string_get(offset,2),58))
         {if(! (offset_length < 3) && ! (4 < offset_length))
           {var
             _bbk_=
              [0,
               cst$155,
               [0,slice$2(offset,offset_length - 2 | 0,offset_length),0]];
            return caml_call2
                    (_Bq_,0,[0,slice$2(offset,0,offset_length - 2 | 0),_bbk_])}
          return caml_call3(failwithf$0,_abV_,offset,0)}
        return offset}
      var
       Time_of_string=
        [248,cst_Core_Time_Make_Time0_Time_,caml_fresh_oo_id(0)];
      function _ba2_(param)
       {if(param[1] === Time_of_string)
         {var
           arg1_002=param[3],
           arg0_001=param[2],
           res0_003=caml_call1(sexp_of_t$41,arg0_001),
           res1_004=caml_call1(Base_Exn[1],arg1_002);
          return [1,[0,_abW_,[0,res0_003,[0,res1_004,0]]]]}
        throw [0,Assert_failure,_abX_]}
      caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Time_of_string,_ba2_);
      function of_string_gen(default_zone,find_zone,s)
       {try
         {var match=caml_call2(_BV_,s,32),switch$0=0;
          if(match)
           {var _ba__=match[2],_ba$_=match[1];
            if(_ba__)
             {var _bba_=_ba__[2],_bbb_=_ba__[1];
              if(_bba_)
               {var _bbc_=_bba_[2],_bbd_=_bba_[1];
                if(_bbc_)
                 if(_bbc_[2])
                  switch$0 = 1;
                 else
                  var
                   ofday$2=_bbc_[1],
                   tz=0,
                   ofday=ofday$2,
                   date=
                    caml_call2
                     (_Bq_,
                      0,
                      [0,_ba$_,[0,cst$157,[0,_bbb_,[0,cst$156,[0,_bbd_,0]]]]]);
                else
                 var tz=[0,_bbd_],ofday=_bbb_,date=_ba$_}
              else
               var tz=0,ofday=_bbb_,date=_ba$_}
            else
             {var match$4=caml_call2(_BU_,_ba$_,84);
              if(match$4)
               var
                match$5=match$4[1],
                ofday$3=match$5[2],
                date$1=match$5[1],
                tz=0,
                ofday=ofday$3,
                date=date$1;
              else
               var
                _bbi_=caml_call1(_Fb_,cst_no_spaces_or_T_found),
                tz=_bbi_[3],
                ofday=_bbi_[2],
                date=_bbi_[1]}}
          else
           switch$0 = 1;
          if(switch$0)
           var
            _bbe_=caml_call1(_Fb_,cst_too_many_spaces),
            tz=_bbe_[3],
            ofday=_bbe_[2],
            date=_bbe_[1];
          var
           ofday_to_sec=
            function(od)
             {var _bbj_=caml_call1(_bap_[62],od);
              return caml_call1(_bao_[91],_bbj_)};
          if(tz)
           var utc_offset$0=0,ofday$0=ofday;
          else
           if
            (caml_call2
              (_EL_,
               caml_string_get(ofday,caml_ml_string_length(ofday) - 1 | 0),
               90))
            var
             utc_offset$0=utc_offset,
             ofday$0=
              caml_call3(_AY_,ofday,0,caml_ml_string_length(ofday) - 1 | 0);
           else
            {var match$0=caml_call2(_BT_,ofday,43);
             if(match$0)
              var
               match$1=match$0[1],
               r=match$1[2],
               l=match$1[1],
               _bbg_=ensure_colon_in_offset(r),
               utc_offset$0=[0,ofday_to_sec(caml_call1(_bap_[55],_bbg_))],
               ofday$0=l;
             else
              {var match$2=caml_call2(_BT_,ofday,45);
               if(match$2)
                var
                 match$3=match$2[1],
                 r$0=match$3[2],
                 l$0=match$3[1],
                 _bbh_=ensure_colon_in_offset(r$0),
                 utc_offset$0=
                  [0,-1. * ofday_to_sec(caml_call1(_bap_[55],_bbh_))],
                 ofday$0=l$0;
               else
                var utc_offset$0=0,ofday$0=ofday}}
          var date$0=of_string$19(date),ofday$1=caml_call1(_bap_[55],ofday$0);
          if(tz)
           var
            tz$0=tz[1],
            _bbf_=of_date_ofday(caml_call1(find_zone,tz$0),date$0,ofday$1);
          else
           if(utc_offset$0)
            var
             utc_offset$1=utc_offset$0[1],
             utc_t=of_date_ofday(Zone[7],date$0,ofday$1),
             _bbf_=caml_call2(_baz_,utc_t,caml_call1(_bao_[81],utc_offset$1));
           else
            var
             zone=caml_call1(default_zone,0),
             _bbf_=of_date_ofday(zone,date$0,ofday$1);
          return _bbf_}
        catch(e){e = caml_wrap_exception(e);throw [0,Time_of_string,s,e]}}
      function of_string(s)
       {function default_zone(param)
         {var _ba9_=[0,caml_call1(Sexplib0_Sexp_conv[7],s),0];
          return caml_call1
                  (_nX_,
                   [1,
                    [0,
                     caml_call1
                      (Sexplib0_Sexp_conv[7],cst_time_has_no_time_zone_or_U),
                     _ba9_]])}
        function find_zone(zone_name)
         {return caml_call3(failwithf$0,_abY_,zone_name,0)}
        return of_string_gen(default_zone,find_zone,s)}
      var
       quickcheck_shrinker=caml_call3(_pB_[6],_bao_[62],_baE_,_baD_),
       quickcheck_observer=caml_call2(_pC_[18],_bao_[61],_baD_),
       quickcheck_generator=caml_call2(_pD_[10],_bao_[60],_baE_);
      function gen_incl(lo,hi)
       {var
         _ba6_=caml_call1(_baD_,hi),
         _ba7_=caml_call1(_baD_,lo),
         _ba8_=caml_call2(_bao_[63],_ba7_,_ba6_);
        return caml_call2(_pD_[10],_ba8_,_baE_)}
      function gen_uniform_incl(lo,hi)
       {var
         _ba3_=caml_call1(_baD_,hi),
         _ba4_=caml_call1(_baD_,lo),
         _ba5_=caml_call2(_bao_[64],_ba4_,_ba3_);
        return caml_call2(_pD_[10],_ba5_,_baE_)}
      return [0,
              _bac_,
              _bad_,
              _bae_,
              _baf_,
              _bag_,
              _bah_,
              _bai_,
              _baj_,
              _bak_,
              _bal_,
              _bam_,
              _ban_,
              _bao_,
              _bap_,
              _baq_,
              _bar_,
              _bas_,
              _bat_,
              _bau_,
              _bav_,
              _baw_,
              _bax_,
              _baB_,
              _baC_,
              _baD_,
              _baE_,
              _baF_,
              _baG_,
              _baH_,
              _baI_,
              _baJ_,
              _baK_,
              _baL_,
              _baM_,
              _baN_,
              _baO_,
              _baP_,
              _baQ_,
              _baR_,
              _baS_,
              _baT_,
              _baU_,
              _baV_,
              _baW_,
              _baX_,
              _baY_,
              _baZ_,
              _ba0_,
              _ba1_,
              Zone,
              _bay_,
              _baz_,
              _baA_,
              abs_diff,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker,
              gen_incl,
              gen_uniform_incl,
              is_earlier,
              is_later,
              of_date_ofday,
              of_date_ofday_precise,
              to_date_ofday,
              to_date_ofday_precise,
              to_date,
              to_ofday,
              reset_date_cache,
              epoch,
              convert,
              utc_offset$0,
              to_filename_string,
              of_filename_string,
              to_string_abs,
              to_string_abs_trimmed,
              to_string_abs_parts,
              to_string_trimmed,
              to_sec_string,
              to_sec_string_with_zone,
              of_localized_string,
              of_string_gen,
              to_string_iso8601_basic,
              occurrence,
              of_string,
              of_string,
              to_string,
              to_string]}
    var Core_Time=[0,_abZ_];
    caml_register_global(5399,Core_Time,"Core__Time");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Time_float0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$374);
    caml_call1(Expect_test_collector[5][1],cst_core_src_time_float0_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$375,cst$158);
    var
     include$126=caml_call1(Robust_compare[1],[0,1e-06]),
     symbol$187=include$126[2],
     symbol$188=include$126[3],
     symbol$189=include$126[4],
     symbol$190=include$126[5],
     symbol$191=include$126[6],
     symbol$192=include$126[7],
     robustly_compare$1=include$126[8];
    function diff$7(t1,t2)
     {return to_span_since_epoch$0(caml_call2(symbol$40,t1,t2))}
    function add$13(t,span){return t + span}
    function sub$4(t,span){return t - span}
    function prev$4(t){return caml_call2(_HR_,759637122,t)}
    function next$3(t){return caml_call2(_HR_,19067,t)}
    function of_synthetic_span_since_epoch$0(span){return span}
    function to_synthetic_span_since_epoch$0(t)
     {return to_span_since_epoch$0(t)}
    function of_date_ofday(date,ofday)
     {var
       _baa_=Days[5],
       _bab_=caml_call1(Days[1],date),
       days=caml_call1(_HS_,caml_call2(Days[3],_bab_,_baa_));
      return days * 86400. + to_span_since_start_of_day(ofday)}
    function to_absolute(relative,offset_from_utc)
     {return relative - offset_from_utc}
    function of_absolute(absolute,offset_from_utc)
     {return absolute + offset_from_utc}
    var sec_per_day=caml_call1(of_int$2,86400);
    function to_days_from_epoch(t)
     {var
       _a$9_=caml_call2(symbol$33,t,253402300800.),
       gmtime_lower_bound=-62167219200.,
       _a$__=_a$9_ || caml_call2(symbol$37,t,gmtime_lower_bound);
      if(_a$__)caml_call3(failwithf$0,_ab0_,t,0);
      var
       _a$$_=caml_call1(of_float$4,t),
       days_from_epoch_approx=caml_call2(Base_Int63[94][4],_a$$_,sec_per_day);
      return caml_call2
               (symbol$37,
                t,
                caml_call1
                 (to_float$3,
                  caml_call2
                   (Base_Int63[94][3],days_from_epoch_approx,sec_per_day)))
              ?caml_call1(pred$1,days_from_epoch_approx)
              :days_from_epoch_approx}
    function ofday_of_days_from_epoch(t,days_from_epoch)
     {var
       days_from_epoch_in_sec=
        caml_call1
         (to_float$3,
          caml_call2(Base_Int63[94][3],days_from_epoch,sec_per_day)),
       remainder=t - days_from_epoch_in_sec;
      return of_span_since_start_of_day(to_span_since_epoch$0(remainder))}
    function date_of_days_from_epoch(days_from_epoch)
     {var
       _a$7_=caml_call1(to_int_exn$2,days_from_epoch),
       _a$8_=caml_call2(Days[4],Days[5],_a$7_);
      return caml_call1(Days[2],_a$8_)}
    function to_date$0(t)
     {var days_from_epoch=to_days_from_epoch(t);
      return date_of_days_from_epoch(days_from_epoch)}
    function to_ofday(t)
     {var days_from_epoch=to_days_from_epoch(t);
      return ofday_of_days_from_epoch(t,days_from_epoch)}
    function to_date_ofday(t)
     {var
       days_from_epoch=to_days_from_epoch(t),
       date=date_of_days_from_epoch(days_from_epoch),
       ofday=ofday_of_days_from_epoch(t,days_from_epoch);
      return [0,date,ofday]}
    function next_multiple_internal(can_equal_after,base,after,interval)
     {if(caml_call2(symbol$34,interval,zero))
       failwiths(0,_ab1_,cst_Time_next_multiple_got_non,interval,sexp_of_t$85);
      var base_to_after=diff$7(after,base);
      if(caml_call2(symbol$37,base_to_after,zero))return base;
      var
       next=
        base
        +
        caml_call2
         (scale,interval,caml_call2(_HX_,_ab2_,base_to_after / interval));
      if(! caml_call2(symbol$36,next,after))
       {var switch$0=0;
        if(! can_equal_after || ! caml_call2(symbol$35,next,after))
         switch$0 = 1;
        if(switch$0)return next + interval}
      return next}
    function next_multiple(opt,base,after,interval,param)
     {if(opt)var sth=opt[1],can_equal_after=sth;else var can_equal_after=0;
      return next_multiple_internal(can_equal_after,base,after,interval)}
    function prev_multiple(opt,base,before,interval,param)
     {if(opt)var sth=opt[1],can_equal_before=sth;else var can_equal_before=0;
      return next_multiple_internal
              (1 - can_equal_before,base,before - interval,interval)}
    function now(param)
     {var float_ns=caml_call1(to_float$3,caml_call1(Time_now[1],0));
      return to_span_since_epoch$0(float_ns * 1e-09)}
    var Stable$8=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$376);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Time_float0$0);
    var
     Date_and_ofday$0=
      [0,
       of_date_ofday,
       to_date_ofday,
       to_date$0,
       to_ofday,
       of_absolute,
       to_absolute,
       of_synthetic_span_since_epoch$0,
       to_synthetic_span_since_epoch$0],
     Ofday=
      [0,
       bin_size_t$4,
       bin_write_t$4,
       bin_read_t$9,
       bin_read_t$10,
       bin_shape_t$53,
       bin_writer_t$46,
       bin_reader_t$46,
       bin_t$46,
       t_of_sexp$75,
       sexp_of_t$86,
       t_sexp_grammar$28,
       typerep_of_t$8,
       typename_of_t$8,
       symbol$33,
       symbol$34,
       symbol$35,
       symbol$36,
       symbol$37,
       symbol$38,
       equal$23,
       compare$40,
       min$5,
       max$5,
       ascending$4,
       descending$4,
       between$4,
       clamp_exn$4,
       clamp$4,
       _abH_,
       _abI_,
       _abJ_,
       comparator$7,
       _aby_,
       _abz_,
       _abA_,
       _abt_,
       _abh_,
       _abi_,
       _abj_,
       _abk_,
       _abl_,
       _abm_,
       _abn_,
       quickcheck_generator$20,
       quickcheck_observer$18,
       quickcheck_shrinker$18,
       gen_incl$1,
       gen_uniform_incl$1,
       of_string$22,
       to_string$26,
       create$24,
       to_parts$0,
       start_of_day,
       start_of_next_day,
       approximate_end_of_day,
       to_span_since_start_of_day,
       of_span_since_start_of_day,
       of_span_since_start_of_day,
       span_since_start_of_day_is_val,
       of_span_since_start_of_day_unc,
       add$12,
       sub$3,
       next$2,
       prev$3,
       diff$6,
       small_diff,
       to_string_trimmed,
       to_sec_string,
       of_string_iso8601_extended,
       to_millisec_string,
       to_millisec_string],
     Span$0=
      [0,
       bin_size_t$4,
       bin_write_t$4,
       bin_read_t$9,
       bin_read_t$10,
       bin_shape_t$53,
       bin_writer_t$46,
       bin_reader_t$46,
       bin_t$46,
       t_of_sexp$72,
       sexp_of_t$85,
       t_sexp_grammar$27,
       typerep_of_t$8,
       typename_of_t$8,
       symbol$33,
       symbol$34,
       symbol$35,
       symbol$36,
       symbol$37,
       symbol$38,
       equal$23,
       compare$40,
       min$5,
       max$5,
       ascending$4,
       descending$4,
       between$4,
       clamp_exn$4,
       clamp$4,
       comparator$7,
       is_positive$6,
       is_non_negative$6,
       is_negative$6,
       is_non_positive$6,
       sign$6,
       validate_lbound$17,
       validate_ubound$17,
       validate_bound$17,
       validate_positive$6,
       validate_non_negative$6,
       validate_negative$6,
       validate_non_positive$6,
       _aa__,
       _aa$_,
       _aba_,
       _aa6_,
       _aaJ_,
       _aaK_,
       _aaL_,
       _aaM_,
       _aaN_,
       _aaO_,
       _aaP_,
       quickcheck_generator$19,
       quickcheck_observer$8,
       quickcheck_shrinker$8,
       gen_incl$0,
       gen_uniform_incl$0,
       to_string$25,
       of_string$21,
       nanosecond,
       microsecond,
       millisecond,
       second$0,
       minute,
       hour,
       day$0,
       _aaI_,
       zero,
       create$23,
       to_parts,
       of_ns,
       of_us,
       of_ms,
       to_span_since_epoch$0,
       of_int_sec,
       of_int32_seconds,
       of_int63_seconds$0,
       of_min,
       of_hr,
       of_day,
       to_ns,
       to_us,
       to_ms,
       of_span_since_epoch$0,
       to_min,
       to_hr,
       to_day,
       to_int63_seconds_round_down_ex$0,
       to_float,
       symbol$39,
       symbol$40,
       abs,
       neg,
       scale,
       symbol$183,
       symbol$184,
       next$1,
       prev$2,
       to_short_string,
       to_unit_of_time,
       of_unit_of_time,
       to_string_hum$9,
       randomize$0],
     include$127=
      [0,
       Span$0,
       Ofday,
       bin_size_t$4,
       bin_write_t$4,
       bin_read_t$9,
       bin_read_t$10,
       bin_shape_t$53,
       bin_writer_t$46,
       bin_reader_t$46,
       bin_t$46,
       hash_fold_t$18,
       hash$15,
       typerep_of_t$8,
       typename_of_t$8,
       Replace_polymorphic_compare$2,
       symbol$187,
       symbol$188,
       symbol$189,
       symbol$190,
       symbol$191,
       symbol$192,
       robustly_compare$1,
       add$13,
       sub$4,
       diff$7,
       next$3,
       prev$4,
       to_span_since_epoch$0,
       of_span_since_epoch$0,
       symbol$33,
       symbol$34,
       symbol$35,
       symbol$36,
       symbol$37,
       symbol$38,
       equal$23,
       compare$40,
       min$5,
       max$5,
       ascending$4,
       descending$4,
       between$4,
       clamp_exn$4,
       clamp$4,
       comparator$7,
       validate_lbound$3,
       validate_ubound$3,
       validate_bound$3,
       Date_and_ofday$0,
       next_multiple,
       prev_multiple,
       now,
       Stable$8];
    caml_register_global(5401,include$127,"Core__Time_float0");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Time_float);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$377);
    caml_call1(Expect_test_collector[5][1],cst_core_src_time_float_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$378,cst$159);
    var
     _ab3_=
      _abZ_
       ([0,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$53,
         bin_writer_t$46,
         bin_reader_t$46,
         bin_t$46,
         hash_fold_t$18,
         hash$15,
         typerep_of_t$8,
         typename_of_t$8,
         [0,
          Span$0[1],
          Span$0[2],
          Span$0[3],
          Span$0[4],
          Span$0[5],
          Span$0[6],
          Span$0[7],
          Span$0[8],
          Span$0[9],
          Span$0[10],
          Span$0[11],
          Span$0[12],
          Span$0[13],
          Parts,
          Span$0[14],
          Span$0[15],
          Span$0[16],
          Span$0[17],
          Span$0[18],
          Span$0[19],
          Span$0[20],
          Span$0[21],
          Span$0[22],
          Span$0[23],
          Span$0[24],
          Span$0[25],
          Span$0[26],
          Span$0[27],
          Span$0[28],
          Replace_polymorphic_compare$2,
          Span$0[29],
          Map$22,
          Set$22,
          Span$0[30],
          Span$0[31],
          Span$0[32],
          Span$0[33],
          Span$0[34],
          Span$0[35],
          Span$0[36],
          Span$0[37],
          Span$0[38],
          Span$0[39],
          Span$0[40],
          Span$0[41],
          Span$0[42],
          Span$0[43],
          Span$0[44],
          _abb_,
          _abc_,
          _abd_,
          Span$0[45],
          Span$0[46],
          Span$0[47],
          Span$0[48],
          Span$0[49],
          Span$0[50],
          Span$0[51],
          Span$0[52],
          Span$0[53],
          Span$0[54],
          Span$0[55],
          Span$0[56],
          Span$0[57],
          Span$0[58],
          Span$0[59],
          Span$0[60],
          Span$0[61],
          Span$0[62],
          Span$0[63],
          Span$0[64],
          Span$0[65],
          Span$0[66],
          Span$0[67],
          Span$0[68],
          Span$0[69],
          Span$0[70],
          Span$0[71],
          Span$0[72],
          Span$0[73],
          Span$0[74],
          Span$0[75],
          Span$0[76],
          Span$0[77],
          Span$0[78],
          Span$0[79],
          Span$0[80],
          Span$0[81],
          Span$0[82],
          Span$0[83],
          Span$0[84],
          Span$0[85],
          Span$0[86],
          Span$0[87],
          Span$0[88],
          Span$0[89],
          Span$0[90],
          Span$0[91],
          Span$0[92],
          Span$0[93],
          Span$0[94],
          Span$0[95],
          Span$0[96],
          Span$0[97],
          Span$0[98],
          Span$0[99],
          Span$0[100],
          Span$0[101],
          Span$0[102],
          Span$0[103]],
         [0,
          Ofday[1],
          Ofday[2],
          Ofday[3],
          Ofday[4],
          Ofday[5],
          Ofday[6],
          Ofday[7],
          Ofday[8],
          Ofday[9],
          Ofday[10],
          Ofday[11],
          Ofday[12],
          Ofday[13],
          Ofday[14],
          Ofday[15],
          Ofday[16],
          Ofday[17],
          Ofday[18],
          Ofday[19],
          Ofday[20],
          Ofday[21],
          Ofday[22],
          Ofday[23],
          Ofday[24],
          Ofday[25],
          Ofday[26],
          Ofday[27],
          Ofday[28],
          Ofday[29],
          Ofday[30],
          Ofday[31],
          Replace_polymorphic_compare$2,
          Ofday[32],
          Map$23,
          Set$23,
          Ofday[33],
          Ofday[34],
          Ofday[35],
          _abB_,
          _abC_,
          _abD_,
          Ofday[36],
          Ofday[37],
          Ofday[38],
          Ofday[39],
          Ofday[40],
          Ofday[41],
          Ofday[42],
          Ofday[43],
          Ofday[44],
          Ofday[45],
          Ofday[46],
          Ofday[47],
          Ofday[48],
          Ofday[49],
          Ofday[50],
          Ofday[51],
          Ofday[52],
          Ofday[53],
          Ofday[54],
          Ofday[55],
          Ofday[56],
          Ofday[57],
          Ofday[58],
          Ofday[59],
          Ofday[60],
          Ofday[61],
          Ofday[62],
          Ofday[63],
          Ofday[64],
          Ofday[65],
          Ofday[66],
          Ofday[67],
          Ofday[68],
          Ofday[69],
          Ofday[70],
          Ofday[71]],
         Replace_polymorphic_compare$2,
         symbol$187,
         symbol$188,
         symbol$189,
         symbol$190,
         symbol$191,
         symbol$192,
         robustly_compare$1,
         add$13,
         sub$4,
         diff$7,
         next$3,
         prev$4,
         to_span_since_epoch$0,
         of_span_since_epoch$0,
         symbol$33,
         symbol$34,
         symbol$35,
         symbol$36,
         symbol$37,
         symbol$38,
         equal$23,
         compare$40,
         min$5,
         max$5,
         ascending$4,
         descending$4,
         between$4,
         clamp_exn$4,
         clamp$4,
         comparator$7,
         validate_lbound$3,
         validate_ubound$3,
         validate_bound$3,
         Date_and_ofday$0,
         next_multiple,
         prev_multiple,
         now]),
     Zone=_ab3_[50],
     abs_diff=_ab3_[54],
     quickcheck_generator$21=_ab3_[55],
     quickcheck_observer$19=_ab3_[56],
     quickcheck_shrinker$19=_ab3_[57],
     gen_incl$2=_ab3_[58],
     gen_uniform_incl$2=_ab3_[59],
     is_earlier=_ab3_[60],
     is_later=_ab3_[61],
     of_date_ofday$0=_ab3_[62],
     of_date_ofday_precise=_ab3_[63],
     to_date_ofday$0=_ab3_[64],
     to_date_ofday_precise=_ab3_[65],
     to_date$1=_ab3_[66],
     to_ofday$0=_ab3_[67],
     reset_date_cache=_ab3_[68],
     epoch=_ab3_[69],
     convert=_ab3_[70],
     utc_offset$0=_ab3_[71],
     to_filename_string=_ab3_[72],
     of_filename_string=_ab3_[73],
     to_string_abs=_ab3_[74],
     to_string_abs_trimmed=_ab3_[75],
     to_string_abs_parts=_ab3_[76],
     to_string_trimmed$0=_ab3_[77],
     to_sec_string$0=_ab3_[78],
     to_sec_string_with_zone=_ab3_[79],
     of_localized_string=_ab3_[80],
     of_string_gen=_ab3_[81],
     to_string_iso8601_basic$0=_ab3_[82],
     occurrence=_ab3_[83],
     of_string$23=_ab3_[84],
     of_string_with_utc_offset=_ab3_[85],
     to_string$27=_ab3_[86],
     to_string_utc=_ab3_[87],
     V1$13=[0],
     With_t_of_sexp_abs=[0],
     Zoned=[0],
     V1$14=[0],
     _ab4_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$189),0,bin_shape_t$53],0],
     _ab5_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_time_float_ml_25_),
     group$109=caml_call2(Bin_prot_Shape[6],_ab5_,_ab4_),
     _ab6_=caml_call1(Bin_prot_Shape[2][1],cst_t$190),
     bin_shape_t$100=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$109,_ab6_),0),
     bin_writer_t$88=[0,bin_size_t$4,bin_write_t$4],
     bin_reader_t$88=[0,bin_read_t$9,bin_read_t$10],
     bin_t$88=[0,bin_shape_t$100,bin_writer_t$88,bin_reader_t$88];
    function hash$46(x){return caml_call1(hash$15,x)}
    function sexp_of_t$87(t)
     {var x_003=caml_call2(to_string_abs_parts,t,Zone[7]);
      return caml_call2(sexp_of_list,sexp_of_t$41,x_003)}
    function t_of_sexp$78(sexp)
     {try
       {var switch$0=0;
        if(1 === sexp[0])
         {var _a$0_=sexp[1];
          if(_a$0_)
           {var _a$1_=_a$0_[1];
            if(0 === _a$1_[0])
             {var _a$2_=_a$0_[2];
              if(_a$2_)
               {var _a$3_=_a$2_[1],_a$4_=_a$1_[1];
                if(0 === _a$3_[0] && ! _a$2_[2])
                 {var
                   ofday_and_possibly_zone=_a$3_[1],
                   _a$5_=
                    caml_call2
                     (_Fp_,
                      _a$4_,
                      caml_call2(_Fp_,cst$160,ofday_and_possibly_zone)),
                   _a$6_=
                    function(param)
                     {return caml_call2
                              (_Oo_,cst_Time_Stable_With_utc_V2_t_$0,sexp)},
                   _a$Z_=
                    caml_call3
                     (of_string_gen,function(param){return Zone[7]},_a$6_,_a$5_);
                  switch$0 = 1}}}}}
        if(! switch$0)
         var _a$Z_=caml_call2(_Oo_,cst_Time_Stable_With_utc_V2_t_,sexp);
        return _a$Z_}
      catch(e)
       {e = caml_wrap_exception(e);
        if(e[1] === _On_)throw e;
        return caml_call2
                (_Oo_,caml_call2(_fx_,_ab7_,caml_call1(Base_Exn[10],e)),sexp)}}
    var
     t_sexp_grammar$29=caml_call1(Sexplib_Sexp_grammar[1],include$19[62]),
     Map$24=[0],
     Set$24=[0],
     V1$15=[0],
     Full_data=include$90[1],
     Zone$0=[0,V1$15,Full_data],
     bin_size_t$69=Ofday[1],
     bin_write_t$70=Ofday[2],
     bin_read_t$138=Ofday[3],
     bin_read_t$139=Ofday[4],
     bin_shape_t$101=Ofday[5],
     bin_writer_t$89=Ofday[6],
     bin_reader_t$89=Ofday[7],
     bin_t$89=Ofday[8],
     t_of_sexp$79=Ofday[9],
     sexp_of_t$88=Ofday[10],
     t_sexp_grammar$30=Ofday[11],
     typerep_of_t$27=Ofday[12],
     typename_of_t$27=Ofday[13],
     symbol$193=Ofday[14],
     symbol$194=Ofday[15],
     symbol$195=Ofday[16],
     symbol$196=Ofday[17],
     symbol$197=Ofday[18],
     symbol$198=Ofday[19],
     equal$38=Ofday[20],
     compare$75=Ofday[21],
     min$19=Ofday[22],
     max$19=Ofday[23],
     ascending$18=Ofday[24],
     descending$18=Ofday[25],
     between$18=Ofday[26],
     clamp_exn$18=Ofday[27],
     clamp$18=Ofday[28],
     validate_lbound$18=Ofday[29],
     validate_ubound$18=Ofday[30],
     validate_bound$18=Ofday[31],
     comparator$26=Ofday[32],
     hash_fold_t$38=Ofday[33],
     hash$47=Ofday[34],
     hashable$18=Ofday[35],
     pp$9=Ofday[36],
     symbol$199=Ofday[37],
     symbol$200=Ofday[38],
     symbol$201=Ofday[39],
     symbol$202=Ofday[40],
     symbol$203=Ofday[41],
     symbol$204=Ofday[42],
     robustly_compare$2=Ofday[43],
     quickcheck_generator$22=Ofday[44],
     quickcheck_observer$20=Ofday[45],
     quickcheck_shrinker$20=Ofday[46],
     gen_incl$3=Ofday[47],
     gen_uniform_incl$3=Ofday[48],
     of_string$24=Ofday[49],
     to_string$28=Ofday[50],
     create$25=Ofday[51],
     to_parts$1=Ofday[52],
     start_of_day$0=Ofday[53],
     start_of_next_day$0=Ofday[54],
     approximate_end_of_day$0=Ofday[55],
     to_span_since_start_of_day$0=Ofday[56],
     of_span_since_start_of_day_exn=Ofday[57],
     of_span_since_start_of_day$0=Ofday[58],
     span_since_start_of_day_is_val$0=Ofday[59],
     of_span_since_start_of_day_unc$0=Ofday[60],
     add$14=Ofday[61],
     sub$5=Ofday[62],
     next$4=Ofday[63],
     prev$5=Ofday[64],
     diff$8=Ofday[65],
     small_diff$0=Ofday[66],
     to_string_trimmed$1=Ofday[67],
     to_sec_string$1=Ofday[68],
     of_string_iso8601_extended$0=Ofday[69],
     to_millisecond_string=Ofday[70],
     to_millisec_string$0=Ofday[71],
     Zoned$0=[0],
     bin_size_t$70=Span$0[1],
     bin_write_t$71=Span$0[2],
     bin_read_t$140=Span$0[3],
     bin_read_t$141=Span$0[4],
     bin_shape_t$102=Span$0[5],
     bin_writer_t$90=Span$0[6],
     bin_reader_t$90=Span$0[7],
     bin_t$90=Span$0[8],
     t_of_sexp$80=Span$0[9],
     sexp_of_t$89=Span$0[10],
     t_sexp_grammar$31=Span$0[11],
     typerep_of_t$28=Span$0[12],
     typename_of_t$28=Span$0[13],
     symbol$205=Span$0[14],
     symbol$206=Span$0[15],
     symbol$207=Span$0[16],
     symbol$208=Span$0[17],
     symbol$209=Span$0[18],
     symbol$210=Span$0[19],
     equal$39=Span$0[20],
     compare$76=Span$0[21],
     min$20=Span$0[22],
     max$20=Span$0[23],
     ascending$19=Span$0[24],
     descending$19=Span$0[25],
     between$19=Span$0[26],
     clamp_exn$19=Span$0[27],
     clamp$19=Span$0[28],
     comparator$27=Span$0[29],
     is_positive$7=Span$0[30],
     is_non_negative$7=Span$0[31],
     is_negative$7=Span$0[32],
     is_non_positive$7=Span$0[33],
     sign$7=Span$0[34],
     validate_lbound$19=Span$0[35],
     validate_ubound$19=Span$0[36],
     validate_bound$19=Span$0[37],
     validate_positive$7=Span$0[38],
     validate_non_negative$7=Span$0[39],
     validate_negative$7=Span$0[40],
     validate_non_positive$7=Span$0[41],
     hash_fold_t$39=Span$0[42],
     hash$48=Span$0[43],
     hashable$19=Span$0[44],
     pp$10=Span$0[45],
     symbol$211=Span$0[46],
     symbol$212=Span$0[47],
     symbol$213=Span$0[48],
     symbol$214=Span$0[49],
     symbol$215=Span$0[50],
     symbol$216=Span$0[51],
     robustly_compare$3=Span$0[52],
     quickcheck_generator$23=Span$0[53],
     quickcheck_observer$21=Span$0[54],
     quickcheck_shrinker$21=Span$0[55],
     gen_incl$4=Span$0[56],
     gen_uniform_incl$4=Span$0[57],
     to_string$29=Span$0[58],
     of_string$25=Span$0[59],
     nanosecond$0=Span$0[60],
     microsecond$0=Span$0[61],
     millisecond$0=Span$0[62],
     second$1=Span$0[63],
     minute$0=Span$0[64],
     hour$1=Span$0[65],
     day$1=Span$0[66],
     robust_comparison_tolerance=Span$0[67],
     zero$6=Span$0[68],
     create$26=Span$0[69],
     to_parts$2=Span$0[70],
     of_ns$0=Span$0[71],
     of_us$0=Span$0[72],
     of_ms$0=Span$0[73],
     of_sec=Span$0[74],
     of_int_sec$0=Span$0[75],
     of_int32_seconds$0=Span$0[76],
     of_int63_seconds$1=Span$0[77],
     of_min$0=Span$0[78],
     of_hr$0=Span$0[79],
     of_day$0=Span$0[80],
     to_ns$0=Span$0[81],
     to_us$0=Span$0[82],
     to_ms$0=Span$0[83],
     to_sec=Span$0[84],
     to_min$0=Span$0[85],
     to_hr$0=Span$0[86],
     to_day$0=Span$0[87],
     to_int63_seconds_round_down_ex$1=Span$0[88],
     to_proportional_float=Span$0[89],
     symbol$217=Span$0[90],
     symbol$218=Span$0[91],
     abs$6=Span$0[92],
     neg$4=Span$0[93],
     scale$1=Span$0[94],
     symbol$219=Span$0[95],
     symbol$220=Span$0[96],
     next$5=Span$0[97],
     prev$6=Span$0[98],
     to_short_string$0=Span$0[99],
     to_unit_of_time$0=Span$0[100],
     of_unit_of_time$0=Span$0[101],
     to_string_hum$10=Span$0[102],
     randomize$1=Span$0[103],
     sexp_of_t$90=Zone[1],
     compare$77=Zone[2],
     input_tz_file$0=Zone[3],
     likely_machine_zones$0=Zone[4],
     of_utc_offset$0=Zone[5],
     of_utc_offset_explicit_name$0=Zone[6],
     utc$0=Zone[7],
     name$60=Zone[8],
     original_filename$0=Zone[9],
     digest$0=Zone[10],
     reset_transition_cache$0=Zone[11],
     Index$0=Zone[12],
     index$0=Zone[13],
     index_of_date_and_ofday$0=Zone[14],
     index_offset_from_utc_exn$0=Zone[15],
     index_abbreviation_exn$0=Zone[16],
     index_has_prev_clock_shift$0=Zone[17],
     index_prev_clock_shift_time_ex$0=Zone[18],
     index_prev_clock_shift_amount_$0=Zone[19],
     index_has_next_clock_shift$0=Zone[20],
     index_next_clock_shift_time_ex$0=Zone[21],
     index_next_clock_shift_amount_$0=Zone[22],
     abbreviation=Zone[23],
     absolute_time_of_date_and_ofda=Zone[24],
     date_and_ofday_of_absolute_tim=Zone[25],
     next_clock_shift=Zone[26],
     prev_clock_shift=Zone[27],
     Hash_queue$15=[0],
     Hash_set$18=[0],
     Map$25=[0],
     Replace_polymorphic_compare$15=[0],
     Set$25=[0],
     Table$18=[0],
     Zone$1=
      [0,
       sexp_of_t$90,
       compare$77,
       input_tz_file$0,
       likely_machine_zones$0,
       of_utc_offset$0,
       of_utc_offset_explicit_name$0,
       utc$0,
       name$60,
       original_filename$0,
       digest$0,
       reset_transition_cache$0,
       Index$0,
       index$0,
       index_of_date_and_ofday$0,
       index_offset_from_utc_exn$0,
       index_abbreviation_exn$0,
       index_has_prev_clock_shift$0,
       index_prev_clock_shift_time_ex$0,
       index_prev_clock_shift_amount_$0,
       index_has_next_clock_shift$0,
       index_next_clock_shift_time_ex$0,
       index_next_clock_shift_amount_$0,
       abbreviation,
       absolute_time_of_date_and_ofda,
       date_and_ofday_of_absolute_tim,
       next_clock_shift,
       prev_clock_shift,
       Hash_queue$15,
       Hash_set$18,
       Map$25,
       Replace_polymorphic_compare$15,
       Set$25,
       Table$18,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730],
     Exposed_for_tests=[0],
     Hash_queue$16=[0],
     Hash_set$19=[0],
     Map$26=[0],
     Set$26=[0],
     Table$19=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$379);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Time_float$0);
    var
     _ab8_=
      [0,
       [0,Zoned],
       V1$13,
       With_t_of_sexp_abs,
       [0,
        V1$14,
        [0,
         hash_fold_t$18,
         hash$46,
         t_sexp_grammar$29,
         bin_size_t$4,
         bin_write_t$4,
         bin_read_t$9,
         bin_read_t$10,
         bin_shape_t$100,
         bin_writer_t$88,
         bin_reader_t$88,
         bin_t$88,
         compare$40,
         t_of_sexp$78,
         sexp_of_t$87,
         698081730,
         Map$24,
         Set$24]],
       Zone$0],
     _ab9_=
      [0,
       bin_size_t$70,
       bin_write_t$71,
       bin_read_t$140,
       bin_read_t$141,
       bin_shape_t$102,
       bin_writer_t$90,
       bin_reader_t$90,
       bin_t$90,
       t_of_sexp$80,
       sexp_of_t$89,
       t_sexp_grammar$31,
       typerep_of_t$28,
       typename_of_t$28,
       Parts,
       symbol$205,
       symbol$206,
       symbol$207,
       symbol$208,
       symbol$209,
       symbol$210,
       equal$39,
       compare$76,
       min$20,
       max$20,
       ascending$19,
       descending$19,
       between$19,
       clamp_exn$19,
       clamp$19,
       Replace_polymorphic_compare$2,
       comparator$27,
       Map$22,
       Set$22,
       is_positive$7,
       is_non_negative$7,
       is_negative$7,
       is_non_positive$7,
       sign$7,
       validate_lbound$19,
       validate_ubound$19,
       validate_bound$19,
       validate_positive$7,
       validate_non_negative$7,
       validate_negative$7,
       validate_non_positive$7,
       hash_fold_t$39,
       hash$48,
       hashable$19,
       _abb_,
       _abc_,
       _abd_,
       pp$10,
       symbol$211,
       symbol$212,
       symbol$213,
       symbol$214,
       symbol$215,
       symbol$216,
       robustly_compare$3,
       quickcheck_generator$23,
       quickcheck_observer$21,
       quickcheck_shrinker$21,
       gen_incl$4,
       gen_uniform_incl$4,
       to_string$29,
       of_string$25,
       nanosecond$0,
       microsecond$0,
       millisecond$0,
       second$1,
       minute$0,
       hour$1,
       day$1,
       robust_comparison_tolerance,
       zero$6,
       create$26,
       to_parts$2,
       of_ns$0,
       of_us$0,
       of_ms$0,
       of_sec,
       of_int_sec$0,
       of_int32_seconds$0,
       of_int63_seconds$1,
       of_min$0,
       of_hr$0,
       of_day$0,
       to_ns$0,
       to_us$0,
       to_ms$0,
       to_sec,
       to_min$0,
       to_hr$0,
       to_day$0,
       to_int63_seconds_round_down_ex$1,
       to_proportional_float,
       symbol$217,
       symbol$218,
       abs$6,
       neg$4,
       scale$1,
       symbol$219,
       symbol$220,
       next$5,
       prev$6,
       to_short_string$0,
       to_unit_of_time$0,
       of_unit_of_time$0,
       to_string_hum$10,
       randomize$1,
       698081730],
     Core_Time_float=
      [0,
       bin_size_t$4,
       bin_write_t$4,
       bin_read_t$9,
       bin_read_t$10,
       bin_shape_t$53,
       bin_writer_t$46,
       bin_reader_t$46,
       bin_t$46,
       hash_fold_t$18,
       hash$15,
       typerep_of_t$8,
       typename_of_t$8,
       Replace_polymorphic_compare$2,
       symbol$187,
       symbol$188,
       symbol$189,
       symbol$190,
       symbol$191,
       symbol$192,
       robustly_compare$1,
       next$3,
       prev$4,
       to_span_since_epoch$0,
       of_span_since_epoch$0,
       symbol$33,
       symbol$34,
       symbol$35,
       symbol$36,
       symbol$37,
       symbol$38,
       equal$23,
       compare$40,
       min$5,
       max$5,
       ascending$4,
       descending$4,
       between$4,
       clamp_exn$4,
       clamp$4,
       comparator$7,
       validate_lbound$3,
       validate_ubound$3,
       validate_bound$3,
       Date_and_ofday$0,
       next_multiple,
       prev_multiple,
       now,
       add$13,
       sub$4,
       diff$7,
       abs_diff,
       quickcheck_generator$21,
       quickcheck_observer$19,
       quickcheck_shrinker$19,
       gen_incl$2,
       gen_uniform_incl$2,
       is_earlier,
       is_later,
       of_date_ofday$0,
       of_date_ofday_precise,
       to_date_ofday$0,
       to_date_ofday_precise,
       to_date$1,
       to_ofday$0,
       reset_date_cache,
       epoch,
       convert,
       utc_offset$0,
       to_filename_string,
       of_filename_string,
       to_string_abs,
       to_string_abs_trimmed,
       to_string_abs_parts,
       to_string_trimmed$0,
       to_sec_string$0,
       to_sec_string_with_zone,
       of_localized_string,
       of_string_gen,
       to_string_iso8601_basic$0,
       occurrence,
       of_string_with_utc_offset,
       to_string_utc,
       [0,
        bin_size_t$69,
        bin_write_t$70,
        bin_read_t$138,
        bin_read_t$139,
        bin_shape_t$101,
        bin_writer_t$89,
        bin_reader_t$89,
        bin_t$89,
        t_of_sexp$79,
        sexp_of_t$88,
        t_sexp_grammar$30,
        typerep_of_t$27,
        typename_of_t$27,
        symbol$193,
        symbol$194,
        symbol$195,
        symbol$196,
        symbol$197,
        symbol$198,
        equal$38,
        compare$75,
        min$19,
        max$19,
        ascending$18,
        descending$18,
        between$18,
        clamp_exn$18,
        clamp$18,
        validate_lbound$18,
        validate_ubound$18,
        validate_bound$18,
        Replace_polymorphic_compare$2,
        comparator$26,
        Map$23,
        Set$23,
        hash_fold_t$38,
        hash$47,
        hashable$18,
        _abB_,
        _abC_,
        _abD_,
        pp$9,
        symbol$199,
        symbol$200,
        symbol$201,
        symbol$202,
        symbol$203,
        symbol$204,
        robustly_compare$2,
        quickcheck_generator$22,
        quickcheck_observer$20,
        quickcheck_shrinker$20,
        gen_incl$3,
        gen_uniform_incl$3,
        of_string$24,
        to_string$28,
        create$25,
        to_parts$1,
        start_of_day$0,
        start_of_next_day$0,
        approximate_end_of_day$0,
        to_span_since_start_of_day$0,
        of_span_since_start_of_day_exn,
        of_span_since_start_of_day$0,
        span_since_start_of_day_is_val$0,
        of_span_since_start_of_day_unc$0,
        add$14,
        sub$5,
        next$4,
        prev$5,
        diff$8,
        small_diff$0,
        to_string_trimmed$1,
        to_sec_string$1,
        of_string_iso8601_extended$0,
        to_millisecond_string,
        to_millisec_string$0,
        698081730,
        698081730,
        Zoned$0],
       _ab9_,
       Zone$1,
       _ab8_,
       Exposed_for_tests,
       Hash_queue$16,
       Hash_set$19,
       Map$26,
       Set$26,
       Table$19,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       of_string$23,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       698081730,
       to_string$27,
       698081730];
    caml_register_global(5402,Core_Time_float,"Core__Time_float");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Time_ns_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$380);
    caml_call1(Expect_test_collector[5][1],cst_core_src_time_ns_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$381,cst$161);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$382);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Time_ns_intf$0);
    var Core_Time_ns_intf=[0];
    caml_register_global(5403,Core_Time_ns_intf,"Core__Time_ns_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Date);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$383);
    caml_call1(Expect_test_collector[5][1],cst_core_src_date_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$384,cst$162);
    function of_time(time,zone){return caml_call2(to_date$1,time,zone)}
    function today(zone){return of_time(now(0),zone)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$385);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Date$0);
    var
     Core_Date=
      [0,
       bin_size_t$67,
       bin_write_t$68,
       bin_read_t$134,
       bin_read_t$135,
       bin_shape_t$90,
       bin_writer_t$79,
       bin_reader_t$79,
       bin_t$79,
       t_of_sexp$64,
       sexp_of_t$77,
       t_sexp_grammar$21,
       typerep_of_t$23,
       typename_of_t$23,
       hash_fold_t$36,
       hash$39,
       hashable$17,
       Table$17,
       Hash_set$17,
       Hash_queue$14,
       of_string$19,
       to_string$22,
       symbol$158,
       symbol$159,
       symbol$160,
       symbol$161,
       symbol$162,
       symbol$163,
       equal$34,
       compare$68,
       min$16,
       max$16,
       ascending$15,
       descending$15,
       between$15,
       clamp_exn$15,
       clamp$15,
       validate_lbound$14,
       validate_ubound$14,
       validate_bound$14,
       Replace_polymorphic_compare$12,
       comparator$23,
       Map$19,
       Set$19,
       _Xa_,
       create_exn,
       of_string_iso8601_basic,
       to_string_iso8601_basic,
       to_string_american,
       day,
       month,
       year,
       day_of_week,
       week_number_and_year,
       week_number,
       is_weekend,
       is_weekday,
       is_business_day,
       add_days$0,
       add_months,
       add_years,
       diff$5,
       diff_weekdays,
       diff_weekend_days,
       add_weekdays_rounding_backward,
       add_weekdays_rounding_forward,
       add_business_days_rounding_bac,
       add_business_days_rounding_for,
       add_weekdays_rounding_in_direc,
       add_weekdays_rounding_in_direc,
       add_business_days_rounding_in_,
       add_business_days_rounding_in_,
       add_days_skipping,
       dates_between,
       business_dates_between,
       weekdays_between,
       previous_weekday,
       following_weekday,
       first_strictly_after,
       days_in_month,
       is_leap_year,
       unix_epoch,
       quickcheck_generator$17,
       quickcheck_observer$16,
       quickcheck_shrinker$16,
       gen_incl,
       gen_uniform_incl,
       Days,
       Option,
       Stable$7,
       O$1,
       Private$2,
       of_time,
       today,
       -737673215,
       -737673215,
       -737673215];
    caml_register_global(5404,Core_Date,"Core__Date");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Date_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$386);
    caml_call1(Expect_test_collector[5][1],cst_core_src_date_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$387,cst$163);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$388);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Date_intf$0);
    var Core_Date_intf=[0];
    caml_register_global(5405,Core_Date_intf,"Core__Date_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Span_ns);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$389);
    caml_call1(Expect_test_collector[5][1],cst_core_src_span_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$390,cst$164);
    var arch_sixtyfour=caml_call2(equal$24,include$15[9],64);
    function float$1(x){return caml_call1(to_float$3,x)}
    function hash$49(x){return caml_call1(_Kh_,x)}
    var
     _ab__=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$191),0,bin_shape_t$67],0],
     _ab$_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_span_ns_ml_15_2),
     group$110=caml_call2(Bin_prot_Shape[6],_ab$_,_ab__),
     _aca_=caml_call1(Bin_prot_Shape[2][1],cst_t$192),
     bin_shape_t$103=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$110,_aca_),0),
     bin_writer_t$91=[0,bin_size_t$52,bin_write_t$52],
     bin_reader_t$91=[0,bin_read_t$106,bin_read_t$107],
     bin_t$91=[0,bin_shape_t$103,bin_writer_t$91,bin_reader_t$91],
     Typename_of_t$27=caml_call1(Typerep_lib_Make_typename[1],[0,name$61]),
     typename_of_t$29=Typename_of_t$27[2],
     name_of_t$19=Typename_of_t$27[1],
     typerep_of_t$29=[9,[0,name_of_t$19,[0,_e2_]]];
    function compare$78(a_001,b_002)
     {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
      var n=caml_call2(_G$_,a_001[1],b_002[1]);
      if(0 === n)
       {var n$0=caml_call2(compare$42,a_001[2],b_002[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare$42,a_001[3],b_002[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare$42,a_001[4],b_002[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare$42,a_001[5],b_002[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare$42,a_001[6],b_002[6]);
                return 0 === n$4?caml_call2(compare$42,a_001[7],b_002[7]):n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function t_of_sexp$81(sexp_004)
     {if(0 === sexp_004[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_032$0,sexp_004);
      var
       field_sexps_005=sexp_004[1],
       sign_006=[0,0],
       hr_008=[0,0],
       min_010=[0,0],
       sec_012=[0,0],
       ms_014=[0,0],
       us_016=[0,0],
       ns_018=[0,0],
       duplicates_020=[0,0],
       extra_021=[0,0],
       param=field_sexps_005;
      for(;;)
       {if(param)
         {var _a$M_=param[1];
          if(1 === _a$M_[0])
           {var _a$N_=_a$M_[1];
            if(_a$N_)
             {var _a$O_=_a$N_[1];
              if(0 === _a$O_[0])
               {var _a$P_=_a$N_[2],_a$Q_=_a$O_[1],switch$0=0;
                if(! _a$P_ || ! _a$P_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_034=param[2],
                   field_sexp_023$7=
                    function(_a$Y_)
                     {function field_sexp_023(param)
                       {if(_a$Y_)
                         {if(_a$Y_[2])throw [0,Assert_failure,_acb_];
                          var x_035=_a$Y_[1];
                          return x_035}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_032$0,sexp_004)}
                      return field_sexp_023},
                   field_sexp_023=field_sexp_023$7(_a$P_);
                  if(caml_string_notequal(_a$Q_,cst_hr$2))
                   if(caml_string_notequal(_a$Q_,cst_min$2))
                    if(caml_string_notequal(_a$Q_,cst_ms$5))
                     if(caml_string_notequal(_a$Q_,cst_ns$4))
                      if(caml_string_notequal(_a$Q_,cst_sec$2))
                       if(caml_string_notequal(_a$Q_,cst_sign$2))
                        if(caml_string_notequal(_a$Q_,cst_us$5))
                         {if(Sexplib0_Sexp_conv[26][1])
                           extra_021[1] = [0,_a$Q_,extra_021[1]]}
                        else
                         if(us_016[1])
                          duplicates_020[1] = [0,_a$Q_,duplicates_020[1]];
                         else
                          {var
                            field_sexp_023$0=field_sexp_023(0),
                            fvalue_026=caml_call1(int_of_sexp,field_sexp_023$0);
                           us_016[1] = [0,fvalue_026]}
                       else
                        if(sign_006[1])
                         duplicates_020[1] = [0,_a$Q_,duplicates_020[1]];
                        else
                         {var
                           field_sexp_023$1=field_sexp_023(0),
                           fvalue_031=caml_call1(_GZ_,field_sexp_023$1);
                          sign_006[1] = [0,fvalue_031]}
                      else
                       if(sec_012[1])
                        duplicates_020[1] = [0,_a$Q_,duplicates_020[1]];
                       else
                        {var
                          field_sexp_023$2=field_sexp_023(0),
                          fvalue_028=caml_call1(int_of_sexp,field_sexp_023$2);
                         sec_012[1] = [0,fvalue_028]}
                     else
                      if(ns_018[1])
                       duplicates_020[1] = [0,_a$Q_,duplicates_020[1]];
                      else
                       {var
                         field_sexp_023$3=field_sexp_023(0),
                         fvalue_025=caml_call1(int_of_sexp,field_sexp_023$3);
                        ns_018[1] = [0,fvalue_025]}
                    else
                     if(ms_014[1])
                      duplicates_020[1] = [0,_a$Q_,duplicates_020[1]];
                     else
                      {var
                        field_sexp_023$4=field_sexp_023(0),
                        fvalue_027=caml_call1(int_of_sexp,field_sexp_023$4);
                       ms_014[1] = [0,fvalue_027]}
                   else
                    if(min_010[1])
                     duplicates_020[1] = [0,_a$Q_,duplicates_020[1]];
                    else
                     {var
                       field_sexp_023$5=field_sexp_023(0),
                       fvalue_029=caml_call1(int_of_sexp,field_sexp_023$5);
                      min_010[1] = [0,fvalue_029]}
                  else
                   if(hr_008[1])
                    duplicates_020[1] = [0,_a$Q_,duplicates_020[1]];
                   else
                    {var
                      field_sexp_023$6=field_sexp_023(0),
                      fvalue_030=caml_call1(int_of_sexp,field_sexp_023$6);
                     hr_008[1] = [0,fvalue_030]}
                  var param=tail_034;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_032$0,_a$M_)}
        if(duplicates_020[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_032$0,
                  duplicates_020[1],
                  sexp_004);
        if(extra_021[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_032$0,
                  extra_021[1],
                  sexp_004);
        var
         _a$R_=sign_006[1],
         _a$S_=hr_008[1],
         _a$T_=min_010[1],
         _a$U_=sec_012[1],
         _a$V_=ms_014[1],
         _a$W_=us_016[1],
         _a$X_=ns_018[1];
        if(_a$R_ && _a$S_ && _a$T_ && _a$U_ && _a$V_ && _a$W_ && _a$X_)
         {var
           ns_019=_a$X_[1],
           us_017=_a$W_[1],
           ms_015=_a$V_[1],
           sec_013=_a$U_[1],
           min_011=_a$T_[1],
           hr_009=_a$S_[1],
           sign_007=_a$R_[1];
          return [0,sign_007,hr_009,min_011,sec_013,ms_015,us_017,ns_019]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_032$0,
                 sexp_004,
                 [0,
                  [0,0 === sign_006[1]?1:0,cst_sign$3],
                  [0,
                   [0,0 === hr_008[1]?1:0,cst_hr$3],
                   [0,
                    [0,0 === min_010[1]?1:0,cst_min$3],
                    [0,
                     [0,0 === sec_012[1]?1:0,cst_sec$3],
                     [0,
                      [0,0 === ms_014[1]?1:0,cst_ms$6],
                      [0,
                       [0,0 === us_016[1]?1:0,cst_us$6],
                       [0,[0,0 === ns_018[1]?1:0,cst_ns$5],0]]]]]]])}}
    function sexp_of_t$91(param)
     {var
       ns_049=param[7],
       us_047=param[6],
       ms_045=param[5],
       sec_043=param[4],
       min_041=param[3],
       hr_039=param[2],
       sign_037=param[1],
       arg_050=caml_call1(sexp_of_int,ns_049),
       bnds_036=[0,[1,[0,_acc_,[0,arg_050,0]]],0],
       arg_048=caml_call1(sexp_of_int,us_047),
       bnds_036$0=[0,[1,[0,_acd_,[0,arg_048,0]]],bnds_036],
       arg_046=caml_call1(sexp_of_int,ms_045),
       bnds_036$1=[0,[1,[0,_ace_,[0,arg_046,0]]],bnds_036$0],
       arg_044=caml_call1(sexp_of_int,sec_043),
       bnds_036$2=[0,[1,[0,_acf_,[0,arg_044,0]]],bnds_036$1],
       arg_042=caml_call1(sexp_of_int,min_041),
       bnds_036$3=[0,[1,[0,_acg_,[0,arg_042,0]]],bnds_036$2],
       arg_040=caml_call1(sexp_of_int,hr_039),
       bnds_036$4=[0,[1,[0,_ach_,[0,arg_040,0]]],bnds_036$3],
       arg_038=caml_call1(_G0_,sign_037),
       bnds_036$5=[0,[1,[0,_aci_,[0,arg_038,0]]],bnds_036$4];
      return [1,bnds_036$5]}
    var
     t_sexp_grammar$32=
      [9,
       [246,
        function(_a$L_)
         {return [2,
                  [2,
                   [0,
                    0,
                    [0,
                     [1,[0,cst_sign$4,1,[0,_GJ_,0]]],
                     [0,
                      [1,[0,cst_hr$4,1,[0,int_sexp_grammar,0]]],
                      [0,
                       [1,[0,cst_min$4,1,[0,int_sexp_grammar,0]]],
                       [0,
                        [1,[0,cst_sec$4,1,[0,int_sexp_grammar,0]]],
                        [0,
                         [1,[0,cst_ms$7,1,[0,int_sexp_grammar,0]]],
                         [0,
                          [1,[0,cst_us$7,1,[0,int_sexp_grammar,0]]],
                          [0,[1,[0,cst_ns$6,1,[0,int_sexp_grammar,0]]],0]]]]]]]]]]}]],
     Parts$0=[0,compare$78,t_of_sexp$81,sexp_of_t$91,t_sexp_grammar$32];
    function next$6(t){return caml_call1(succ$1,t)}
    function prev$7(t){return caml_call1(pred$1,t)}
    var
     nanosecond$1=caml_call1(of_int$2,1),
     microsecond$1=
      caml_call2(symbol$105,caml_call1(of_int$2,1000),nanosecond$1),
     millisecond$1=
      caml_call2(symbol$105,caml_call1(of_int$2,1000),microsecond$1),
     second$2=caml_call2(symbol$105,caml_call1(of_int$2,1000),millisecond$1),
     minute$1=caml_call2(symbol$105,caml_call1(of_int$2,60),second$2),
     hour$2=caml_call2(symbol$105,caml_call1(of_int$2,60),minute$1),
     ns_per_day=caml_call2(symbol$105,caml_call1(of_int$2,24),hour$2),
     _acj_=caml_call1(of_int$2,365),
     max_value_for_1us_rounding=
      caml_call2
       (symbol$105,
        caml_call2(symbol$105,caml_call1(of_int$2,135),_acj_),
        ns_per_day),
     min_value_for_1us_rounding=caml_call1(neg$2,max_value_for_1us_rounding);
    function create$27(opt,_a$E_,_a$D_,_a$C_,_a$B_,_a$A_,_a$z_,_a$y_,param)
     {if(opt)var sth=opt[1],sign=sth;else var sign=2;
      if(_a$E_)var sth$0=_a$E_[1],days=sth$0;else var days=0;
      if(_a$D_)var sth$1=_a$D_[1],hr=sth$1;else var hr=0;
      if(_a$C_)var sth$2=_a$C_[1],minutes=sth$2;else var minutes=0;
      if(_a$B_)var sth$3=_a$B_[1],sec=sth$3;else var sec=0;
      if(_a$A_)var sth$4=_a$A_[1],ms=sth$4;else var ms=0;
      if(_a$z_)var sth$5=_a$z_[1],us=sth$5;else var us=0;
      if(_a$y_)var sth$6=_a$y_[1],ns=sth$6;else var ns=0;
      var
       _a$F_=caml_call2(symbol$105,caml_call1(of_int$2,ns),nanosecond$1),
       _a$G_=caml_call2(symbol$105,caml_call1(of_int$2,us),microsecond$1),
       _a$H_=caml_call2(symbol$105,caml_call1(of_int$2,ms),millisecond$1),
       _a$I_=caml_call2(symbol$105,caml_call1(of_int$2,sec),second$2),
       _a$J_=caml_call2(symbol$105,caml_call1(of_int$2,minutes),minute$1),
       _a$K_=caml_call2(symbol$105,caml_call1(of_int$2,hr),hour$2),
       t=
        caml_call2
         (symbol$103,
          caml_call2
           (symbol$103,
            caml_call2
             (symbol$103,
              caml_call2
               (symbol$103,
                caml_call2
                 (symbol$103,
                  caml_call2
                   (symbol$103,
                    caml_call2(symbol$105,caml_call1(of_int$2,days),ns_per_day),
                    _a$K_),
                  _a$J_),
                _a$I_),
              _a$H_),
            _a$G_),
          _a$F_);
      return sign?t:caml_call1(neg$2,t)}
    function to_parts$3(t)
     {var
       mag=caml_call1(abs$4,t),
       _a$r_=
        caml_call1
         (to_int_exn$2,
          caml_call2
           (symbol$110,caml_call2(rem$2,mag,microsecond$1),nanosecond$1)),
       _a$s_=
        caml_call1
         (to_int_exn$2,
          caml_call2
           (symbol$110,caml_call2(rem$2,mag,millisecond$1),microsecond$1)),
       _a$t_=
        caml_call1
         (to_int_exn$2,
          caml_call2(symbol$110,caml_call2(rem$2,mag,second$2),millisecond$1)),
       _a$u_=
        caml_call1
         (to_int_exn$2,
          caml_call2(symbol$110,caml_call2(rem$2,mag,minute$1),second$2)),
       _a$v_=
        caml_call1
         (to_int_exn$2,
          caml_call2(symbol$110,caml_call2(rem$2,mag,hour$2),minute$1)),
       _a$w_=caml_call1(to_int_exn$2,caml_call2(symbol$110,mag,hour$2)),
       _a$x_=
        caml_call2(symbol$101,t,zero$4)?0:caml_call2(symbol$100,t,zero$4)?2:1;
      return [0,_a$x_,_a$w_,_a$v_,_a$u_,_a$t_,_a$s_,_a$r_]}
    function of_parts(param)
     {var
       ns=param[7],
       us=param[6],
       ms=param[5],
       sec=param[4],
       min=param[3],
       hr=param[2],
       sign=param[1];
      return create$27
              ([0,sign],0,[0,hr],[0,min],[0,sec],[0,ms],[0,us],[0,ns],0)}
    function of_ns$1(f){return caml_call1(_Id_,f)}
    function of_int63_ns(i){return i}
    function of_int_us(i)
     {return caml_call2(symbol$105,caml_call1(of_int$2,i),microsecond$1)}
    function of_int_ms(i)
     {return caml_call2(symbol$105,caml_call1(of_int$2,i),millisecond$1)}
    function of_int_sec$1(i)
     {return caml_call2(symbol$105,caml_call1(of_int$2,i),second$2)}
    function of_us$1(f){return caml_call1(_Id_,f * float$1(microsecond$1))}
    function of_ms$1(f){return caml_call1(_Id_,f * float$1(millisecond$1))}
    function of_sec$0(f){return caml_call1(_Id_,f * float$1(second$2))}
    function of_min$1(f){return caml_call1(_Id_,f * float$1(minute$1))}
    function of_hr$1(f){return caml_call1(_Id_,f * float$1(hour$2))}
    function of_day$1(f){return caml_call1(_Id_,f * float$1(ns_per_day))}
    function of_sec_with_microsecond_precis(sec)
     {var us=caml_call1(_Id_,sec * 1000000.);
      return caml_call2(symbol$105,us,caml_call1(of_int$2,1000))}
    function of_int63_seconds$2(x)
     {return caml_call2(Base_Int63[94][3],x,second$2)}
    function of_int32_seconds$1(x)
     {return of_int63_seconds$2(caml_call1(of_int32$1,x))}
    function to_ns$1(t){return float$1(t)}
    function to_int63_ns(t){return t}
    function to_us$1(t)
     {var _a$q_=float$1(microsecond$1);return float$1(t) / _a$q_}
    function to_ms$1(t)
     {var _a$p_=float$1(millisecond$1);return float$1(t) / _a$p_}
    function to_sec$0(t)
     {var _a$o_=float$1(second$2);return float$1(t) / _a$o_}
    function to_min$1(t)
     {var _a$n_=float$1(minute$1);return float$1(t) / _a$n_}
    function to_hr$1(t){var _a$m_=float$1(hour$2);return float$1(t) / _a$m_}
    function to_day$1(t)
     {var _a$l_=float$1(ns_per_day);return float$1(t) / _a$l_}
    function to_int_us(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$110,t,microsecond$1))}
    function to_int_ms(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$110,t,millisecond$1))}
    function to_int_sec(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$110,t,second$2))}
    function to_int63_seconds_round_down_ex$2(t)
     {return caml_call2(Base_Int63[94][17],t,second$2)}
    function of_int_ns(i){return caml_call1(of_int$2,i)}
    var
     to_int_ns=
      arch_sixtyfour
       ?function(t){return caml_call1(to_int_exn$2,t)}
       :function(param)
         {return caml_call1(_Fb_,cst_Time_ns_Span_to_int_ns_uns)};
    function add$15(t,u){return caml_call2(symbol$103,t,u)}
    function diff$9(t,u){return caml_call2(symbol$104,t,u)}
    function scale$2(t,f){return caml_call1(_Id_,float$1(t) * f)}
    function scale_int63(t,i){return caml_call2(symbol$105,t,i)}
    function scale_int(t,i){return scale_int63(t,caml_call1(of_int$2,i))}
    function symbol$221(t,f){return caml_call1(_Id_,float$1(t) / f)}
    function to_proportional_float$0(t){return caml_call1(to_float$3,t)}
    function of_unit_of_time$1(u)
     {switch(u)
       {case 0:return nanosecond$1;
        case 1:return microsecond$1;
        case 2:return millisecond$1;
        case 3:return second$2;
        case 4:return minute$1;
        case 5:return hour$2;
        default:return ns_per_day}}
    function to_unit_of_time$1(t)
     {var abs_t=caml_call1(abs$4,t);
      return caml_call2(include$68[1],abs_t,ns_per_day)
              ?6
              :caml_call2(include$68[1],abs_t,hour$2)
                ?5
                :caml_call2(include$68[1],abs_t,minute$1)
                  ?4
                  :caml_call2(include$68[1],abs_t,second$2)
                    ?3
                    :caml_call2(include$68[1],abs_t,millisecond$1)
                      ?2
                      :caml_call2(include$68[1],abs_t,microsecond$1)?1:0}
    var
     V1$16=[0],
     Option$0=[0],
     _ack_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$193),0,bin_shape_t$103],0],
     _acl_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_span_ns_ml_187_8),
     group$111=caml_call2(Bin_prot_Shape[6],_acl_,_ack_),
     _acm_=caml_call1(Bin_prot_Shape[2][1],cst_t$194),
     bin_shape_t$104=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$111,_acm_),0),
     bin_writer_t$92=[0,bin_size_t$52,bin_write_t$52],
     bin_reader_t$92=[0,bin_read_t$106,bin_read_t$107],
     bin_t$92=[0,bin_shape_t$104,bin_writer_t$92,bin_reader_t$92],
     compare$79=include$68[8];
    function hash$50(x){return hash$49(x)}
    var equal$40=include$68[7];
    function of_int63_exn(t){return t}
    function to_int63(t){return t}
    function number_of_digits_to_write(span_part_magnitude)
     {if(0 === span_part_magnitude)return 0;
      if(10 <= span_part_magnitude)
       {if(100 <= span_part_magnitude)
         {if(1000 <= span_part_magnitude)
           {if(10000 <= span_part_magnitude)
             {if(100000 <= span_part_magnitude)throw [0,Assert_failure,_acn_];
              return 5}
            return 4}
          return 3}
        return 2}
      return 1}
    function write_char(buf,pos,char$0)
     {caml_bytes_unsafe_set(buf,pos,char$0);return pos + 1 | 0}
    function write_2_chars(buf,pos,char1,char2)
     {caml_bytes_unsafe_set(buf,pos,char1);
      caml_bytes_unsafe_set(buf,pos + 1 | 0,char2);
      return pos + 2 | 0}
    function write_digits(buf,pos,digits,int$0)
     {write_int63(buf,pos,digits,caml_call1(of_int$2,int$0));
      return pos + digits | 0}
    function write_if_non_empty(buf,pos,digits,int$0,suffix)
     {if(0 === digits)return pos;
      var
       pos$0=write_digits(buf,pos,digits,int$0),
       pos$1=write_char(buf,pos$0,suffix);
      return pos$1}
    var
     nanos_of_millisecond=caml_call1(to_int_exn$2,millisecond$1),
     nanos_of_microsecond=caml_call1(to_int_exn$2,microsecond$1),
     int63_60=caml_call1(of_int$2,60),
     int63_24=caml_call1(of_int$2,24);
    function to_string$30(t)
     {if(caml_call2(equal$40,t,zero$4))return cst_0s$1;
      var
       is_negative=caml_call2(include$68[5],t,zero$4),
       seconds=caml_call2(symbol$110,t,second$2),
       ns=caml_call1(to_int_exn$2,caml_call2(rem$2,t,second$2)),
       seconds$0=caml_call1(abs$4,seconds),
       ns$0=caml_call1(abs$1,ns),
       s=caml_call1(to_int_exn$2,caml_call2(rem$2,seconds$0,int63_60)),
       minutes=caml_call2(symbol$110,seconds$0,int63_60),
       m=caml_call1(to_int_exn$2,caml_call2(rem$2,minutes,int63_60)),
       hours=caml_call2(symbol$110,minutes,int63_60),
       h=caml_call1(to_int_exn$2,caml_call2(rem$2,hours,int63_24)),
       d=caml_call1(to_int_exn$2,caml_call2(symbol$110,hours,int63_24)),
       digits_of_d=number_of_digits_to_write(d),
       digits_of_h=number_of_digits_to_write(h),
       digits_of_m=number_of_digits_to_write(m),
       decimal_unit=
        0 < s
         ?0
         :nanos_of_millisecond <= ns$0
           ?1
           :nanos_of_microsecond <= ns$0?2:1 <= ns$0?3:4;
      switch(decimal_unit)
       {case 0:var decimal_unit_integer=s;break;
        case 1:
         var decimal_unit_integer=caml_div(ns$0,nanos_of_millisecond);break;
        case 2:
         var decimal_unit_integer=caml_div(ns$0,nanos_of_microsecond);break;
        case 3:var decimal_unit_integer=ns$0;break;
        default:var decimal_unit_integer=0}
      switch(decimal_unit)
       {case 0:var decimal_unit_billionths=ns$0;break;
        case 1:
         var
          decimal_unit_billionths=
           caml_call2(O$0[5],ns$0,nanos_of_millisecond) * 1000 | 0;
         break;
        case 2:
         var
          decimal_unit_billionths=
           caml_call2(O$0[5],ns$0,nanos_of_microsecond) * 1000000 | 0;
         break;
        case 3:var decimal_unit_billionths=0;break;
        default:var decimal_unit_billionths=0}
      var digits=number_of_digits_to_write(decimal_unit_integer);
      if
       (0
        <=
        decimal_unit_billionths
        &&
        !
        (999999999 < decimal_unit_billionths))
       {var
         decimals_of_decimal_unit=
          0 === decimal_unit_billionths
           ?0
           :0 === caml_call2(O$0[5],decimal_unit_billionths,10)
             ?0 === caml_call2(O$0[5],decimal_unit_billionths,100)
               ?0 === caml_call2(O$0[5],decimal_unit_billionths,1000)
                 ?0 === caml_call2(O$0[5],decimal_unit_billionths,10000)
                   ?0 === caml_call2(O$0[5],decimal_unit_billionths,100000)
                     ?0 === caml_call2(O$0[5],decimal_unit_billionths,1000000)
                       ?0 === caml_call2(O$0[5],decimal_unit_billionths,10000000)
                         ?0 === caml_call2(O$0[5],decimal_unit_billionths,100000000)
                           ?1
                           :2
                         :3
                       :4
                     :5
                   :6
                 :7
               :8
             :9,
         sign_len=is_negative?1:0,
         d_len=0 < digits_of_d?digits_of_d + 1 | 0:0,
         h_len=0 < digits_of_h?digits_of_h + 1 | 0:0,
         m_len=0 < digits_of_m?digits_of_m + 1 | 0:0,
         digits_len=
          decimal_unit?4 <= decimal_unit?0:digits + 2 | 0:digits + 1 | 0,
         decimals_len=
          0 < decimals_of_decimal_unit?decimals_of_decimal_unit + 1 | 0:0,
         decimal_unit_len=digits_len + decimals_len | 0,
         string_length=
          (((sign_len + d_len | 0) + h_len | 0) + m_len | 0)
          +
          decimal_unit_len
          |
          0;
        if(0 < string_length)
         {var
           buf=caml_call1(_Dw_,string_length),
           pos$2=0,
           pos$3=is_negative?write_char(buf,pos$2,45):pos$2,
           pos$4=write_if_non_empty(buf,pos$3,digits_of_d,d,100),
           pos$5=write_if_non_empty(buf,pos$4,digits_of_h,h,104),
           pos$6=write_if_non_empty(buf,pos$5,digits_of_m,m,109);
          if(0 === digits)
           var pos$7=pos$6;
          else
           {var pos=write_digits(buf,pos$6,digits,decimal_unit_integer);
            if(0 === decimals_of_decimal_unit)
             var pos$0=pos;
            else
             {var pos$1=write_char(buf,pos,46);
              write_int63
               (buf,
                pos$1,
                decimals_of_decimal_unit,
                caml_call1
                 (of_int$2,
                  caml_div
                   (decimal_unit_billionths,
                    caml_call2(pow,10,9 - decimals_of_decimal_unit | 0))));
              var pos$0=pos$1 + decimals_of_decimal_unit | 0}
            switch(decimal_unit)
             {case 0:var pos$7=write_char(buf,pos$0,115);break;
              case 1:var pos$7=write_2_chars(buf,pos$0,109,115);break;
              case 2:var pos$7=write_2_chars(buf,pos$0,117,115);break;
              case 3:var pos$7=write_2_chars(buf,pos$0,110,115);break;
              default:var pos$7=pos$0}}
          if(pos$7 === string_length)return caml_call1(_DO_,buf);
          throw [0,Assert_failure,_acp_]}
        throw [0,Assert_failure,_acq_]}
      throw [0,Assert_failure,_aco_]}
    var
     int63_10=caml_call1(of_int$2,10),
     min_mult10_without_underflow=caml_call2(symbol$110,min_value$2,int63_10);
    function invalid_string$2(string,reason)
     {var
       _a$j_=[0,[1,[0,_acr_,[0,caml_call1(sexp_of_t$41,reason),0]]],0],
       _a$k_=[0,[1,[0,_acs_,[0,caml_call1(sexp_of_t$41,string),0]]],_a$j_];
      return caml_call1
              (_nX_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Time_ns_Span_of_string_inv),
                 _a$k_]])}
    function add_without_underflow(string,x,y)
     {var sum=caml_call2(Base_Int63[94][1],x,y);
      if(caml_call2(Base_Int63[94][10],sum,x))
       invalid_string$2(string,cst_span_would_be_outside_of_i);
      return sum}
    function min_factor_of(span)
     {return caml_call2(symbol$110,min_value$2,span)}
    var
     min_days_without_underflow=min_factor_of(ns_per_day),
     min_hours_without_underflow=min_factor_of(hour$2),
     min_minutes_without_underflow=min_factor_of(minute$1),
     min_seconds_without_underflow=min_factor_of(second$2),
     min_milliseconds_without_under=min_factor_of(millisecond$1),
     min_microseconds_without_under=min_factor_of(microsecond$1),
     min_nanoseconds_without_underf=min_factor_of(nanosecond$1);
    function of_string$26(string)
     {var neg_ns=[0,zero$4],pos=[0,0],len=caml_ml_string_length(string);
      if(0 === len)invalid_string$2(string,cst_empty_string$0);
      var
       match=caml_string_unsafe_get(string,pos[1]),
       switcher=match - 43 | 0,
       switch$0=0;
      if(! (2 < switcher >>> 0))
       {var switch$1=0;
        switch(switcher)
         {case 0:pos[1]++;var _a$i_=0;break;
          case 1:switch$1 = 1;break;
          default:pos[1]++;var _a$i_=1}
        if(! switch$1){var is_negative=_a$i_;switch$0 = 1}}
      if(! switch$0)var is_negative=0;
      var round_ties_before_negating=is_negative?1:0;
      a:
      for(;;)
       {if(pos[1] < len)
         {var has_digit=[0,0],i=[0,zero$4],end_of_digits=[0,0];
          for(;;)
           {if(pos[1] < len && ! end_of_digits[1])
             {var char$0=caml_string_unsafe_get(string,pos[1]),switch$2=0;
              if(58 <= char$0)
               if(95 === char$0)pos[1]++;else switch$2 = 1;
              else
               if(48 <= char$0)
                {var
                  _a$h_=i[1],
                  digit=caml_call1(of_int$2,caml_call1(_Eh_,char$0));
                 if
                  (caml_call2
                    (Base_Int63[94][11],_a$h_,min_mult10_without_underflow))
                  invalid_string$2(string,cst_span_would_be_outside_of_i$0);
                 var _a$a_=caml_call1(Base_Int63[94][5],digit);
                 i[1]
                 =
                 add_without_underflow
                  (string,caml_call2(Base_Int63[94][3],_a$h_,int63_10),_a$a_);
                 has_digit[1] = 1;
                 pos[1]++}
               else
                switch$2 = 1;
              if(switch$2)end_of_digits[1] = 1;
              continue}
            var
             neg_integer=i[1],
             decimal_pos=pos[1],
             _a$b_=pos[1] < len?1:0,
             _a$c_=
              _a$b_
               ?caml_call2
                 (equal_char,46,caml_string_unsafe_get(string,pos[1]))
               :_a$b_;
            if(_a$c_)
             {pos[1]++;
              var end_of_decimals=[0,0];
              for(;;)
               {if(pos[1] < len && ! end_of_decimals[1])
                 {var
                   match$2=caml_string_unsafe_get(string,pos[1]),
                   switch$3=0;
                  if(58 <= match$2)
                   if(95 === match$2)pos[1]++;else switch$3 = 1;
                  else
                   if(48 <= match$2)
                    {has_digit[1] = 1;pos[1]++}
                   else
                    switch$3 = 1;
                  if(switch$3)end_of_decimals[1] = 1;
                  continue}
                break}}
            var end_pos=pos[1];
            if(1 - has_digit[1])
             invalid_string$2(string,cst_no_digits_before_unit_suff);
            var switch$4=0;
            if
             ((pos[1] + 1 | 0)
              <
              len
              &&
              caml_call2
               (equal_char,115,caml_string_unsafe_get(string,pos[1] + 1 | 0)))
             {var
               match$0=caml_string_unsafe_get(string,pos[1]),
               switcher$0=match$0 - 109 | 0,
               switch$5=0;
              if(! (8 < switcher$0 >>> 0))
               {var switch$6=0;
                switch(switcher$0)
                 {case 0:pos[1] = pos[1] + 2 | 0;var _a$e_=2;break;
                  case 1:pos[1] = pos[1] + 2 | 0;var _a$e_=0;break;
                  case 8:pos[1] = pos[1] + 2 | 0;var _a$e_=1;break;
                  default:switch$6 = 1}
                if(! switch$6){var _a$d_=_a$e_;switch$5 = 1}}
              if(! switch$5)
               var _a$d_=invalid_string$2(string,cst_unparseable_unit_suffix);
              var unit_of_time=_a$d_}
            else
             switch$4 = 1;
            if(switch$4)
             if(pos[1] < len)
              {var
                match$1=caml_string_unsafe_get(string,pos[1]),
                switcher$1=match$1 - 100 | 0,
                switch$7=0;
               if(! (15 < switcher$1 >>> 0))
                {var switch$8=0;
                 switch(switcher$1)
                  {case 0:pos[1]++;var _a$g_=6;break;
                   case 4:pos[1]++;var _a$g_=5;break;
                   case 9:pos[1]++;var _a$g_=4;break;
                   case 15:pos[1]++;var _a$g_=3;break;
                   default:switch$8 = 1}
                 if(! switch$8){var _a$f_=_a$g_;switch$7 = 1}}
               if(! switch$7)
                var
                 _a$f_=
                  invalid_string$2(string,cst_unparseable_unit_suffix$0);
               var unit_of_time=_a$f_}
             else
              var
               unit_of_time=
                invalid_string$2(string,cst_no_unit_suffix_after_digit);
            var scale=of_unit_of_time$1(unit_of_time);
            switch(unit_of_time)
             {case 0:
               var min_without_underflow=min_nanoseconds_without_underf;break;
              case 1:
               var min_without_underflow=min_microseconds_without_under;break;
              case 2:
               var min_without_underflow=min_milliseconds_without_under;break;
              case 3:
               var min_without_underflow=min_seconds_without_underflow;break;
              case 4:
               var min_without_underflow=min_minutes_without_underflow;break;
              case 5:
               var min_without_underflow=min_hours_without_underflow;break;
              default:var min_without_underflow=min_days_without_underflow}
            if(caml_call2(symbol$101,neg_integer,min_without_underflow))
             invalid_string$2(string,cst_span_would_be_outside_of_i$1);
            var
             neg_integer_ns=caml_call2(symbol$105,neg_integer,scale),
             fraction_pos=decimal_pos + 1 | 0;
            if(end_pos <= fraction_pos)
             var neg_nanos_of_part=neg_integer_ns;
            else
             var
              decimal_ns=
               read_int63_decimal
                (string,
                 fraction_pos,
                 end_pos - fraction_pos | 0,
                 scale,
                 round_ties_before_negating,
                 1),
              neg_nanos_of_part=
               add_without_underflow
                (string,neg_integer_ns,caml_call1(symbol$107,decimal_ns));
            neg_ns[1]
            =
            add_without_underflow(string,neg_ns[1],neg_nanos_of_part);
            continue a}}
        var
         ns=
          is_negative
           ?neg_ns[1]
           :caml_call2(symbol$99,neg_ns[1],min_value$2)
             ?invalid_string$2(string,cst_span_would_be_outside_of_i$2)
             :caml_call1(symbol$107,neg_ns[1]);
        return ns}}
    function sexp_of_t$92(t){return [0,to_string$30(t)]}
    function t_of_sexp$82(sexp)
     {if(0 === sexp[0])
       {var x=sexp[1];
        try
         {var _a_$_=of_string$26(x);return _a_$_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          return caml_call2(_Oo_,caml_call1(Base_Exn[10],exn),sexp)}}
      return caml_call2(_Oo_,cst_Time_ns_Span_Stable_V2_t_o,sexp)}
    var
     t_sexp_grammar$33=caml_call1(Sexplib_Sexp_grammar[1],t_sexp_grammar$8),
     include$128=caml_call1(_hd_[1][2],[0,compare$79,sexp_of_t$92]),
     comparator$28=include$128[1],
     include$129=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$52,
         bin_write_t$52,
         bin_read_t$106,
         bin_read_t$107,
         bin_shape_t$104,
         bin_writer_t$92,
         bin_reader_t$92,
         bin_t$92,
         compare$79,
         t_of_sexp$82,
         sexp_of_t$92,
         comparator$28]),
     Map$27=include$129[1],
     Set$27=include$129[2],
     Alternate_sexp=[0,t_of_sexp$82,sexp_of_t$92,t_sexp_grammar$33],
     compare$80=include$68[8],
     include$130=_wZ_([0,compare$80,sexp_of_t$92,zero$4]),
     is_positive$8=include$130[1],
     is_non_negative$8=include$130[2],
     is_negative$8=include$130[3],
     is_non_positive$8=include$130[4],
     sign$8=include$130[5],
     validate_positive$8=include$130[9],
     validate_non_negative$8=include$130[10],
     validate_negative$8=include$130[11],
     validate_non_positive$8=include$130[12];
    function symbol$222(t,u)
     {var _a___=caml_call2(symbol$104,u,microsecond$1);
      return caml_call2(include$68[1],t,_a___)}
    function symbol$223(t,u)
     {var _a_9_=caml_call2(symbol$103,u,microsecond$1);
      return caml_call2(include$68[2],t,_a_9_)}
    function symbol$224(t,u)
     {var _a_8_=caml_call1(abs$4,caml_call2(symbol$104,t,u));
      return caml_call2(include$68[2],_a_8_,microsecond$1)}
    function symbol$225(t,u)
     {var _a_7_=caml_call2(symbol$103,u,microsecond$1);
      return caml_call2(include$68[4],t,_a_7_)}
    function symbol$226(t,u)
     {var _a_6_=caml_call2(symbol$104,u,microsecond$1);
      return caml_call2(include$68[5],t,_a_6_)}
    function symbol$227(t,u)
     {var _a_5_=caml_call1(abs$4,caml_call2(symbol$104,t,u));
      return caml_call2(include$68[4],_a_5_,microsecond$1)}
    function robustly_compare$4(t,u)
     {return symbol$226(t,u)?-1:symbol$225(t,u)?1:0}
    function to_string_hum$11(opt,_a_4_,_a_3_,unit_of_time,t)
     {if(opt)var sth=opt[1],delimiter=sth;else var delimiter=95;
      if(_a_4_)var sth$0=_a_4_[1],decimals=sth$0;else var decimals=3;
      if(_a_3_)
       var sth$1=_a_3_[1],align_decimal=sth$1;
      else
       var align_decimal=0;
      var match=caml_call2(_xD_,unit_of_time,to_unit_of_time$1(t));
      switch(match)
       {case 0:var suffix=suffix$7,float$0=to_ns$1(t);break;
        case 1:var suffix=suffix$8,float$0=to_us$1(t);break;
        case 2:var suffix=suffix$9,float$0=to_ms$1(t);break;
        case 3:var suffix=suffix$10,float$0=to_sec$0(t);break;
        case 4:var suffix=suffix$11,float$0=to_min$1(t);break;
        case 5:var suffix=suffix$12,float$0=to_hr$1(t);break;
        default:var float$1=to_day$1(t),suffix=suffix$13,float$0=float$1}
      var
       prefix=
        caml_call5
         (_Iw_,[0,delimiter],[0,decimals],[0,1 - align_decimal],0,float$0),
       switch$0=0;
      if(align_decimal && caml_ml_string_length(suffix) === 1)
       {var suffix$0=caml_call2(_Fp_,suffix,cst$165);switch$0 = 1}
      if(! switch$0)var suffix$0=suffix;
      return caml_call2(_Fp_,prefix,suffix$0)}
    function now$0(param){return caml_call1(Time_now[1],0)}
    function random$0(state,param)
     {var
       _a_2_=
        caml_call2
         (random,
          state,
          add$15(caml_call1(neg$2,min_value_for_1us_rounding),one$2));
      return diff$9
              (caml_call2
                (random,state,add$15(max_value_for_1us_rounding,one$2)),
               _a_2_)}
    function randomize$2(t,percent){return randomize(t,percent,scale$2)}
    function to_short_string$1(t)
     {var
       match=to_parts$3(t),
       ns=match[7],
       us=match[6],
       ms=match[5],
       sec=match[4],
       min=match[3],
       hr=match[2],
       sign=match[1];
      return short_string(sign,hr,min,sec,ms,us,ns)}
    var
     include$131=
      caml_call1(Base_Pretty_printer[2],[0,module_name$10,to_string$30]),
     _act_=include$131[1],
     _acu_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$195),0,bin_shape_t$103],0],
     _acv_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_span_ns_ml_738_4),
     group$112=caml_call2(Bin_prot_Shape[6],_acv_,_acu_),
     _acw_=caml_call1(Bin_prot_Shape[2][1],cst_t$196),
     bin_shape_t$105=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$112,_acw_),0),
     bin_writer_t$93=[0,bin_size_t$52,bin_write_t$52],
     bin_reader_t$93=[0,bin_read_t$106,bin_read_t$107],
     bin_t$93=[0,bin_shape_t$105,bin_writer_t$93,bin_reader_t$93],
     compare$81=include$68[8];
    function hash$51(x){return hash$49(x)}
    var
     include$132=
      Make_binable
       ([0,
         hash_fold_t$23,
         bin_size_t$52,
         bin_write_t$52,
         bin_read_t$106,
         bin_read_t$107,
         bin_shape_t$105,
         bin_writer_t$93,
         bin_reader_t$93,
         bin_t$93,
         t_of_sexp$82,
         compare$81,
         sexp_of_t$92,
         hash$51]),
     hash_fold_t$40=include$132[1],
     _acx_=include$132[2],
     _acy_=include$132[3],
     _acz_=include$132[4],
     _acA_=include$132[5],
     _acB_=include$132[6],
     _acC_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$197),0,bin_shape_t$103],0],
     _acD_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_span_ns_ml_744_4),
     group$113=caml_call2(Bin_prot_Shape[6],_acD_,_acC_),
     _acE_=caml_call1(Bin_prot_Shape[2][1],cst_t$198),
     bin_shape_t$106=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$113,_acE_),0),
     bin_writer_t$94=[0,bin_size_t$52,bin_write_t$52],
     bin_reader_t$94=[0,bin_read_t$106,bin_read_t$107],
     bin_t$94=[0,bin_shape_t$106,bin_writer_t$94,bin_reader_t$94],
     _acF_=
      _w6_
       ([0,
         bin_size_t$52,
         bin_write_t$52,
         bin_read_t$106,
         bin_read_t$107,
         bin_shape_t$106,
         bin_writer_t$94,
         bin_reader_t$94,
         bin_t$94,
         t_of_sexp$82,
         sexp_of_t$92,
         comparator$28]),
     _acG_=_acF_[11],
     _acH_=_acF_[12],
     _acI_=_acF_[13],
     _acJ_=_acF_[14],
     _acK_=_acF_[15],
     _acL_=_acF_[16],
     _acM_=_acF_[17],
     _acN_=_acF_[18],
     _acO_=_acF_[20],
     _acP_=_acF_[21],
     _acQ_=_acF_[22],
     symbol$228=include$68[1],
     symbol$229=include$68[2],
     symbol$230=include$68[3],
     symbol$231=include$68[4],
     symbol$232=include$68[5],
     symbol$233=include$68[6],
     equal$41=include$68[7],
     compare$82=include$68[8],
     min$21=include$68[9],
     max$21=include$68[10];
    function to_span_float_round_nearest(t)
     {return to_span_since_epoch$0(to_sec$0(t))}
    function of_span_float_round_nearest(s){return of_sec$0(s)}
    var half_microsecond=caml_call1(of_int$2,500);
    function to_span(t)
     {var switch$0=0;
      if
       (!
        caml_call2(symbol$232,t,min_value_for_1us_rounding)
        &&
        !
        caml_call2(symbol$231,t,max_value_for_1us_rounding))
       {var _a_1_=t;switch$0 = 1}
      if(! switch$0)
       var
        _a_Y_=
         [0,[1,[0,_acR_,[0,sexp_of_t$92(max_value_for_1us_rounding),0]]],0],
        _a_Z_=
         [0,
          [1,[0,_acS_,[0,sexp_of_t$92(min_value_for_1us_rounding),0]]],
          _a_Y_],
        _a_0_=[0,[1,[0,_acT_,[0,sexp_of_t$92(t),0]]],_a_Z_],
        _a_1_=
         caml_call1
          (_nX_,
           [1,
            [0,
             caml_call1(Sexplib0_Sexp_conv[7],cst_Span_t_exceeds_limits),
             _a_0_]]);
      var _a_X_=caml_call1(of_int$2,1000);
      return of_us
              (caml_call1
                (to_float$3,
                 caml_call2
                  (symbol$108,
                   caml_call2(symbol$103,_a_1_,half_microsecond),
                   _a_X_)))}
    var
     min_span_float_value_for_1us_r=
      to_span_float_round_nearest(min_value_for_1us_rounding),
     max_span_float_value_for_1us_r=
      to_span_float_round_nearest(max_value_for_1us_rounding);
    function of_span(s)
     {var
       _a_V_=caml_call2(symbol$36,s,max_span_float_value_for_1us_r),
       _a_W_=_a_V_ || caml_call2(symbol$37,s,min_span_float_value_for_1us_r);
      if(_a_W_)
       failwiths(0,_acU_,cst_Time_ns_Span_does_not_supp,s,sexp_of_t$85);
      return of_sec_with_microsecond_precis(s)}
    var Private$3=[0,of_parts,to_parts$3],Option$1=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$391);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Span_ns$0);
    var
     _acV_=
      [0,
       V1$16,
       Option$0,
       [0,
        hash_fold_t$23,
        hash$50,
        equal$40,
        bin_size_t$52,
        bin_write_t$52,
        bin_read_t$106,
        bin_read_t$107,
        bin_shape_t$104,
        bin_writer_t$92,
        bin_reader_t$92,
        bin_t$92,
        compare$79,
        t_of_sexp$82,
        sexp_of_t$92,
        comparator$28,
        to_int63,
        of_int63_exn,
        Map$27,
        Set$27,
        of_string$26,
        to_string$30]],
     Core_Span_ns=
      [0,
       bin_size_t$52,
       bin_write_t$52,
       bin_read_t$106,
       bin_read_t$107,
       bin_shape_t$103,
       bin_writer_t$91,
       bin_reader_t$91,
       bin_t$91,
       t_of_sexp$82,
       sexp_of_t$92,
       t_sexp_grammar$33,
       typerep_of_t$29,
       typename_of_t$29,
       Parts$0,
       symbol$228,
       symbol$229,
       symbol$230,
       symbol$231,
       symbol$232,
       symbol$233,
       equal$41,
       compare$82,
       min$21,
       max$21,
       _acG_,
       _acH_,
       _acI_,
       _acJ_,
       _acK_,
       include$68,
       _acO_,
       _acP_,
       _acQ_,
       is_positive$8,
       is_non_negative$8,
       is_negative$8,
       is_non_positive$8,
       sign$8,
       _acL_,
       _acM_,
       _acN_,
       validate_positive$8,
       validate_non_negative$8,
       validate_negative$8,
       validate_non_positive$8,
       hash_fold_t$40,
       _acx_,
       _acy_,
       _acz_,
       _acA_,
       _acB_,
       _act_,
       symbol$222,
       symbol$223,
       symbol$224,
       symbol$225,
       symbol$226,
       symbol$227,
       robustly_compare$4,
       quickcheck_generator$11,
       quickcheck_observer$9,
       quickcheck_shrinker$9,
       _Kq_,
       _Kr_,
       to_string$30,
       of_string$26,
       nanosecond$1,
       microsecond$1,
       millisecond$1,
       second$2,
       minute$1,
       hour$2,
       ns_per_day,
       microsecond$1,
       zero$4,
       create$27,
       to_parts$3,
       of_ns$1,
       of_us$1,
       of_ms$1,
       of_sec$0,
       of_int_sec$1,
       of_int32_seconds$1,
       of_int63_seconds$2,
       of_min$1,
       of_hr$1,
       of_day$1,
       to_ns$1,
       to_us$1,
       to_ms$1,
       to_sec$0,
       to_min$1,
       to_hr$1,
       to_day$1,
       to_int63_seconds_round_down_ex$2,
       to_proportional_float$0,
       add$15,
       diff$9,
       abs$4,
       neg$2,
       scale$2,
       symbol$221,
       symbol$111,
       next$6,
       prev$7,
       to_short_string$1,
       to_unit_of_time$1,
       of_unit_of_time$1,
       to_string_hum$11,
       randomize$2,
       of_sec_with_microsecond_precis,
       of_int_us,
       of_int_ms,
       to_int_us,
       to_int_ms,
       to_int_sec,
       min_value$2,
       max_value$2,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       scale_int,
       scale_int63,
       symbol$108,
       to_int63_ns,
       of_int63_ns,
       to_int_ns,
       of_int_ns,
       now$0,
       random$0,
       to_span,
       of_span,
       to_span_float_round_nearest,
       to_span,
       of_span_float_round_nearest,
       of_span,
       Alternate_sexp,
       -611642104,
       Option$1,
       Private$3,
       _acV_];
    caml_register_global(5406,Core_Span_ns,"Core__Span_ns");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Ofday_ns);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$392);
    caml_call1(Expect_test_collector[5][1],cst_core_src_ofday_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$393,cst$166);
    var
     _acW_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$199),0,bin_shape_t$103],0],
     _acX_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_ofday_ns_ml_6_0),
     group$114=caml_call2(Bin_prot_Shape[6],_acX_,_acW_),
     _acY_=caml_call1(Bin_prot_Shape[2][1],cst_t$200),
     bin_shape_t$107=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$114,_acY_),0),
     Typename_of_t$28=caml_call1(Typerep_lib_Make_typename[1],[0,name$62]),
     typename_of_t$30=Typename_of_t$28[2],
     name_of_t$20=Typename_of_t$28[1],
     typerep_of_t$30=[9,[0,name_of_t$20,[0,typerep_of_t$29]]],
     arg_type=-611642104;
    function to_parts$4(t){return to_parts$3(t)}
    var approximate_end_of_day$1=diff$9(ns_per_day,nanosecond$1);
    function to_span_since_start_of_day$1(t){return t}
    function is_invalid(span)
     {var _a_U_=caml_call2(symbol$232,span,zero$4);
      return _a_U_?_a_U_:caml_call2(symbol$231,span,ns_per_day)}
    function span_since_start_of_day_is_val$1(span)
     {return 1 - is_invalid(span)}
    function of_span_since_start_of_day_unc$1(span){return span}
    function of_span_since_start_of_day$1(span)
     {if(is_invalid(span))
       {var _a_T_=[0,sexp_of_t$92(span),0];
        return caml_call1
                (_a5_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Time_ns_Ofday_of_span_sinc),
                   _a_T_]])}
      return span}
    function of_span_since_start_of_day_opt(span)
     {return is_invalid(span)?0:[0,span]}
    function add_exn$5(t,span)
     {return of_span_since_start_of_day$1(add$15(t,span))}
    function sub_exn(t,span)
     {return of_span_since_start_of_day$1(diff$9(t,span))}
    function add$16(t,span)
     {return of_span_since_start_of_day_opt(add$15(t,span))}
    function sub$6(t,span)
     {return of_span_since_start_of_day_opt(diff$9(t,span))}
    function next$7(t){return of_span_since_start_of_day_opt(next$6(t))}
    function prev$8(t){return of_span_since_start_of_day_opt(prev$7(t))}
    function diff$10(t,u){return diff$9(t,u)}
    function create$28(hr,min,sec,ms,us,ns,param)
     {var switch$0=0;
      if(sec && 60 === sec[1])
       {var ns$0=_acZ_,us$0=_ac0_,ms$0=_ac1_;switch$0 = 1}
      if(! switch$0)var ns$0=ns,us$0=us,ms$0=ms;
      return of_span_since_start_of_day$1
              (create$27(0,0,hr,min,sec,ms$0,us$0,ns$0,0))}
    var
     Option$2=[0],
     Zoned$1=[0],
     comparator$29=_acV_[3][15],
     _ac2_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$201),0,bin_shape_t$107],0],
     _ac3_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_ofday_ns_ml_73_4),
     group$115=caml_call2(Bin_prot_Shape[6],_ac3_,_ac2_),
     _ac4_=caml_call1(Bin_prot_Shape[2][1],cst_t$202),
     bin_shape_t$108=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$115,_ac4_),0),
     bin_writer_t$95=[0,bin_size_t$52,bin_write_t$52],
     bin_reader_t$95=[0,bin_read_t$106,bin_read_t$107],
     bin_t$95=[0,bin_shape_t$108,bin_writer_t$95,bin_reader_t$95];
    function to_string_with_unit(ns,unit)
     {if
       (!
        caml_call2(symbol$232,ns,zero$4)
        &&
        !
        caml_call2(symbol$232,ns_per_day,ns))
       {var
         sixty=caml_call1(of_int$2,60),
         thousand=caml_call1(of_int$2,1000),
         us=caml_call2(symbol$110,ns,thousand),
         ns$0=caml_call1(to_int_exn$2,caml_call2(rem$2,ns,thousand)),
         ms=caml_call2(symbol$110,us,thousand),
         us$0=caml_call1(to_int_exn$2,caml_call2(rem$2,us,thousand)),
         s=caml_call2(symbol$110,ms,thousand),
         ms$0=caml_call1(to_int_exn$2,caml_call2(rem$2,ms,thousand)),
         m=caml_call2(symbol$110,s,sixty),
         s$0=caml_call1(to_int_exn$2,caml_call2(rem$2,s,sixty)),
         h=caml_call1(to_int_exn$2,caml_call2(symbol$110,m,sixty)),
         m$0=caml_call1(to_int_exn$2,caml_call2(rem$2,m,sixty)),
         unit$0=
          65840584 <= unit
           ?unit
           :0 === ns$0
             ?0 === us$0
               ?0 === ms$0?0 === s$0?127686388:417088404:858219297
               :425338712
             :65840584,
         len=
          127686388 === unit$0
           ?5
           :425338712 <= unit$0
             ?858219297 <= unit$0?12:15
             :417088404 <= unit$0?8:18,
         str=caml_call1(_Dw_,len);
        write_2_digit_int$0(str,0,h);
        caml_call3(_DE_,str,2,58);
        write_2_digit_int$0(str,3,m$0);
        if(127686388 !== unit$0)
         {caml_call3(_DE_,str,5,58);
          write_2_digit_int$0(str,6,s$0);
          if(417088404 !== unit$0)
           {caml_call3(_DE_,str,8,46);
            write_3_digit_int$0(str,9,ms$0);
            if(! (858219297 <= unit$0))
             {write_3_digit_int$0(str,12,us$0);
              if(! (425338712 <= unit$0))write_3_digit_int$0(str,15,ns$0)}}}
        return caml_call1(_DO_,str)}
      return cst_Incorrect_day}
    function create_from_parsed$0(string,hr,min,sec,subsec_pos,subsec_len)
     {if(caml_call2(equal$24,subsec_len,0))
       var nanoseconds=0;
      else
       {var
         until=subsec_pos + subsec_len | 0,
         pos$0=subsec_pos + 1 | 0,
         digits=[0,0],
         num_digits=[0,0],
         pos=[0,pos$0];
        for(;;)
         {if(pos[1] < until && ! (10 <= num_digits[1]))
           {var c=caml_string_get(string,pos[1]);
            if(caml_call1(_Ep_,c))
             {num_digits[1]++;
              if(10 <= num_digits[1])
               {if(5 <= caml_call1(_Eh_,c))digits[1]++}
              else
               {var _a_P_=caml_call1(_Eh_,c);
                digits[1] = (digits[1] * 10 | 0) + _a_P_ | 0}}
            pos[1]++;
            continue}
          if(num_digits[1] < 9)
           {var _a_O_=caml_call2(pow,10,9 - num_digits[1] | 0);
            digits[1] = caml_mul(digits[1],_a_O_)}
          var nanoseconds=digits[1];
          break}}
      var
       _a_Q_=caml_call1(of_int$2,nanoseconds),
       _a_R_=add$15(scale_int(second$2,sec),_a_Q_),
       _a_S_=add$15(scale_int(minute$1,min),_a_R_);
      return of_span_since_start_of_day$1(add$15(scale_int(hour$2,hr),_a_S_))}
    function of_string$27(string){return parse$0(string,create_from_parsed$0)}
    function t_of_sexp$83(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _a_N_=of_string$27(s);return _a_N_}
        catch(exn)
         {exn = caml_wrap_exception(exn);return caml_call2(_eg_,exn,sexp)}}
      return caml_call2(_ef_,cst_expected_an_atom,sexp)}
    function to_string$31(t){return to_string_with_unit(t,65840584)}
    function sexp_of_t$93(t){return [0,to_string$31(t)]}
    function to_int63$0(t){return caml_call1(_acV_[3][16],t)}
    function of_int63_exn$0(t)
     {return of_span_since_start_of_day$1(caml_call1(_acV_[3][17],t))}
    var
     _ac5_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$203),0,bin_shape_t$108],0],
     _ac6_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_ofday_ns_ml_205_4),
     group$116=caml_call2(Bin_prot_Shape[6],_ac6_,_ac5_),
     _ac7_=caml_call1(Bin_prot_Shape[2][1],cst_t$204),
     bin_shape_t$109=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$116,_ac7_),0),
     bin_writer_t$96=[0,bin_size_t$52,bin_write_t$52],
     bin_reader_t$96=[0,bin_read_t$106,bin_read_t$107],
     bin_t$96=[0,bin_shape_t$109,bin_writer_t$96,bin_reader_t$96],
     include$133=
      _AU_
       ([0,
         bin_size_t$52,
         bin_write_t$52,
         bin_read_t$106,
         bin_read_t$107,
         bin_shape_t$109,
         bin_writer_t$96,
         bin_reader_t$96,
         bin_t$96,
         compare$82,
         hash_fold_t$40,
         _acx_,
         t_of_sexp$83,
         sexp_of_t$93,
         comparator$29,
         of_string$27,
         to_string$31,
         module_name$11]),
     _ac8_=include$133[1],
     _ac9_=include$133[2],
     _ac__=include$133[3],
     _ac$_=include$133[4],
     _ada_=include$133[5],
     _adb_=include$133[6],
     _adc_=include$133[7],
     _add_=include$133[8],
     _ade_=include$133[9],
     _adf_=include$133[10],
     _adg_=include$133[11],
     _adh_=include$133[12],
     _adi_=include$133[13],
     _adj_=include$133[24],
     _adk_=include$133[25],
     _adl_=include$133[26],
     _adm_=include$133[27],
     _adn_=include$133[28],
     _ado_=include$133[29],
     _adp_=include$133[30],
     _adq_=include$133[31],
     _adr_=include$133[32],
     _ads_=include$133[33],
     _adt_=include$133[34],
     _adu_=include$133[35],
     _adv_=include$133[36],
     _adw_=include$133[37],
     _adx_=include$133[38],
     _ady_=include$133[39],
     _adz_=include$133[40],
     _adA_=include$133[41],
     t_sexp_grammar$34=caml_call1(Sexplib_Sexp_grammar[1],t_sexp_grammar$8);
    function to_microsecond_string(t){return to_string_with_unit(t,425338712)}
    function to_millisec_string$1(t){return to_string_with_unit(t,858219297)}
    function to_sec_string$2(t){return to_string_with_unit(t,417088404)}
    function to_string_trimmed$2(t){return to_string_with_unit(t,-68054102)}
    function of_string_iso8601_extended$1(pos,len,str)
     {try
       {var _a_M_=parse_iso8601_extended(pos,len,str,create_from_parsed$0);
        return _a_M_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        var
         _a_K_=[0,caml_call1(sexp_of_t,exn),0],
         _a_L_=[0,caml_call1(_at_,caml_call3(_AZ_,pos,len,str)),_a_K_];
        return caml_call1
                (_a5_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Time_ns_Ofday_of_string_is),
                   _a_L_]])}}
    function every(span,start$1,stop)
     {if(caml_call2(symbol$231,start$1,stop))
       {var
         _a_H_=[0,[1,[0,_adB_,[0,caml_call1(_adf_,stop),0]]],0],
         _a_I_=[0,[1,[0,_adC_,[0,caml_call1(_adf_,start$1),0]]],_a_H_];
        return caml_call1
                (_oC_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Time_ns_Ofday_every_called),
                   _a_I_]])}
      if(caml_call2(symbol$229,span,zero$4))
       {var _a_J_=[0,sexp_of_t$92(span),0];
        return caml_call1
                (_oC_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Time_ns_Ofday_every_called$0),
                   _a_J_]])}
      if(is_invalid(span))return [0,[0,start$1,0]];
      var start=start$1,acc=0;
      for(;;)
       {var acc$0=[0,start,acc],start$0=add$15(start,span);
        if(caml_call2(symbol$231,start$0,stop))
         return [0,caml_call1(parts,acc$0)];
        var start=start$0,acc=acc$0;
        continue}}
    function small_diff$1(ofday1,ofday2)
     {var
       diff=caml_call2(Base_Int63[94][2],ofday1,ofday2),
       d1=caml_call2(rem$2,diff,hour$2),
       d2=caml_call2(rem$2,caml_call2(Base_Int63[94][1],d1,hour$2),hour$2),
       _a_F_=caml_call1(of_int$2,2),
       _a_G_=caml_call2(Base_Int63[94][4],hour$2,_a_F_),
       d=
        caml_call2(Base_Int63[94][10],d2,_a_G_)
         ?caml_call2(Base_Int63[94][2],d2,hour$2)
         :d2;
      return d}
    var
     Expect_test_collector$2=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _adD_(param)
     {function test(x,y)
       {var
         diff=small_diff$1(x,y),
         _a_D_=to_string$30(diff),
         _a_E_=caml_call1(_adh_,y);
        return caml_call4(_a__,_adE_,caml_call1(_adh_,x),_a_E_,_a_D_)}
      var
       examples=
        caml_call2
         (_qF_,
          _adF_,
          function(param)
           {var y=param[2],x=param[1],_a_C_=caml_call1(_adg_,y);
            return [0,caml_call1(_adg_,x),_a_C_]});
      caml_call2
       (_pH_,
        examples,
        function(param){var y=param[2],x=param[1];test(x,y);return test(y,x)});
      var
       _a_B_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_core_src_ofday_ns_ml$0),
         294,
         10026,
         10030,
         10036];
      return caml_call1(Expect_test_collector$2[1],_a_B_)}
    var
     _adG_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_ofday_ns_ml$1),
       295,
       10037,
       10041,
       10515],
     _adJ_=
      [0,
       [0,
        _adI_,
        _adH_,
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_core_src_ofday_ns_ml$2),
         294,
         10026,
         10030,
         10036],
        _adG_],
       0],
     _adL_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_ofday_ns_ml$4),
       281,
       9618,
       9618,
       10516],
     _adM_=
      caml_call1(Expect_test_common_File[4][3],cst_134496998b70c29fb10f794853);
    caml_call9
     (Expect_test_collector$2[3],
      _adM_,
      _adL_,
      cst_core_src_ofday_ns_ml$3,
      _adK_,
      0,
      _adJ_,
      0,
      Inline_test_config,
      _adD_);
    var
     quickcheck_generator$24=caml_call2(_Kq_,zero$4,ns_per_day),
     quickcheck_shrinker$22=caml_call1(_pB_[3],0),
     Option$3=[0],
     Zoned$2=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$394);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Ofday_ns$0);
    var
     _adN_=
      [0,
       [0,
        bin_size_t$52,
        bin_write_t$52,
        bin_read_t$106,
        bin_read_t$107,
        bin_shape_t$108,
        bin_writer_t$95,
        bin_reader_t$95,
        bin_t$95,
        compare$82,
        t_of_sexp$83,
        sexp_of_t$93,
        comparator$29,
        to_int63$0,
        of_int63_exn$0],
       Option$2,
       Zoned$1],
     Core_Ofday_ns=
      [0,
       _ac8_,
       _ac9_,
       _ac__,
       _ac$_,
       _ada_,
       _adb_,
       _adc_,
       _add_,
       _ade_,
       _adf_,
       t_sexp_grammar$34,
       typerep_of_t$30,
       typename_of_t$30,
       symbol$228,
       symbol$229,
       symbol$230,
       symbol$231,
       symbol$232,
       symbol$233,
       equal$41,
       compare$82,
       min$21,
       max$21,
       _adj_,
       _adk_,
       _adl_,
       _adm_,
       _adn_,
       _ado_,
       _adp_,
       _adq_,
       _adr_,
       _ads_,
       _adt_,
       _adu_,
       _adv_,
       _adw_,
       _adx_,
       _ady_,
       _adz_,
       _adA_,
       _adi_,
       symbol$222,
       symbol$223,
       symbol$224,
       symbol$225,
       symbol$226,
       symbol$227,
       robustly_compare$4,
       quickcheck_generator$24,
       quickcheck_observer$9,
       quickcheck_shrinker$22,
       _Kq_,
       _Kr_,
       _adg_,
       _adh_,
       create$28,
       to_parts$4,
       zero$4,
       ns_per_day,
       to_span_since_start_of_day$1,
       of_span_since_start_of_day$1,
       of_span_since_start_of_day$1,
       span_since_start_of_day_is_val$1,
       of_span_since_start_of_day_unc$1,
       add$16,
       sub$6,
       next$7,
       prev$8,
       diff$10,
       small_diff$1,
       to_string_trimmed$2,
       to_sec_string$2,
       of_string_iso8601_extended$1,
       to_millisec_string$1,
       to_millisec_string$1,
       approximate_end_of_day$1,
       add_exn$5,
       sub_exn,
       every,
       to_microsecond_string,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       Option$3,
       Zoned$2,
       _adN_];
    caml_register_global(5407,Core_Ofday_ns,"Core__Ofday_ns");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Time_ns);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$395);
    caml_call1(Expect_test_collector[5][1],cst_core_src_time_ns_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$396,cst$167);
    var
     arch_sixtyfour$0=caml_call2(_Nq_,include$15[9],64),
     _adO_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$205),0,bin_shape_t$103],0],
     _adP_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_time_ns_ml_9_0),
     group$117=caml_call2(Bin_prot_Shape[6],_adP_,_adO_),
     _adQ_=caml_call1(Bin_prot_Shape[2][1],cst_t$206),
     bin_shape_t$110=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$117,_adQ_),0),
     bin_writer_t$97=[0,bin_size_t$52,bin_write_t$52],
     bin_reader_t$97=[0,bin_read_t$106,bin_read_t$107],
     bin_t$97=[0,bin_shape_t$110,bin_writer_t$97,bin_reader_t$97],
     arg_type$0=-611642104,
     now$1=-611642104,
     of_ofday_float_round_nearest=-611642104,
     of_ofday_float_round_nearest_m=-611642104,
     to_ofday_float_round_nearest=-611642104,
     to_ofday_float_round_nearest_m=-611642104;
    function hash$52(x){return caml_call1(_acx_,x)}
    var
     Typename_of_t$29=caml_call1(Typerep_lib_Make_typename[1],[0,name$63]),
     typename_of_t$31=Typename_of_t$29[2],
     name_of_t$21=Typename_of_t$29[1],
     typerep_of_t$31=[9,[0,name_of_t$21,[0,typerep_of_t$29]]],
     _adR_=include$68[1],
     _adS_=include$68[2],
     _adT_=include$68[3],
     _adU_=include$68[4],
     _adV_=include$68[5],
     _adX_=include$68[8],
     _adW_=include$68[6];
    function abs_diff$0(t,u){return caml_call1(abs$4,diff$9(t,u))}
    function to_span_since_epoch$1(t){return t}
    function of_span_since_epoch$1(s){return s}
    function to_int63_ns_since_epoch(t){return t}
    function of_int63_ns_since_epoch(i){return i}
    function overflow(param)
     {return caml_call1
              (_nX_,caml_call1(Sexplib0_Sexp_conv[7],cst_Time_ns_overflow))}
    function is_earlier$0(t1,t2){return caml_call2(_adV_,t1,t2)}
    function is_later$0(t1,t2){return caml_call2(_adU_,t1,t2)}
    function add_overflowed(x,y,sum)
     {return caml_call2(symbol$231,y,zero$4)
              ?caml_call2(symbol$232,sum,x)
              :caml_call2(symbol$231,sum,x)}
    function sub_overflowed(x,y,diff)
     {return caml_call2(symbol$231,y,zero$4)
              ?caml_call2(symbol$231,diff,x)
              :caml_call2(symbol$232,diff,x)}
    function add_saturating(x,y)
     {var sum=add$15(x,y);
      return add_overflowed(x,y,sum)
              ?caml_call2(symbol$231,y,zero$4)?max_value$2:min_value$2
              :sum}
    function sub_saturating(x,y)
     {var diff=diff$9(x,y);
      return sub_overflowed(x,y,diff)
              ?caml_call2(symbol$231,y,zero$4)?min_value$2:max_value$2
              :diff}
    var
     _adY_=
      arch_sixtyfour$0
       ?function(t){return caml_call1(to_int_exn$2,t)}
       :function(param)
         {return caml_call1(_Fb_,cst_Time_ns_to_int_ns_since_ep)};
    function of_int_ns_since_epoch(i){return caml_call1(of_int$2,i)}
    function to_time_float_round_nearest(t)
     {return to_span_float_round_nearest(t)}
    function to_time_float_round_nearest_mi(t){return to_span(t)}
    var
     min_time_value_for_1us_roundin=
      to_time_float_round_nearest(min_value_for_1us_rounding),
     max_time_value_for_1us_roundin=
      to_time_float_round_nearest(max_value_for_1us_rounding);
    function of_time_float_round_nearest(time)
     {return of_span_float_round_nearest(to_span_since_epoch$0(time))}
    function of_time_float_round_nearest_mi(time)
     {var
       _a_z_=caml_call2(symbol$37,time,min_time_value_for_1us_roundin),
       _a_A_=
        _a_z_
        ||
        caml_call2(symbol$36,time,max_time_value_for_1us_roundin);
      if(_a_A_)
       failwiths(0,_adZ_,cst_Time_ns_does_not_support_t,time,_ab8_[4][2][14]);
      return of_span(to_span_since_epoch$0(time))}
    function next_multiple_internal$0(can_equal_after,base,after,interval)
     {if(caml_call2(symbol$229,interval,zero$4))
       failwiths(0,_ad0_,cst_Time_ns_next_multiple_got_,interval,sexp_of_t$92);
      var base_to_after=diff$9(after,base);
      if(caml_call2(symbol$232,base_to_after,zero$4))return base;
      var
       next=
        add$15
         (base,
          scale_int63(interval,caml_call2(symbol$108,base_to_after,interval)));
      if(! caml_call2(_adU_,next,after))
       {var switch$0=0;
        if(! can_equal_after || ! caml_call2(_adT_,next,after))switch$0 = 1;
        if(switch$0)return add$15(next,interval)}
      return next}
    function next_multiple$0(opt,base,after,interval,param)
     {if(opt)var sth=opt[1],can_equal_after=sth;else var can_equal_after=0;
      return next_multiple_internal$0(can_equal_after,base,after,interval)}
    function prev_multiple$0(opt,base,before,interval,param)
     {if(opt)var sth=opt[1],can_equal_before=sth;else var can_equal_before=0;
      return next_multiple_internal$0
              (1 - can_equal_before,base,diff$9(before,interval),interval)}
    function random$1(state,param){return random$0(state,0)}
    function to_date_and_span_since_start_o(ns_since_epoch)
     {function symbol(i){return caml_call1(of_int_exn$2,i)}
      var
       _a_s_=symbol(1000000000),
       _a_t_=symbol(86400),
       ns_per_day=caml_call2(Base_Int63[94][3],_a_t_,_a_s_),
       approx_days_from_epoch=
        caml_call2(Base_Int63[94][4],ns_since_epoch,ns_per_day),
       _a_u_=symbol(0),
       switch$0=0;
      if(caml_call2(Base_Int63[94][11],ns_since_epoch,_a_u_))
       {var
         _a_v_=
          caml_call2(Base_Int63[94][3],approx_days_from_epoch,ns_per_day);
        if(caml_call2(Base_Int63[94][12],_a_v_,ns_since_epoch))
         {var
           _a_w_=symbol(1),
           days_from_epoch=
            caml_call2(Base_Int63[94][2],approx_days_from_epoch,_a_w_);
          switch$0 = 1}}
      if(! switch$0)var days_from_epoch=approx_days_from_epoch;
      var
       _a_x_=caml_call2(Base_Int63[94][3],ns_per_day,days_from_epoch),
       span_since_start_of_day=
        caml_call2(Base_Int63[94][2],ns_since_epoch,_a_x_),
       _a_r_=caml_call1(to_int_exn$2,days_from_epoch),
       _a_y_=caml_call2(Days[4],Days[5],_a_r_),
       date=caml_call1(Days[2],_a_y_);
      return [0,date,span_since_start_of_day]}
    function of_date_and_span_since_start_o(date,span_since_start_of_day)
     {if
       (caml_call2(symbol$228,span_since_start_of_day,zero$4)
        &&
        caml_call2(symbol$232,span_since_start_of_day,ns_per_day))
       {var
         _a_p_=Days[5],
         _a_q_=caml_call1(Days[1],date),
         days_from_epoch=caml_call2(Days[3],_a_q_,_a_p_),
         span_in_days_since_epoch=scale_int(ns_per_day,days_from_epoch),
         span_since_epoch=
          add$15(span_in_days_since_epoch,span_since_start_of_day);
        return span_since_epoch}
      throw [0,Assert_failure,_ad1_]}
    var Utc=[0,to_date_and_span_since_start_o,of_date_and_span_since_start_o];
    function hash$53(x){return hash$52(x)}
    function two_digit_of_string(string)
     {if(2 === caml_ml_string_length(string) && caml_call2(_A7_,string,_Ep_))
       return caml_call1(of_string$5,string);
      throw [0,Assert_failure,_ad3_]}
    var
     ns_of_100_ms=100000000,
     ns_of_10_ms=10000000,
     ns_of_1_ms=1000000,
     ns_of_100_us=100000,
     ns_of_10_us=10000,
     ns_of_1_us=1000,
     ns_of_100_ns=100,
     ns_of_10_ns=10,
     ns_of_1_ns=1;
    function to_string$32(t)
     {var
       match=caml_call1(Utc[1],t),
       span_since_start_of_day=match[2],
       date=match[1];
      if
       (caml_call2(symbol$228,span_since_start_of_day,zero$4)
        &&
        caml_call2(symbol$232,span_since_start_of_day,ns_per_day))
       {var
         seconds_span=of_int_sec$1(to_int_sec(span_since_start_of_day)),
         sub_second_span=diff$9(span_since_start_of_day,seconds_span),
         ns=caml_call1(to_int_exn$2,sub_second_span),
         _a_n_=
          0 === ns
           ?cst$168
           :0 === caml_call2(O$0[5],ns,ns_of_100_ms)
             ?caml_call2(_fx_,_ad5_,ns / 100000000 | 0)
             :0 === caml_call2(O$0[5],ns,ns_of_10_ms)
               ?caml_call2(_fx_,_ad6_,ns / 10000000 | 0)
               :0 === caml_call2(O$0[5],ns,ns_of_1_ms)
                 ?caml_call2(_fx_,_ad7_,ns / 1000000 | 0)
                 :0 === caml_call2(O$0[5],ns,ns_of_100_us)
                   ?caml_call2(_fx_,_ad8_,ns / 100000 | 0)
                   :0 === caml_call2(O$0[5],ns,ns_of_10_us)
                     ?caml_call2(_fx_,_ad9_,ns / 10000 | 0)
                     :0 === caml_call2(O$0[5],ns,ns_of_1_us)
                       ?caml_call2(_fx_,_ad__,ns / 1000 | 0)
                       :0 === caml_call2(O$0[5],ns,ns_of_100_ns)
                         ?caml_call2(_fx_,_ad$_,ns / 100 | 0)
                         :0 === caml_call2(O$0[5],ns,ns_of_10_ns)
                           ?caml_call2(_fx_,_aea_,ns / 10 | 0)
                           :caml_call2(_fx_,_aeb_,ns),
         seconds=to_int_sec(seconds_span),
         h=seconds / 3600 | 0,
         m=caml_call2(O$0[5],seconds / 60 | 0,60),
         s=caml_call2(O$0[5],seconds,60),
         _a_o_=
          caml_call2
           (_Fp_,
            cst$170,
            caml_call2
             (_Fp_,
              caml_call2(_Fp_,caml_call4(_fx_,_ad2_,h,m,s),_a_n_),
              cst_Z$0));
        return caml_call2(_Fp_,to_string$22(date),_a_o_)}
      throw [0,Assert_failure,_aee_]}
    function of_string$28(string$0)
     {var
       match$1=caml_call2(_BR_,string$0,32),
       ofday_string_with_zone=match$1[2],
       date_string=match$1[1],
       string$1=caml_call2(_B$_,ofday_string_with_zone,cst_Z$1),
       date=of_string$19(date_string),
       len=caml_ml_string_length(string$1),
       suffix_len=len - 8 | 0,
       seconds_string=caml_call3(_AY_,string$1,0,8),
       string=caml_call3(_AY_,string$1,8,suffix_len),
       match=caml_call2(_BV_,seconds_string,58);
      if(match)
       {var _a_l_=match[2];
        if(_a_l_)
         {var _a_m_=_a_l_[2];
          if(_a_m_ && ! _a_m_[2])
           {var
             s_string=_a_m_[1],
             m_string=_a_l_[1],
             h_string=match[1],
             h=two_digit_of_string(h_string),
             m=two_digit_of_string(m_string),
             s=two_digit_of_string(s_string),
             seconds_span=
              of_int_sec$1((((h * 60 | 0) + m | 0) * 60 | 0) + s | 0);
            if(caml_call1(_A1_,string))
             var sub_second_span=zero$4;
            else
             {var digits=caml_call2(_Ca_,string,cst$169);
              if(! caml_call2(_A7_,digits,_Ep_))
               throw [0,Assert_failure,_aed_];
              var
               match$0=caml_ml_string_length(digits),
               switcher=match$0 - 1 | 0;
              if(8 < switcher >>> 0)throw [0,Assert_failure,_aec_];
              switch(switcher)
               {case 0:var multiplier=ns_of_100_ms;break;
                case 1:var multiplier=ns_of_10_ms;break;
                case 2:var multiplier=ns_of_1_ms;break;
                case 3:var multiplier=ns_of_100_us;break;
                case 4:var multiplier=ns_of_10_us;break;
                case 5:var multiplier=ns_of_1_us;break;
                case 6:var multiplier=ns_of_100_ns;break;
                case 7:var multiplier=ns_of_10_ns;break;
                default:var multiplier=ns_of_1_ns}
              var
               sub_second_span=
                caml_call1
                 (of_int$2,
                  caml_mul(caml_call1(of_string$5,digits),multiplier))}
            var ofday=add$15(seconds_span,sub_second_span);
            return caml_call2(Utc[2],date,ofday)}}}
      throw [0,Assert_failure,_ad4_]}
    var
     t_sexp_grammar$35=caml_call1(Sexplib_Sexp_grammar[1],t_sexp_grammar$8),
     include$134=caml_call1(Base_Sexpable[5],[0,of_string$28,to_string$32]),
     t_of_sexp$84=include$134[1],
     sexp_of_t$94=include$134[2],
     _aef_=Make$2([0,_adX_,t_of_sexp$84,sexp_of_t$94]),
     comparator$30=_aef_[16],
     compare$83=include$68[8],
     _aeg_=_aef_[11],
     _aeh_=_aef_[12],
     _aei_=_aef_[13],
     _aej_=_aef_[14],
     _aek_=_aef_[15],
     _ael_=_aef_[17],
     _aem_=_aef_[18],
     _aen_=_aef_[19],
     _aeo_=_aef_[20],
     _aep_=_aef_[21],
     _aeq_=_aef_[22],
     _aer_=include$68[1],
     _aes_=include$68[2],
     _aet_=include$68[3],
     _aeu_=include$68[4],
     _aev_=include$68[5],
     _aew_=include$68[6],
     _aex_=include$68[7],
     _aey_=include$68[9],
     _aez_=include$68[10],
     _aeA_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$207),0,bin_shape_t$110],0],
     _aeB_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_time_ns_ml_330_8),
     group$118=caml_call2(Bin_prot_Shape[6],_aeB_,_aeA_),
     _aeC_=caml_call1(Bin_prot_Shape[2][1],cst_t$208),
     bin_shape_t$111=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$118,_aeC_),0),
     bin_writer_t$98=[0,bin_size_t$52,bin_write_t$52],
     bin_reader_t$98=[0,bin_read_t$106,bin_read_t$107],
     bin_t$98=[0,bin_shape_t$111,bin_writer_t$98,bin_reader_t$98];
    function hash$54(x){return hash$53(x)}
    var
     include$135=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$52,
         bin_write_t$52,
         bin_read_t$106,
         bin_read_t$107,
         bin_shape_t$111,
         bin_writer_t$98,
         bin_reader_t$98,
         bin_t$98,
         compare$83,
         t_of_sexp$84,
         sexp_of_t$94,
         comparator$30]),
     Map$28=include$135[1],
     Set$28=include$135[2],
     V1$17=[0],
     Option$4=[0];
    function to_absolute$0(relative,offset_from_utc)
     {var diff=diff$9(relative,offset_from_utc);
      return sub_overflowed(relative,offset_from_utc,diff)?overflow(0):diff}
    function of_absolute$0(absolute,offset_from_utc)
     {var sum=add$15(absolute,offset_from_utc);
      return add_overflowed(absolute,offset_from_utc,sum)?overflow(0):sum}
    function to_days_from_epoch$0(t)
     {var
       days_from_epoch_approx=caml_call2(Base_Int63[94][4],t,ns_per_day),
       _a_k_=caml_call2(Base_Int63[94][3],days_from_epoch_approx,ns_per_day);
      return caml_call2(Base_Int63[94][11],t,_a_k_)
              ?caml_call1(pred$1,days_from_epoch_approx)
              :days_from_epoch_approx}
    function of_span_in_seconds(span_in_seconds)
     {return of_int63_seconds$2
              (caml_call1(Time_in_seconds[1][2],span_in_seconds))}
    function of_time_in_seconds(time_in_seconds)
     {var _a_j_=caml_call1(Time_in_seconds[4],time_in_seconds);
      return of_int63_seconds$2(caml_call1(Time_in_seconds[1][2],_a_j_))}
    function index$1(t,time)
     {var
       _a_h_=to_int63_seconds_round_down_ex$2(time),
       _a_i_=caml_call1(Time_in_seconds[1][1],_a_h_);
      return index(t,caml_call1(Time_in_seconds[3],_a_i_))}
    function index_offset_from_utc_exn$1(t,index)
     {return of_span_in_seconds(index_offset_from_utc_exn(t,index))}
    function index_prev_clock_shift_time_ex$1(t,index)
     {return of_time_in_seconds(index_prev_clock_shift_time_ex(t,index))}
    function index_prev_clock_shift(t,index)
     {var match=index_has_prev_clock_shift(t,index);
      if(match)
       {var _a_g_=of_span_in_seconds(index_prev_clock_shift_amount_(t,index));
        return [0,[0,index_prev_clock_shift_time_ex$1(t,index),_a_g_]]}
      return 0}
    function next_clock_shift$0(t,time)
     {var index=index$1(t,time);
      return index_prev_clock_shift(t,caml_call1(Index[1],index))}
    function of_date_ofday$1(zone,date,ofday)
     {var
       _a_b_=Days[5],
       _a_c_=caml_call1(Days[1],date),
       days=caml_call1(of_int$2,caml_call2(Days[3],_a_c_,_a_b_)),
       _a_d_=caml_call2(Base_Int63[94][3],days,ns_per_day),
       relative=caml_call2(Base_Int63[94][1],_a_d_,ofday),
       _a_e_=to_int63_seconds_round_down_ex$2(relative),
       _a_f_=caml_call1(Time_in_seconds[1][1],_a_e_),
       index=
        index_of_date_and_ofday(zone,caml_call1(Time_in_seconds[2][1],_a_f_)),
       offset_from_utc=index_offset_from_utc_exn$1(zone,index);
      return to_absolute$0(relative,offset_from_utc)}
    function of_date_ofday_precise$0(date,ofday,zone)
     {var
       start_of_day=of_date_ofday$1(zone,date,zero$4),
       proposed_time=add$15(start_of_day,ofday),
       match=next_clock_shift$0(zone,start_of_day);
      if(match)
       {var
         match$0=match[1],
         shift_amount=match$0[2],
         shift_start=match$0[1],
         shift_backwards=caml_call2(symbol$232,shift_amount,zero$4);
        if(shift_backwards)
         var e=shift_start,s=add$15(shift_start,shift_amount);
        else
         var e$0=add$15(shift_start,shift_amount),e=e$0,s=shift_start;
        if(caml_call2(_adV_,proposed_time,s))
         return [0,881568161,proposed_time];
        if
         (caml_call2(_adS_,s,proposed_time)
          &&
          caml_call2(_adV_,proposed_time,e))
         return shift_backwards
                 ?[0,
                   748757384,
                   [0,proposed_time,diff$9(proposed_time,shift_amount)]]
                 :[0,744337004,shift_start];
        return [0,881568161,diff$9(proposed_time,shift_amount)]}
      return [0,881568161,proposed_time]}
    var date_cache=[0,utc,zero$4,zero$4,zero$4,unix_epoch];
    function reset_date_cache$0(param)
     {date_cache[1] = utc;
      date_cache[2] = zero$4;
      date_cache[3] = zero$4;
      date_cache[4] = zero$4;
      date_cache[5] = unix_epoch;
      return 0}
    function set_date_cache(time,zone)
     {var _a9__=caml_call2(_Pp_,zone,date_cache[1]),switch$0=0;
      if(_a9__)
       {var _a9$_=caml_call2(_adR_,time,date_cache[2]);
        if(_a9$_)
         {var match=caml_call2(_adV_,time,date_cache[3]);switch$0 = 1}
        else
         var _a_a_=_a9$_}
      else
       var _a_a_=_a9__;
      if(! switch$0)var match=_a_a_;
      if(match)return 0;
      var
       index=index$1(zone,time),
       offset_from_utc=index_offset_from_utc_exn$1(zone,index),
       t=of_absolute$0(time,offset_from_utc),
       days_from_epoch=to_days_from_epoch$0(t),
       _a98_=caml_call1(to_int_exn$2,days_from_epoch),
       _a99_=caml_call2(Days[4],Days[5],_a98_),
       date=caml_call1(Days[2],_a99_),
       days_from_epoch$0=to_days_from_epoch$0(t),
       days_from_epoch_in_ns=
        caml_call2(Base_Int63[94][3],days_from_epoch$0,ns_per_day),
       remainder=caml_call2(Base_Int63[94][2],t,days_from_epoch_in_ns),
       span=of_span_since_start_of_day$1(remainder),
       effective_day_start=diff$9(to_absolute$0(t,offset_from_utc),span),
       effective_day_until=add$15(effective_day_start,ns_per_day),
       match$0=index_has_prev_clock_shift(zone,index),
       cache_start_incl=
        match$0
         ?caml_call2
           (max$21,
            index_prev_clock_shift_time_ex$1(zone,index),
            effective_day_start)
         :effective_day_start,
       match$1=index_has_next_clock_shift(zone,index),
       cache_until_excl=
        match$1
         ?caml_call2
           (min$21,
            of_time_in_seconds(index_next_clock_shift_time_ex(zone,index)),
            effective_day_until)
         :effective_day_until;
      date_cache[1] = zone;
      date_cache[2] = cache_start_incl;
      date_cache[3] = cache_until_excl;
      date_cache[4] = effective_day_start;
      date_cache[5] = date;
      return 0}
    function to_date$2(time,zone)
     {set_date_cache(time,zone);return date_cache[5]}
    function to_ofday$1(time,zone)
     {set_date_cache(time,zone);
      return of_span_since_start_of_day$1(diff$9(time,date_cache[4]))}
    function to_date_ofday$1(time,zone)
     {var _a97_=to_ofday$1(time,zone);return [0,to_date$2(time,zone),_a97_]}
    function to_date_ofday_precise$0(time,zone)
     {var
       match=to_date_ofday$1(time,zone),
       ofday=match[2],
       date=match[1],
       clock_shift_after=next_clock_shift$0(zone,time),
       clock_shift_before_or_at=
        index_prev_clock_shift(zone,index$1(zone,time)),
       switch$0=0;
      if(clock_shift_before_or_at)
       {var
         match$1=clock_shift_before_or_at[1],
         amount=match$1[2],
         start=match$1[1];
        if(caml_call2(_adU_,add$15(start,caml_call1(abs$4,amount)),time))
         {if(caml_call2(symbol$231,amount,zero$4))
           {var match$0=sub$6(ofday,amount);
            if(match$0)
             var ofday$0=match$0[1],_a94_=[0,-687020392,[0,date,ofday$0]];
            else
             var
              _a92_=[0,[1,[0,_aeD_,[0,sexp_of_t$63(zone),0]]],0],
              _a93_=[0,[1,[0,_aeE_,[0,sexp_of_t$92(time),0]]],_a92_],
              _a94_=
               caml_call1
                (_nX_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Time_to_date_ofday_precise$0),
                   _a93_]]);
            var _a95_=_a94_}
          else
           {if(! caml_call2(symbol$232,amount,zero$4))
             throw [0,Assert_failure,_aeF_];
            var _a95_=[0,1043984139,diff$9(time,caml_call1(abs$4,amount))]}
          var ambiguity=_a95_}
        else
         switch$0 = 1}
      else
       switch$0 = 1;
      if(switch$0)
       {var switch$1=0;
        if(clock_shift_after)
         {var
           match$2=clock_shift_after[1],
           amount$0=match$2[2],
           start$0=match$2[1];
          if
           (caml_call2(_adS_,diff$9(start$0,caml_call1(abs$4,amount$0)),time))
           {if(caml_call2(symbol$231,amount$0,zero$4))
             var _a96_=881570188;
            else
             {if(! caml_call2(symbol$232,amount$0,zero$4))
               throw [0,Assert_failure,_aeG_];
              var _a96_=[0,1043984139,add$15(time,caml_call1(abs$4,amount$0))]}
            var ambiguity=_a96_}
          else
           switch$1 = 1}
        else
         switch$1 = 1;
        if(switch$1)var ambiguity=881570188}
      return [0,date,ofday,ambiguity]}
    function convert$0(from_tz,to_tz,date,ofday)
     {var start_time=of_date_ofday$1(from_tz,date,ofday);
      return to_date_ofday$1(start_time,to_tz)}
    function utc_offset$1(t,zone)
     {var
       index=index$1(zone,t),
       offset_from_utc=index_offset_from_utc_exn$1(zone,index),
       utc_epoch=of_absolute$0(t,offset_from_utc);
      return diff$9(utc_epoch,t)}
    function offset_string(time,zone)
     {var
       utc_offset=utc_offset$1(time,zone),
       is_utc=caml_call2(symbol$230,utc_offset,zero$4);
      if(is_utc)return cst_Z$2;
      var
       _a90_=
        [0,
         to_string_trimmed$2
          (of_span_since_start_of_day$1(caml_call1(abs$4,utc_offset))),
         0],
       _a91_=caml_call2(symbol$232,utc_offset,zero$4)?cst$171:cst$172;
      return caml_call2(_Bq_,0,[0,_a91_,_a90_])}
    function attempt(time,zone)
     {var
       match=to_date_ofday$1(time,zone),
       ofday=match[2],
       date=match[1],
       offset_string$0=offset_string(time,zone),
       _a9Z_=
        [0,
         caml_call2
          (_Bq_,_aeH_,[0,caml_call1(_adh_,ofday),[0,offset_string$0,0]]),
         0];
      return [0,to_string$22(date),_a9Z_]}
    function to_string_abs_parts$0(time,zone)
     {try
       {var _a9X_=attempt(time,zone);return _a9X_}
      catch(_a9Y_){return attempt(time,utc)}}
    function to_string_abs_trimmed$0(time,zone)
     {var
       match=to_date_ofday$1(time,zone),
       ofday=match[2],
       date=match[1],
       offset_string$0=offset_string(time,zone),
       _a9W_=[0,caml_call2(_Fp_,to_string_trimmed$2(ofday),offset_string$0),0];
      return caml_call2(_Bq_,_aeI_,[0,to_string$22(date),_a9W_])}
    function to_string_abs$0(time,zone)
     {return caml_call2(_Bq_,_aeJ_,to_string_abs_parts$0(time,zone))}
    function to_string_utc$0(t){return to_string_abs$0(t,utc)}
    function to_string_iso8601_basic$1(time,zone)
     {return caml_call2(_Bq_,_aeK_,to_string_abs_parts$0(time,zone))}
    function to_string_trimmed$3(t,zone)
     {var
       match=to_date_ofday$1(t,zone),
       sec=match[2],
       date=match[1],
       _a9V_=caml_call2(_Fp_,cst$173,to_string_trimmed$2(sec));
      return caml_call2(_Fp_,to_string$22(date),_a9V_)}
    function to_sec_string$3(t,zone)
     {var
       match=to_date_ofday$1(t,zone),
       sec=match[2],
       date=match[1],
       _a9U_=caml_call2(_Fp_,cst$174,to_sec_string$2(sec));
      return caml_call2(_Fp_,to_string$22(date),_a9U_)}
    function to_sec_string_with_zone$0(t,zone)
     {var _a9T_=offset_string(t,zone);
      return caml_call2(_Fp_,to_sec_string$3(t,zone),_a9T_)}
    function to_filename_string$0(t,zone)
     {var
       match=to_date_ofday$1(t,zone),
       ofday=match[2],
       date=match[1],
       _a9S_=
        caml_call2
         (_Fp_,
          cst$175,
          caml_call3(_B9_,58,45,caml_call2(_Ch_,caml_call1(_adh_,ofday),3)));
      return caml_call2(_Fp_,to_string$22(date),_a9S_)}
    function of_filename_string$0(s,zone)
     {try
       {var match=caml_call2(_BT_,s,95);
        if(match)
         var
          match$0=match[1],
          ofday=match$0[2],
          date=match$0[1],
          date$0=of_string$19(date),
          ofday$0=caml_call3(_B9_,45,58,ofday),
          ofday$1=caml_call1(_adg_,ofday$0),
          _a9R_=of_date_ofday$1(zone,date$0,ofday$1);
        else
         var _a9R_=caml_call1(_Fb_,cst_no_space_in_filename_strin$0);
        return _a9R_}
      catch(exn)
       {exn = caml_wrap_exception(exn);
        return caml_call4(_Po_,_aeL_,s,caml_call1(Base_Exn[10],exn),0)}}
    function of_localized_string$0(zone,str)
     {try
       {var match=caml_call2(_BT_,str,32);
        if(match)
         var
          match$0=match[1],
          time=match$0[2],
          date=match$0[1],
          date$0=of_string$19(date),
          ofday=caml_call1(_adg_,time),
          _a9Q_=of_date_ofday$1(zone,date$0,ofday);
        else
         var _a9Q_=caml_call1(_Fa_,caml_call2(_fx_,_aeM_,str));
        return _a9Q_}
      catch(e)
       {e = caml_wrap_exception(e);
        return caml_call2(Base_Exn[8],e,cst_Time_of_localized_string$0)}}
    function occurrence$0(before_or_after,t,ofday,zone)
     {var
       first_guess_date=to_date$2(t,zone),
       first_guess=of_date_ofday$1(zone,first_guess_date,ofday);
      if(476625469 <= before_or_after)
       var increment=1,cmp=_adR_;
      else
       var increment=-1,cmp=_adS_;
      return caml_call2(cmp,first_guess,t)
              ?first_guess
              :of_date_ofday$1
                (zone,add_days$0(first_guess_date,increment),ofday)}
    function ensure_colon_in_offset(offset)
     {var offset_length=caml_ml_string_length(offset);
      if
       (offset_length
        <=
        2
        &&
        caml_call1(_Ep_,caml_string_get(offset,0))
        &&
        caml_call1(_Ep_,caml_string_get(offset,offset_length - 1 | 0)))
       return caml_call2(_Fp_,offset,cst_00$0);
      if
       (!
        caml_call2(_EL_,caml_string_get(offset,1),58)
        &&
        !
        caml_call2(_EL_,caml_string_get(offset,2),58))
       {if(! (offset_length < 3) && ! (4 < offset_length))
         {var
           _a9P_=
            [0,
             cst$176,
             [0,slice$2(offset,offset_length - 2 | 0,offset_length),0]];
          return caml_call2
                  (_Bq_,0,[0,slice$2(offset,0,offset_length - 2 | 0),_a9P_])}
        return caml_call3(failwithf$0,_aeN_,offset,0)}
      return offset}
    var
     Time_ns_of_string=
      [248,cst_Core_Time_ns_To_and_of_str,caml_fresh_oo_id(0)];
    function _aeO_(param)
     {if(param[1] === Time_ns_of_string)
       {var
         arg1_009=param[3],
         arg0_008=param[2],
         res0_010=caml_call1(sexp_of_t$41,arg0_008),
         res1_011=caml_call1(Base_Exn[1],arg1_009);
        return [1,[0,_aeP_,[0,res0_010,[0,res1_011,0]]]]}
      throw [0,Assert_failure,_aeQ_]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Time_ns_of_string,_aeO_);
    function of_string_gen$0(default_zone,find_zone,s)
     {try
       {var match=caml_call2(_BV_,s,32),switch$0=0;
        if(match)
         {var _a9G_=match[2],_a9H_=match[1];
          if(_a9G_)
           {var _a9I_=_a9G_[2],_a9J_=_a9G_[1];
            if(_a9I_)
             {var _a9K_=_a9I_[2],_a9L_=_a9I_[1];
              if(_a9K_)
               if(_a9K_[2])
                switch$0 = 1;
               else
                var
                 ofday$2=_a9K_[1],
                 tz=0,
                 ofday=ofday$2,
                 date=
                  caml_call2
                   (_Bq_,
                    0,
                    [0,_a9H_,[0,cst$178,[0,_a9J_,[0,cst$177,[0,_a9L_,0]]]]]);
              else
               var tz=[0,_a9L_],ofday=_a9J_,date=_a9H_}
            else
             var tz=0,ofday=_a9J_,date=_a9H_}
          else
           {var match$4=caml_call2(_BU_,_a9H_,84);
            if(match$4)
             var
              match$5=match$4[1],
              ofday$3=match$5[2],
              date$1=match$5[1],
              tz=0,
              ofday=ofday$3,
              date=date$1;
            else
             var
              _a9O_=caml_call1(_Fb_,cst_no_spaces_or_T_found$0),
              tz=_a9O_[3],
              ofday=_a9O_[2],
              date=_a9O_[1]}}
        else
         switch$0 = 1;
        if(switch$0)
         var
          _a9M_=caml_call1(_Fb_,cst_too_many_spaces$0),
          tz=_a9M_[3],
          ofday=_a9M_[2],
          date=_a9M_[1];
        var ofday_to_sec=function(od){return to_sec$0(od)};
        if(tz)
         var utc_offset=0,ofday$0=ofday;
        else
         if
          (caml_call2
            (_EL_,
             caml_string_get(ofday,caml_ml_string_length(ofday) - 1 | 0),
             90))
          var
           utc_offset=utc_offset$2,
           ofday$0=
            caml_call3(_AY_,ofday,0,caml_ml_string_length(ofday) - 1 | 0);
         else
          {var match$0=caml_call2(_BT_,ofday,43);
           if(match$0)
            var
             match$1=match$0[1],
             r=match$1[2],
             l=match$1[1],
             utc_offset=
              [0,ofday_to_sec(caml_call1(_adg_,ensure_colon_in_offset(r)))],
             ofday$0=l;
           else
            {var match$2=caml_call2(_BT_,ofday,45);
             if(match$2)
              var
               match$3=match$2[1],
               r$0=match$3[2],
               l$0=match$3[1],
               utc_offset=
                [0,
                 -1.
                 *
                 ofday_to_sec(caml_call1(_adg_,ensure_colon_in_offset(r$0)))],
               ofday$0=l$0;
             else
              var utc_offset=0,ofday$0=ofday}}
        var date$0=of_string$19(date),ofday$1=caml_call1(_adg_,ofday$0);
        if(tz)
         var
          tz$0=tz[1],
          _a9N_=of_date_ofday$1(caml_call1(find_zone,tz$0),date$0,ofday$1);
        else
         if(utc_offset)
          var
           utc_offset$0=utc_offset[1],
           utc_t=of_date_ofday$1(utc,date$0,ofday$1),
           _a9N_=diff$9(utc_t,of_sec$0(utc_offset$0));
         else
          var
           zone=caml_call1(default_zone,0),
           _a9N_=of_date_ofday$1(zone,date$0,ofday$1);
        return _a9N_}
      catch(e){e = caml_wrap_exception(e);throw [0,Time_ns_of_string,s,e]}}
    function of_string_with_utc_offset$0(s)
     {function default_zone(param)
       {var _a9F_=[0,caml_call1(Sexplib0_Sexp_conv[7],s),0];
        return caml_call1
                (_nX_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_time_has_no_time_zone_or_U$0),
                   _a9F_]])}
      function find_zone(zone_name)
       {return caml_call3(failwithf$0,_aeR_,zone_name,0)}
      return of_string_gen$0(default_zone,find_zone,s)}
    function span_of_duration(d)
     {return caml_call1(Ppx_module_timer_runtime[3][1],d)}
    function of_string$29(string)
     {var s=of_string$26(string);
      return caml_call1(Ppx_module_timer_runtime[3][2],s)}
    function to_string_with_same_unit(durations)
     {var
       spans=caml_call2(_qF_,durations,span_of_duration),
       unit_of_time=
        caml_call3(_xF_,caml_call2(_pT_,spans,compare$82),0,to_unit_of_time$1),
       _a9E_=[0,unit_of_time];
      return caml_call2
              (_qF_,
               spans,
               function(eta){return to_string_hum$11(0,0,_aeS_,_a9E_,eta)})}
    Ppx_module_timer_runtime[3][3][1]
    =
    [0,of_string$29,to_string_with_same_unit];
    var
     Hash_queue$17=[0],
     Hash_set$20=[0],
     Map$29=[0],
     Option$5=[0],
     Set$29=[0],
     Table$20=[0],
     Zone$2=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$397);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Time_ns$0);
    var
     include$136=
      [0,
       hash_fold_t$40,
       hash$53,
       t_of_sexp$84,
       sexp_of_t$94,
       t_sexp_grammar$35,
       _aer_,
       _aes_,
       _aet_,
       _aeu_,
       _aev_,
       _aew_,
       _aex_,
       compare$83,
       _aey_,
       _aez_,
       _aeg_,
       _aeh_,
       _aei_,
       _aej_,
       _aek_,
       comparator$30,
       _ael_,
       _aem_,
       _aen_,
       _aeo_,
       _aep_,
       _aeq_],
     Core_Time_ns=
      [0,
       [0,
        bin_size_t$52,
        bin_write_t$52,
        bin_read_t$106,
        bin_read_t$107,
        bin_shape_t$103,
        bin_writer_t$91,
        bin_reader_t$91,
        bin_t$91,
        t_of_sexp$82,
        sexp_of_t$92,
        t_sexp_grammar$33,
        typerep_of_t$29,
        typename_of_t$29,
        Parts$0,
        symbol$228,
        symbol$229,
        symbol$230,
        symbol$231,
        symbol$232,
        symbol$233,
        equal$41,
        compare$82,
        min$21,
        max$21,
        _acG_,
        _acH_,
        _acI_,
        _acJ_,
        _acK_,
        include$68,
        _acO_,
        _acP_,
        _acQ_,
        is_positive$8,
        is_non_negative$8,
        is_negative$8,
        is_non_positive$8,
        sign$8,
        _acL_,
        _acM_,
        _acN_,
        validate_positive$8,
        validate_non_negative$8,
        validate_negative$8,
        validate_non_positive$8,
        hash_fold_t$40,
        _acx_,
        _acy_,
        _acz_,
        _acA_,
        _acB_,
        _act_,
        symbol$222,
        symbol$223,
        symbol$224,
        symbol$225,
        symbol$226,
        symbol$227,
        robustly_compare$4,
        quickcheck_generator$11,
        quickcheck_observer$9,
        quickcheck_shrinker$9,
        _Kq_,
        _Kr_,
        to_string$30,
        of_string$26,
        nanosecond$1,
        microsecond$1,
        millisecond$1,
        second$2,
        minute$1,
        hour$2,
        ns_per_day,
        microsecond$1,
        zero$4,
        create$27,
        to_parts$3,
        of_ns$1,
        of_us$1,
        of_ms$1,
        of_sec$0,
        of_int_sec$1,
        of_int32_seconds$1,
        of_int63_seconds$2,
        of_min$1,
        of_hr$1,
        of_day$1,
        to_ns$1,
        to_us$1,
        to_ms$1,
        to_sec$0,
        to_min$1,
        to_hr$1,
        to_day$1,
        to_int63_seconds_round_down_ex$2,
        to_proportional_float$0,
        add$15,
        diff$9,
        abs$4,
        neg$2,
        scale$2,
        symbol$221,
        symbol$111,
        next$6,
        prev$7,
        to_short_string$1,
        to_unit_of_time$1,
        of_unit_of_time$1,
        to_string_hum$11,
        randomize$2,
        of_sec_with_microsecond_precis,
        of_int_us,
        of_int_ms,
        to_int_us,
        to_int_ms,
        to_int_sec,
        min_value$2,
        max_value$2,
        min_value_for_1us_rounding,
        max_value_for_1us_rounding,
        min_value_for_1us_rounding,
        max_value_for_1us_rounding,
        scale_int,
        scale_int63,
        symbol$108,
        to_int63_ns,
        of_int63_ns,
        to_int_ns,
        of_int_ns,
        now$0,
        random$0,
        to_span,
        of_span,
        to_span_float_round_nearest,
        to_span,
        of_span_float_round_nearest,
        of_span,
        Alternate_sexp,
        arg_type,
        Option$1,
        [0],
        Private$3],
       [0,
        _ac8_,
        _ac9_,
        _ac__,
        _ac$_,
        _ada_,
        _adb_,
        _adc_,
        _add_,
        _ade_,
        _adf_,
        t_sexp_grammar$34,
        typerep_of_t$30,
        typename_of_t$30,
        symbol$228,
        symbol$229,
        symbol$230,
        symbol$231,
        symbol$232,
        symbol$233,
        equal$41,
        compare$82,
        min$21,
        max$21,
        _adj_,
        _adk_,
        _adl_,
        _adm_,
        _adn_,
        _ado_,
        _adp_,
        _adq_,
        _adr_,
        _ads_,
        _adt_,
        _adu_,
        _adv_,
        _adw_,
        _adx_,
        _ady_,
        _adz_,
        _adA_,
        _adi_,
        symbol$222,
        symbol$223,
        symbol$224,
        symbol$225,
        symbol$226,
        symbol$227,
        robustly_compare$4,
        quickcheck_generator$24,
        quickcheck_observer$9,
        quickcheck_shrinker$22,
        _Kq_,
        _Kr_,
        _adg_,
        _adh_,
        create$28,
        to_parts$4,
        zero$4,
        ns_per_day,
        to_span_since_start_of_day$1,
        of_span_since_start_of_day$1,
        of_span_since_start_of_day$1,
        span_since_start_of_day_is_val$1,
        of_span_since_start_of_day_unc$1,
        add$16,
        sub$6,
        next$7,
        prev$8,
        diff$10,
        small_diff$1,
        to_string_trimmed$2,
        to_sec_string$2,
        of_string_iso8601_extended$1,
        to_millisec_string$1,
        to_millisec_string$1,
        approximate_end_of_day$1,
        add_exn$5,
        sub_exn,
        every,
        to_microsecond_string,
        arg_type$0,
        now$1,
        of_ofday_float_round_nearest,
        of_ofday_float_round_nearest_m,
        to_ofday_float_round_nearest,
        to_ofday_float_round_nearest_m,
        Option$3,
        Zoned$2],
       hash_fold_t$40,
       hash$52,
       typerep_of_t$31,
       typename_of_t$31,
       bin_size_t$52,
       bin_write_t$52,
       bin_read_t$106,
       bin_read_t$107,
       bin_shape_t$110,
       bin_writer_t$97,
       bin_reader_t$97,
       bin_t$97,
       _adR_,
       _adS_,
       _adT_,
       _adU_,
       _adV_,
       _adW_,
       equal$41,
       _adX_,
       min$21,
       max$21,
       include$136,
       quickcheck_generator$11,
       quickcheck_observer$9,
       quickcheck_shrinker$9,
       _Kq_,
       _Kr_,
       is_earlier$0,
       is_later$0,
       of_date_ofday$1,
       of_date_ofday_precise$0,
       to_date_ofday$1,
       to_date_ofday_precise$0,
       to_date$2,
       to_ofday$1,
       reset_date_cache$0,
       convert$0,
       utc_offset$1,
       to_filename_string$0,
       of_filename_string$0,
       to_string_abs$0,
       to_string_abs_trimmed$0,
       to_string_abs_parts$0,
       to_string_trimmed$3,
       to_sec_string$3,
       to_sec_string_with_zone$0,
       of_localized_string$0,
       of_string_gen$0,
       to_string_iso8601_basic$1,
       occurrence$0,
       of_string_with_utc_offset$0,
       of_string_with_utc_offset$0,
       to_string_utc$0,
       to_string_utc$0,
       zero$4,
       min_value$2,
       max_value$2,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       now$0,
       add$15,
       add_saturating,
       sub_saturating,
       diff$9,
       next$6,
       prev$7,
       diff$9,
       abs_diff$0,
       to_span_since_epoch$1,
       of_span_since_epoch$1,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       _adY_,
       of_int_ns_since_epoch,
       next_multiple$0,
       prev_multiple$0,
       random$1,
       of_time_float_round_nearest_mi,
       to_time_float_round_nearest_mi,
       to_time_float_round_nearest,
       to_time_float_round_nearest_mi,
       of_time_float_round_nearest,
       of_time_float_round_nearest_mi,
       Utc,
       [0,
        V1$17,
        Option$4,
        [0,
         [0,
          bin_size_t$52,
          bin_write_t$52,
          bin_read_t$106,
          bin_read_t$107,
          bin_shape_t$111,
          bin_writer_t$98,
          bin_reader_t$98,
          bin_t$98,
          compare$83,
          hash_fold_t$40,
          hash$54,
          t_of_sexp$84,
          sexp_of_t$94,
          t_sexp_grammar$35,
          comparator$30,
          Map$28,
          Set$28]],
        _acV_,
        _adN_],
       Hash_queue$17,
       Hash_set$20,
       Map$29,
       Option$5,
       [0],
       Set$29,
       Table$20,
       Zone$2,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104];
    caml_register_global(5408,Core_Time_ns,"Core__Time_ns");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Time_ns_alternate_sex);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$398);
    caml_call1(Expect_test_collector[5][1],cst_core_src_time_ns_alternate);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$399,cst$179);
    var
     _aeT_=include$136[1],
     _aeU_=include$136[2],
     _aeV_=include$136[3],
     _aeW_=include$136[4],
     _aeX_=include$136[5],
     _aeY_=include$136[6],
     _aeZ_=include$136[7],
     _ae0_=include$136[8],
     _ae1_=include$136[9],
     _ae2_=include$136[10],
     _ae3_=include$136[11],
     _ae4_=include$136[12],
     _ae5_=include$136[13],
     _ae6_=include$136[14],
     _ae7_=include$136[15],
     _ae8_=include$136[16],
     _ae9_=include$136[17],
     _ae__=include$136[18],
     _ae$_=include$136[19],
     _afa_=include$136[20],
     _afb_=include$136[21],
     _afc_=include$136[22],
     _afd_=include$136[23],
     _afe_=include$136[24];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$400);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Time_ns_alternate_sex$0);
    var
     Core_Time_ns_alternate_sexp=
      [0,
       typerep_of_t$31,
       typename_of_t$31,
       bin_size_t$52,
       bin_write_t$52,
       bin_read_t$106,
       bin_read_t$107,
       bin_shape_t$110,
       bin_writer_t$97,
       bin_reader_t$97,
       bin_t$97,
       quickcheck_generator$11,
       quickcheck_observer$9,
       quickcheck_shrinker$9,
       _Kq_,
       _Kr_,
       is_earlier$0,
       is_later$0,
       of_date_ofday$1,
       of_date_ofday_precise$0,
       to_date_ofday$1,
       to_date_ofday_precise$0,
       to_date$2,
       to_ofday$1,
       reset_date_cache$0,
       convert$0,
       utc_offset$1,
       to_filename_string$0,
       of_filename_string$0,
       to_string_abs$0,
       to_string_abs_trimmed$0,
       to_string_abs_parts$0,
       to_string_trimmed$3,
       to_sec_string$3,
       to_sec_string_with_zone$0,
       of_localized_string$0,
       of_string_gen$0,
       to_string_iso8601_basic$1,
       occurrence$0,
       of_string_with_utc_offset$0,
       of_string_with_utc_offset$0,
       to_string_utc$0,
       to_string_utc$0,
       zero$4,
       min_value$2,
       max_value$2,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       min_value_for_1us_rounding,
       max_value_for_1us_rounding,
       now$0,
       add$15,
       add_saturating,
       sub_saturating,
       diff$9,
       next$6,
       prev$7,
       diff$9,
       abs_diff$0,
       to_span_since_epoch$1,
       of_span_since_epoch$1,
       to_int63_ns_since_epoch,
       of_int63_ns_since_epoch,
       _adY_,
       of_int_ns_since_epoch,
       next_multiple$0,
       prev_multiple$0,
       random$1,
       of_time_float_round_nearest_mi,
       to_time_float_round_nearest_mi,
       to_time_float_round_nearest,
       to_time_float_round_nearest_mi,
       of_time_float_round_nearest,
       of_time_float_round_nearest_mi,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       -611642104,
       _aeT_,
       _aeU_,
       _aeV_,
       _aeW_,
       _aeX_,
       _aeY_,
       _aeZ_,
       _ae0_,
       _ae1_,
       _ae2_,
       _ae3_,
       _ae4_,
       _ae5_,
       _ae6_,
       _ae7_,
       _ae8_,
       _ae9_,
       _ae__,
       _ae$_,
       _afa_,
       _afb_,
       _afc_,
       _afd_,
       _afe_];
    caml_register_global
     (5409,Core_Time_ns_alternate_sexp,"Core__Time_ns_alternate_sexp");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Substring_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$401);
    caml_call1(Expect_test_collector[5][1],cst_core_src_substring_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$402,cst$180);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$403);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Substring_intf$0);
    var Core_Substring_intf=[0];
    caml_register_global(5410,Core_Substring_intf,"Core__Substring_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Make_substring_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$404);
    caml_call1(Expect_test_collector[5][1],cst_core_src_make_substring_in);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$405,cst$181);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$406);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Make_substring_intf$0);
    var Core_Make_substring_intf=[0];
    caml_register_global
     (5411,Core_Make_substring_intf,"Core__Make_substring_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Make_substring);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$407);
    caml_call1(Expect_test_collector[5][1],cst_core_src_make_substring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$408,cst$182);
    function string_bytes(src,src_pos,src_len,dst,opt,param)
     {if(opt)var sth=opt[1],dst_pos=sth;else var dst_pos=0;
      var
       match=caml_call4(_iv_,src_pos,src_len,0,caml_ml_string_length(src)),
       len=match[2],
       src_pos$0=match[1];
      return caml_call5(include$52[30][1],src,src_pos$0,dst,dst_pos,len)}
    var
     string_bigstring=_Rh_[2],
     bytes_bigstring=_Rj_[2],
     bigstring_string=_Ri_[2],
     bigstring_bytes=_Ri_[2];
    function F(Underlying)
     {function _a8n_(size_009,random_010)
       {var
         _a9C_=
          caml_call3(Base_quickcheck_Generator[118],_ND_,size_009,random_010),
         _a9D_=
          caml_call3(Base_quickcheck_Generator[118],_ND_,size_009,random_010);
        return [0,
                caml_call3
                 (Base_quickcheck_Generator[118],
                  Underlying[1],
                  size_009,
                  random_010),
                _a9D_,
                _a9C_]}
      caml_call1(Base_quickcheck_Generator[117],_a8n_);
      function _a8o_(param,size_007,hash_008)
       {var
         x_006=param[3],
         x_005=param[2],
         x_004=param[1],
         hash_008$0=
          caml_call4
           (Base_quickcheck_Observer[37],
            Underlying[2],
            x_004,
            size_007,
            hash_008),
         hash_008$1=
          caml_call4
           (Base_quickcheck_Observer[37],_NN_,x_005,size_007,hash_008$0),
         hash_008$2=
          caml_call4
           (Base_quickcheck_Observer[37],_NN_,x_006,size_007,hash_008$1);
        return hash_008$2}
      var quickcheck_observer=caml_call1(Base_quickcheck_Observer[36],_a8o_);
      function _a8p_(param)
       {var x_003=param[3],x_002=param[2],x_001=param[1],_a9s_=0;
        function _a9t_(x_003){return [0,x_001,x_002,x_003]}
        var
         _a9u_=caml_call2(Base_quickcheck_Shrinker[37],_NW_,x_003),
         _a9v_=[0,caml_call2(include$9[32],_a9u_,_a9t_),_a9s_];
        function _a9w_(x_002){return [0,x_001,x_002,x_003]}
        var
         _a9x_=caml_call2(Base_quickcheck_Shrinker[37],_NW_,x_002),
         _a9y_=[0,caml_call2(include$9[32],_a9x_,_a9w_),_a9v_];
        function _a9z_(x_001){return [0,x_001,x_002,x_003]}
        var
         _a9A_=caml_call2(Base_quickcheck_Shrinker[37],Underlying[3],x_001),
         _a9B_=[0,caml_call2(include$9[32],_a9A_,_a9z_),_a9y_];
        return caml_call1(include$9[68],_a9B_)}
      var quickcheck_shrinker=caml_call1(Base_quickcheck_Shrinker[36],_a8p_);
      function base(t){return t[1]}
      function pos(t){return t[2]}
      function length(t){return t[3]}
      function is_empty(t){return caml_call2(equal$24,t[3],0)}
      function create(pos,len,base)
       {var
         match=caml_call4(_iv_,pos,len,0,caml_call1(Underlying[5],base)),
         len$0=match[2],
         pos$0=match[1];
        return [0,base,pos$0,len$0]}
      function _a8q_(base)
       {var base_len=caml_call1(Underlying[5],base);
        function _a9n_(len)
         {function _a9p_(pos)
           {var _a9r_=create([0,pos],[0,len],base);
            return caml_call1(_pA_[1],_a9r_)}
          var _a9q_=caml_call2(_Jx_,0,base_len - len | 0);
          return caml_call2(_pA_[4][2],_a9q_,_a9p_)}
        var _a9o_=caml_call2(_Jx_,0,base_len);
        return caml_call2(_pA_[4][2],_a9o_,_a9n_)}
      var quickcheck_generator=caml_call2(_pA_[4][2],Underlying[1],_a8q_);
      function get_no_bounds_check(t,i)
       {return caml_call2(Underlying[12],t[1],t[2] + i | 0)}
      function get(t,i)
       {if(caml_call2(_No_,i,0) && caml_call2(_Ns_,i,t[3]))
         return get_no_bounds_check(t,i);
        throw [0,Stdlib[6],cst_index_out_of_bounds]}
      function sub(pos,len,t)
       {var
         match=caml_call4(_iv_,pos,len,0,t[3]),
         len$0=match[2],
         pos$0=match[1];
        return [0,t[1],t[2] + pos$0 | 0,len$0]}
      function fold(t,acc,f)
       {var acc$0=acc,i=0;
        for(;;)
         {if(caml_call2(_No_,i,t[3]))return acc$0;
          var
           i$0=i + 1 | 0,
           acc$1=caml_call2(f,acc$0,get(t,i)),
           acc$0=acc$1,
           i=i$0;
          continue}}
      var
       iter=
        [0,
         -198771759,
         function(t,f)
          {var _a9l_=t[3] - 1 | 0,_a9k_=0;
           if(! (_a9l_ < 0))
            {var i=_a9k_;
             for(;;)
              {caml_call1(f,get(t,i));
               var _a9m_=i + 1 | 0;
               if(_a9l_ !== i){var i=_a9m_;continue}
               break}}
           return 0}],
       foldi=
        [0,
         -198771759,
         function(t,acc,f)
          {var acc$0=acc,i=0;
           for(;;)
            {if(caml_call2(_No_,i,t[3]))return acc$0;
             var
              i$0=i + 1 | 0,
              acc$1=caml_call3(f,i,acc$0,get_no_bounds_check(t,i)),
              acc$0=acc$1,
              i=i$0;
             continue}}],
       iteri=
        [0,
         -198771759,
         function(t,f)
          {var _a9i_=t[3] - 1 | 0,_a9h_=0;
           if(! (_a9i_ < 0))
            {var i=_a9h_;
             for(;;)
              {caml_call2(f,i,get_no_bounds_check(t,i));
               var _a9j_=i + 1 | 0;
               if(_a9i_ !== i){var i=_a9j_;continue}
               break}}
           return 0}],
       length$0=[0,-198771759,length],
       C=
        caml_call1
         (Base_Indexed_container[9],
          [0,[0,equal_char],fold,iter,length$0,iteri,foldi]),
       _a8r_=C[5],
       _a8s_=C[4],
       _a8t_=C[6],
       _a8u_=C[7];
      function to_list(t)
       {function _a9f_(_a9g_){return get(t,_a9g_)}
        return caml_call2(_ro_,t[3],_a9f_)}
      var
       _a8v_=C[15],
       _a8w_=C[13],
       _a8x_=C[12],
       _a8y_=C[8],
       _a8z_=C[9],
       _a8A_=C[1],
       _a8B_=C[10],
       _a8C_=C[11],
       _a8D_=C[16],
       _a8E_=C[17],
       _a8F_=C[18],
       _a8G_=C[19],
       _a8H_=C[20],
       _a8I_=C[21],
       _a8J_=C[22],
       _a8K_=C[23],
       _a8L_=C[24];
      function wrap_sub_n(t,n,name,pos,len,on_error)
       {if(caml_call2(_Ns_,n,0))
         return caml_call1
                 (_Fa_,caml_call2(_Fp_,name,cst_expecting_nonnegative_argu));
        try
         {var _a9d_=sub([0,pos],[0,len],t);return _a9d_}
        catch(_a9e_){return on_error}}
      function drop_prefix(t,n)
       {return wrap_sub_n(t,n,cst_drop_prefix,n,t[3] - n | 0,[0,t[1],t[2],0])}
      function drop_suffix(t,n)
       {return wrap_sub_n(t,n,cst_drop_suffix,0,t[3] - n | 0,[0,t[1],t[2],0])}
      function prefix(t,n){return wrap_sub_n(t,n,cst_prefix,0,n,t)}
      function suffix(t,n){return wrap_sub_n(t,n,cst_suffix,t[3] - n | 0,n,t)}
      function blit_to(blit,t,dst,dst_pos)
       {return caml_call6(blit,t[1],[0,t[2]],[0,t[3]],dst,[0,dst_pos],0)}
      var _a8M_=Underlying[7];
      function blit_to_string(_a9a_,_a9b_,_a9c_)
       {return blit_to(_a8M_,_a9a_,_a9b_,_a9c_)}
      var _a8N_=Underlying[7];
      function blit_to_bytes(_a89_,_a8__,_a8$_)
       {return blit_to(_a8N_,_a89_,_a8__,_a8$_)}
      var _a8O_=Underlying[8];
      function blit_to_bigstring(_a86_,_a87_,_a88_)
       {return blit_to(_a8O_,_a86_,_a87_,_a88_)}
      var _a8P_=Underlying[6];
      function blit_base(_a83_,_a84_,_a85_)
       {return blit_to(_a8P_,_a83_,_a84_,_a85_)}
      function blit_from(name,blit,t,src,src_pos,len)
       {if(caml_call2(_Nr_,len,t[3]))
         caml_call5(failwithf$0,_aff_,name,len,t[3],0);
        return caml_call6(blit,src,[0,src_pos],[0,len],t[1],[0,t[2]],0)}
      var _a8Q_=Underlying[9];
      function blit_from_string(_a8Z_,_a80_,_a81_,_a82_)
       {return blit_from(cst_string$1,_a8Q_,_a8Z_,_a80_,_a81_,_a82_)}
      var _a8R_=Underlying[10];
      function blit_from_bigstring(_a8V_,_a8W_,_a8X_,_a8Y_)
       {return blit_from(cst_bigstring,_a8R_,_a8V_,_a8W_,_a8X_,_a8Y_)}
      function of_base(base){return [0,base,0,caml_call1(Underlying[5],base)]}
      function of_string(x)
       {var len=caml_ml_string_length(x),buf=caml_call1(Underlying[4],len);
        caml_call6(Underlying[9],x,0,0,buf,0,0);
        return of_base(buf)}
      function of_bigstring(x)
       {var len=caml_call1(_Ra_,x),buf=caml_call1(Underlying[4],len);
        caml_call6(Underlying[10],x,0,0,buf,0,0);
        return of_base(buf)}
      function make(create,blit,t)
       {var dst=caml_call1(create,t[3]);
        caml_call6(blit,t[1],[0,t[2]],[0,t[3]],dst,_afg_,0);
        return dst}
      function to_string(x)
       {return caml_call1(_DO_,make(_Dw_,Underlying[7],x))}
      var _a8S_=Underlying[8];
      function _a8T_(eta){return arg(0,eta)}
      function to_bigstring(_a8U_){return make(_a8T_,_a8S_,_a8U_)}
      function concat_gen(create_dst,blit_dst,ts)
       {var
         len=caml_call3(_pI_,ts,0,function(len,t){return len + t[3] | 0}),
         dst=caml_call1(create_dst,len);
        caml_call3
         (_pI_,
          ts,
          0,
          function(dst_pos,t)
           {caml_call3(blit_dst,t,dst,dst_pos);return dst_pos + t[3] | 0});
        return dst}
      function concat(ts)
       {return of_base(concat_gen(Underlying[4],blit_base,ts))}
      function concat_string(ts)
       {return caml_call1(_DO_,concat_gen(_Dw_,blit_to_string,ts))}
      function concat_bigstring(ts)
       {return concat_gen
                (function(eta){return arg(0,eta)},blit_to_bigstring,ts)}
      return [0,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker,
              _a8A_,
              length,
              is_empty,
              _a8s_,
              _a8r_,
              _a8t_,
              _a8u_,
              _a8y_,
              _a8z_,
              _a8B_,
              _a8C_,
              _a8x_,
              _a8w_,
              to_list,
              _a8v_,
              _a8D_,
              _a8E_,
              _a8F_,
              _a8G_,
              _a8H_,
              _a8I_,
              _a8J_,
              _a8K_,
              _a8L_,
              base,
              pos,
              get,
              create,
              sub,
              blit_to_string,
              blit_to_bytes,
              blit_to_bigstring,
              blit_from_string,
              blit_from_bigstring,
              concat,
              concat_string,
              concat_bigstring,
              to_string,
              to_bigstring,
              of_string,
              of_bigstring,
              drop_prefix,
              drop_suffix,
              prefix,
              suffix]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$409);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Make_substring$0);
    var
     _afh_=
      [0,
       string_bytes,
       bigstring_string,
       string_bytes,
       bytes_bytes,
       bigstring_bytes,
       string_bigstring,
       bytes_bigstring,
       bigstring_bigstring],
     Core_Make_substring=[0,_afh_,F];
    caml_register_global(5413,Core_Make_substring,"Core__Make_substring");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Substring);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$410);
    caml_call1(Expect_test_collector[5][1],cst_core_src_substring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$411,cst$183);
    var
     length$17=caml_ml_bytes_length,
     blit$3=_afh_[4],
     blit_to_string=_afh_[4],
     blit_to_bytes=_afh_[4],
     blit_to_bigstring=_afh_[7],
     blit_from_string=_afh_[3],
     blit_from_bigstring=_afh_[5],
     include$137=
      F
       ([0,
         quickcheck_generator$8,
         quickcheck_observer$7,
         quickcheck_shrinker$7,
         _Dw_,
         length$17,
         blit$3,
         blit_to_bytes,
         blit_to_bigstring,
         blit_from_string,
         blit_from_bigstring,
         blit_to_string,
         _DD_]),
     _afi_=include$137[1],
     _afj_=include$137[2],
     _afk_=include$137[3],
     _afl_=include$137[4],
     _afm_=include$137[5],
     _afn_=include$137[6],
     _afo_=include$137[7],
     _afp_=include$137[8],
     _afq_=include$137[9],
     _afr_=include$137[10],
     _afs_=include$137[11],
     _aft_=include$137[12],
     _afu_=include$137[13],
     _afv_=include$137[14],
     _afw_=include$137[15],
     _afx_=include$137[16],
     _afy_=include$137[17],
     _afz_=include$137[18],
     _afA_=include$137[19],
     _afB_=include$137[20],
     _afC_=include$137[21],
     _afD_=include$137[22],
     _afE_=include$137[23],
     _afF_=include$137[24],
     _afG_=include$137[25],
     _afH_=include$137[26],
     _afI_=include$137[27],
     _afJ_=include$137[28],
     _afK_=include$137[29],
     _afL_=include$137[30],
     _afM_=include$137[31],
     _afN_=include$137[32],
     _afO_=include$137[33],
     _afP_=include$137[34],
     _afQ_=include$137[35],
     _afR_=include$137[36],
     _afS_=include$137[37],
     _afT_=include$137[38],
     _afU_=include$137[39],
     _afV_=include$137[40],
     _afW_=include$137[41],
     _afX_=include$137[42],
     _afY_=include$137[43],
     _afZ_=include$137[44],
     _af0_=include$137[45],
     _af1_=include$137[46],
     _af2_=include$137[47],
     _af3_=include$137[48];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$412);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Substring$0);
    var
     Core_Substring=
      [0,
       _afi_,
       _afj_,
       _afk_,
       _afl_,
       _afm_,
       _afn_,
       _afo_,
       _afp_,
       _afq_,
       _afr_,
       _afs_,
       _aft_,
       _afu_,
       _afv_,
       _afw_,
       _afx_,
       _afy_,
       _afz_,
       _afA_,
       _afB_,
       _afC_,
       _afD_,
       _afE_,
       _afF_,
       _afG_,
       _afH_,
       _afI_,
       _afJ_,
       _afK_,
       _afL_,
       _afM_,
       _afN_,
       _afO_,
       _afP_,
       _afQ_,
       _afR_,
       _afS_,
       _afT_,
       _afU_,
       _afV_,
       _afW_,
       _afX_,
       _afY_,
       _afZ_,
       _af0_,
       _af1_,
       _af2_,
       _af3_];
    caml_register_global(5414,Core_Substring,"Core__Substring");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Arg);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$413);
    caml_call1(Expect_test_collector[5][1],cst_core_src_arg_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$414,cst$184);
    var
     _agc_=include$138[11],
     _af4_=include$138[1],
     _af5_=include$138[2],
     _af6_=include$138[3],
     _af7_=include$138[4],
     _af8_=include$138[5],
     _af9_=include$138[6],
     _af__=include$138[7],
     _af$_=include$138[8],
     _aga_=include$138[9],
     _agb_=include$138[10],
     _agd_=include$138[12],
     _age_=include$138[13],
     _agf_=include$138[14],
     _agg_=include$138[15],
     _agh_=include$138[16];
    function sort_and_align(lst)
     {function _a8l_(param,_a8m_)
       {var b=_a8m_[1],a=param[1];return caml_call2(compare$37,a,b)}
      return caml_call2(_agc_,0,caml_call2(include$25[62],lst,_a8l_))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$415);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Arg$0);
    var
     Core_Arg=
      [0,
       _af4_,
       _af5_,
       _af6_,
       _af7_,
       _af8_,
       _af9_,
       _af__,
       _af$_,
       _aga_,
       _agb_,
       _agc_,
       _agd_,
       _age_,
       _agf_,
       _agg_,
       _agh_,
       sort_and_align];
    caml_register_global(5416,Core_Arg,"Core__Arg");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Command_env_var);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$416);
    caml_call1(Expect_test_collector[5][1],cst_core_src_command_env_var_m);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$417,cst$185);
    var compare$84=caml_int_compare;
    function sexp_of_t$95(param)
     {switch(param)
       {case 0:return _agi_;case 1:return _agj_;default:return _agk_}}
    function to_string$33(t){return caml_call1(to_string$0,sexp_of_t$95(t))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$418);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Command_env_var$0);
    var Core_Command_env_var=[0,compare$84,all$5,sexp_of_t$95,to_string$33];
    caml_register_global(5417,Core_Command_env_var,"Core__Command_env_var");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Filename);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$419);
    caml_call1(Expect_test_collector[5][1],cst_core_src_filename_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$420,cst$186);
    var
     Hash_set$21=
      [0,
       Hash_set$1[7],
       Hash_set$1[2],
       Hash_set$1[8],
       Hash_set$1[9],
       Hash_set$1[10],
       Hash_set$1[11],
       Hash_set$1[12],
       Hash_set$1[13],
       Hash_set$1[14],
       Hash_set$1[15]],
     Table$21=
      [0,
       Table$1[84],
       Table$1[1],
       Table$1[85],
       Table$1[86],
       Table$1[87],
       Table$1[88],
       Table$1[89],
       Table$1[90],
       Table$1[91],
       Table$1[92]],
     Set$30=
      [0,
       Set$1[76],
       Set$1[77],
       Set$1[78],
       Set$1[79],
       Set$1[80],
       Set$1[81],
       Set$1[82],
       Set$1[83],
       Set$1[2],
       Set$1[74],
       Set$1[75]],
     Map$30=
      [0,
       Map$1[108],
       Map$1[109],
       Map$1[110],
       Map$1[111],
       Map$1[112],
       Map$1[113],
       Map$1[114],
       Map$1[115],
       Map$1[2],
       Map$1[106],
       Map$1[107],
       Map$1[49]],
     Hash_set$22=
      [0,
       Hash_set$1[1],
       Hash_set$1[2],
       Hash_set$1[3],
       Hash_set$1[4],
       Hash_set$1[5],
       Hash_set$1[6],
       Hash_set$1[7]],
     Table$22=
      [0,
       Table$1[1],
       Table$1[2],
       Table$1[3],
       Table$1[4],
       Table$1[5],
       Table$1[6],
       Table$1[7],
       Table$1[8],
       Table$1[9],
       Table$1[10],
       Table$1[11],
       Table$1[12],
       Table$1[13],
       Table$1[14],
       Table$1[15],
       Table$1[16],
       Table$1[17],
       Table$1[18],
       Table$1[19],
       Table$1[20],
       Table$1[21],
       Table$1[22],
       Table$1[23],
       Table$1[24],
       Table$1[25],
       Table$1[26],
       Table$1[27],
       Table$1[28],
       Table$1[29],
       Table$1[30],
       Table$1[31],
       Table$1[32],
       Table$1[33],
       Table$1[34],
       Table$1[35],
       Table$1[36],
       Table$1[37],
       Table$1[38],
       Table$1[39],
       Table$1[40],
       Table$1[41],
       Table$1[42],
       Table$1[43],
       Table$1[44],
       Table$1[45],
       Table$1[46],
       Table$1[47],
       Table$1[48],
       Table$1[49],
       Table$1[50],
       Table$1[51],
       Table$1[52],
       Table$1[53],
       Table$1[54],
       Table$1[55],
       Table$1[56],
       Table$1[57],
       Table$1[58],
       Table$1[59],
       Table$1[60],
       Table$1[61],
       Table$1[62],
       Table$1[63],
       Table$1[64],
       Table$1[65],
       Table$1[66],
       Table$1[67],
       Table$1[68],
       Table$1[69],
       Table$1[70],
       Table$1[71],
       Table$1[72],
       Table$1[73],
       Table$1[74],
       Table$1[75],
       Table$1[76],
       Table$1[77],
       Table$1[78],
       Table$1[79],
       Table$1[80],
       Table$1[81],
       Table$1[82],
       Table$1[83],
       Table$1[84]],
     _agl_=Set$1[1],
     Set$31=
      [0,
       [0,_agl_[1],_agl_[2],_agl_[11]],
       Set$1[2],
       Set$1[3],
       Set$1[4],
       Set$1[5],
       Set$1[6],
       Set$1[7],
       Set$1[8],
       Set$1[9],
       Set$1[10],
       Set$1[11],
       Set$1[12],
       Set$1[13],
       Set$1[14],
       Set$1[15],
       Set$1[16],
       Set$1[17],
       Set$1[18],
       Set$1[19],
       Set$1[20],
       Set$1[21],
       Set$1[22],
       Set$1[23],
       Set$1[24],
       Set$1[25],
       Set$1[26],
       Set$1[27],
       Set$1[28],
       Set$1[29],
       Set$1[30],
       Set$1[31],
       Set$1[32],
       Set$1[33],
       Set$1[34],
       Set$1[35],
       Set$1[36],
       Set$1[37],
       Set$1[38],
       Set$1[39],
       Set$1[40],
       Set$1[41],
       Set$1[42],
       Set$1[43],
       Set$1[44],
       Set$1[45],
       Set$1[46],
       Set$1[47],
       Set$1[48],
       Set$1[49],
       Set$1[50],
       Set$1[51],
       Set$1[52],
       Set$1[53],
       Set$1[54],
       Set$1[55],
       Set$1[56],
       Set$1[57],
       Set$1[58],
       Set$1[59],
       Set$1[60],
       Set$1[61],
       Set$1[62],
       Set$1[63],
       Set$1[64],
       Set$1[65],
       Set$1[66],
       Set$1[67],
       Set$1[68],
       Set$1[69],
       Set$1[70],
       Set$1[71],
       Set$1[72],
       Set$1[73],
       Set$1[74],
       Set$1[75]],
     _agm_=Map$1[1],
     Map$31=
      [0,
       [0,_agm_[9],_agm_[10],_agm_[11]],
       Map$1[2],
       Map$1[3],
       Map$1[4],
       Map$1[5],
       Map$1[6],
       Map$1[7],
       Map$1[8],
       Map$1[9],
       Map$1[10],
       Map$1[11],
       Map$1[12],
       Map$1[13],
       Map$1[14],
       Map$1[15],
       Map$1[16],
       Map$1[17],
       Map$1[18],
       Map$1[19],
       Map$1[20],
       Map$1[21],
       Map$1[22],
       Map$1[23],
       Map$1[24],
       Map$1[25],
       Map$1[26],
       Map$1[27],
       Map$1[28],
       Map$1[29],
       Map$1[30],
       Map$1[31],
       Map$1[32],
       Map$1[33],
       Map$1[34],
       Map$1[35],
       Map$1[36],
       Map$1[37],
       Map$1[38],
       Map$1[39],
       Map$1[40],
       Map$1[41],
       Map$1[42],
       Map$1[43],
       Map$1[44],
       Map$1[45],
       Map$1[46],
       Map$1[47],
       Map$1[48],
       Map$1[49],
       Map$1[50],
       Map$1[51],
       Map$1[52],
       Map$1[53],
       Map$1[54],
       Map$1[55],
       Map$1[56],
       Map$1[57],
       Map$1[58],
       Map$1[59],
       Map$1[60],
       Map$1[61],
       Map$1[62],
       Map$1[63],
       Map$1[64],
       Map$1[65],
       Map$1[66],
       Map$1[67],
       Map$1[68],
       Map$1[69],
       Map$1[70],
       Map$1[71],
       Map$1[72],
       Map$1[73],
       Map$1[74],
       Map$1[75],
       Map$1[76],
       Map$1[77],
       Map$1[78],
       Map$1[79],
       Map$1[80],
       Map$1[81],
       Map$1[82],
       Map$1[83],
       Map$1[84],
       Map$1[85],
       Map$1[86],
       Map$1[87],
       Map$1[88],
       Map$1[89],
       Map$1[90],
       Map$1[91],
       Map$1[92],
       Map$1[93],
       Map$1[94],
       Map$1[95],
       Map$1[96],
       Map$1[97],
       Map$1[98],
       Map$1[99],
       Map$1[100],
       Map$1[101],
       Map$1[102],
       Map$1[103],
       Map$1[104],
       Map$1[105],
       Map$1[106],
       Map$1[107]],
     _agr_=Stdlib_Filename[1],
     _agt_=Stdlib_Filename[5],
     _agu_=Stdlib_Filename[2],
     _agw_=Stdlib_Filename[21],
     _agn_=Stdlib_Filename[7],
     _ago_=Stdlib_Filename[12],
     _agp_=Stdlib_Filename[8],
     _agq_=Stdlib_Filename[9],
     _ags_=Stdlib_Filename[6],
     _agv_=Stdlib_Filename[3],
     temp_dir_name=caml_call1(Stdlib_Filename[18],0),
     dirname=Stdlib_Filename[14],
     basename=Stdlib_Filename[13];
    function is_absolute(p){return 1 - caml_call1(_agt_,p)}
    function symbol$234(p1,p2)
     {if(caml_call1(_A1_,p1))caml_call3(failwithf$0,_agx_,p2,0);
      var s$0=p2;
      for(;;)
       {var match$0=caml_call2(_BT_,s$0,47);
        if(match$0)
         {var _a8h_=match$0[1],_a8i_=_a8h_[1],switch$0=0;
          if
           (caml_string_notequal(_a8i_,cst$193)
            &&
            caml_string_notequal(_a8i_,cst$194))
           switch$0 = 1;
          if(! switch$0){var s$1=_a8h_[2],s$0=s$1;continue}}
        var s=p1,_a8j_=caml_call2(_Fp_,cst$195,s$0);
        for(;;)
         {var match=caml_call2(_BU_,s,47),switch$1=0;
          if(match)
           {var _a8d_=match[1],_a8e_=_a8d_[1],switch$2=0;
            if(! caml_string_notequal(_a8e_,cst$187))
             {var _a8g_=_a8d_[2],switch$3=0;
              if
               (caml_string_notequal(_a8g_,cst$190)
                &&
                caml_string_notequal(_a8g_,cst$191))
               switch$3 = 1;
              if(! switch$3){var _a8k_=cst$192;switch$1 = 1;switch$2 = 1}}
            if(! switch$2)
             {var _a8f_=_a8d_[2],switch$4=0;
              if
               (caml_string_notequal(_a8f_,cst$188)
                &&
                caml_string_notequal(_a8f_,cst$189))
               switch$4 = 1;
              if(! switch$4){var s=_a8e_;continue}}}
          if(! switch$1)var _a8k_=s;
          return caml_call2(_Fp_,_a8k_,_a8j_)}}}
    function to_absolute_exn(p,relative_to)
     {return caml_call1(_agt_,relative_to)
              ?caml_call3(failwithf$0,_agy_,relative_to,0)
              :is_absolute(p)?p:symbol$234(relative_to,p)}
    function split$7(s)
     {var _a8c_=caml_call1(basename,s);return [0,caml_call1(dirname,s),_a8c_]}
    function is_posix_pathname_component(s)
     {var _a78_=caml_call2(symbol$20,s,cst$196);
      if(_a78_)
       {var _a79_=caml_call2(symbol$20,s,cst$197);
        if(_a79_)
         {var _a7__=0 < caml_ml_string_length(s)?1:0;
          if(_a7__)
           {var _a7$_=caml_ml_string_length(s) <= 255?1:0;
            if(_a7$_)
             var
              _a8a_=1 - caml_call4(_Bs_,0,0,s,47),
              _a8b_=_a8a_?1 - caml_call4(_Bs_,0,0,s,0):_a8a_;
            else
             var _a8b_=_a7$_}
          else
           var _a8b_=_a7__}
        else
         var _a8b_=_a79_}
      else
       var _a8b_=_a78_;
      return _a8b_}
    function split_extension(fn)
     {var match=caml_call2(_BU_,fn,47);
      if(match)
       var
        match$0=match[1],
        fn$0=match$0[2],
        path=match$0[1],
        fn$1=fn$0,
        dir=[0,path];
      else
       var fn$1=fn,dir=0;
      var match$1=caml_call2(_BU_,fn$1,46);
      if(match$1)
       var
        match$2=match$1[1],
        ext=match$2[2],
        base_fn=match$2[1],
        ext$0=[0,ext],
        fn$2=base_fn;
      else
       var ext$0=0,fn$2=fn$1;
      if(dir)
       var
        dir$0=dir[1],
        fn$3=caml_call2(_Fp_,dir$0,caml_call2(_Fp_,cst$198,fn$2));
      else
       var fn$3=fn$2;
      return [0,fn$3,ext$0]}
    function parts$0(filename)
     {var acc=0,filename$0=filename;
      for(;;)
       {var match=split$7(filename$0),_a77_=match[1];
        if(caml_string_notequal(_a77_,cst$199))
         {if
           (!
            caml_string_notequal(_a77_,cst$200)
            &&
            !
            caml_string_notequal(match[2],cst$201))
           return [0,_a77_,acc]}
        else
         if(! caml_string_notequal(match[2],cst$202))return [0,_a77_,acc];
        var dir=match[2],acc$0=[0,dir,acc],acc=acc$0,filename$0=_a77_;
        continue}}
    function of_parts$0(param)
     {if(param)
       {var rest=param[2],root=param[1];
        return caml_call3(_pI_,rest,root,Stdlib_Filename[4])}
      return caml_call1(_Fb_,cst_Filename_of_parts_empty_pa)}
    function of_absolute_exn(a,b)
     {if(caml_call1(_agt_,a))
       {var _a75_=[0,[1,[0,_agz_,[0,caml_call1(sexp_of_t$41,a),0]]],0];
        caml_call1
         (_nX_,
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Filename_of_absolute_exn_f),
            _a75_]])}
      if(caml_call1(_agt_,b))
       {var _a76_=[0,[1,[0,_agA_,[0,caml_call1(sexp_of_t$41,b),0]]],0];
        caml_call1
         (_nX_,
          [1,
           [0,
            caml_call1(Sexplib0_Sexp_conv[7],cst_Filename_of_absolute_exn_r),
            _a76_]])}
      var l1=parts$0(a),l2=parts$0(b),a_suffix=l1,b_suffix=l2;
      for(;;)
       {if(a_suffix && b_suffix)
         {var t2=b_suffix[2],h2=b_suffix[1],t1=a_suffix[2],h1=a_suffix[1];
          if(caml_call2(equal$21,h1,h2)){var a_suffix=t1,b_suffix=t2;continue}}
        var
         go_up=caml_call2(_qF_,b_suffix,function(param){return _agu_}),
         relpath=caml_call2(_Oq_,go_up,a_suffix);
        return relpath?of_parts$0(relpath):_agr_}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$421);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Filename$0);
    var
     Core_Filename=
      [0,
       bin_size_t$47,
       bin_write_t$47,
       bin_read_t$96,
       bin_read_t$97,
       bin_shape_t$44,
       bin_writer_t$38,
       bin_reader_t$38,
       bin_t$38,
       t_of_sexp$34,
       sexp_of_t$41,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$21,
       min$2,
       max$2,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       comparator$4,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       Map$31,
       Set$31,
       compare$37,
       hash_fold_t$15,
       hash$11,
       hashable$1,
       Table$22,
       Hash_set$22,
       Hash_queue$0,
       root$0,
       is_posix_pathname_component,
       temp_dir_name,
       _agr_,
       _agu_,
       _agv_,
       symbol$234,
       _agt_,
       is_absolute,
       _ags_,
       _agn_,
       _agp_,
       _agq_,
       _ago_,
       split_extension,
       basename,
       dirname,
       to_absolute_exn,
       of_absolute_exn,
       split$7,
       parts$0,
       of_parts$0,
       _agw_,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424,
       667828424,
       [0,
        [0,
         bin_size_t$47,
         bin_write_t$47,
         bin_read_t$96,
         bin_read_t$97,
         bin_shape_t$44,
         bin_writer_t$38,
         bin_reader_t$38,
         bin_t$38,
         compare$37,
         t_of_sexp$34,
         sexp_of_t$41,
         comparator$4,
         Map$30,
         Set$30,
         Table$21,
         Hash_set$21,
         hashable$1]]];
    caml_register_global(5419,Core_Filename,"Core__Filename");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Command_shape);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$422);
    caml_call1(Expect_test_collector[5][1],cst_core_src_command_shape_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$423,cst$203);
    var
     _agB_=caml_call1(Bin_prot_Shape[2][1],cst_t$209),
     _agC_=
      [0,
       [0,
        cst_Concat,
        [0,
         caml_call1(_ZU_,caml_call1(caml_call1(Bin_prot_Shape[13],_agB_),0)),
         0]],
       [0,[0,cst_Ad_hoc,[0,_Yn_,0]],0]],
     _agD_=caml_call1(Bin_prot_Shape[2][1],cst_t$210),
     _agE_=
      [0,
       [0,cst_Maybe,[0,caml_call1(caml_call1(Bin_prot_Shape[13],_agD_),0),0]],
       _agC_],
     _agF_=caml_call1(Bin_prot_Shape[2][1],cst_t$211),
     _agH_=
      [0,
       _agG_,
       [0,
        [0,cst_One,[0,_Yn_,0]],
        [0,
         [0,cst_Many,[0,caml_call1(caml_call1(Bin_prot_Shape[13],_agF_),0),0]],
         _agE_]]],
     _agI_=caml_call1(Bin_prot_Shape[9],_agH_),
     _agJ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$212),0,_agI_],0],
     _agK_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_),
     group$119=caml_call2(Bin_prot_Shape[6],_agK_,_agJ_),
     _agL_=caml_call1(Bin_prot_Shape[2][1],cst_t$213),
     bin_shape_t$112=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$119,_agL_),0);
    function bin_size_t$71(param)
     {if(typeof param === "number")
       return 1;
      else
       switch(param[0])
        {case 0:
          var v1=param[1],_a70_=caml_call1(_Xu_,v1);
          return caml_call2(Bin_prot_Common[23],1,_a70_);
         case 1:
          var v1$0=param[1],_a71_=bin_size_t$71(v1$0);
          return caml_call2(Bin_prot_Common[23],1,_a71_);
         case 2:
          var v1$1=param[1],_a72_=bin_size_t$71(v1$1);
          return caml_call2(Bin_prot_Common[23],1,_a72_);
         case 3:
          var v1$2=param[1],_a73_=caml_call2(_XJ_,bin_size_t$71,v1$2);
          return caml_call2(Bin_prot_Common[23],1,_a73_);
         default:
          var v1$3=param[1],_a74_=caml_call1(_Xu_,v1$3);
          return caml_call2(Bin_prot_Common[23],1,_a74_)}}
    function bin_write_t$72(buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return caml_call3(Bin_prot_Write[31],buf,pos$0,0);
       else
        switch(param$0[0])
         {case 0:
           var v1=param$0[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos$0,1);
           return caml_call3(_Yp_,buf,pos$1,v1);
          case 1:
           var
            v1$0=param$0[1],
            pos$2=caml_call3(Bin_prot_Write[31],buf,pos$0,2),
            pos$0=pos$2,
            param$0=v1$0;
           continue;
          case 2:
           var
            v1$1=param$0[1],
            pos$3=caml_call3(Bin_prot_Write[31],buf,pos$0,3),
            pos$0=pos$3,
            param$0=v1$1;
           continue;
          case 3:
           var
            v1$2=param$0[1],
            pos$4=caml_call3(Bin_prot_Write[31],buf,pos$0,4);
           return caml_call3(caml_call1(_ZW_,bin_write_t$72),buf,pos$4,v1$2);
          default:
           var
            v1$3=param$0[1],
            pos$5=caml_call3(Bin_prot_Write[31],buf,pos$0,5);
           return caml_call3(_Yp_,buf,pos$5,v1$3)}}
    var bin_writer_t$99=[0,bin_size_t$71,bin_write_t$72];
    function bin_read_t$142(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$0,
               pos_ref[1])}
    function bin_read_t$143(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(5 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_agM_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:var arg_1=caml_call2(_Yr_,buf,pos_ref);return [0,arg_1];
        case 2:var arg_1$0=bin_read_t$143(buf,pos_ref);return [1,arg_1$0];
        case 3:var arg_1$1=bin_read_t$143(buf,pos_ref);return [2,arg_1$1];
        case 4:
         var arg_1$2=caml_call2(caml_call1(_ZY_,bin_read_t$143),buf,pos_ref);
         return [3,arg_1$2];
        default:var arg_1$3=caml_call2(_Yr_,buf,pos_ref);return [4,arg_1$3]}}
    var
     bin_reader_t$99=[0,bin_read_t$143,bin_read_t$142],
     bin_t$99=[0,bin_shape_t$112,bin_writer_t$99,bin_reader_t$99];
    function compare$85(a_001,b_002)
     {var a_001$0=a_001,b_002$0=b_002;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_001$0,b_002$0))return 0;
        var switch$0=0;
        if(typeof a_001$0 === "number")
         return typeof b_002$0 === "number"?0:-1;
        else
         switch(a_001$0[0])
          {case 0:
            var _a7U_=a_001$0[1];
            if(typeof b_002$0 !== "number")
             {if(0 === b_002$0[0])
               {var b_004=b_002$0[1];
                return caml_call2(Ppx_compare_lib[6][8],_a7U_,b_004)}
              return -1}
            break;
           case 1:
            var _a7V_=a_001$0[1];
            if(typeof b_002$0 !== "number")
             switch(b_002$0[0])
              {case 0:switch$0 = 1;break;
               case 1:
                var b_002$1=b_002$0[1],a_001$0=_a7V_,b_002$0=b_002$1;continue;
               default:return -1}
            break;
           case 2:
            var _a7W_=a_001$0[1];
            if(typeof b_002$0 !== "number")
             switch(b_002$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:
                var b_002$2=b_002$0[1],a_001$0=_a7W_,b_002$0=b_002$2;continue;
               default:return -1}
            break;
           case 3:
            var _a7X_=a_001$0[1];
            if(typeof b_002$0 !== "number")
             switch(b_002$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:switch$0 = 3;break;
               case 3:
                var
                 b_010=b_002$0[1],
                 _a7Y_=function(a_011,b_012){return compare$85(a_011,b_012)};
                return caml_call3(Ppx_compare_lib[6][11],_a7Y_,_a7X_,b_010);
               default:return -1}
            break;
           default:
            var _a7Z_=a_001$0[1];
            if(typeof b_002$0 !== "number")
             switch(b_002$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:switch$0 = 3;break;
               case 3:return 1;
               default:
                var b_014=b_002$0[1];
                return caml_call2(Ppx_compare_lib[6][8],_a7Z_,b_014)}}
        switch(switch$0)
         {case 0:return 1;case 1:return 1;case 2:return 1;default:return 1}}}
    var t_of_sexp$85=function _a7T_(_a7S_){return _a7T_.fun(_a7S_)};
    caml_update_dummy
     (t_of_sexp$85,
      function(sexp_019)
       {if(0 === sexp_019[0])
         {var
           _a7M_=sexp_019[1],
           _a7N_=caml_string_compare(_a7M_,cst_ad_hoc),
           switch$0=0;
          if(0 <= _a7N_)
           if(0 < _a7N_)
            if(caml_string_notequal(_a7M_,cst_concat))
             if(caml_string_notequal(_a7M_,cst_many))
              if(caml_string_notequal(_a7M_,cst_maybe))
               if(caml_string_notequal(_a7M_,cst_one))
                {if(! caml_string_notequal(_a7M_,cst_zero$1))switch$0 = 1}
               else
                switch$0 = 2;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 5;
           else
            switch$0 = 6;
          else
           if(caml_string_notequal(_a7M_,cst_Ad_hoc$0))
            if(caml_string_notequal(_a7M_,cst_Concat$0))
             if(caml_string_notequal(_a7M_,cst_Many$0))
              if(caml_string_notequal(_a7M_,cst_Maybe$0))
               if(caml_string_notequal(_a7M_,cst_One$0))
                {if(! caml_string_notequal(_a7M_,cst_Zero$2))switch$0 = 1}
               else
                switch$0 = 2;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 5;
           else
            switch$0 = 6;
          switch(switch$0)
           {case 1:return 0;
            case 2:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_017,sexp_019);
            case 3:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_017,sexp_019);
            case 4:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_017,sexp_019);
            case 5:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_017,sexp_019);
            case 6:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_017,sexp_019)
            }}
        else
         {var _a7O_=sexp_019[1];
          if(! _a7O_)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7],error_source_017,sexp_019);
          var _a7P_=_a7O_[1];
          if(0 !== _a7P_[0])
           return caml_call2
                   (Sexplib0_Sexp_conv_error[6],error_source_017,sexp_019);
          var
           _a7Q_=_a7P_[1],
           _a7R_=caml_string_compare(_a7Q_,cst_ad_hoc$0),
           switch$1=0;
          if(0 <= _a7R_)
           if(0 < _a7R_)
            if(caml_string_notequal(_a7Q_,cst_concat$0))
             if(caml_string_notequal(_a7Q_,cst_many$0))
              if(caml_string_notequal(_a7Q_,cst_maybe$0))
               if(caml_string_notequal(_a7Q_,cst_one$0))
                {if(! caml_string_notequal(_a7Q_,cst_zero$2))switch$1 = 6}
               else
                switch$1 = 1;
              else
               switch$1 = 3;
             else
              switch$1 = 2;
            else
             switch$1 = 4;
           else
            switch$1 = 5;
          else
           if(caml_string_notequal(_a7Q_,cst_Ad_hoc$1))
            if(caml_string_notequal(_a7Q_,cst_Concat$1))
             if(caml_string_notequal(_a7Q_,cst_Many$1))
              if(caml_string_notequal(_a7Q_,cst_Maybe$1))
               if(caml_string_notequal(_a7Q_,cst_One$1))
                {if(! caml_string_notequal(_a7Q_,cst_Zero$3))switch$1 = 6}
               else
                switch$1 = 1;
              else
               switch$1 = 3;
             else
              switch$1 = 2;
            else
             switch$1 = 4;
           else
            switch$1 = 5;
          switch(switch$1)
           {case 1:
             var sexp_args_021=_a7O_[2];
             if(sexp_args_021 && ! sexp_args_021[2])
              {var
                arg0_022=sexp_args_021[1],
                res0_023=caml_call1(_$r_,arg0_022);
               return [0,res0_023]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_017,
                      _a7Q_,
                      sexp_019);
            case 2:
             var sexp_args_026=_a7O_[2];
             if(sexp_args_026 && ! sexp_args_026[2])
              {var
                arg0_027=sexp_args_026[1],
                res0_028=caml_call1(t_of_sexp$85,arg0_027);
               return [1,res0_028]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_017,
                      _a7Q_,
                      sexp_019);
            case 3:
             var sexp_args_031=_a7O_[2];
             if(sexp_args_031 && ! sexp_args_031[2])
              {var
                arg0_032=sexp_args_031[1],
                res0_033=caml_call1(t_of_sexp$85,arg0_032);
               return [2,res0_033]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_017,
                      _a7Q_,
                      sexp_019);
            case 4:
             var sexp_args_036=_a7O_[2];
             if(sexp_args_036 && ! sexp_args_036[2])
              {var
                arg0_037=sexp_args_036[1],
                res0_038=caml_call2(_$D_,t_of_sexp$85,arg0_037);
               return [3,res0_038]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_017,
                      _a7Q_,
                      sexp_019);
            case 5:
             var sexp_args_041=_a7O_[2];
             if(sexp_args_041 && ! sexp_args_041[2])
              {var
                arg0_042=sexp_args_041[1],
                res0_043=caml_call1(_$r_,arg0_042);
               return [4,res0_043]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_017,
                      _a7Q_,
                      sexp_019);
            case 6:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3],error_source_017,sexp_019)
            }}
        return caml_call2
                (Sexplib0_Sexp_conv_error[8],error_source_017,sexp_019)});
    function sexp_of_t$96(param)
     {if(typeof param === "number")
       return _agN_;
      else
       switch(param[0])
        {case 0:
          var arg0_044=param[1],res0_045=caml_call1(_$s_,arg0_044);
          return [1,[0,_agO_,[0,res0_045,0]]];
         case 1:
          var arg0_046=param[1],res0_047=sexp_of_t$96(arg0_046);
          return [1,[0,_agP_,[0,res0_047,0]]];
         case 2:
          var arg0_048=param[1],res0_049=sexp_of_t$96(arg0_048);
          return [1,[0,_agQ_,[0,res0_049,0]]];
         case 3:
          var
           arg0_050=param[1],
           res0_051=caml_call2(_$E_,sexp_of_t$96,arg0_050);
          return [1,[0,_agR_,[0,res0_051,0]]];
         default:
          var arg0_052=param[1],res0_053=caml_call1(_$s_,arg0_052);
          return [1,[0,_agS_,[0,res0_053,0]]]}}
    var
     Expect_test_collector$3=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _agT_(param)
     {var
       _a7J_=caml_call1(Bin_prot_Shape[21],bin_shape_t$112),
       _a7K_=caml_call1(Bin_prot_Shape[18][4],_a7J_);
      caml_call1(Stdlib[46],_a7K_);
      var
       _a7L_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$0),
         19,
         434,
         446,
         452];
      return caml_call1(Expect_test_collector$3[1],_a7L_)}
    var
     _agU_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$1),
       19,
       434,
       453,
       491],
     _agX_=
      [0,
       [0,
        _agW_,
        _agV_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$2),
         19,
         434,
         446,
         452],
        _agU_],
       0],
     _agY_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$4),
       17,
       364,
       372,
       492],
     _agZ_=
      caml_call1(Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9);
    caml_call9
     (Expect_test_collector$3[3],
      _agZ_,
      _agY_,
      cst_core_src_command_shape_ml$3,
      0,
      0,
      _agX_,
      0,
      Inline_test_config,
      _agT_);
    function invariant$13(t)
     {function _a7F_(param)
       {if(typeof t === "number")
         return 0;
        else
         switch(t[0])
          {case 0:return 0;
           case 1:
            var _a7G_=t[1];
            return typeof _a7G_ === "number"
                    ?caml_call1(Stdlib[2],cst_Many_Zero_should_be_just_Z)
                    :invariant$13(_a7G_);
           case 2:
            var _a7H_=t[1];
            return typeof _a7H_ === "number"
                    ?caml_call1(Stdlib[2],cst_Maybe_Zero_should_be_just_)
                    :invariant$13(_a7H_);
           case 3:
            var _a7I_=t[1];
            if(_a7I_ && _a7I_[2])
             return caml_call2(include$25[9],_a7I_,invariant$13);
            return caml_call1(Stdlib[2],cst_Flatten_zero_and_one_eleme);
           default:return 0}}
      return caml_call4(Base_Invariant[1],_ag0_,t,sexp_of_t$96,_a7F_)}
    function t_of_sexp$86(sexp)
     {var t=caml_call1(t_of_sexp$85,sexp);invariant$13(t);return t}
    function usage(param)
     {if(typeof param === "number")
       return cst$204;
      else
       switch(param[0])
        {case 0:var usage$0=param[1];return usage$0;
         case 1:
          var _a7z_=param[1];
          if(typeof _a7z_ === "number")
           return caml_call1(Stdlib[2],cst_bug_in_command_ml);
          else
           {if(0 === _a7z_[0])
             {var _a7A_=usage(_a7z_);
              return caml_call2(include$4[2],_ag1_,_a7A_)}
            var _a7B_=usage(_a7z_);
            return caml_call2(include$4[2],_ag2_,_a7B_)}
         case 2:
          var _a7C_=param[1];
          if(typeof _a7C_ === "number")
           return caml_call1(Stdlib[2],cst_bug_in_command_ml$0);
          var _a7D_=usage(_a7C_);
          return caml_call2(include$4[2],_ag3_,_a7D_);
         case 3:
          var ts=param[1],_a7E_=caml_call2(include$25[76],ts,usage);
          return caml_call2(include$41[54],_ag4_,_a7E_);
         default:var usage$1=param[1];return usage$1}}
    var
     _ag5_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,
         [0,cst_Usage,[0,_Yn_,0]],
         [0,[0,cst_Grammar,[0,bin_shape_t$112,0]],0]]),
     _ag6_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$214),0,_ag5_],0],
     _ag7_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$1),
     group$120=caml_call2(Bin_prot_Shape[6],_ag7_,_ag6_),
     _ag8_=caml_call1(Bin_prot_Shape[2][1],cst_t$215),
     bin_shape_t$113=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$120,_ag8_),0);
    function bin_size_t$72(param)
     {if(0 === param[0])
       {var v1=param[1],_a7x_=caml_call1(_Xu_,v1);
        return caml_call2(Bin_prot_Common[23],1,_a7x_)}
      var v1$0=param[1],_a7y_=bin_size_t$71(v1$0);
      return caml_call2(Bin_prot_Common[23],1,_a7y_)}
    function bin_write_t$73(buf,pos,param)
     {if(0 === param[0])
       {var v1=param[1],pos$0=caml_call3(Bin_prot_Write[31],buf,pos,0);
        return caml_call3(_Yp_,buf,pos$0,v1)}
      var v1$0=param[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos,1);
      return bin_write_t$72(buf,pos$1,v1$0)}
    var bin_writer_t$100=[0,bin_size_t$72,bin_write_t$73];
    function bin_read_t$144(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$2,
               pos_ref[1])}
    function bin_read_t$145(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(0 === match){var arg_1=caml_call2(_Yr_,buf,pos_ref);return [0,arg_1]}
      if(1 === match)
       {var arg_1$0=bin_read_t$143(buf,pos_ref);return [1,arg_1$0]}
      return caml_call2(Bin_prot_Common[18],_ag9_,pos_ref[1])}
    var
     bin_reader_t$100=[0,bin_read_t$145,bin_read_t$144],
     bin_t$100=[0,bin_shape_t$113,bin_writer_t$100,bin_reader_t$100];
    function compare$86(a_054,b_055)
     {if(caml_call2(Ppx_compare_lib[1],a_054,b_055))return 0;
      if(0 === a_054[0])
       {var _a7v_=a_054[1];
        if(0 === b_055[0])
         {var b_057=b_055[1];
          return caml_call2(Ppx_compare_lib[6][8],_a7v_,b_057)}
        return -1}
      var _a7w_=a_054[1];
      if(0 === b_055[0])return 1;
      var b_059=b_055[1];
      return compare$85(_a7w_,b_059)}
    function t_of_sexp$87(sexp_064)
     {if(0 === sexp_064[0])
       {var _a7r_=sexp_064[1],switch$0=0;
        if(caml_string_notequal(_a7r_,cst_Grammar$0))
         {var switch$1=0;
          if(caml_string_notequal(_a7r_,cst_Usage$0))
           if(caml_string_notequal(_a7r_,cst_grammar))
            {if(caml_string_notequal(_a7r_,cst_usage))
              {switch$0 = 1;switch$1 = 1}}
           else
            switch$1 = 1;
          if(! switch$1)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_062,sexp_064)}
        if(! switch$0)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],error_source_062,sexp_064)}
      else
       {var _a7s_=sexp_064[1];
        if(! _a7s_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_062,sexp_064);
        var _a7t_=_a7s_[1];
        if(0 !== _a7t_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_062,sexp_064);
        var _a7u_=_a7t_[1],switch$2=0;
        if(caml_string_notequal(_a7u_,cst_Grammar$1))
         {var switch$3=0;
          if(caml_string_notequal(_a7u_,cst_Usage$1))
           if(caml_string_notequal(_a7u_,cst_grammar$0))
            {if(caml_string_notequal(_a7u_,cst_usage$0))
              {switch$2 = 1;switch$3 = 1}}
           else
            switch$3 = 1;
          if(! switch$3)
           {var sexp_args_066=_a7s_[2];
            if(sexp_args_066 && ! sexp_args_066[2])
             {var
               arg0_067=sexp_args_066[1],
               res0_068=caml_call1(_$r_,arg0_067);
              return [0,res0_068]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_062,
                     _a7u_,
                     sexp_064)}}
        if(! switch$2)
         {var sexp_args_071=_a7s_[2];
          if(sexp_args_071 && ! sexp_args_071[2])
           {var arg0_072=sexp_args_071[1],res0_073=t_of_sexp$86(arg0_072);
            return [1,res0_073]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_062,
                   _a7u_,
                   sexp_064)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_062,sexp_064)}
    function sexp_of_t$97(param)
     {if(0 === param[0])
       {var arg0_074=param[1],res0_075=caml_call1(_$s_,arg0_074);
        return [1,[0,_ag__,[0,res0_075,0]]]}
      var arg0_076=param[1],res0_077=sexp_of_t$96(arg0_076);
      return [1,[0,_ag$_,[0,res0_077,0]]]}
    var
     Expect_test_collector$4=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _aha_(param)
     {var
       _a7o_=caml_call1(Bin_prot_Shape[21],bin_shape_t$113),
       _a7p_=caml_call1(Bin_prot_Shape[18][4],_a7o_);
      caml_call1(Stdlib[46],_a7p_);
      var
       _a7q_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$5),
         66,
         1968,
         1978,
         1984];
      return caml_call1(Expect_test_collector$4[1],_a7q_)}
    var
     _ahb_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$6),
       66,
       1968,
       1985,
       2023],
     _ahe_=
      [0,
       [0,
        _ahd_,
        _ahc_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$7),
         66,
         1968,
         1978,
         1984],
        _ahb_],
       0],
     _ahf_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$9),
       64,
       1902,
       1908,
       2024],
     _ahg_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$0);
    caml_call9
     (Expect_test_collector$4[3],
      _ahg_,
      _ahf_,
      cst_core_src_command_shape_ml$8,
      0,
      0,
      _ahe_,
      0,
      Inline_test_config,
      _aha_);
    var
     _ahh_=
      [0,
       [0,cst_name$2,_Yn_],
       [0,[0,cst_doc,_Yn_],[0,[0,cst_aliases,caml_call1(_ZU_,_Yn_)],0]]],
     _ahi_=caml_call1(Bin_prot_Shape[8],_ahh_),
     _ahj_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$216),0,_ahi_],0],
     _ahk_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$3),
     group$121=caml_call2(Bin_prot_Shape[6],_ahk_,_ahj_),
     _ahl_=caml_call1(Bin_prot_Shape[2][1],cst_t$217),
     bin_shape_t$114=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$121,_ahl_),0);
    function bin_size_t$73(param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _a7l_=caml_call1(_Xu_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_a7l_),
       _a7m_=caml_call1(_Xu_,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_a7m_),
       _a7n_=caml_call2(_XJ_,_Xu_,v3);
      return caml_call2(Bin_prot_Common[23],size$0,_a7n_)}
    function bin_write_t$74(buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(_Yp_,buf,pos,v1),
       pos$1=caml_call3(_Yp_,buf,pos$0,v2);
      return caml_call3(caml_call1(_ZW_,_Yp_),buf,pos$1,v3)}
    var bin_writer_t$101=[0,bin_size_t$73,bin_write_t$74];
    function bin_read_t$146(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$4,
               pos_ref[1])}
    function bin_read_t$147(buf,pos_ref)
     {var
       v_name=caml_call2(_Yr_,buf,pos_ref),
       v_doc=caml_call2(_Yr_,buf,pos_ref),
       v_aliases=caml_call2(caml_call1(_ZY_,_Yr_),buf,pos_ref);
      return [0,v_name,v_doc,v_aliases]}
    var
     bin_reader_t$101=[0,bin_read_t$147,bin_read_t$146],
     bin_t$101=[0,bin_shape_t$114,bin_writer_t$101,bin_reader_t$101];
    function compare$87(a_078,b_079)
     {if(caml_call2(Ppx_compare_lib[1],a_078,b_079))return 0;
      var n=caml_call2(Ppx_compare_lib[6][8],a_078[1],b_079[1]);
      if(0 === n)
       {var n$0=caml_call2(Ppx_compare_lib[6][8],a_078[2],b_079[2]);
        if(0 === n$0)
         {var
           _a7i_=b_079[3],
           _a7j_=a_078[3],
           _a7k_=
            function(a_080,b_081)
             {return caml_call2(Ppx_compare_lib[6][8],a_080,b_081)};
          return caml_call3(Ppx_compare_lib[6][11],_a7k_,_a7j_,_a7i_)}
        return n$0}
      return n}
    function t_of_sexp$88(sexp_083)
     {if(0 === sexp_083[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_099,sexp_083);
      var
       field_sexps_084=sexp_083[1],
       name_085=[0,0],
       doc_087=[0,0],
       aliases_089=[0,0],
       duplicates_091=[0,0],
       extra_092=[0,0],
       param=field_sexps_084;
      for(;;)
       {if(param)
         {var _a6$_=param[1];
          if(1 === _a6$_[0])
           {var _a7a_=_a6$_[1];
            if(_a7a_)
             {var _a7b_=_a7a_[1];
              if(0 === _a7b_[0])
               {var _a7c_=_a7a_[2],_a7d_=_a7b_[1],switch$0=0;
                if(! _a7c_ || ! _a7c_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_101=param[2],
                   field_sexp_094$3=
                    function(_a7h_)
                     {function field_sexp_094(param)
                       {if(_a7h_)
                         {if(_a7h_[2])throw [0,Assert_failure,_ahm_];
                          var x_102=_a7h_[1];
                          return x_102}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_099,sexp_083)}
                      return field_sexp_094},
                   field_sexp_094=field_sexp_094$3(_a7c_);
                  if(caml_string_notequal(_a7d_,cst_aliases$0))
                   if(caml_string_notequal(_a7d_,cst_doc$0))
                    if(caml_string_notequal(_a7d_,cst_name$3))
                     {if(Sexplib0_Sexp_conv[26][1])
                       extra_092[1] = [0,_a7d_,extra_092[1]]}
                    else
                     if(name_085[1])
                      duplicates_091[1] = [0,_a7d_,duplicates_091[1]];
                     else
                      {var
                        field_sexp_094$0=field_sexp_094(0),
                        fvalue_098=caml_call1(_$r_,field_sexp_094$0);
                       name_085[1] = [0,fvalue_098]}
                   else
                    if(doc_087[1])
                     duplicates_091[1] = [0,_a7d_,duplicates_091[1]];
                    else
                     {var
                       field_sexp_094$1=field_sexp_094(0),
                       fvalue_097=caml_call1(_$r_,field_sexp_094$1);
                      doc_087[1] = [0,fvalue_097]}
                  else
                   if(aliases_089[1])
                    duplicates_091[1] = [0,_a7d_,duplicates_091[1]];
                   else
                    {var
                      field_sexp_094$2=field_sexp_094(0),
                      fvalue_096=caml_call2(_$D_,_$r_,field_sexp_094$2);
                     aliases_089[1] = [0,fvalue_096]}
                  var param=tail_101;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_099,_a6$_)}
        if(duplicates_091[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_099,
                  duplicates_091[1],
                  sexp_083);
        if(extra_092[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_099,
                  extra_092[1],
                  sexp_083);
        var _a7e_=name_085[1],_a7f_=doc_087[1],_a7g_=aliases_089[1];
        if(_a7e_ && _a7f_ && _a7g_)
         {var aliases_090=_a7g_[1],doc_088=_a7f_[1],name_086=_a7e_[1];
          return [0,name_086,doc_088,aliases_090]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_099,
                 sexp_083,
                 [0,
                  [0,0 === name_085[1]?1:0,cst_name$4],
                  [0,
                   [0,0 === doc_087[1]?1:0,cst_doc$1],
                   [0,[0,0 === aliases_089[1]?1:0,cst_aliases$1],0]]])}}
    function sexp_of_t$98(param)
     {var
       aliases_108=param[3],
       doc_106=param[2],
       name_104=param[1],
       arg_109=caml_call2(_$E_,_$s_,aliases_108),
       bnds_103=[0,[1,[0,_ahn_,[0,arg_109,0]]],0],
       arg_107=caml_call1(_$s_,doc_106),
       bnds_103$0=[0,[1,[0,_aho_,[0,arg_107,0]]],bnds_103],
       arg_105=caml_call1(_$s_,name_104),
       bnds_103$1=[0,[1,[0,_ahp_,[0,arg_105,0]]],bnds_103$0];
      return [1,bnds_103$1]}
    var
     Expect_test_collector$5=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _ahq_(param)
     {var
       _a68_=caml_call1(Bin_prot_Shape[21],bin_shape_t$114),
       _a69_=caml_call1(Bin_prot_Shape[18][4],_a68_);
      caml_call1(Stdlib[46],_a69_);
      var
       _a6__=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$10),
         84,
         2335,
         2345,
         2351];
      return caml_call1(Expect_test_collector$5[1],_a6__)}
    var
     _ahr_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$11),
       84,
       2335,
       2352,
       2390],
     _ahu_=
      [0,
       [0,
        _aht_,
        _ahs_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$12),
         84,
         2335,
         2345,
         2351],
        _ahr_],
       0],
     _ahv_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$14),
       82,
       2269,
       2275,
       2391],
     _ahw_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$1);
    caml_call9
     (Expect_test_collector$5[3],
      _ahw_,
      _ahv_,
      cst_core_src_command_shape_ml$13,
      0,
      0,
      _ahu_,
      0,
      Inline_test_config,
      _ahq_);
    var
     _ahx_=
      [0,
       [0,cst_anons,bin_shape_t$113],
       [0,[0,cst_flags,caml_call1(_ZU_,bin_shape_t$114)],0]],
     _ahy_=
      [0,[0,cst_summary,_Yn_],[0,[0,cst_readme,caml_call1(_ZN_,_Yn_)],_ahx_]],
     _ahz_=caml_call1(Bin_prot_Shape[8],_ahy_),
     _ahA_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$218),0,_ahz_],0],
     _ahB_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$5),
     group$122=caml_call2(Bin_prot_Shape[6],_ahB_,_ahA_),
     _ahC_=caml_call1(Bin_prot_Shape[2][1],cst_t$219),
     bin_shape_t$115=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$122,_ahC_),0);
    function bin_size_t$74(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _a64_=caml_call1(_Xu_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_a64_),
       _a65_=caml_call2(_XG_,_Xu_,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_a65_),
       _a66_=bin_size_t$72(v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_a66_),
       _a67_=caml_call2(_XJ_,bin_size_t$73,v4);
      return caml_call2(Bin_prot_Common[23],size$1,_a67_)}
    function bin_write_t$75(buf,pos,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(_Yp_,buf,pos,v1),
       pos$1=caml_call3(caml_call1(_ZP_,_Yp_),buf,pos$0,v2),
       pos$2=bin_write_t$73(buf,pos$1,v3);
      return caml_call3(caml_call1(_ZW_,bin_write_t$74),buf,pos$2,v4)}
    var bin_writer_t$102=[0,bin_size_t$74,bin_write_t$75];
    function bin_read_t$148(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$6,
               pos_ref[1])}
    function bin_read_t$149(buf,pos_ref)
     {var
       v_summary=caml_call2(_Yr_,buf,pos_ref),
       v_readme=caml_call2(caml_call1(_ZR_,_Yr_),buf,pos_ref),
       v_anons=bin_read_t$145(buf,pos_ref),
       v_flags=caml_call2(caml_call1(_ZY_,bin_read_t$147),buf,pos_ref);
      return [0,v_summary,v_readme,v_anons,v_flags]}
    var
     bin_reader_t$102=[0,bin_read_t$149,bin_read_t$148],
     bin_t$102=[0,bin_shape_t$115,bin_writer_t$102,bin_reader_t$102];
    function compare$88(a_110,b_111)
     {if(caml_call2(Ppx_compare_lib[1],a_110,b_111))return 0;
      var n=caml_call2(Ppx_compare_lib[6][8],a_110[1],b_111[1]);
      if(0 === n)
       {var
         _a6Y_=b_111[2],
         _a6Z_=a_110[2],
         _a60_=
          function(a_112,b_113)
           {return caml_call2(Ppx_compare_lib[6][8],a_112,b_113)},
         n$0=caml_call3(Ppx_compare_lib[6][12],_a60_,_a6Z_,_a6Y_);
        if(0 === n$0)
         {var n$1=compare$86(a_110[3],b_111[3]);
          if(0 === n$1)
           {var
             _a61_=b_111[4],
             _a62_=a_110[4],
             _a63_=function(a_114,b_115){return compare$87(a_114,b_115)};
            return caml_call3(Ppx_compare_lib[6][11],_a63_,_a62_,_a61_)}
          return n$1}
        return n$0}
      return n}
    function t_of_sexp$89(sexp_117)
     {if(0 === sexp_117[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_136,sexp_117);
      var
       field_sexps_118=sexp_117[1],
       summary_119=[0,0],
       readme_121=[0,0],
       anons_123=[0,0],
       flags_125=[0,0],
       duplicates_127=[0,0],
       extra_128=[0,0],
       param=field_sexps_118;
      for(;;)
       {if(param)
         {var _a6O_=param[1];
          if(1 === _a6O_[0])
           {var _a6P_=_a6O_[1];
            if(_a6P_)
             {var _a6Q_=_a6P_[1];
              if(0 === _a6Q_[0])
               {var _a6R_=_a6P_[2],_a6S_=_a6Q_[1],switch$0=0;
                if(! _a6R_ || ! _a6R_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_138=param[2],
                   field_sexp_130$4=
                    function(_a6X_)
                     {function field_sexp_130(param)
                       {if(_a6X_)
                         {if(_a6X_[2])throw [0,Assert_failure,_ahD_];
                          var x_139=_a6X_[1];
                          return x_139}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_136,sexp_117)}
                      return field_sexp_130},
                   field_sexp_130=field_sexp_130$4(_a6R_);
                  if(caml_string_notequal(_a6S_,cst_anons$0))
                   if(caml_string_notequal(_a6S_,cst_flags$0))
                    if(caml_string_notequal(_a6S_,cst_readme$0))
                     if(caml_string_notequal(_a6S_,cst_summary$0))
                      {if(Sexplib0_Sexp_conv[26][1])
                        extra_128[1] = [0,_a6S_,extra_128[1]]}
                     else
                      if(summary_119[1])
                       duplicates_127[1] = [0,_a6S_,duplicates_127[1]];
                      else
                       {var
                         field_sexp_130$0=field_sexp_130(0),
                         fvalue_135=caml_call1(_$r_,field_sexp_130$0);
                        summary_119[1] = [0,fvalue_135]}
                    else
                     if(readme_121[1])
                      duplicates_127[1] = [0,_a6S_,duplicates_127[1]];
                     else
                      {var
                        field_sexp_130$1=field_sexp_130(0),
                        fvalue_134=caml_call1(_$r_,field_sexp_130$1);
                       readme_121[1] = [0,fvalue_134]}
                   else
                    if(flags_125[1])
                     duplicates_127[1] = [0,_a6S_,duplicates_127[1]];
                    else
                     {var
                       field_sexp_130$2=field_sexp_130(0),
                       fvalue_132=caml_call2(_$D_,t_of_sexp$88,field_sexp_130$2);
                      flags_125[1] = [0,fvalue_132]}
                  else
                   if(anons_123[1])
                    duplicates_127[1] = [0,_a6S_,duplicates_127[1]];
                   else
                    {var
                      field_sexp_130$3=field_sexp_130(0),
                      fvalue_133=t_of_sexp$87(field_sexp_130$3);
                     anons_123[1] = [0,fvalue_133]}
                  var param=tail_138;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_136,_a6O_)}
        if(duplicates_127[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_136,
                  duplicates_127[1],
                  sexp_117);
        if(extra_128[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_136,
                  extra_128[1],
                  sexp_117);
        var
         _a6T_=summary_119[1],
         _a6V_=anons_123[1],
         _a6W_=flags_125[1],
         _a6U_=readme_121[1];
        if(_a6T_ && _a6V_ && _a6W_)
         {var flags_126=_a6W_[1],anons_124=_a6V_[1],summary_120=_a6T_[1];
          return [0,summary_120,_a6U_,anons_124,flags_126]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_136,
                 sexp_117,
                 [0,
                  [0,0 === summary_119[1]?1:0,cst_summary$1],
                  [0,
                   [0,0 === anons_123[1]?1:0,cst_anons$1],
                   [0,[0,0 === flags_125[1]?1:0,cst_flags$1],0]]])}}
    function sexp_of_t$99(param)
     {var
       flags_149=param[4],
       anons_147=param[3],
       readme_143=param[2],
       summary_141=param[1],
       arg_150=caml_call2(_$E_,sexp_of_t$98,flags_149),
       bnds_140=[0,[1,[0,_ahE_,[0,arg_150,0]]],0],
       arg_148=sexp_of_t$97(anons_147),
       bnds_140$0=[0,[1,[0,_ahF_,[0,arg_148,0]]],bnds_140];
      if(readme_143)
       var
        v_144=readme_143[1],
        arg_146=caml_call1(_$s_,v_144),
        bnd_145=[1,[0,_ahG_,[0,arg_146,0]]],
        bnds_140$1=[0,bnd_145,bnds_140$0];
      else
       var bnds_140$1=bnds_140$0;
      var
       arg_142=caml_call1(_$s_,summary_141),
       bnds_140$2=[0,[1,[0,_ahH_,[0,arg_142,0]]],bnds_140$1];
      return [1,bnds_140$2]}
    var
     Expect_test_collector$6=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _ahI_(param)
     {var
       _a6L_=caml_call1(Bin_prot_Shape[21],bin_shape_t$115),
       _a6M_=caml_call1(Bin_prot_Shape[18][4],_a6L_);
      caml_call1(Stdlib[46],_a6M_);
      var
       _a6N_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$15),
         103,
         2773,
         2783,
         2789];
      return caml_call1(Expect_test_collector$6[1],_a6N_)}
    var
     _ahJ_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$16),
       103,
       2773,
       2790,
       2828],
     _ahM_=
      [0,
       [0,
        _ahL_,
        _ahK_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$17),
         103,
         2773,
         2783,
         2789],
        _ahJ_],
       0],
     _ahN_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$19),
       101,
       2707,
       2713,
       2829],
     _ahO_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$2);
    caml_call9
     (Expect_test_collector$6[3],
      _ahO_,
      _ahN_,
      cst_core_src_command_shape_ml$18,
      0,
      0,
      _ahM_,
      0,
      Inline_test_config,
      _ahI_);
    var
     _ahP_=
      [0,
       [0,cst_usage$1,_Yn_],
       [0,[0,cst_flags$2,caml_call1(_ZU_,bin_shape_t$114)],0]],
     _ahQ_=
      [0,
       [0,cst_summary$2,_Yn_],
       [0,[0,cst_readme$1,caml_call1(_ZN_,_Yn_)],_ahP_]],
     _ahR_=caml_call1(Bin_prot_Shape[8],_ahQ_),
     _ahS_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$220),0,_ahR_],0],
     _ahT_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$7),
     group$123=caml_call2(Bin_prot_Shape[6],_ahT_,_ahS_),
     _ahU_=caml_call1(Bin_prot_Shape[2][1],cst_t$221),
     bin_shape_t$116=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$123,_ahU_),0),
     _ah1_=caml_call1(Bin_prot_Shape[9],_ah0_),
     _ah2_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_a$74),0,_ah1_],0],
     _ah3_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$8),
     group$124=caml_call2(Bin_prot_Shape[6],_ah3_,_ah2_),
     _ah4_=caml_call1(Bin_prot_Shape[2][1],cst_a$75),
     bin_shape_a=caml_call1(caml_call2(Bin_prot_Shape[14],group$124,_ah4_),0),
     _ah5_=caml_call1(Bin_prot_Shape[3][1],cst_a$76),
     _ah6_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$9),
     _ah7_=[0,_Yn_,[0,caml_call2(Bin_prot_Shape[15],_ah6_,_ah5_),0]],
     _ah8_=caml_call1(Bin_prot_Shape[7],_ah7_),
     _ah9_=caml_call1(_xh_[1][3],_ah8_),
     _ah__=[0,[0,cst_subcommands,caml_call1(_Ld_[1][1],_ah9_)],0],
     _ah$_=
      [0,
       [0,cst_summary$5,_Yn_],
       [0,[0,cst_readme$3,caml_call1(_ZN_,_Yn_)],_ah__]],
     _aia_=caml_call1(Bin_prot_Shape[8],_ah$_),
     _aib_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$77),0],
     _aic_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$222),_aib_,_aia_],0],
     _aid_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$10),
     group$125=caml_call2(Bin_prot_Shape[6],_aid_,_aic_);
    function bin_shape_t$117(a)
     {var _a6K_=caml_call1(Bin_prot_Shape[2][1],cst_t$223);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$125,_a6K_),[0,a,0])}
    function bin_size_t$75(size_of_a,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _a6D_=caml_call1(_Xu_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_a6D_),
       _a6E_=caml_call2(_XG_,_Xu_,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_a6E_);
      function _a6F_(param)
       {var
         v2=param[2],
         v1=param[1],
         _a6I_=caml_call1(_Xu_,v1),
         size=caml_call2(Bin_prot_Common[23],0,_a6I_),
         _a6J_=caml_call1(size_of_a,v2);
        return caml_call2(Bin_prot_Common[23],size,_a6J_)}
      var
       _a6G_=caml_call1(_xh_[1][4],_a6F_),
       _a6H_=caml_call2(_Ld_[1][2],_a6G_,v3);
      return caml_call2(Bin_prot_Common[23],size$0,_a6H_)}
    function bin_write_t$76(write_a,buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(_Yp_,buf,pos,v1),
       pos$1=caml_call3(caml_call1(_ZP_,_Yp_),buf,pos$0,v2);
      function _a6B_(buf,pos,param)
       {var v2=param[2],v1=param[1],pos$0=caml_call3(_Yp_,buf,pos,v1);
        return caml_call3(write_a,buf,pos$0,v2)}
      var _a6C_=caml_call1(_xh_[1][5],_a6B_);
      return caml_call3(caml_call1(_Ld_[1][3],_a6C_),buf,pos$1,v3)}
    function bin_writer_t$103(bin_writer_a)
     {function _a6x_(v)
       {var _a6y_=bin_writer_a[2];
        return function(_a6z_,_a6A_)
         {return bin_write_t$76(_a6y_,v,_a6z_,_a6A_)}}
      return [0,function(v){return bin_size_t$75(bin_writer_a[1],v)},_a6x_]}
    function bin_read_t$150(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$11,
               pos_ref[1])}
    function bin_read_t$151(of_a,buf,pos_ref)
     {var
       v_summary=caml_call2(_Yr_,buf,pos_ref),
       v_readme=caml_call2(caml_call1(_ZR_,_Yr_),buf,pos_ref);
      function _a6v_(buf,pos_ref)
       {var v1=caml_call2(_Yr_,buf,pos_ref),v2=caml_call2(of_a,buf,pos_ref);
        return [0,v1,v2]}
      var
       _a6w_=caml_call1(_xh_[1][6],_a6v_),
       v_subcommands=caml_call2(caml_call1(_Ld_[1][4],_a6w_),buf,pos_ref);
      return [0,v_summary,v_readme,v_subcommands]}
    function bin_reader_t$103(bin_reader_a)
     {function _a6u_(buf,pos_ref,vtag)
       {return bin_read_t$150(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$151(bin_reader_a[1],buf,pos_ref)},
              _a6u_]}
    function bin_t$103(bin_a)
     {var _a6s_=bin_reader_t$103(bin_a[3]),_a6t_=bin_writer_t$103(bin_a[2]);
      return [0,bin_shape_t$117(bin_a[1]),_a6t_,_a6s_]}
    function compare$89(cmp_a,a_186,b_187)
     {if(caml_call2(Ppx_compare_lib[1],a_186,b_187))return 0;
      var n=caml_call2(Ppx_compare_lib[6][8],a_186[1],b_187[1]);
      if(0 === n)
       {var
         _a6l_=b_187[2],
         _a6m_=a_186[2],
         _a6n_=
          function(a_188,b_189)
           {return caml_call2(Ppx_compare_lib[6][8],a_188,b_189)},
         n$0=caml_call3(Ppx_compare_lib[6][12],_a6n_,_a6m_,_a6l_);
        if(0 === n$0)
         {var
           _a6o_=b_187[3],
           _a6p_=a_186[3],
           _a6q_=
            function(a_190,b_191)
             {function _a6r_(a_192,b_193)
               {var
                 t_195=a_192[2],
                 t_194=a_192[1],
                 t_197=b_193[2],
                 t_196=b_193[1],
                 n=caml_call2(Ppx_compare_lib[6][8],t_194,t_196);
                return 0 === n?caml_call2(cmp_a,t_195,t_197):n}
              return caml_call3(_xh_[1][11],_a6r_,a_190,b_191)};
          return caml_call3(_Ld_[1][9],_a6q_,_a6p_,_a6o_)}
        return n$0}
      return n}
    function t_of_sexp$90(of_a_198,sexp_200)
     {if(0 === sexp_200[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_218,sexp_200);
      var
       field_sexps_201=sexp_200[1],
       summary_202=[0,0],
       readme_204=[0,0],
       subcommands_206=[0,0],
       duplicates_208=[0,0],
       extra_209=[0,0],
       param=field_sexps_201;
      for(;;)
       {if(param)
         {var _a5__=param[1];
          if(1 === _a5__[0])
           {var _a5$_=_a5__[1];
            if(_a5$_)
             {var _a6a_=_a5$_[1];
              if(0 === _a6a_[0])
               {var _a6b_=_a5$_[2],_a6c_=_a6a_[1],switch$0=0;
                if(! _a6b_ || ! _a6b_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_223=param[2],
                   field_sexp_211$3=
                    function(_a6k_)
                     {function field_sexp_211(param)
                       {if(_a6k_)
                         {if(_a6k_[2])throw [0,Assert_failure,_aie_];
                          var x_224=_a6k_[1];
                          return x_224}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_218,sexp_200)}
                      return field_sexp_211},
                   field_sexp_211=field_sexp_211$3(_a6b_);
                  if(caml_string_notequal(_a6c_,cst_readme$4))
                   if(caml_string_notequal(_a6c_,cst_subcommands$0))
                    if(caml_string_notequal(_a6c_,cst_summary$6))
                     {if(Sexplib0_Sexp_conv[26][1])
                       extra_209[1] = [0,_a6c_,extra_209[1]]}
                    else
                     if(summary_202[1])
                      duplicates_208[1] = [0,_a6c_,duplicates_208[1]];
                     else
                      {var
                        field_sexp_211$0=field_sexp_211(0),
                        fvalue_221=caml_call1(_$r_,field_sexp_211$0);
                       summary_202[1] = [0,fvalue_221]}
                   else
                    if(subcommands_206[1])
                     duplicates_208[1] = [0,_a6c_,duplicates_208[1]];
                    else
                     {var
                       field_sexp_211$1=field_sexp_211(0),
                       _a6d_=
                        function(sexp_217)
                         {if(1 === sexp_217[0])
                           {var _a6i_=sexp_217[1];
                            if(_a6i_)
                             {var _a6j_=_a6i_[2];
                              if(_a6j_ && ! _a6j_[2])
                               {var
                                 arg1_214=_a6j_[1],
                                 arg0_213=_a6i_[1],
                                 res0_215=caml_call1(_$r_,arg0_213),
                                 res1_216=caml_call1(of_a_198,arg1_214);
                                return [0,res0_215,res1_216]}}}
                          return caml_call3
                                  (Sexplib0_Sexp_conv_error[2],error_source_218,2,sexp_217)},
                       _a6e_=caml_call1(_xh_[1][1],_a6d_),
                       fvalue_219=caml_call2(_Ld_[1][10],_a6e_,field_sexp_211$1);
                      subcommands_206[1] = [0,fvalue_219]}
                  else
                   if(readme_204[1])
                    duplicates_208[1] = [0,_a6c_,duplicates_208[1]];
                   else
                    {var
                      field_sexp_211$2=field_sexp_211(0),
                      fvalue_220=caml_call1(_$r_,field_sexp_211$2);
                     readme_204[1] = [0,fvalue_220]}
                  var param=tail_223;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_218,_a5__)}
        if(duplicates_208[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_218,
                  duplicates_208[1],
                  sexp_200);
        if(extra_209[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_218,
                  extra_209[1],
                  sexp_200);
        var _a6f_=summary_202[1],_a6h_=subcommands_206[1],_a6g_=readme_204[1];
        if(_a6f_ && _a6h_)
         {var subcommands_207=_a6h_[1],summary_203=_a6f_[1];
          return [0,summary_203,_a6g_,subcommands_207]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_218,
                 sexp_200,
                 [0,
                  [0,0 === summary_202[1]?1:0,cst_summary$7],
                  [0,[0,0 === subcommands_206[1]?1:0,cst_subcommands$1],0]])}}
    function sexp_of_t$100(of_a_225,param)
     {var
       subcommands_233=param[3],
       readme_229=param[2],
       summary_227=param[1],
       bnds_226=0;
      function _a58_(param)
       {var
         arg1_236=param[2],
         arg0_235=param[1],
         res0_237=caml_call1(_$s_,arg0_235),
         res1_238=caml_call1(of_a_225,arg1_236);
        return [1,[0,res0_237,[0,res1_238,0]]]}
      var
       _a59_=caml_call1(_xh_[1][2],_a58_),
       arg_234=caml_call2(_Ld_[1][11],_a59_,subcommands_233),
       bnds_226$0=[0,[1,[0,_aif_,[0,arg_234,0]]],bnds_226];
      if(readme_229)
       var
        v_230=readme_229[1],
        arg_232=caml_call1(_$s_,v_230),
        bnd_231=[1,[0,_aig_,[0,arg_232,0]]],
        bnds_226$1=[0,bnd_231,bnds_226$0];
      else
       var bnds_226$1=bnds_226$0;
      var
       arg_228=caml_call1(_$s_,summary_227),
       bnds_226$2=[0,[1,[0,_aih_,[0,arg_228,0]]],bnds_226$1];
      return [1,bnds_226$2]}
    var
     Expect_test_collector$7=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _aii_(param)
     {var
       _a54_=bin_shape_t$117(bin_shape_a),
       _a55_=caml_call1(Bin_prot_Shape[21],_a54_),
       _a56_=caml_call1(Bin_prot_Shape[18][4],_a55_);
      caml_call1(Stdlib[46],_a56_);
      var
       _a57_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$20),
         149,
         3961,
         3971,
         3977];
      return caml_call1(Expect_test_collector$7[1],_a57_)}
    var
     _aij_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$21),
       149,
       3961,
       3978,
       4016],
     _aim_=
      [0,
       [0,
        _ail_,
        _aik_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$22),
         149,
         3961,
         3971,
         3977],
        _aij_],
       0],
     _ain_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$24),
       147,
       3893,
       3899,
       4017],
     _aio_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$3);
    caml_call9
     (Expect_test_collector$7[3],
      _aio_,
      _ain_,
      cst_core_src_command_shape_ml$23,
      0,
      0,
      _aim_,
      0,
      Inline_test_config,
      _aii_);
    function map$26(init,f)
     {var _a50_=include$25[129][9];
      function _a51_(_a53_){return caml_call2(_a50_,_a53_,f)}
      var _a52_=caml_call2(include$73[12],init[3],_a51_);
      return [0,init[1],init[2],_a52_]}
    var
     _aip_=caml_call1(Bin_prot_Shape[3][1],cst_a$78),
     _aiq_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$12),
     _air_=[0,_Yn_,[0,caml_call2(Bin_prot_Shape[15],_aiq_,_aip_),0]],
     _ais_=caml_call1(Bin_prot_Shape[7],_air_),
     _ait_=[0,[0,cst_subcommands$2,caml_call1(_xh_[1][3],_ais_)],0],
     _aiu_=
      [0,
       [0,cst_summary$8,_Yn_],
       [0,[0,cst_readme$5,caml_call1(_ZN_,_Yn_)],_ait_]],
     _aiv_=caml_call1(Bin_prot_Shape[8],_aiu_),
     _aiw_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$79),0],
     _aix_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$224),_aiw_,_aiv_],0],
     _aiy_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$13),
     group$126=caml_call2(Bin_prot_Shape[6],_aiy_,_aix_);
    function bin_shape_t$118(a)
     {var _a5Z_=caml_call1(Bin_prot_Shape[2][1],cst_t$225);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$126,_a5Z_),[0,a,0])}
    function t_of_sexp$91(of_a_249,sexp_251)
     {if(0 === sexp_251[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_269,sexp_251);
      var
       field_sexps_252=sexp_251[1],
       summary_253=[0,0],
       readme_255=[0,0],
       subcommands_257=[0,0],
       duplicates_259=[0,0],
       extra_260=[0,0],
       param=field_sexps_252;
      for(;;)
       {if(param)
         {var _a5N_=param[1];
          if(1 === _a5N_[0])
           {var _a5O_=_a5N_[1];
            if(_a5O_)
             {var _a5P_=_a5O_[1];
              if(0 === _a5P_[0])
               {var _a5Q_=_a5O_[2],_a5R_=_a5P_[1],switch$0=0;
                if(! _a5Q_ || ! _a5Q_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_274=param[2],
                   field_sexp_262$3=
                    function(_a5Y_)
                     {function field_sexp_262(param)
                       {if(_a5Y_)
                         {if(_a5Y_[2])throw [0,Assert_failure,_aiz_];
                          var x_275=_a5Y_[1];
                          return x_275}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_269,sexp_251)}
                      return field_sexp_262},
                   field_sexp_262=field_sexp_262$3(_a5Q_);
                  if(caml_string_notequal(_a5R_,cst_readme$6))
                   if(caml_string_notequal(_a5R_,cst_subcommands$3))
                    if(caml_string_notequal(_a5R_,cst_summary$9))
                     {if(Sexplib0_Sexp_conv[26][1])
                       extra_260[1] = [0,_a5R_,extra_260[1]]}
                    else
                     if(summary_253[1])
                      duplicates_259[1] = [0,_a5R_,duplicates_259[1]];
                     else
                      {var
                        field_sexp_262$0=field_sexp_262(0),
                        fvalue_272=caml_call1(_$r_,field_sexp_262$0);
                       summary_253[1] = [0,fvalue_272]}
                   else
                    if(subcommands_257[1])
                     duplicates_259[1] = [0,_a5R_,duplicates_259[1]];
                    else
                     {var
                       field_sexp_262$1=field_sexp_262(0),
                       _a5S_=
                        function(sexp_268)
                         {if(1 === sexp_268[0])
                           {var _a5W_=sexp_268[1];
                            if(_a5W_)
                             {var _a5X_=_a5W_[2];
                              if(_a5X_ && ! _a5X_[2])
                               {var
                                 arg1_265=_a5X_[1],
                                 arg0_264=_a5W_[1],
                                 res0_266=caml_call1(_$r_,arg0_264),
                                 res1_267=caml_call1(of_a_249,arg1_265);
                                return [0,res0_266,res1_267]}}}
                          return caml_call3
                                  (Sexplib0_Sexp_conv_error[2],error_source_269,2,sexp_268)},
                       fvalue_270=caml_call2(_xh_[1][1],_a5S_,field_sexp_262$1);
                      subcommands_257[1] = [0,fvalue_270]}
                  else
                   if(readme_255[1])
                    duplicates_259[1] = [0,_a5R_,duplicates_259[1]];
                   else
                    {var
                      field_sexp_262$2=field_sexp_262(0),
                      fvalue_271=caml_call1(_$r_,field_sexp_262$2);
                     readme_255[1] = [0,fvalue_271]}
                  var param=tail_274;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_269,_a5N_)}
        if(duplicates_259[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_269,
                  duplicates_259[1],
                  sexp_251);
        if(extra_260[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_269,
                  extra_260[1],
                  sexp_251);
        var _a5T_=summary_253[1],_a5V_=subcommands_257[1],_a5U_=readme_255[1];
        if(_a5T_ && _a5V_)
         {var subcommands_258=_a5V_[1],summary_254=_a5T_[1];
          return [0,summary_254,_a5U_,subcommands_258]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_269,
                 sexp_251,
                 [0,
                  [0,0 === summary_253[1]?1:0,cst_summary$10],
                  [0,[0,0 === subcommands_257[1]?1:0,cst_subcommands$4],0]])}}
    function sexp_of_t$101(of_a_276,param)
     {var
       subcommands_284=param[3],
       readme_280=param[2],
       summary_278=param[1],
       bnds_277=0;
      function _a5M_(param)
       {var
         arg1_287=param[2],
         arg0_286=param[1],
         res0_288=caml_call1(_$s_,arg0_286),
         res1_289=caml_call1(of_a_276,arg1_287);
        return [1,[0,res0_288,[0,res1_289,0]]]}
      var
       arg_285=caml_call2(_xh_[1][2],_a5M_,subcommands_284),
       bnds_277$0=[0,[1,[0,_aiA_,[0,arg_285,0]]],bnds_277];
      if(readme_280)
       var
        v_281=readme_280[1],
        arg_283=caml_call1(_$s_,v_281),
        bnd_282=[1,[0,_aiB_,[0,arg_283,0]]],
        bnds_277$1=[0,bnd_282,bnds_277$0];
      else
       var bnds_277$1=bnds_277$0;
      var
       arg_279=caml_call1(_$s_,summary_278),
       bnds_277$2=[0,[1,[0,_aiC_,[0,arg_279,0]]],bnds_277$1];
      return [1,bnds_277$2]}
    var
     Expect_test_collector$8=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _aiD_(param)
     {var
       _a5I_=bin_shape_t$118(bin_shape_a),
       _a5J_=caml_call1(Bin_prot_Shape[21],_a5I_),
       _a5K_=caml_call1(Bin_prot_Shape[18][4],_a5J_);
      caml_call1(Stdlib[46],_a5K_);
      var
       _a5L_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$25),
         171,
         4478,
         4488,
         4494];
      return caml_call1(Expect_test_collector$8[1],_a5L_)}
    var
     _aiE_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$26),
       171,
       4478,
       4495,
       4533],
     _aiH_=
      [0,
       [0,
        _aiG_,
        _aiF_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$27),
         171,
         4478,
         4488,
         4494],
        _aiE_],
       0],
     _aiI_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$29),
       169,
       4410,
       4416,
       4534],
     _aiJ_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$4);
    caml_call9
     (Expect_test_collector$8[3],
      _aiJ_,
      _aiI_,
      cst_core_src_command_shape_ml$28,
      0,
      0,
      _aiH_,
      0,
      Inline_test_config,
      _aiD_);
    function map$27(init,f)
     {var _a5H_=caml_call2(include$25[129][9],init[3],f);
      return [0,init[1],init[2],_a5H_]}
    function to_latest(param)
     {var subcommands=param[3],readme=param[2],summary=param[1];
      return [0,summary,readme,caml_call1(include$73[21],subcommands)]}
    function of_latest(param)
     {var
       subcommands=param[3],
       readme=param[2],
       summary=param[1],
       _a5F_=caml_obj_tag(subcommands),
       _a5G_=
        250 === _a5F_
         ?subcommands[1]
         :246 === _a5F_
           ?caml_call1(CamlinternalLazy[2],subcommands)
           :subcommands;
      return [0,summary,readme,_a5G_]}
    function abs_path(dir,path)
     {return is_absolute(path)?path:symbol$234(dir,path)}
    var
     _aiK_=
      [0,
       [0,cst_working_dir,_Yn_],
       [0,
        [0,cst_path_to_exe,_Yn_],
        [0,[0,cst_child_subcommand,caml_call1(_ZU_,_Yn_)],0]]],
     _aiL_=
      [0,
       [0,cst_summary$11,_Yn_],
       [0,[0,cst_readme$7,caml_call1(_ZN_,_Yn_)],_aiK_]],
     _aiM_=caml_call1(Bin_prot_Shape[8],_aiL_),
     _aiN_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$226),0,_aiM_],0],
     _aiO_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$14),
     group$127=caml_call2(Bin_prot_Shape[6],_aiO_,_aiN_),
     _aiP_=caml_call1(Bin_prot_Shape[2][1],cst_t$227),
     bin_shape_t$119=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$127,_aiP_),0);
    function bin_size_t$76(param)
     {var
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _a5A_=caml_call1(_Xu_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_a5A_),
       _a5B_=caml_call2(_XG_,_Xu_,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_a5B_),
       _a5C_=caml_call1(_Xu_,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_a5C_),
       _a5D_=caml_call1(_Xu_,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_a5D_),
       _a5E_=caml_call2(_XJ_,_Xu_,v5);
      return caml_call2(Bin_prot_Common[23],size$2,_a5E_)}
    function bin_write_t$77(buf,pos,param)
     {var
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(_Yp_,buf,pos,v1),
       pos$1=caml_call3(caml_call1(_ZP_,_Yp_),buf,pos$0,v2),
       pos$2=caml_call3(_Yp_,buf,pos$1,v3),
       pos$3=caml_call3(_Yp_,buf,pos$2,v4);
      return caml_call3(caml_call1(_ZW_,_Yp_),buf,pos$3,v5)}
    var bin_writer_t$104=[0,bin_size_t$76,bin_write_t$77];
    function bin_read_t$152(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$15,
               pos_ref[1])}
    function bin_read_t$153(buf,pos_ref)
     {var
       v_summary=caml_call2(_Yr_,buf,pos_ref),
       v_readme=caml_call2(caml_call1(_ZR_,_Yr_),buf,pos_ref),
       v_working_dir=caml_call2(_Yr_,buf,pos_ref),
       v_path_to_exe=caml_call2(_Yr_,buf,pos_ref),
       v_child_subcommand=caml_call2(caml_call1(_ZY_,_Yr_),buf,pos_ref);
      return [0,
              v_summary,
              v_readme,
              v_working_dir,
              v_path_to_exe,
              v_child_subcommand]}
    var
     bin_reader_t$104=[0,bin_read_t$153,bin_read_t$152],
     bin_t$104=[0,bin_shape_t$119,bin_writer_t$104,bin_reader_t$104];
    function compare$90(a_290,b_291)
     {if(caml_call2(Ppx_compare_lib[1],a_290,b_291))return 0;
      var n=caml_call2(Ppx_compare_lib[6][8],a_290[1],b_291[1]);
      if(0 === n)
       {var
         _a5u_=b_291[2],
         _a5v_=a_290[2],
         _a5w_=
          function(a_292,b_293)
           {return caml_call2(Ppx_compare_lib[6][8],a_292,b_293)},
         n$0=caml_call3(Ppx_compare_lib[6][12],_a5w_,_a5v_,_a5u_);
        if(0 === n$0)
         {var n$1=caml_call2(Ppx_compare_lib[6][8],a_290[3],b_291[3]);
          if(0 === n$1)
           {var n$2=caml_call2(Ppx_compare_lib[6][8],a_290[4],b_291[4]);
            if(0 === n$2)
             {var
               _a5x_=b_291[5],
               _a5y_=a_290[5],
               _a5z_=
                function(a_294,b_295)
                 {return caml_call2(Ppx_compare_lib[6][8],a_294,b_295)};
              return caml_call3(Ppx_compare_lib[6][11],_a5z_,_a5y_,_a5x_)}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function t_of_sexp$92(sexp_297)
     {if(0 === sexp_297[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_319,sexp_297);
      var
       field_sexps_298=sexp_297[1],
       summary_299=[0,0],
       readme_301=[0,0],
       working_dir_303=[0,0],
       path_to_exe_305=[0,0],
       child_subcommand_307=[0,0],
       duplicates_309=[0,0],
       extra_310=[0,0],
       param=field_sexps_298;
      for(;;)
       {if(param)
         {var _a5j_=param[1];
          if(1 === _a5j_[0])
           {var _a5k_=_a5j_[1];
            if(_a5k_)
             {var _a5l_=_a5k_[1];
              if(0 === _a5l_[0])
               {var _a5m_=_a5k_[2],_a5n_=_a5l_[1],switch$0=0;
                if(! _a5m_ || ! _a5m_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_321=param[2],
                   field_sexp_312$5=
                    function(_a5t_)
                     {function field_sexp_312(param)
                       {if(_a5t_)
                         {if(_a5t_[2])throw [0,Assert_failure,_aiQ_];
                          var x_322=_a5t_[1];
                          return x_322}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_319,sexp_297)}
                      return field_sexp_312},
                   field_sexp_312=field_sexp_312$5(_a5m_);
                  if(caml_string_notequal(_a5n_,cst_child_subcommand$0))
                   if(caml_string_notequal(_a5n_,cst_path_to_exe$0))
                    if(caml_string_notequal(_a5n_,cst_readme$8))
                     if(caml_string_notequal(_a5n_,cst_summary$12))
                      if(caml_string_notequal(_a5n_,cst_working_dir$0))
                       {if(Sexplib0_Sexp_conv[26][1])
                         extra_310[1] = [0,_a5n_,extra_310[1]]}
                      else
                       if(working_dir_303[1])
                        duplicates_309[1] = [0,_a5n_,duplicates_309[1]];
                       else
                        {var
                          field_sexp_312$0=field_sexp_312(0),
                          fvalue_316=caml_call1(_$r_,field_sexp_312$0);
                         working_dir_303[1] = [0,fvalue_316]}
                     else
                      if(summary_299[1])
                       duplicates_309[1] = [0,_a5n_,duplicates_309[1]];
                      else
                       {var
                         field_sexp_312$1=field_sexp_312(0),
                         fvalue_318=caml_call1(_$r_,field_sexp_312$1);
                        summary_299[1] = [0,fvalue_318]}
                    else
                     if(readme_301[1])
                      duplicates_309[1] = [0,_a5n_,duplicates_309[1]];
                     else
                      {var
                        field_sexp_312$2=field_sexp_312(0),
                        fvalue_317=caml_call1(_$r_,field_sexp_312$2);
                       readme_301[1] = [0,fvalue_317]}
                   else
                    if(path_to_exe_305[1])
                     duplicates_309[1] = [0,_a5n_,duplicates_309[1]];
                    else
                     {var
                       field_sexp_312$3=field_sexp_312(0),
                       fvalue_315=caml_call1(_$r_,field_sexp_312$3);
                      path_to_exe_305[1] = [0,fvalue_315]}
                  else
                   if(child_subcommand_307[1])
                    duplicates_309[1] = [0,_a5n_,duplicates_309[1]];
                   else
                    {var
                      field_sexp_312$4=field_sexp_312(0),
                      fvalue_314=caml_call2(_$D_,_$r_,field_sexp_312$4);
                     child_subcommand_307[1] = [0,fvalue_314]}
                  var param=tail_321;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_319,_a5j_)}
        if(duplicates_309[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_319,
                  duplicates_309[1],
                  sexp_297);
        if(extra_310[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_319,
                  extra_310[1],
                  sexp_297);
        var
         _a5o_=summary_299[1],
         _a5q_=working_dir_303[1],
         _a5r_=path_to_exe_305[1],
         _a5s_=child_subcommand_307[1],
         _a5p_=readme_301[1];
        if(_a5o_ && _a5q_ && _a5r_ && _a5s_)
         {var
           child_subcommand_308=_a5s_[1],
           path_to_exe_306=_a5r_[1],
           working_dir_304=_a5q_[1],
           summary_300=_a5o_[1];
          return [0,
                  summary_300,
                  _a5p_,
                  working_dir_304,
                  path_to_exe_306,
                  child_subcommand_308]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_319,
                 sexp_297,
                 [0,
                  [0,0 === summary_299[1]?1:0,cst_summary$13],
                  [0,
                   [0,0 === working_dir_303[1]?1:0,cst_working_dir$1],
                   [0,
                    [0,0 === path_to_exe_305[1]?1:0,cst_path_to_exe$1],
                    [0,
                     [0,0 === child_subcommand_307[1]?1:0,cst_child_subcommand$1],
                     0]]]])}}
    function sexp_of_t$102(param)
     {var
       child_subcommand_334=param[5],
       path_to_exe_332=param[4],
       working_dir_330=param[3],
       readme_326=param[2],
       summary_324=param[1],
       arg_335=caml_call2(_$E_,_$s_,child_subcommand_334),
       bnds_323=[0,[1,[0,_aiR_,[0,arg_335,0]]],0],
       arg_333=caml_call1(_$s_,path_to_exe_332),
       bnds_323$0=[0,[1,[0,_aiS_,[0,arg_333,0]]],bnds_323],
       arg_331=caml_call1(_$s_,working_dir_330),
       bnds_323$1=[0,[1,[0,_aiT_,[0,arg_331,0]]],bnds_323$0];
      if(readme_326)
       var
        v_327=readme_326[1],
        arg_329=caml_call1(_$s_,v_327),
        bnd_328=[1,[0,_aiU_,[0,arg_329,0]]],
        bnds_323$2=[0,bnd_328,bnds_323$1];
      else
       var bnds_323$2=bnds_323$1;
      var
       arg_325=caml_call1(_$s_,summary_324),
       bnds_323$3=[0,[1,[0,_aiV_,[0,arg_325,0]]],bnds_323$2];
      return [1,bnds_323$3]}
    var
     Expect_test_collector$9=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _aiW_(param)
     {var
       _a5g_=caml_call1(Bin_prot_Shape[21],bin_shape_t$119),
       _a5h_=caml_call1(Bin_prot_Shape[18][4],_a5g_);
      caml_call1(Stdlib[46],_a5h_);
      var
       _a5i_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$30),
         205,
         5430,
         5440,
         5446];
      return caml_call1(Expect_test_collector$9[1],_a5i_)}
    var
     _aiX_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$31),
       205,
       5430,
       5447,
       5485],
     _ai0_=
      [0,
       [0,
        _aiZ_,
        _aiY_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$32),
         205,
         5430,
         5440,
         5446],
        _aiX_],
       0],
     _ai1_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$34),
       203,
       5364,
       5370,
       5486],
     _ai2_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$5);
    caml_call9
     (Expect_test_collector$9[3],
      _ai2_,
      _ai1_,
      cst_core_src_command_shape_ml$33,
      0,
      0,
      _ai0_,
      0,
      Inline_test_config,
      _aiW_);
    function to_latest$0(_a5f_){return _a5f_}
    function of_latest$0(_a5e_){return _a5e_}
    var
     _ai3_=
      [0,
       [0,cst_summary$14,_Yn_],
       [0,
        [0,cst_readme$9,caml_call1(_ZN_,_Yn_)],
        [0,[0,cst_working_dir$2,_Yn_],[0,[0,cst_path_to_exe$2,_Yn_],0]]]],
     _ai4_=caml_call1(Bin_prot_Shape[8],_ai3_),
     _ai5_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$228),0,_ai4_],0],
     _ai6_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$16),
     group$128=caml_call2(Bin_prot_Shape[6],_ai6_,_ai5_),
     _ai7_=caml_call1(Bin_prot_Shape[2][1],cst_t$229),
     bin_shape_t$120=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$128,_ai7_),0);
    function to_v3(t){return [0,t[1],t[2],t[3],t[4],0]}
    function of_v3(t)
     {var _a5d_=abs_path(t[3],t[4]);return [0,t[1],t[2],t[3],_a5d_]}
    var
     to_latest$1=caml_call2(_it_,to_latest$0,to_v3),
     of_latest$1=caml_call2(_it_,of_v3,of_latest$0),
     _ajb_=
      [0,
       [0,cst_summary$17,_Yn_],
       [0,
        [0,cst_readme$11,caml_call1(_ZN_,_Yn_)],
        [0,[0,cst_path_to_exe$5,_Yn_],0]]],
     _ajc_=caml_call1(Bin_prot_Shape[8],_ajb_),
     _ajd_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$230),0,_ajc_],0],
     _aje_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$17),
     group$129=caml_call2(Bin_prot_Shape[6],_aje_,_ajd_),
     _ajf_=caml_call1(Bin_prot_Shape[2][1],cst_t$231),
     bin_shape_t$121=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$129,_ajf_),0);
    function to_v2(t){return [0,t[1],t[2],cst$205,t[3]]}
    function of_v2(t)
     {var _a5c_=abs_path(t[3],t[4]);return [0,t[1],t[2],_a5c_]}
    var
     to_latest$2=caml_call2(_it_,to_latest$1,to_v2),
     of_latest$2=caml_call2(_it_,of_v2,of_latest$1),
     _ajk_=caml_call1(Bin_prot_Shape[2][1],cst_t$232),
     _ajl_=
      [0,
       [0,
        cst_Exec,
        [0,
         bin_shape_t$119,
         [0,caml_call1(caml_call1(Bin_prot_Shape[13],_ajk_),0),0]]],
       0],
     _ajm_=caml_call1(Bin_prot_Shape[2][1],cst_t$233),
     _ajn_=
      [0,
       [0,cst_Basic,[0,bin_shape_t$115,0]],
       [0,
        [0,
         cst_Group,
         [0,
          bin_shape_t$117(caml_call1(caml_call1(Bin_prot_Shape[13],_ajm_),0)),
          0]],
        _ajl_]],
     _ajo_=caml_call1(Bin_prot_Shape[9],_ajn_),
     _ajp_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$234),0,_ajo_],0],
     _ajq_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$18),
     group$130=caml_call2(Bin_prot_Shape[6],_ajq_,_ajp_),
     _ajr_=caml_call1(Bin_prot_Shape[2][1],cst_t$235),
     bin_shape_t$122=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$130,_ajr_),0);
    function bin_size_t$77(param)
     {switch(param[0])
       {case 0:
         var v1=param[1],_a4__=bin_size_t$74(v1);
         return caml_call2(Bin_prot_Common[23],1,_a4__);
        case 1:
         var v1$0=param[1],_a4$_=bin_size_t$75(bin_size_t$77,v1$0);
         return caml_call2(Bin_prot_Common[23],1,_a4$_);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          _a5a_=bin_size_t$76(v1$1),
          size=caml_call2(Bin_prot_Common[23],1,_a5a_),
          _a5b_=bin_size_t$77(v2);
         return caml_call2(Bin_prot_Common[23],size,_a5b_)}}
    function bin_write_t$78(buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:
          var v1=param$0[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos$0,0);
          return bin_write_t$75(buf,pos$1,v1);
         case 1:
          var
           v1$0=param$0[1],
           pos$2=caml_call3(Bin_prot_Write[31],buf,pos$0,1);
          return bin_write_t$76(bin_write_t$78,buf,pos$2,v1$0);
         default:
          var
           v2=param$0[2],
           v1$1=param$0[1],
           pos$3=caml_call3(Bin_prot_Write[31],buf,pos$0,2),
           pos$4=bin_write_t$77(buf,pos$3,v1$1),
           pos$0=pos$4,
           param$0=v2;
          continue}}
    var bin_writer_t$105=[0,bin_size_t$77,bin_write_t$78];
    function bin_read_t$154(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$19,
               pos_ref[1])}
    function bin_read_t$155(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_ajs_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=bin_read_t$149(buf,pos_ref);return [0,arg_1];
        case 1:
         var arg_1$1=bin_read_t$151(bin_read_t$155,buf,pos_ref);
         return [1,arg_1$1];
        default:
         var
          arg_1$0=bin_read_t$153(buf,pos_ref),
          arg_2=bin_read_t$155(buf,pos_ref);
         return [2,arg_1$0,arg_2]}}
    var
     bin_reader_t$105=[0,bin_read_t$155,bin_read_t$154],
     bin_t$105=[0,bin_shape_t$122,bin_writer_t$105,bin_reader_t$105];
    function compare$91(a_401,b_402)
     {var a_401$0=a_401,b_402$0=b_402;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_401$0,b_402$0))return 0;
        switch(a_401$0[0])
         {case 0:
           var _a46_=a_401$0[1];
           if(0 === b_402$0[0])
            {var b_404=b_402$0[1];return compare$88(_a46_,b_404)}
           return -1;
          case 1:
           var _a47_=a_401$0[1];
           switch(b_402$0[0])
            {case 0:break;
             case 1:
              var b_406=b_402$0[1];
              return compare$89
                      (function(a_407,b_408){return compare$91(a_407,b_408)},
                       _a47_,
                       b_406);
             default:return -1}
           break;
          default:
           var _a48_=a_401$0[2],_a49_=a_401$0[1];
           switch(b_402$0[0])
            {case 0:break;
             case 1:return 1;
             default:
              var b_412=b_402$0[2],b_410=b_402$0[1],n=compare$90(_a49_,b_410);
              if(0 === n){var a_401$0=_a48_,b_402$0=b_412;continue}
              return n}}
        return 1}}
    var t_of_sexp$93=function _a45_(_a44_){return _a45_.fun(_a44_)};
    caml_update_dummy
     (t_of_sexp$93,
      function(sexp_417)
       {if(0 === sexp_417[0])
         {var _a4Z_=sexp_417[1],switch$0=0;
          if(caml_string_notequal(_a4Z_,cst_Basic$0))
           {var switch$1=0;
            if(caml_string_notequal(_a4Z_,cst_Exec$0))
             {var switch$2=0;
              if(caml_string_notequal(_a4Z_,cst_Group$0))
               if(caml_string_notequal(_a4Z_,cst_basic))
                if(caml_string_notequal(_a4Z_,cst_exec))
                 {if(caml_string_notequal(_a4Z_,cst_group))
                   {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
                else
                 switch$2 = 1;
               else
                {switch$1 = 1;switch$2 = 1}
              if(! switch$2)
               return caml_call2
                       (Sexplib0_Sexp_conv_error[5],error_source_415,sexp_417)}
            if(! switch$1)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_415,sexp_417)}
          if(! switch$0)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_415,sexp_417)}
        else
         {var _a40_=sexp_417[1];
          if(! _a40_)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7],error_source_415,sexp_417);
          var _a41_=_a40_[1];
          if(0 !== _a41_[0])
           return caml_call2
                   (Sexplib0_Sexp_conv_error[6],error_source_415,sexp_417);
          var _a42_=_a41_[1],switch$3=0;
          if(caml_string_notequal(_a42_,cst_Basic$1))
           {var switch$4=0;
            if(caml_string_notequal(_a42_,cst_Exec$1))
             {var switch$5=0;
              if(caml_string_notequal(_a42_,cst_Group$1))
               if(caml_string_notequal(_a42_,cst_basic$0))
                if(caml_string_notequal(_a42_,cst_exec$0))
                 {if(caml_string_notequal(_a42_,cst_group$0))
                   {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
                else
                 switch$5 = 1;
               else
                {switch$4 = 1;switch$5 = 1}
              if(! switch$5)
               {var sexp_args_424=_a40_[2];
                if(sexp_args_424 && ! sexp_args_424[2])
                 {var
                   arg0_425=sexp_args_424[1],
                   res0_426=t_of_sexp$90(t_of_sexp$93,arg0_425);
                  return [1,res0_426]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],
                         error_source_415,
                         _a42_,
                         sexp_417)}}
            if(! switch$4)
             {var sexp_args_429=_a40_[2];
              if(sexp_args_429)
               {var _a43_=sexp_args_429[2];
                if(_a43_ && ! _a43_[2])
                 {var
                   arg1_431=_a43_[1],
                   arg0_430=sexp_args_429[1],
                   res0_432=t_of_sexp$92(arg0_430),
                   res1_433=caml_call1(t_of_sexp$93,arg1_431);
                  return [2,res0_432,res1_433]}}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],
                       error_source_415,
                       _a42_,
                       sexp_417)}}
          if(! switch$3)
           {var sexp_args_419=_a40_[2];
            if(sexp_args_419 && ! sexp_args_419[2])
             {var arg0_420=sexp_args_419[1],res0_421=t_of_sexp$89(arg0_420);
              return [0,res0_421]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_415,
                     _a42_,
                     sexp_417)}}
        return caml_call2
                (Sexplib0_Sexp_conv_error[8],error_source_415,sexp_417)});
    function sexp_of_t$103(param)
     {switch(param[0])
       {case 0:
         var arg0_434=param[1],res0_435=sexp_of_t$99(arg0_434);
         return [1,[0,_ajt_,[0,res0_435,0]]];
        case 1:
         var arg0_436=param[1],res0_437=sexp_of_t$100(sexp_of_t$103,arg0_436);
         return [1,[0,_aju_,[0,res0_437,0]]];
        default:
         var
          arg1_439=param[2],
          arg0_438=param[1],
          res0_440=sexp_of_t$102(arg0_438),
          res1_441=sexp_of_t$103(arg1_439);
         return [1,[0,_ajv_,[0,res0_440,[0,res1_441,0]]]]}}
    var
     Expect_test_collector$10=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _ajw_(param)
     {var
       _a4W_=caml_call1(Bin_prot_Shape[21],bin_shape_t$122),
       _a4X_=caml_call1(Bin_prot_Shape[18][4],_a4W_);
      caml_call1(Stdlib[46],_a4X_);
      var
       _a4Y_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$35),
         283,
         7329,
         7339,
         7345];
      return caml_call1(Expect_test_collector$10[1],_a4Y_)}
    var
     _ajx_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$36),
       283,
       7329,
       7346,
       7384],
     _ajA_=
      [0,
       [0,
        _ajz_,
        _ajy_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$37),
         283,
         7329,
         7339,
         7345],
        _ajx_],
       0],
     _ajB_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$39),
       281,
       7263,
       7269,
       7385],
     _ajC_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$6);
    caml_call9
     (Expect_test_collector$10[3],
      _ajC_,
      _ajB_,
      cst_core_src_command_shape_ml$38,
      0,
      0,
      _ajA_,
      0,
      Inline_test_config,
      _ajw_);
    var
     _ajD_=caml_call1(Bin_prot_Shape[2][1],cst_t$236),
     _ajE_=caml_call1(caml_call1(Bin_prot_Shape[13],_ajD_),0),
     _ajF_=
      [0,
       [0,cst_Exec$2,[0,bin_shape_t$119,0]],
       [0,[0,cst_Lazy,[0,caml_call1(_Ld_[1][1],_ajE_),0]],0]],
     _ajG_=caml_call1(Bin_prot_Shape[2][1],cst_t$237),
     _ajH_=
      [0,
       [0,cst_Base,[0,bin_shape_t$115,0]],
       [0,
        [0,
         cst_Group$2,
         [0,
          bin_shape_t$117(caml_call1(caml_call1(Bin_prot_Shape[13],_ajG_),0)),
          0]],
        _ajF_]],
     _ajI_=caml_call1(Bin_prot_Shape[9],_ajH_),
     _ajJ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$238),0,_ajI_],0],
     _ajK_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$20),
     group$131=caml_call2(Bin_prot_Shape[6],_ajK_,_ajJ_),
     _ajL_=caml_call1(Bin_prot_Shape[2][1],cst_t$239),
     bin_shape_t$123=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$131,_ajL_),0),
     t_of_sexp$94=function _a4V_(_a4U_){return _a4V_.fun(_a4U_)};
    caml_update_dummy
     (t_of_sexp$94,
      function(sexp_446)
       {if(0 === sexp_446[0])
         {var _a4Q_=sexp_446[1],switch$0=0;
          if(caml_string_notequal(_a4Q_,cst_Base$0))
           {var switch$1=0;
            if(caml_string_notequal(_a4Q_,cst_Exec$3))
             {var switch$2=0;
              if(caml_string_notequal(_a4Q_,cst_Group$3))
               {var switch$3=0;
                if(caml_string_notequal(_a4Q_,cst_Lazy$0))
                 if(caml_string_notequal(_a4Q_,cst_base))
                  if(caml_string_notequal(_a4Q_,cst_exec$1))
                   if(caml_string_notequal(_a4Q_,cst_group$1))
                    {if(caml_string_notequal(_a4Q_,cst_lazy))
                      {switch$0 = 1;switch$1 = 1;switch$2 = 1;switch$3 = 1}}
                   else
                    switch$3 = 1;
                  else
                   {switch$2 = 1;switch$3 = 1}
                 else
                  {switch$1 = 1;switch$2 = 1;switch$3 = 1}
                if(! switch$3)
                 return caml_call2
                         (Sexplib0_Sexp_conv_error[5],error_source_444,sexp_446)}
              if(! switch$2)
               return caml_call2
                       (Sexplib0_Sexp_conv_error[5],error_source_444,sexp_446)}
            if(! switch$1)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_444,sexp_446)}
          if(! switch$0)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_444,sexp_446)}
        else
         {var _a4R_=sexp_446[1];
          if(! _a4R_)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7],error_source_444,sexp_446);
          var _a4S_=_a4R_[1];
          if(0 !== _a4S_[0])
           return caml_call2
                   (Sexplib0_Sexp_conv_error[6],error_source_444,sexp_446);
          var _a4T_=_a4S_[1],switch$4=0;
          if(caml_string_notequal(_a4T_,cst_Base$1))
           {var switch$5=0;
            if(caml_string_notequal(_a4T_,cst_Exec$4))
             {var switch$6=0;
              if(caml_string_notequal(_a4T_,cst_Group$4))
               {var switch$7=0;
                if(caml_string_notequal(_a4T_,cst_Lazy$1))
                 if(caml_string_notequal(_a4T_,cst_base$0))
                  if(caml_string_notequal(_a4T_,cst_exec$2))
                   if(caml_string_notequal(_a4T_,cst_group$2))
                    {if(caml_string_notequal(_a4T_,cst_lazy$0))
                      {switch$4 = 1;switch$5 = 1;switch$6 = 1;switch$7 = 1}}
                   else
                    switch$7 = 1;
                  else
                   {switch$6 = 1;switch$7 = 1}
                 else
                  {switch$5 = 1;switch$6 = 1;switch$7 = 1}
                if(! switch$7)
                 {var sexp_args_463=_a4R_[2];
                  if(sexp_args_463 && ! sexp_args_463[2])
                   {var
                     arg0_464=sexp_args_463[1],
                     res0_465=caml_call2(_Ld_[1][10],t_of_sexp$94,arg0_464);
                    return [3,res0_465]}
                  return caml_call3
                          (Sexplib0_Sexp_conv_error[4],
                           error_source_444,
                           _a4T_,
                           sexp_446)}}
              if(! switch$6)
               {var sexp_args_453=_a4R_[2];
                if(sexp_args_453 && ! sexp_args_453[2])
                 {var
                   arg0_454=sexp_args_453[1],
                   res0_455=t_of_sexp$90(t_of_sexp$94,arg0_454);
                  return [1,res0_455]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],
                         error_source_444,
                         _a4T_,
                         sexp_446)}}
            if(! switch$5)
             {var sexp_args_458=_a4R_[2];
              if(sexp_args_458 && ! sexp_args_458[2])
               {var arg0_459=sexp_args_458[1],res0_460=t_of_sexp$92(arg0_459);
                return [2,res0_460]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],
                       error_source_444,
                       _a4T_,
                       sexp_446)}}
          if(! switch$4)
           {var sexp_args_448=_a4R_[2];
            if(sexp_args_448 && ! sexp_args_448[2])
             {var arg0_449=sexp_args_448[1],res0_450=t_of_sexp$89(arg0_449);
              return [0,res0_450]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_444,
                     _a4T_,
                     sexp_446)}}
        return caml_call2
                (Sexplib0_Sexp_conv_error[8],error_source_444,sexp_446)});
    function sexp_of_t$104(param)
     {switch(param[0])
       {case 0:
         var arg0_466=param[1],res0_467=sexp_of_t$99(arg0_466);
         return [1,[0,_ajM_,[0,res0_467,0]]];
        case 1:
         var arg0_468=param[1],res0_469=sexp_of_t$100(sexp_of_t$104,arg0_468);
         return [1,[0,_ajN_,[0,res0_469,0]]];
        case 2:
         var arg0_470=param[1],res0_471=sexp_of_t$102(arg0_470);
         return [1,[0,_ajO_,[0,res0_471,0]]];
        default:
         var
          arg0_472=param[1],
          res0_473=caml_call2(_Ld_[1][11],sexp_of_t$104,arg0_472);
         return [1,[0,_ajP_,[0,res0_473,0]]]}}
    var
     Expect_test_collector$11=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _ajQ_(param)
     {var
       _a4N_=caml_call1(Bin_prot_Shape[21],bin_shape_t$123),
       _a4O_=caml_call1(Bin_prot_Shape[18][4],_a4N_);
      caml_call1(Stdlib[46],_a4O_);
      var
       _a4P_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$40),
         301,
         7740,
         7750,
         7756];
      return caml_call1(Expect_test_collector$11[1],_a4P_)}
    var
     _ajR_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$41),
       301,
       7740,
       7757,
       7795],
     _ajU_=
      [0,
       [0,
        _ajT_,
        _ajS_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$42),
         301,
         7740,
         7750,
         7756],
        _ajR_],
       0],
     _ajV_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$44),
       299,
       7674,
       7680,
       7796],
     _ajW_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$7);
    caml_call9
     (Expect_test_collector$11[3],
      _ajW_,
      _ajV_,
      cst_core_src_command_shape_ml$43,
      0,
      0,
      _ajU_,
      0,
      Inline_test_config,
      _ajQ_);
    var
     _ajX_=caml_call1(Bin_prot_Shape[2][1],cst_t$240),
     _ajY_=
      [0,
       [0,cst_Base$2,[0,bin_shape_t$115,0]],
       [0,
        [0,
         cst_Group$5,
         [0,
          bin_shape_t$118(caml_call1(caml_call1(Bin_prot_Shape[13],_ajX_),0)),
          0]],
        [0,[0,cst_Exec$5,[0,bin_shape_t$120,0]],0]]],
     _ajZ_=caml_call1(Bin_prot_Shape[9],_ajY_),
     _aj0_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$241),0,_ajZ_],0],
     _aj1_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$21),
     group$132=caml_call2(Bin_prot_Shape[6],_aj1_,_aj0_),
     _aj2_=caml_call1(Bin_prot_Shape[2][1],cst_t$242),
     bin_shape_t$124=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$132,_aj2_),0),
     t_of_sexp$95=function _a4M_(_a4L_){return _a4M_.fun(_a4L_)};
    caml_update_dummy
     (t_of_sexp$95,
      function(sexp_478)
       {if(0 === sexp_478[0])
         {var _a4G_=sexp_478[1],switch$0=0;
          if(caml_string_notequal(_a4G_,cst_Base$3))
           {var switch$1=0;
            if(caml_string_notequal(_a4G_,cst_Exec$6))
             {var switch$2=0;
              if(caml_string_notequal(_a4G_,cst_Group$6))
               if(caml_string_notequal(_a4G_,cst_base$1))
                if(caml_string_notequal(_a4G_,cst_exec$3))
                 {if(caml_string_notequal(_a4G_,cst_group$3))
                   {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
                else
                 switch$2 = 1;
               else
                {switch$1 = 1;switch$2 = 1}
              if(! switch$2)
               return caml_call2
                       (Sexplib0_Sexp_conv_error[5],error_source_476,sexp_478)}
            if(! switch$1)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_476,sexp_478)}
          if(! switch$0)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_476,sexp_478)}
        else
         {var _a4H_=sexp_478[1];
          if(! _a4H_)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7],error_source_476,sexp_478);
          var _a4I_=_a4H_[1];
          if(0 !== _a4I_[0])
           return caml_call2
                   (Sexplib0_Sexp_conv_error[6],error_source_476,sexp_478);
          var _a4J_=_a4I_[1],switch$3=0;
          if(caml_string_notequal(_a4J_,cst_Base$4))
           {var switch$4=0;
            if(caml_string_notequal(_a4J_,cst_Exec$7))
             {var switch$5=0;
              if(caml_string_notequal(_a4J_,cst_Group$7))
               if(caml_string_notequal(_a4J_,cst_base$2))
                if(caml_string_notequal(_a4J_,cst_exec$4))
                 {if(caml_string_notequal(_a4J_,cst_group$4))
                   {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
                else
                 switch$5 = 1;
               else
                {switch$4 = 1;switch$5 = 1}
              if(! switch$5)
               {var sexp_args_485=_a4H_[2];
                if(sexp_args_485 && ! sexp_args_485[2])
                 {var
                   arg0_486=sexp_args_485[1],
                   res0_487=t_of_sexp$91(t_of_sexp$95,arg0_486);
                  return [1,res0_487]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],
                         error_source_476,
                         _a4J_,
                         sexp_478)}}
            if(! switch$4)
             {var sexp_args_490=_a4H_[2];
              if(sexp_args_490 && ! sexp_args_490[2])
               {var arg0_491=sexp_args_490[1];
                if(0 === arg0_491[0])
                 var
                  res0_492=
                   caml_call2
                    (Sexplib0_Sexp_conv_error[16],error_source_356,arg0_491);
                else
                 {var
                   field_sexps_338=arg0_491[1],
                   summary_339=[0,0],
                   readme_341=[0,0],
                   working_dir_343=[0,0],
                   path_to_exe_345=[0,0],
                   duplicates_347=[0,0],
                   extra_348=[0,0],
                   param=field_sexps_338;
                  for(;;)
                   {if(param)
                     {var _a4x_=param[1];
                      if(1 === _a4x_[0])
                       {var _a4y_=_a4x_[1];
                        if(_a4y_)
                         {var _a4z_=_a4y_[1];
                          if(0 === _a4z_[0])
                           {var _a4A_=_a4y_[2],_a4B_=_a4z_[1],switch$6=0;
                            if(! _a4A_ || ! _a4A_[2])switch$6 = 1;
                            if(switch$6)
                             {var
                               tail_358=param[2],
                               field_sexp_350$4=
                                function(_a4K_)
                                 {function field_sexp_350(param)
                                   {if(_a4K_)
                                     {if(_a4K_[2])throw [0,Assert_failure,_ai8_];
                                      var x_359=_a4K_[1];
                                      return x_359}
                                    return caml_call2
                                            (Sexplib0_Sexp_conv_error[10],error_source_356,arg0_491)}
                                  return field_sexp_350},
                               field_sexp_350=field_sexp_350$4(_a4A_);
                              if(caml_string_notequal(_a4B_,cst_path_to_exe$3))
                               if(caml_string_notequal(_a4B_,cst_readme$10))
                                if(caml_string_notequal(_a4B_,cst_summary$15))
                                 if(caml_string_notequal(_a4B_,cst_working_dir$3))
                                  {if(Sexplib0_Sexp_conv[26][1])
                                    extra_348[1] = [0,_a4B_,extra_348[1]]}
                                 else
                                  if(working_dir_343[1])
                                   duplicates_347[1] = [0,_a4B_,duplicates_347[1]];
                                  else
                                   {var
                                     field_sexp_350$0=field_sexp_350(0),
                                     fvalue_353=caml_call1(_$r_,field_sexp_350$0);
                                    working_dir_343[1] = [0,fvalue_353]}
                                else
                                 if(summary_339[1])
                                  duplicates_347[1] = [0,_a4B_,duplicates_347[1]];
                                 else
                                  {var
                                    field_sexp_350$1=field_sexp_350(0),
                                    fvalue_355=caml_call1(_$r_,field_sexp_350$1);
                                   summary_339[1] = [0,fvalue_355]}
                               else
                                if(readme_341[1])
                                 duplicates_347[1] = [0,_a4B_,duplicates_347[1]];
                                else
                                 {var
                                   field_sexp_350$2=field_sexp_350(0),
                                   fvalue_354=caml_call1(_$r_,field_sexp_350$2);
                                  readme_341[1] = [0,fvalue_354]}
                              else
                               if(path_to_exe_345[1])
                                duplicates_347[1] = [0,_a4B_,duplicates_347[1]];
                               else
                                {var
                                  field_sexp_350$3=field_sexp_350(0),
                                  fvalue_352=caml_call1(_$r_,field_sexp_350$3);
                                 path_to_exe_345[1] = [0,fvalue_352]}
                              var param=tail_358;
                              continue}}}}
                      caml_call2
                       (Sexplib0_Sexp_conv_error[10],error_source_356,_a4x_)}
                    if(duplicates_347[1])
                     var
                      res0_492=
                       caml_call3
                        (Sexplib0_Sexp_conv_error[12],
                         error_source_356,
                         duplicates_347[1],
                         arg0_491);
                    else
                     if(extra_348[1])
                      var
                       res0_492=
                        caml_call3
                         (Sexplib0_Sexp_conv_error[13],
                          error_source_356,
                          extra_348[1],
                          arg0_491);
                     else
                      {var
                        _a4C_=summary_339[1],
                        _a4E_=working_dir_343[1],
                        _a4F_=path_to_exe_345[1],
                        switch$7=0,
                        _a4D_=readme_341[1];
                       if(_a4C_ && _a4E_ && _a4F_)
                        var
                         path_to_exe_346=_a4F_[1],
                         working_dir_344=_a4E_[1],
                         summary_340=_a4C_[1],
                         res0_492=
                          [0,summary_340,_a4D_,working_dir_344,path_to_exe_346];
                       else
                        switch$7 = 1;
                       if(switch$7)
                        var
                         res0_492=
                          caml_call3
                           (Sexplib0_Sexp_conv_error[15],
                            error_source_356,
                            arg0_491,
                            [0,
                             [0,0 === summary_339[1]?1:0,cst_summary$16],
                             [0,
                              [0,0 === working_dir_343[1]?1:0,cst_working_dir$4],
                              [0,[0,0 === path_to_exe_345[1]?1:0,cst_path_to_exe$4],0]]])}
                    break}}
                return [2,res0_492]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],
                       error_source_476,
                       _a4J_,
                       sexp_478)}}
          if(! switch$3)
           {var sexp_args_480=_a4H_[2];
            if(sexp_args_480 && ! sexp_args_480[2])
             {var arg0_481=sexp_args_480[1],res0_482=t_of_sexp$89(arg0_481);
              return [0,res0_482]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_476,
                     _a4J_,
                     sexp_478)}}
        return caml_call2
                (Sexplib0_Sexp_conv_error[8],error_source_476,sexp_478)});
    function sexp_of_t$105(param)
     {switch(param[0])
       {case 0:
         var arg0_493=param[1],res0_494=sexp_of_t$99(arg0_493);
         return [1,[0,_aj3_,[0,res0_494,0]]];
        case 1:
         var arg0_495=param[1],res0_496=sexp_of_t$101(sexp_of_t$105,arg0_495);
         return [1,[0,_aj4_,[0,res0_496,0]]];
        default:
         var
          arg0_497=param[1],
          path_to_exe_369=arg0_497[4],
          working_dir_367=arg0_497[3],
          readme_363=arg0_497[2],
          summary_361=arg0_497[1],
          arg_370=caml_call1(_$s_,path_to_exe_369),
          bnds_360=[0,[1,[0,_ai9_,[0,arg_370,0]]],0],
          arg_368=caml_call1(_$s_,working_dir_367),
          bnds_360$0=[0,[1,[0,_ai__,[0,arg_368,0]]],bnds_360];
         if(readme_363)
          var
           v_364=readme_363[1],
           arg_366=caml_call1(_$s_,v_364),
           bnd_365=[1,[0,_ai$_,[0,arg_366,0]]],
           bnds_360$1=[0,bnd_365,bnds_360$0];
         else
          var bnds_360$1=bnds_360$0;
         var
          arg_362=caml_call1(_$s_,summary_361),
          bnds_360$2=[0,[1,[0,_aja_,[0,arg_362,0]]],bnds_360$1],
          res0_498=[1,bnds_360$2];
         return [1,[0,_aj5_,[0,res0_498,0]]]}}
    var
     Expect_test_collector$12=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _aj6_(param)
     {var
       _a4u_=caml_call1(Bin_prot_Shape[21],bin_shape_t$124),
       _a4v_=caml_call1(Bin_prot_Shape[18][4],_a4u_);
      caml_call1(Stdlib[46],_a4v_);
      var
       _a4w_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$45),
         319,
         8138,
         8148,
         8154];
      return caml_call1(Expect_test_collector$12[1],_a4w_)}
    var
     _aj7_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$46),
       319,
       8138,
       8155,
       8193],
     _aj__=
      [0,
       [0,
        _aj9_,
        _aj8_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$47),
         319,
         8138,
         8148,
         8154],
        _aj7_],
       0],
     _aj$_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$49),
       317,
       8072,
       8078,
       8194],
     _aka_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$8);
    caml_call9
     (Expect_test_collector$12[3],
      _aka_,
      _aj$_,
      cst_core_src_command_shape_ml$48,
      0,
      0,
      _aj__,
      0,
      Inline_test_config,
      _aj6_);
    function to_latest$3(param)
     {switch(param[0])
       {case 0:var b=param[1];return [0,b];
        case 1:var g=param[1];return [1,to_latest(map$27(g,to_latest$3))];
        default:var e=param[1];return [2,caml_call1(to_latest$1,e)]}}
    function of_latest$3(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var b=param$0[1];return [0,b];
         case 1:var g=param$0[1];return [1,map$27(of_latest(g),of_latest$3)];
         case 2:var e=param$0[1];return [2,caml_call1(of_latest$1,e)];
         default:
          var
           thunk=param$0[1],
           _a4t_=caml_obj_tag(thunk),
           param$1=
            250 === _a4t_
             ?thunk[1]
             :246 === _a4t_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    var
     _akb_=caml_call1(Bin_prot_Shape[2][1],cst_t$243),
     _akc_=
      [0,
       [0,cst_Base$5,[0,bin_shape_t$116,0]],
       [0,
        [0,
         cst_Group$8,
         [0,
          bin_shape_t$118(caml_call1(caml_call1(Bin_prot_Shape[13],_akb_),0)),
          0]],
        [0,[0,cst_Exec$8,[0,bin_shape_t$121,0]],0]]],
     _akd_=caml_call1(Bin_prot_Shape[9],_akc_),
     _ake_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$244),0,_akd_],0],
     _akf_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$22),
     group$133=caml_call2(Bin_prot_Shape[6],_akf_,_ake_),
     _akg_=caml_call1(Bin_prot_Shape[2][1],cst_t$245),
     bin_shape_t$125=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$133,_akg_),0),
     t_of_sexp$96=function _a4s_(_a4r_){return _a4s_.fun(_a4r_)};
    caml_update_dummy
     (t_of_sexp$96,
      function(sexp_503)
       {if(0 === sexp_503[0])
         {var _a4l_=sexp_503[1],switch$0=0;
          if(caml_string_notequal(_a4l_,cst_Base$6))
           {var switch$1=0;
            if(caml_string_notequal(_a4l_,cst_Exec$9))
             {var switch$2=0;
              if(caml_string_notequal(_a4l_,cst_Group$9))
               if(caml_string_notequal(_a4l_,cst_base$3))
                if(caml_string_notequal(_a4l_,cst_exec$5))
                 {if(caml_string_notequal(_a4l_,cst_group$5))
                   {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
                else
                 switch$2 = 1;
               else
                {switch$1 = 1;switch$2 = 1}
              if(! switch$2)
               return caml_call2
                       (Sexplib0_Sexp_conv_error[5],error_source_501,sexp_503)}
            if(! switch$1)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_501,sexp_503)}
          if(! switch$0)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_501,sexp_503)}
        else
         {var _a4m_=sexp_503[1];
          if(! _a4m_)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7],error_source_501,sexp_503);
          var _a4n_=_a4m_[1];
          if(0 !== _a4n_[0])
           return caml_call2
                   (Sexplib0_Sexp_conv_error[6],error_source_501,sexp_503);
          var _a4o_=_a4n_[1],switch$3=0;
          if(caml_string_notequal(_a4o_,cst_Base$7))
           {var switch$4=0;
            if(caml_string_notequal(_a4o_,cst_Exec$10))
             {var switch$5=0;
              if(caml_string_notequal(_a4o_,cst_Group$10))
               if(caml_string_notequal(_a4o_,cst_base$4))
                if(caml_string_notequal(_a4o_,cst_exec$6))
                 {if(caml_string_notequal(_a4o_,cst_group$6))
                   {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
                else
                 switch$5 = 1;
               else
                {switch$4 = 1;switch$5 = 1}
              if(! switch$5)
               {var sexp_args_510=_a4m_[2];
                if(sexp_args_510 && ! sexp_args_510[2])
                 {var
                   arg0_511=sexp_args_510[1],
                   res0_512=t_of_sexp$91(t_of_sexp$96,arg0_511);
                  return [1,res0_512]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],
                         error_source_501,
                         _a4o_,
                         sexp_503)}}
            if(! switch$4)
             {var sexp_args_515=_a4m_[2];
              if(sexp_args_515 && ! sexp_args_515[2])
               {var arg0_516=sexp_args_515[1];
                if(0 === arg0_516[0])
                 var
                  res0_517=
                   caml_call2
                    (Sexplib0_Sexp_conv_error[16],error_source_388,arg0_516);
                else
                 {var
                   field_sexps_373=arg0_516[1],
                   summary_374=[0,0],
                   readme_376=[0,0],
                   path_to_exe_378=[0,0],
                   duplicates_380=[0,0],
                   extra_381=[0,0],
                   param$0=field_sexps_373;
                  for(;;)
                   {if(param$0)
                     {var _a4d_=param$0[1];
                      if(1 === _a4d_[0])
                       {var _a4e_=_a4d_[1];
                        if(_a4e_)
                         {var _a4f_=_a4e_[1];
                          if(0 === _a4f_[0])
                           {var _a4g_=_a4e_[2],_a4h_=_a4f_[1],switch$6=0;
                            if(! _a4g_ || ! _a4g_[2])switch$6 = 1;
                            if(switch$6)
                             {var
                               tail_390=param$0[2],
                               field_sexp_383$3=
                                function(_a4q_)
                                 {function field_sexp_383(param)
                                   {if(_a4q_)
                                     {if(_a4q_[2])throw [0,Assert_failure,_ajg_];
                                      var x_391=_a4q_[1];
                                      return x_391}
                                    return caml_call2
                                            (Sexplib0_Sexp_conv_error[10],error_source_388,arg0_516)}
                                  return field_sexp_383},
                               field_sexp_383=field_sexp_383$3(_a4g_);
                              if(caml_string_notequal(_a4h_,cst_path_to_exe$6))
                               if(caml_string_notequal(_a4h_,cst_readme$12))
                                if(caml_string_notequal(_a4h_,cst_summary$18))
                                 {if(Sexplib0_Sexp_conv[26][1])
                                   extra_381[1] = [0,_a4h_,extra_381[1]]}
                                else
                                 if(summary_374[1])
                                  duplicates_380[1] = [0,_a4h_,duplicates_380[1]];
                                 else
                                  {var
                                    field_sexp_383$0=field_sexp_383(0),
                                    fvalue_387=caml_call1(_$r_,field_sexp_383$0);
                                   summary_374[1] = [0,fvalue_387]}
                               else
                                if(readme_376[1])
                                 duplicates_380[1] = [0,_a4h_,duplicates_380[1]];
                                else
                                 {var
                                   field_sexp_383$1=field_sexp_383(0),
                                   fvalue_386=caml_call1(_$r_,field_sexp_383$1);
                                  readme_376[1] = [0,fvalue_386]}
                              else
                               if(path_to_exe_378[1])
                                duplicates_380[1] = [0,_a4h_,duplicates_380[1]];
                               else
                                {var
                                  field_sexp_383$2=field_sexp_383(0),
                                  fvalue_385=caml_call1(_$r_,field_sexp_383$2);
                                 path_to_exe_378[1] = [0,fvalue_385]}
                              var param$0=tail_390;
                              continue}}}}
                      caml_call2
                       (Sexplib0_Sexp_conv_error[10],error_source_388,_a4d_)}
                    if(duplicates_380[1])
                     var
                      res0_517=
                       caml_call3
                        (Sexplib0_Sexp_conv_error[12],
                         error_source_388,
                         duplicates_380[1],
                         arg0_516);
                    else
                     if(extra_381[1])
                      var
                       res0_517=
                        caml_call3
                         (Sexplib0_Sexp_conv_error[13],
                          error_source_388,
                          extra_381[1],
                          arg0_516);
                     else
                      {var
                        _a4i_=summary_374[1],
                        _a4k_=path_to_exe_378[1],
                        switch$7=0,
                        _a4j_=readme_376[1];
                       if(_a4i_ && _a4k_)
                        var
                         path_to_exe_379=_a4k_[1],
                         summary_375=_a4i_[1],
                         res0_517=[0,summary_375,_a4j_,path_to_exe_379];
                       else
                        switch$7 = 1;
                       if(switch$7)
                        var
                         res0_517=
                          caml_call3
                           (Sexplib0_Sexp_conv_error[15],
                            error_source_388,
                            arg0_516,
                            [0,
                             [0,0 === summary_374[1]?1:0,cst_summary$19],
                             [0,[0,0 === path_to_exe_378[1]?1:0,cst_path_to_exe$7],0]])}
                    break}}
                return [2,res0_517]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],
                       error_source_501,
                       _a4o_,
                       sexp_503)}}
          if(! switch$3)
           {var sexp_args_505=_a4m_[2];
            if(sexp_args_505 && ! sexp_args_505[2])
             {var arg0_506=sexp_args_505[1];
              if(0 === arg0_506[0])
               var
                res0_507=
                 caml_call2
                  (Sexplib0_Sexp_conv_error[16],error_source_171,arg0_506);
              else
               {var
                 field_sexps_153=arg0_506[1],
                 summary_154=[0,0],
                 readme_156=[0,0],
                 usage_158=[0,0],
                 flags_160=[0,0],
                 duplicates_162=[0,0],
                 extra_163=[0,0],
                 param=field_sexps_153;
                for(;;)
                 {if(param)
                   {var _a36_=param[1];
                    if(1 === _a36_[0])
                     {var _a37_=_a36_[1];
                      if(_a37_)
                       {var _a38_=_a37_[1];
                        if(0 === _a38_[0])
                         {var _a39_=_a37_[2],_a3__=_a38_[1],switch$8=0;
                          if(! _a39_ || ! _a39_[2])switch$8 = 1;
                          if(switch$8)
                           {var
                             tail_173=param[2],
                             field_sexp_165$4=
                              function(_a4p_)
                               {function field_sexp_165(param)
                                 {if(_a4p_)
                                   {if(_a4p_[2])throw [0,Assert_failure,_ahV_];
                                    var x_174=_a4p_[1];
                                    return x_174}
                                  return caml_call2
                                          (Sexplib0_Sexp_conv_error[10],error_source_171,arg0_506)}
                                return field_sexp_165},
                             field_sexp_165=field_sexp_165$4(_a39_);
                            if(caml_string_notequal(_a3__,cst_flags$3))
                             if(caml_string_notequal(_a3__,cst_readme$2))
                              if(caml_string_notequal(_a3__,cst_summary$3))
                               if(caml_string_notequal(_a3__,cst_usage$2))
                                {if(Sexplib0_Sexp_conv[26][1])
                                  extra_163[1] = [0,_a3__,extra_163[1]]}
                               else
                                if(usage_158[1])
                                 duplicates_162[1] = [0,_a3__,duplicates_162[1]];
                                else
                                 {var
                                   field_sexp_165$0=field_sexp_165(0),
                                   fvalue_168=caml_call1(_$r_,field_sexp_165$0);
                                  usage_158[1] = [0,fvalue_168]}
                              else
                               if(summary_154[1])
                                duplicates_162[1] = [0,_a3__,duplicates_162[1]];
                               else
                                {var
                                  field_sexp_165$1=field_sexp_165(0),
                                  fvalue_170=caml_call1(_$r_,field_sexp_165$1);
                                 summary_154[1] = [0,fvalue_170]}
                             else
                              if(readme_156[1])
                               duplicates_162[1] = [0,_a3__,duplicates_162[1]];
                              else
                               {var
                                 field_sexp_165$2=field_sexp_165(0),
                                 fvalue_169=caml_call1(_$r_,field_sexp_165$2);
                                readme_156[1] = [0,fvalue_169]}
                            else
                             if(flags_160[1])
                              duplicates_162[1] = [0,_a3__,duplicates_162[1]];
                             else
                              {var
                                field_sexp_165$3=field_sexp_165(0),
                                fvalue_167=caml_call2(_$D_,t_of_sexp$88,field_sexp_165$3);
                               flags_160[1] = [0,fvalue_167]}
                            var param=tail_173;
                            continue}}}}
                    caml_call2
                     (Sexplib0_Sexp_conv_error[10],error_source_171,_a36_)}
                  if(duplicates_162[1])
                   var
                    res0_507=
                     caml_call3
                      (Sexplib0_Sexp_conv_error[12],
                       error_source_171,
                       duplicates_162[1],
                       arg0_506);
                  else
                   if(extra_163[1])
                    var
                     res0_507=
                      caml_call3
                       (Sexplib0_Sexp_conv_error[13],
                        error_source_171,
                        extra_163[1],
                        arg0_506);
                   else
                    {var
                      _a3$_=summary_154[1],
                      _a4b_=usage_158[1],
                      _a4c_=flags_160[1],
                      switch$9=0,
                      _a4a_=readme_156[1];
                     if(_a3$_ && _a4b_ && _a4c_)
                      var
                       flags_161=_a4c_[1],
                       usage_159=_a4b_[1],
                       summary_155=_a3$_[1],
                       res0_507=[0,summary_155,_a4a_,usage_159,flags_161];
                     else
                      switch$9 = 1;
                     if(switch$9)
                      var
                       res0_507=
                        caml_call3
                         (Sexplib0_Sexp_conv_error[15],
                          error_source_171,
                          arg0_506,
                          [0,
                           [0,0 === summary_154[1]?1:0,cst_summary$4],
                           [0,
                            [0,0 === usage_158[1]?1:0,cst_usage$3],
                            [0,[0,0 === flags_160[1]?1:0,cst_flags$4],0]]])}
                  break}}
              return [0,res0_507]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_501,
                     _a4o_,
                     sexp_503)}}
        return caml_call2
                (Sexplib0_Sexp_conv_error[8],error_source_501,sexp_503)});
    function sexp_of_t$106(param)
     {switch(param[0])
       {case 0:
         var
          arg0_518=param[1],
          flags_184=arg0_518[4],
          usage_182=arg0_518[3],
          readme_178=arg0_518[2],
          summary_176=arg0_518[1],
          arg_185=caml_call2(_$E_,sexp_of_t$98,flags_184),
          bnds_175=[0,[1,[0,_ahW_,[0,arg_185,0]]],0],
          arg_183=caml_call1(_$s_,usage_182),
          bnds_175$0=[0,[1,[0,_ahX_,[0,arg_183,0]]],bnds_175];
         if(readme_178)
          var
           v_179=readme_178[1],
           arg_181=caml_call1(_$s_,v_179),
           bnd_180=[1,[0,_ahY_,[0,arg_181,0]]],
           bnds_175$1=[0,bnd_180,bnds_175$0];
         else
          var bnds_175$1=bnds_175$0;
         var
          arg_177=caml_call1(_$s_,summary_176),
          bnds_175$2=[0,[1,[0,_ahZ_,[0,arg_177,0]]],bnds_175$1],
          res0_519=[1,bnds_175$2];
         return [1,[0,_akh_,[0,res0_519,0]]];
        case 1:
         var arg0_520=param[1],res0_521=sexp_of_t$101(sexp_of_t$106,arg0_520);
         return [1,[0,_aki_,[0,res0_521,0]]];
        default:
         var
          arg0_522=param[1],
          path_to_exe_399=arg0_522[3],
          readme_395=arg0_522[2],
          summary_393=arg0_522[1],
          arg_400=caml_call1(_$s_,path_to_exe_399),
          bnds_392=[0,[1,[0,_ajh_,[0,arg_400,0]]],0];
         if(readme_395)
          var
           v_396=readme_395[1],
           arg_398=caml_call1(_$s_,v_396),
           bnd_397=[1,[0,_aji_,[0,arg_398,0]]],
           bnds_392$0=[0,bnd_397,bnds_392];
         else
          var bnds_392$0=bnds_392;
         var
          arg_394=caml_call1(_$s_,summary_393),
          bnds_392$1=[0,[1,[0,_ajj_,[0,arg_394,0]]],bnds_392$0],
          res0_523=[1,bnds_392$1];
         return [1,[0,_akj_,[0,res0_523,0]]]}}
    var
     Expect_test_collector$13=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _akk_(param)
     {var
       _a33_=caml_call1(Bin_prot_Shape[21],bin_shape_t$125),
       _a34_=caml_call1(Bin_prot_Shape[18][4],_a33_);
      caml_call1(Stdlib[46],_a34_);
      var
       _a35_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$50),
         345,
         8968,
         8978,
         8984];
      return caml_call1(Expect_test_collector$13[1],_a35_)}
    var
     _akl_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$51),
       345,
       8968,
       8985,
       9023],
     _ako_=
      [0,
       [0,
        _akn_,
        _akm_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$52),
         345,
         8968,
         8978,
         8984],
        _akl_],
       0],
     _akp_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$54),
       343,
       8902,
       8908,
       9024],
     _akq_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$9);
    caml_call9
     (Expect_test_collector$13[3],
      _akq_,
      _akp_,
      cst_core_src_command_shape_ml$53,
      0,
      0,
      _ako_,
      0,
      Inline_test_config,
      _akk_);
    function to_latest$4(param)
     {switch(param[0])
       {case 0:
         var b=param[1],flags=b[4],usage=b[3],readme=b[2],summary=b[1];
         return [0,[0,summary,readme,[0,usage],flags]];
        case 1:var g=param[1];return [1,to_latest(map$27(g,to_latest$4))];
        default:var e=param[1];return [2,caml_call1(to_latest$2,e)]}}
    function of_latest$4(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:
          var b=param$0[1],flags=b[4],anons=b[3],readme=b[2],summary=b[1];
          if(0 === anons[0])
           var usage$0=anons[1],usage$1=usage$0;
          else
           var grammar=anons[1],usage$1=usage(grammar);
          return [0,[0,summary,readme,usage$1,flags]];
         case 1:var g=param$0[1];return [1,map$27(of_latest(g),of_latest$4)];
         case 2:var e=param$0[1];return [2,caml_call1(of_latest$2,e)];
         default:
          var
           thunk=param$0[1],
           _a32_=caml_obj_tag(thunk),
           param$1=
            250 === _a32_
             ?thunk[1]
             :246 === _a32_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    var
     _akr_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,
         [0,cst_V1,[0,bin_shape_t$125,0]],
         [0,
          [0,cst_V2,[0,bin_shape_t$124,0]],
          [0,[0,cst_V3,[0,bin_shape_t$123,0]],0]]]),
     _aks_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$246),0,_akr_],0],
     _akt_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$23),
     group$134=caml_call2(Bin_prot_Shape[6],_akt_,_aks_),
     _aku_=caml_call1(Bin_prot_Shape[2][1],cst_t$247),
     bin_shape_t$126=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$134,_aku_),0);
    function t_of_sexp$97(sexp_528)
     {if(0 === sexp_528[0])
       {var _a3Y_=sexp_528[1],switch$0=0;
        if(caml_string_notequal(_a3Y_,cst_V1$0))
         {var switch$1=0;
          if(caml_string_notequal(_a3Y_,cst_V2$0))
           {var switch$2=0;
            if(caml_string_notequal(_a3Y_,cst_V3$0))
             if(caml_string_notequal(_a3Y_,cst_v1))
              if(caml_string_notequal(_a3Y_,cst_v2))
               {if(caml_string_notequal(_a3Y_,cst_v3))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_526,sexp_528)}
          if(! switch$1)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_526,sexp_528)}
        if(! switch$0)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[5],error_source_526,sexp_528)}
      else
       {var _a3Z_=sexp_528[1];
        if(! _a3Z_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_526,sexp_528);
        var _a30_=_a3Z_[1];
        if(0 !== _a30_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_526,sexp_528);
        var _a31_=_a30_[1],switch$3=0;
        if(caml_string_notequal(_a31_,cst_V1$1))
         {var switch$4=0;
          if(caml_string_notequal(_a31_,cst_V2$1))
           {var switch$5=0;
            if(caml_string_notequal(_a31_,cst_V3$1))
             if(caml_string_notequal(_a31_,cst_v1$0))
              if(caml_string_notequal(_a31_,cst_v2$0))
               {if(caml_string_notequal(_a31_,cst_v3$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             {var sexp_args_540=_a3Z_[2];
              if(sexp_args_540 && ! sexp_args_540[2])
               {var
                 arg0_541=sexp_args_540[1],
                 res0_542=caml_call1(t_of_sexp$94,arg0_541);
                return [2,res0_542]}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],
                       error_source_526,
                       _a31_,
                       sexp_528)}}
          if(! switch$4)
           {var sexp_args_535=_a3Z_[2];
            if(sexp_args_535 && ! sexp_args_535[2])
             {var
               arg0_536=sexp_args_535[1],
               res0_537=caml_call1(t_of_sexp$95,arg0_536);
              return [1,res0_537]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_526,
                     _a31_,
                     sexp_528)}}
        if(! switch$3)
         {var sexp_args_530=_a3Z_[2];
          if(sexp_args_530 && ! sexp_args_530[2])
           {var
             arg0_531=sexp_args_530[1],
             res0_532=caml_call1(t_of_sexp$96,arg0_531);
            return [0,res0_532]}
          return caml_call3
                  (Sexplib0_Sexp_conv_error[4],
                   error_source_526,
                   _a31_,
                   sexp_528)}}
      return caml_call2(Sexplib0_Sexp_conv_error[8],error_source_526,sexp_528)}
    function sexp_of_t$107(param)
     {switch(param[0])
       {case 0:
         var arg0_543=param[1],res0_544=sexp_of_t$106(arg0_543);
         return [1,[0,_akv_,[0,res0_544,0]]];
        case 1:
         var arg0_545=param[1],res0_546=sexp_of_t$105(arg0_545);
         return [1,[0,_akw_,[0,res0_546,0]]];
        default:
         var arg0_547=param[1],res0_548=sexp_of_t$104(arg0_547);
         return [1,[0,_akx_,[0,res0_548,0]]]}}
    function v1(v0){return [0,v0]}
    function v2(v0){return [1,v0]}
    function v3(v0){return [2,v0]}
    var v1$0=[0,cst_V1$2,0,v1],v2$0=[0,cst_V2$2,1,v2],v3$0=[0,cst_V3$2,2,v3];
    function fold$14(init,v1_fun,v2_fun,v3_fun)
     {return caml_call2
              (v3_fun,
               caml_call2(v2_fun,caml_call2(v1_fun,init,v1$0),v2$0),
               v3$0)}
    var
     Expect_test_collector$14=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _aky_(param)
     {var
       _a3V_=caml_call1(Bin_prot_Shape[21],bin_shape_t$126),
       _a3W_=caml_call1(Bin_prot_Shape[18][4],_a3V_);
      caml_call1(Stdlib[46],_a3W_);
      var
       _a3X_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$55),
         373,
         9997,
         10007,
         10013];
      return caml_call1(Expect_test_collector$14[1],_a3X_)}
    var
     _akz_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$56),
       373,
       9997,
       10014,
       10052],
     _akC_=
      [0,
       [0,
        _akB_,
        _akA_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$57),
         373,
         9997,
         10007,
         10013],
        _akz_],
       0],
     _akD_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$59),
       371,
       9931,
       9937,
       10053],
     _akE_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$10);
    caml_call9
     (Expect_test_collector$14[3],
      _akE_,
      _akD_,
      cst_core_src_command_shape_ml$58,
      0,
      0,
      _akC_,
      0,
      Inline_test_config,
      _aky_);
    function of_versioned(param)
     {switch(param[0])
       {case 0:var t=param[1];return to_latest$4(t);
        case 1:var t$0=param[1];return to_latest$3(t$0);
        default:var t$1=param[1];return t$1}}
    var
     _akG_=caml_call1(Bin_prot_Shape[2][1],cst_t$248),
     _akH_=
      [0,
       [0,
        cst_Concat$2,
        [0,
         bin_shape_list(caml_call1(caml_call1(Bin_prot_Shape[13],_akG_),0)),
         0]],
       [0,[0,cst_Ad_hoc$2,[0,bin_shape_string,0]],0]],
     _akI_=caml_call1(Bin_prot_Shape[2][1],cst_t$249),
     _akJ_=
      [0,
       [0,
        cst_Maybe$2,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_akI_),0),0]],
       _akH_],
     _akK_=caml_call1(Bin_prot_Shape[2][1],cst_t$250),
     _akM_=
      [0,
       _akL_,
       [0,
        [0,cst_One$2,[0,bin_shape_string,0]],
        [0,
         [0,
          cst_Many$2,
          [0,caml_call1(caml_call1(Bin_prot_Shape[13],_akK_),0),0]],
         _akJ_]]],
     _akN_=caml_call1(Bin_prot_Shape[9],_akM_),
     _akO_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$251),0,_akN_],0],
     _akP_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$24),
     group$135=caml_call2(Bin_prot_Shape[6],_akP_,_akO_),
     _akQ_=caml_call1(Bin_prot_Shape[2][1],cst_t$252),
     bin_shape_t$127=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$135,_akQ_),0);
    function bin_size_t$78(param)
     {if(typeof param === "number")
       return 1;
      else
       switch(param[0])
        {case 0:
          var v1=param[1],_a3Q_=caml_call1(bin_size_t$47,v1);
          return caml_call2(Bin_prot_Common[23],1,_a3Q_);
         case 1:
          var v1$0=param[1],_a3R_=bin_size_t$78(v1$0);
          return caml_call2(Bin_prot_Common[23],1,_a3R_);
         case 2:
          var v1$1=param[1],_a3S_=bin_size_t$78(v1$1);
          return caml_call2(Bin_prot_Common[23],1,_a3S_);
         case 3:
          var v1$2=param[1],_a3T_=bin_size_list(bin_size_t$78,v1$2);
          return caml_call2(Bin_prot_Common[23],1,_a3T_);
         default:
          var v1$3=param[1],_a3U_=caml_call1(bin_size_t$47,v1$3);
          return caml_call2(Bin_prot_Common[23],1,_a3U_)}}
    function bin_write_t$79(buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return caml_call3(Bin_prot_Write[31],buf,pos$0,0);
       else
        switch(param$0[0])
         {case 0:
           var v1=param$0[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos$0,1);
           return caml_call3(bin_write_t$47,buf,pos$1,v1);
          case 1:
           var
            v1$0=param$0[1],
            pos$2=caml_call3(Bin_prot_Write[31],buf,pos$0,2),
            pos$0=pos$2,
            param$0=v1$0;
           continue;
          case 2:
           var
            v1$1=param$0[1],
            pos$3=caml_call3(Bin_prot_Write[31],buf,pos$0,3),
            pos$0=pos$3,
            param$0=v1$1;
           continue;
          case 3:
           var
            v1$2=param$0[1],
            pos$4=caml_call3(Bin_prot_Write[31],buf,pos$0,4);
           return bin_write_list(bin_write_t$79,buf,pos$4,v1$2);
          default:
           var
            v1$3=param$0[1],
            pos$5=caml_call3(Bin_prot_Write[31],buf,pos$0,5);
           return caml_call3(bin_write_t$47,buf,pos$5,v1$3)}}
    function bin_read_t$156(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(5 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_akR_,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:
         var arg_1=caml_call2(bin_read_t$96,buf,pos_ref);return [0,arg_1];
        case 2:var arg_1$0=bin_read_t$156(buf,pos_ref);return [1,arg_1$0];
        case 3:var arg_1$1=bin_read_t$156(buf,pos_ref);return [2,arg_1$1];
        case 4:
         var arg_1$3=bin_read_list$0(bin_read_t$156,buf,pos_ref);
         return [3,arg_1$3];
        default:
         var arg_1$2=caml_call2(bin_read_t$96,buf,pos_ref);return [4,arg_1$2]}}
    function compare$92(a_549,b_550)
     {var a_549$0=a_549,b_550$0=b_550;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_549$0,b_550$0))return 0;
        var switch$0=0;
        if(typeof a_549$0 === "number")
         return typeof b_550$0 === "number"?0:-1;
        else
         switch(a_549$0[0])
          {case 0:
            var _a3L_=a_549$0[1];
            if(typeof b_550$0 !== "number")
             {if(0 === b_550$0[0])
               {var b_552=b_550$0[1];
                return caml_call2(compare$37,_a3L_,b_552)}
              return -1}
            break;
           case 1:
            var _a3M_=a_549$0[1];
            if(typeof b_550$0 !== "number")
             switch(b_550$0[0])
              {case 0:switch$0 = 1;break;
               case 1:
                var b_550$1=b_550$0[1],a_549$0=_a3M_,b_550$0=b_550$1;continue;
               default:return -1}
            break;
           case 2:
            var _a3N_=a_549$0[1];
            if(typeof b_550$0 !== "number")
             switch(b_550$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:
                var b_550$2=b_550$0[1],a_549$0=_a3N_,b_550$0=b_550$2;continue;
               default:return -1}
            break;
           case 3:
            var _a3O_=a_549$0[1];
            if(typeof b_550$0 !== "number")
             switch(b_550$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:switch$0 = 3;break;
               case 3:
                var b_558=b_550$0[1];
                return compare_list
                        (function(a_559,b_560){return compare$92(a_559,b_560)},
                         _a3O_,
                         b_558);
               default:return -1}
            break;
           default:
            var _a3P_=a_549$0[1];
            if(typeof b_550$0 !== "number")
             switch(b_550$0[0])
              {case 0:switch$0 = 1;break;
               case 1:switch$0 = 2;break;
               case 2:switch$0 = 3;break;
               case 3:return 1;
               default:
                var b_562=b_550$0[1];return caml_call2(compare$37,_a3P_,b_562)}}
        switch(switch$0)
         {case 0:return 1;case 1:return 1;case 2:return 1;default:return 1}}}
    var t_of_sexp$98=function _a3K_(_a3J_){return _a3K_.fun(_a3J_)};
    caml_update_dummy
     (t_of_sexp$98,
      function(sexp_567)
       {if(0 === sexp_567[0])
         {var
           _a3D_=sexp_567[1],
           _a3E_=caml_string_compare(_a3D_,cst_ad_hoc$1),
           switch$0=0;
          if(0 <= _a3E_)
           if(0 < _a3E_)
            if(caml_string_notequal(_a3D_,cst_concat$1))
             if(caml_string_notequal(_a3D_,cst_many$1))
              if(caml_string_notequal(_a3D_,cst_maybe$1))
               if(caml_string_notequal(_a3D_,cst_one$1))
                {if(! caml_string_notequal(_a3D_,cst_zero$3))switch$0 = 1}
               else
                switch$0 = 2;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 5;
           else
            switch$0 = 6;
          else
           if(caml_string_notequal(_a3D_,cst_Ad_hoc$3))
            if(caml_string_notequal(_a3D_,cst_Concat$3))
             if(caml_string_notequal(_a3D_,cst_Many$3))
              if(caml_string_notequal(_a3D_,cst_Maybe$3))
               if(caml_string_notequal(_a3D_,cst_One$3))
                {if(! caml_string_notequal(_a3D_,cst_Zero$4))switch$0 = 1}
               else
                switch$0 = 2;
              else
               switch$0 = 4;
             else
              switch$0 = 3;
            else
             switch$0 = 5;
           else
            switch$0 = 6;
          switch(switch$0)
           {case 1:return 0;
            case 2:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_565,sexp_567);
            case 3:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_565,sexp_567);
            case 4:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_565,sexp_567);
            case 5:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_565,sexp_567);
            case 6:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_565,sexp_567)
            }}
        else
         {var _a3F_=sexp_567[1];
          if(! _a3F_)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7],error_source_565,sexp_567);
          var _a3G_=_a3F_[1];
          if(0 !== _a3G_[0])
           return caml_call2
                   (Sexplib0_Sexp_conv_error[6],error_source_565,sexp_567);
          var
           _a3H_=_a3G_[1],
           _a3I_=caml_string_compare(_a3H_,cst_ad_hoc$2),
           switch$1=0;
          if(0 <= _a3I_)
           if(0 < _a3I_)
            if(caml_string_notequal(_a3H_,cst_concat$2))
             if(caml_string_notequal(_a3H_,cst_many$2))
              if(caml_string_notequal(_a3H_,cst_maybe$2))
               if(caml_string_notequal(_a3H_,cst_one$2))
                {if(! caml_string_notequal(_a3H_,cst_zero$4))switch$1 = 6}
               else
                switch$1 = 1;
              else
               switch$1 = 3;
             else
              switch$1 = 2;
            else
             switch$1 = 4;
           else
            switch$1 = 5;
          else
           if(caml_string_notequal(_a3H_,cst_Ad_hoc$4))
            if(caml_string_notequal(_a3H_,cst_Concat$4))
             if(caml_string_notequal(_a3H_,cst_Many$4))
              if(caml_string_notequal(_a3H_,cst_Maybe$4))
               if(caml_string_notequal(_a3H_,cst_One$4))
                {if(! caml_string_notequal(_a3H_,cst_Zero$5))switch$1 = 6}
               else
                switch$1 = 1;
              else
               switch$1 = 3;
             else
              switch$1 = 2;
            else
             switch$1 = 4;
           else
            switch$1 = 5;
          switch(switch$1)
           {case 1:
             var sexp_args_569=_a3F_[2];
             if(sexp_args_569 && ! sexp_args_569[2])
              {var
                arg0_570=sexp_args_569[1],
                res0_571=caml_call1(t_of_sexp$34,arg0_570);
               return [0,res0_571]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_565,
                      _a3H_,
                      sexp_567);
            case 2:
             var sexp_args_574=_a3F_[2];
             if(sexp_args_574 && ! sexp_args_574[2])
              {var
                arg0_575=sexp_args_574[1],
                res0_576=caml_call1(t_of_sexp$98,arg0_575);
               return [1,res0_576]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_565,
                      _a3H_,
                      sexp_567);
            case 3:
             var sexp_args_579=_a3F_[2];
             if(sexp_args_579 && ! sexp_args_579[2])
              {var
                arg0_580=sexp_args_579[1],
                res0_581=caml_call1(t_of_sexp$98,arg0_580);
               return [2,res0_581]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_565,
                      _a3H_,
                      sexp_567);
            case 4:
             var sexp_args_584=_a3F_[2];
             if(sexp_args_584 && ! sexp_args_584[2])
              {var
                arg0_585=sexp_args_584[1],
                res0_586=caml_call2(list_of_sexp,t_of_sexp$98,arg0_585);
               return [3,res0_586]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_565,
                      _a3H_,
                      sexp_567);
            case 5:
             var sexp_args_589=_a3F_[2];
             if(sexp_args_589 && ! sexp_args_589[2])
              {var
                arg0_590=sexp_args_589[1],
                res0_591=caml_call1(t_of_sexp$34,arg0_590);
               return [4,res0_591]}
             return caml_call3
                     (Sexplib0_Sexp_conv_error[4],
                      error_source_565,
                      _a3H_,
                      sexp_567);
            case 6:
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3],error_source_565,sexp_567)
            }}
        return caml_call2
                (Sexplib0_Sexp_conv_error[8],error_source_565,sexp_567)});
    function sexp_of_t$108(param)
     {if(typeof param === "number")
       return _akS_;
      else
       switch(param[0])
        {case 0:
          var arg0_592=param[1],res0_593=caml_call1(sexp_of_t$41,arg0_592);
          return [1,[0,_akT_,[0,res0_593,0]]];
         case 1:
          var arg0_594=param[1],res0_595=sexp_of_t$108(arg0_594);
          return [1,[0,_akU_,[0,res0_595,0]]];
         case 2:
          var arg0_596=param[1],res0_597=sexp_of_t$108(arg0_596);
          return [1,[0,_akV_,[0,res0_597,0]]];
         case 3:
          var
           arg0_598=param[1],
           res0_599=caml_call2(sexp_of_list,sexp_of_t$108,arg0_598);
          return [1,[0,_akW_,[0,res0_599,0]]];
         default:
          var arg0_600=param[1],res0_601=caml_call1(sexp_of_t$41,arg0_600);
          return [1,[0,_akX_,[0,res0_601,0]]]}}
    var
     _akY_=
      caml_call1
       (Bin_prot_Shape[9],
        [0,
         [0,cst_Usage$2,[0,bin_shape_string,0]],
         [0,[0,cst_Grammar$2,[0,bin_shape_t$127,0]],0]]),
     _akZ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$253),0,_akY_],0],
     _ak0_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$25),
     group$136=caml_call2(Bin_prot_Shape[6],_ak0_,_akZ_),
     _ak1_=caml_call1(Bin_prot_Shape[2][1],cst_t$254),
     bin_shape_t$128=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$136,_ak1_),0);
    function compare$93(a_602,b_603)
     {if(caml_call2(Ppx_compare_lib[1],a_602,b_603))return 0;
      if(0 === a_602[0])
       {var _a3B_=a_602[1];
        if(0 === b_603[0])
         {var b_605=b_603[1];return caml_call2(compare$37,_a3B_,b_605)}
        return -1}
      var _a3C_=a_602[1];
      if(0 === b_603[0])return 1;
      var b_607=b_603[1];
      return compare$92(_a3C_,b_607)}
    function sexp_of_t$109(param)
     {if(0 === param[0])
       {var arg0_622=param[1],res0_623=caml_call1(sexp_of_t$41,arg0_622);
        return [1,[0,_ak3_,[0,res0_623,0]]]}
      var arg0_624=param[1],res0_625=sexp_of_t$108(arg0_624);
      return [1,[0,_ak4_,[0,res0_625,0]]]}
    function compare$94(a_626,b_627)
     {if(caml_call2(Ppx_compare_lib[1],a_626,b_627))return 0;
      var n=caml_call2(compare_bool,a_626[1],b_627[1]);
      return 0 === n?caml_call2(compare_bool,a_626[2],b_627[2]):n}
    function loop(acc,enumerate_632,enumerate_633)
     {var
       acc$0=acc,
       enumerate_632$0=enumerate_632,
       enumerate_633$0=enumerate_633;
      for(;;)
       {if(enumerate_633$0)
         {if(enumerate_632$0)
           {var
             enumerate_631=enumerate_633$0[1],
             enumerate_632$1=enumerate_632$0[2],
             enumerate_630=enumerate_632$0[1],
             acc$1=[0,[0,enumerate_630,enumerate_631],acc$0],
             acc$0=acc$1,
             enumerate_632$0=enumerate_632$1;
            continue}
          var
           enumerate_633$1=enumerate_633$0[2],
           enumerate_632$0=enumerate_628,
           enumerate_633$0=enumerate_633$1;
          continue}
        return caml_call1(Stdlib_List[9],acc$0)}}
    var all$6=loop(0,enumerate_628,enumerate_629);
    function at_most_once(r){return r[2]}
    function at_least_once(r){return r[1]}
    function _ak5_(r,v){return [0,r[1],v]}
    var
     _ak6_=0,
     at_most_once$0=
      [0,function(param){return 0},cst_at_most_once,_ak6_,at_most_once,_ak5_];
    function _ak7_(r,v){return [0,v,r[2]]}
    var
     _ak8_=0,
     at_least_once$0=
      [0,
       function(param){return 0},
       cst_at_least_once,
       _ak8_,
       at_least_once,
       _ak7_];
    function make_creator$0(at_least_once_fun,at_most_once_fun,compile_acc)
     {var
       match=caml_call2(at_least_once_fun,at_least_once$0,compile_acc),
       compile_acc$0=match[2],
       at_least_once_gen=match[1],
       match$0=caml_call2(at_most_once_fun,at_most_once$0,compile_acc$0),
       compile_acc$1=match$0[2],
       at_most_once_gen=match$0[1];
      return [0,
              function(acc)
               {var
                 at_least_once=caml_call1(at_least_once_gen,acc),
                 at_most_once=caml_call1(at_most_once_gen,acc);
                return [0,at_least_once,at_most_once]},
              compile_acc$1]}
    function create$29(at_least_once,at_most_once)
     {return [0,at_least_once,at_most_once]}
    function map$28(at_least_once_fun,at_most_once_fun)
     {var _a3A_=caml_call1(at_most_once_fun,at_most_once$0);
      return [0,caml_call1(at_least_once_fun,at_least_once$0),_a3A_]}
    function iter$20(at_least_once_fun,at_most_once_fun)
     {caml_call1(at_least_once_fun,at_least_once$0);
      return caml_call1(at_most_once_fun,at_most_once$0)}
    function fold$15(init,at_least_once_fun,at_most_once_fun)
     {return caml_call2
              (at_most_once_fun,
               caml_call2(at_least_once_fun,init,at_least_once$0),
               at_most_once$0)}
    function map_poly$0(record)
     {var _a3z_=[0,caml_call1(record[1],at_most_once$0),0];
      return [0,caml_call1(record[1],at_least_once$0),_a3z_]}
    function for_all$13(at_least_once_fun,at_most_once_fun)
     {var _a3y_=caml_call1(at_least_once_fun,at_least_once$0);
      return _a3y_?caml_call1(at_most_once_fun,at_most_once$0):_a3y_}
    function exists$13(at_least_once_fun,at_most_once_fun)
     {var _a3x_=caml_call1(at_least_once_fun,at_least_once$0);
      return _a3x_?_a3x_:caml_call1(at_most_once_fun,at_most_once$0)}
    function to_list$9(at_least_once_fun,at_most_once_fun)
     {var _a3w_=[0,caml_call1(at_most_once_fun,at_most_once$0),0];
      return [0,caml_call1(at_least_once_fun,at_least_once$0),_a3w_]}
    function iter$21(record,at_least_once_fun,at_most_once_fun)
     {caml_call3(at_least_once_fun,at_least_once$0,record,record[1]);
      return caml_call3(at_most_once_fun,at_most_once$0,record,record[2])}
    function fold$16(record,init,at_least_once_fun,at_most_once_fun)
     {var _a3v_=record[2];
      return caml_call4
              (at_most_once_fun,
               caml_call4
                (at_least_once_fun,init,at_least_once$0,record,record[1]),
               at_most_once$0,
               record,
               _a3v_)}
    function for_all$14(record,at_least_once_fun,at_most_once_fun)
     {var
       _a3u_=
        caml_call3(at_least_once_fun,at_least_once$0,record,record[1]);
      return _a3u_
              ?caml_call3(at_most_once_fun,at_most_once$0,record,record[2])
              :_a3u_}
    function exists$14(record,at_least_once_fun,at_most_once_fun)
     {var
       _a3t_=
        caml_call3(at_least_once_fun,at_least_once$0,record,record[1]);
      return _a3t_
              ?_a3t_
              :caml_call3(at_most_once_fun,at_most_once$0,record,record[2])}
    function to_list$10(record,at_least_once_fun,at_most_once_fun)
     {var
       _a3s_=
        [0,caml_call3(at_most_once_fun,at_most_once$0,record,record[2]),0];
      return [0,
              caml_call3(at_least_once_fun,at_least_once$0,record,record[1]),
              _a3s_]}
    function map$29(record,at_least_once_fun,at_most_once_fun)
     {var _a3r_=caml_call3(at_most_once_fun,at_most_once$0,record,record[2]);
      return [0,
              caml_call3(at_least_once_fun,at_least_once$0,record,record[1]),
              _a3r_]}
    function set_all_mutable_fields$0(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$0=
      [0,
       iter$21,
       fold$16,
       for_all$14,
       exists$14,
       to_list$10,
       map$29,
       set_all_mutable_fields$0];
    function sexp_of_t$110(param)
     {var
       at_most_once_638=param[2],
       at_least_once_636=param[1],
       arg_639=caml_call1(sexp_of_bool,at_most_once_638),
       bnds_635=[0,[1,[0,_ak9_,[0,arg_639,0]]],0],
       arg_637=caml_call1(sexp_of_bool,at_least_once_636),
       bnds_635$0=[0,[1,[0,_ak__,[0,arg_637,0]]],bnds_635];
      return [1,bnds_635$0]}
    function to_help_string(t,flag_name)
     {var
       at_most_once=t[2],
       at_least_once=t[1],
       description=
        at_least_once
         ?flag_name
         :caml_call2
           (_Bq_,
            0,
            [0,maybe_missing_prefix,[0,flag_name,[0,maybe_missing_suffix,0]]]);
      return at_most_once
              ?description
              :caml_call2(_Bq_,0,[0,description,[0,maybe_more_suffix,0]])}
    function of_help_string(name)
     {var match=caml_call2(_Cb_,name,maybe_more_suffix);
      if(match)
       var name$0=match[1],name$1=name$0,at_most_once=0;
      else
       var name$1=name,at_most_once=1;
      function _a3p_(_a3q_)
       {return caml_call2(_Cb_,_a3q_,maybe_missing_suffix)}
      var
       match$0=
        caml_call2(_xw_,caml_call2(_Cc_,name$1,maybe_missing_prefix),_a3p_);
      if(match$0)
       var name$2=match$0[1],name$3=name$2,at_least_once=0;
      else
       var name$3=name$1,at_least_once=1;
      return [0,[0,at_least_once,at_most_once],name$3]}
    var
     Expect_test_collector$15=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _ak$_(param)
     {caml_call2
       (_pH_,
        all$6,
        function(t)
         {var
           s=to_help_string(t,x_644),
           _a3m_=[0,caml_call1(Sexplib0_Sexp_conv[7],s),0];
          caml_call2(_Pq_,0,[1,[0,sexp_of_t$110(t),_a3m_]]);
          var
           match=of_help_string(s),
           flag_name=match[2],
           t$0=match[1],
           match$0=compare$94(t,t$0),
           _a3n_=0 === match$0?1:0;
          if(_a3n_)
           {var
             match$1=caml_call2(compare$37,x_644,flag_name),
             _a3o_=0 === match$1?1:0;
            if(_a3o_)return 0;
            throw [0,Assert_failure,_ala_]}
          throw [0,Assert_failure,_alb_]});
      var
       _a3l_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$60),
         468,
         12549,
         12555,
         12561];
      return caml_call1(Expect_test_collector$15[1],_a3l_)}
    var
     _alc_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$61),
       469,
       12562,
       12568,
       12825],
     _alf_=
      [0,
       [0,
        _ale_,
        _ald_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$62),
         468,
         12549,
         12555,
         12561],
        _alc_],
       0],
     _alh_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_command_shape_ml$64),
       460,
       12207,
       12209,
       12826],
     _ali_=
      caml_call1
       (Expect_test_common_File[4][3],cst_160e67717247caff5664ecc8a9$11);
    caml_call9
     (Expect_test_collector$15[3],
      _ali_,
      _alh_,
      cst_core_src_command_shape_ml$63,
      _alg_,
      0,
      _alf_,
      0,
      Inline_test_config,
      _ak$_);
    var
     _alj_=
      [0,
       [0,cst_name$5,bin_shape_string],
       [0,
        [0,cst_doc$2,bin_shape_string],
        [0,[0,cst_aliases$2,bin_shape_list(bin_shape_string)],0]]],
     _alk_=caml_call1(Bin_prot_Shape[8],_alj_),
     _all_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$255),0,_alk_],0],
     _alm_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$26),
     group$137=caml_call2(Bin_prot_Shape[6],_alm_,_all_),
     _aln_=caml_call1(Bin_prot_Shape[2][1],cst_t$256),
     bin_shape_t$129=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$137,_aln_),0);
    function bin_size_t$79(param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _a3i_=caml_call1(bin_size_t$47,v1),
       size=caml_call2(Bin_prot_Common[23],0,_a3i_),
       _a3j_=caml_call1(bin_size_t$47,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_a3j_),
       _a3k_=bin_size_list(bin_size_t$47,v3);
      return caml_call2(Bin_prot_Common[23],size$0,_a3k_)}
    function bin_write_t$80(buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$47,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$47,buf,pos$0,v2);
      return bin_write_list(bin_write_t$47,buf,pos$1,v3)}
    var bin_writer_t$106=[0,bin_size_t$79,bin_write_t$80];
    function bin_read_t$157(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$27,
               pos_ref[1])}
    function bin_read_t$158(buf,pos_ref)
     {var
       v_name=caml_call2(bin_read_t$96,buf,pos_ref),
       v_doc=caml_call2(bin_read_t$96,buf,pos_ref),
       v_aliases=bin_read_list$0(bin_read_t$96,buf,pos_ref);
      return [0,v_name,v_doc,v_aliases]}
    var
     bin_reader_t$106=[0,bin_read_t$158,bin_read_t$157],
     bin_t$106=[0,bin_shape_t$129,bin_writer_t$106,bin_reader_t$106];
    function compare$95(a_648,b_649)
     {if(caml_call2(Ppx_compare_lib[1],a_648,b_649))return 0;
      var n=caml_call2(compare$37,a_648[1],b_649[1]);
      if(0 === n)
       {var n$0=caml_call2(compare$37,a_648[2],b_649[2]);
        if(0 === n$0)
         {var _a3g_=b_649[3],_a3h_=a_648[3];
          return compare_list
                  (function(a_650,b_651)
                    {return caml_call2(compare$37,a_650,b_651)},
                   _a3h_,
                   _a3g_)}
        return n$0}
      return n}
    function aliases(r){return r[3]}
    function doc(r){return r[2]}
    function name$64(r){return r[1]}
    function _alo_(r,v){return [0,r[1],r[2],v]}
    var
     _alp_=0,
     aliases$0=[0,function(param){return 0},cst_aliases$3,_alp_,aliases,_alo_];
    function _alq_(r,v){return [0,r[1],v,r[3]]}
    var _alr_=0,doc$0=[0,function(param){return 0},cst_doc$3,_alr_,doc,_alq_];
    function _als_(r,v){return [0,v,r[2],r[3]]}
    var
     _alt_=0,
     name$65=[0,function(param){return 0},cst_name$6,_alt_,name$64,_als_];
    function make_creator$1(name_fun,doc_fun,aliases_fun,compile_acc)
     {var
       match=caml_call2(name_fun,name$65,compile_acc),
       compile_acc$0=match[2],
       name_gen=match[1],
       match$0=caml_call2(doc_fun,doc$0,compile_acc$0),
       compile_acc$1=match$0[2],
       doc_gen=match$0[1],
       match$1=caml_call2(aliases_fun,aliases$0,compile_acc$1),
       compile_acc$2=match$1[2],
       aliases_gen=match$1[1];
      return [0,
              function(acc)
               {var
                 name=caml_call1(name_gen,acc),
                 doc=caml_call1(doc_gen,acc),
                 aliases=caml_call1(aliases_gen,acc);
                return [0,name,doc,aliases]},
              compile_acc$2]}
    function create$30(name,doc,aliases){return [0,name,doc,aliases]}
    function map$30(name_fun,doc_fun,aliases_fun)
     {var
       _a3e_=caml_call1(aliases_fun,aliases$0),
       _a3f_=caml_call1(doc_fun,doc$0);
      return [0,caml_call1(name_fun,name$65),_a3f_,_a3e_]}
    function iter$22(name_fun,doc_fun,aliases_fun)
     {caml_call1(name_fun,name$65);
      caml_call1(doc_fun,doc$0);
      return caml_call1(aliases_fun,aliases$0)}
    function fold$17(init,name_fun,doc_fun,aliases_fun)
     {return caml_call2
              (aliases_fun,
               caml_call2(doc_fun,caml_call2(name_fun,init,name$65),doc$0),
               aliases$0)}
    function map_poly$1(record)
     {var
       _a3c_=[0,caml_call1(record[1],aliases$0),0],
       _a3d_=[0,caml_call1(record[1],doc$0),_a3c_];
      return [0,caml_call1(record[1],name$65),_a3d_]}
    function for_all$15(name_fun,doc_fun,aliases_fun)
     {var
       _a3a_=caml_call1(name_fun,name$65),
       _a3b_=_a3a_?caml_call1(doc_fun,doc$0):_a3a_;
      return _a3b_?caml_call1(aliases_fun,aliases$0):_a3b_}
    function exists$15(name_fun,doc_fun,aliases_fun)
     {var
       _a2$_=caml_call1(name_fun,name$65),
       _a2__=_a2$_ || caml_call1(doc_fun,doc$0);
      return _a2__?_a2__:caml_call1(aliases_fun,aliases$0)}
    function to_list$11(name_fun,doc_fun,aliases_fun)
     {var
       _a28_=[0,caml_call1(aliases_fun,aliases$0),0],
       _a29_=[0,caml_call1(doc_fun,doc$0),_a28_];
      return [0,caml_call1(name_fun,name$65),_a29_]}
    function iter$23(record,name_fun,doc_fun,aliases_fun)
     {caml_call3(name_fun,name$65,record,record[1]);
      caml_call3(doc_fun,doc$0,record,record[2]);
      return caml_call3(aliases_fun,aliases$0,record,record[3])}
    function fold$18(record,init,name_fun,doc_fun,aliases_fun)
     {var _a26_=record[3],_a27_=record[2];
      return caml_call4
              (aliases_fun,
               caml_call4
                (doc_fun,
                 caml_call4(name_fun,init,name$65,record,record[1]),
                 doc$0,
                 record,
                 _a27_),
               aliases$0,
               record,
               _a26_)}
    function for_all$16(record,name_fun,doc_fun,aliases_fun)
     {var
       _a24_=caml_call3(name_fun,name$65,record,record[1]),
       _a25_=_a24_?caml_call3(doc_fun,doc$0,record,record[2]):_a24_;
      return _a25_?caml_call3(aliases_fun,aliases$0,record,record[3]):_a25_}
    function exists$16(record,name_fun,doc_fun,aliases_fun)
     {var
       _a23_=caml_call3(name_fun,name$65,record,record[1]),
       _a22_=_a23_ || caml_call3(doc_fun,doc$0,record,record[2]);
      return _a22_?_a22_:caml_call3(aliases_fun,aliases$0,record,record[3])}
    function to_list$12(record,name_fun,doc_fun,aliases_fun)
     {var
       _a20_=[0,caml_call3(aliases_fun,aliases$0,record,record[3]),0],
       _a21_=[0,caml_call3(doc_fun,doc$0,record,record[2]),_a20_];
      return [0,caml_call3(name_fun,name$65,record,record[1]),_a21_]}
    function map$31(record,name_fun,doc_fun,aliases_fun)
     {var
       _a2Y_=caml_call3(aliases_fun,aliases$0,record,record[3]),
       _a2Z_=caml_call3(doc_fun,doc$0,record,record[2]);
      return [0,caml_call3(name_fun,name$65,record,record[1]),_a2Z_,_a2Y_]}
    function set_all_mutable_fields$1(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$1=
      [0,
       iter$23,
       fold$18,
       for_all$16,
       exists$16,
       to_list$12,
       map$31,
       set_all_mutable_fields$1];
    function t_of_sexp$99(sexp_653)
     {if(0 === sexp_653[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_669,sexp_653);
      var
       field_sexps_654=sexp_653[1],
       name_655=[0,0],
       doc_657=[0,0],
       aliases_659=[0,0],
       duplicates_661=[0,0],
       extra_662=[0,0],
       param=field_sexps_654;
      for(;;)
       {if(param)
         {var _a2P_=param[1];
          if(1 === _a2P_[0])
           {var _a2Q_=_a2P_[1];
            if(_a2Q_)
             {var _a2R_=_a2Q_[1];
              if(0 === _a2R_[0])
               {var _a2S_=_a2Q_[2],_a2T_=_a2R_[1],switch$0=0;
                if(! _a2S_ || ! _a2S_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_671=param[2],
                   field_sexp_664$3=
                    function(_a2X_)
                     {function field_sexp_664(param)
                       {if(_a2X_)
                         {if(_a2X_[2])throw [0,Assert_failure,_alu_];
                          var x_672=_a2X_[1];
                          return x_672}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_669,sexp_653)}
                      return field_sexp_664},
                   field_sexp_664=field_sexp_664$3(_a2S_);
                  if(caml_string_notequal(_a2T_,cst_aliases$4))
                   if(caml_string_notequal(_a2T_,cst_doc$4))
                    if(caml_string_notequal(_a2T_,cst_name$7))
                     {if(Sexplib0_Sexp_conv[26][1])
                       extra_662[1] = [0,_a2T_,extra_662[1]]}
                    else
                     if(name_655[1])
                      duplicates_661[1] = [0,_a2T_,duplicates_661[1]];
                     else
                      {var
                        field_sexp_664$0=field_sexp_664(0),
                        fvalue_668=caml_call1(t_of_sexp$34,field_sexp_664$0);
                       name_655[1] = [0,fvalue_668]}
                   else
                    if(doc_657[1])
                     duplicates_661[1] = [0,_a2T_,duplicates_661[1]];
                    else
                     {var
                       field_sexp_664$1=field_sexp_664(0),
                       fvalue_667=caml_call1(t_of_sexp$34,field_sexp_664$1);
                      doc_657[1] = [0,fvalue_667]}
                  else
                   if(aliases_659[1])
                    duplicates_661[1] = [0,_a2T_,duplicates_661[1]];
                   else
                    {var
                      field_sexp_664$2=field_sexp_664(0),
                      fvalue_666=
                       caml_call2(list_of_sexp,t_of_sexp$34,field_sexp_664$2);
                     aliases_659[1] = [0,fvalue_666]}
                  var param=tail_671;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_669,_a2P_)}
        if(duplicates_661[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_669,
                  duplicates_661[1],
                  sexp_653);
        if(extra_662[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_669,
                  extra_662[1],
                  sexp_653);
        var _a2U_=name_655[1],_a2V_=doc_657[1],_a2W_=aliases_659[1];
        if(_a2U_ && _a2V_ && _a2W_)
         {var aliases_660=_a2W_[1],doc_658=_a2V_[1],name_656=_a2U_[1];
          return [0,name_656,doc_658,aliases_660]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_669,
                 sexp_653,
                 [0,
                  [0,0 === name_655[1]?1:0,cst_name$8],
                  [0,
                   [0,0 === doc_657[1]?1:0,cst_doc$5],
                   [0,[0,0 === aliases_659[1]?1:0,cst_aliases$5],0]]])}}
    function sexp_of_t$111(param)
     {var
       aliases_678=param[3],
       doc_676=param[2],
       name_674=param[1],
       arg_679=caml_call2(sexp_of_list,sexp_of_t$41,aliases_678),
       bnds_673=[0,[1,[0,_alv_,[0,arg_679,0]]],0],
       arg_677=caml_call1(sexp_of_t$41,doc_676),
       bnds_673$0=[0,[1,[0,_alw_,[0,arg_677,0]]],bnds_673],
       arg_675=caml_call1(sexp_of_t$41,name_674),
       bnds_673$1=[0,[1,[0,_alx_,[0,arg_675,0]]],bnds_673$0];
      return [1,bnds_673$1]}
    function parse_name(t)
     {var
       match=of_help_string(t[1]),
       flag_name=match[2],
       num_occurrences=match[1],
       match$0=caml_call2(_BV_,flag_name,32);
      if(match$0)
       {var _a2M_=match$0[2],_a2N_=match$0[1];
        if(! _a2M_)return [0,[0,num_occurrences,0,_a2N_]];
        if(! _a2M_[2])return [0,[0,num_occurrences,1,_a2N_]]}
      var _a2O_=[0,caml_call1(Sexplib0_Sexp_conv[7],flag_name),0];
      return caml_call1
              (_oC_,
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_Unable_to_parse),
                 _a2O_]])}
    function flag_name(t){return caml_call2(_oK_,parse_name(t),trd3)}
    function num_occurrences(t){return caml_call2(_oK_,parse_name(t),fst3)}
    function requires_arg(t){return caml_call2(_oK_,parse_name(t),snd3)}
    function help_screen_compare(a,b)
     {return caml_string_notequal(b,cst_help)
              ?caml_string_notequal(a,cst_help$0)
                ?caml_string_notequal(b,cst_version)
                  ?caml_string_notequal(a,cst_version$0)
                    ?caml_string_notequal(b,cst_build_info)
                      ?caml_string_notequal(a,cst_build_info$0)
                        ?caml_string_notequal(b,cst_help$1)
                          ?caml_string_notequal(a,cst_help$2)
                            ?caml_string_notequal(b,cst_version$1)
                              ?caml_string_notequal(a,cst_version$2)?0:1
                              :-1
                            :1
                          :-1
                        :1
                      :-1
                    :1
                  :-1
                :1
              :-1}
    function sort$0(t)
     {return caml_call2
              (_qs_,t,function(a,b){return help_screen_compare(a[1],b[1])})}
    function word_wrap(text,width)
     {var chunks=caml_call2(_BV_,text,10);
      return caml_call2
              (_qK_,
               chunks,
               function(text)
                {function _a2J_(word){return 1 - caml_call1(_A1_,word)}
                 var
                  words=caml_call2(_qj_,caml_call2(_BV_,text,32),_a2J_),
                  match=
                   caml_call3
                    (_pI_,
                     words,
                     0,
                     function(acc,word)
                      {if(acc)
                        var
                         match=acc[1],
                         line=match[2],
                         lines=match[1],
                         line_and_word=
                          caml_call2(_Fp_,line,caml_call2(_Fp_,cst$206,word)),
                         _a2K_=
                          caml_call2(_Np_,caml_ml_string_length(line_and_word),width)
                           ?[0,lines,line_and_word]
                           :[0,[0,line,lines],word],
                         _a2L_=_a2K_;
                       else
                        var _a2L_=[0,0,word];
                       return [0,_a2L_]});
                 if(match)
                  {var match$0=match[1],line=match$0[2],lines=match$0[1];
                   return caml_call1(parts,[0,line,lines])}
                 return 0})}
    function spaces_string(width){return caml_call2(_Bm_,width,32)}
    function pad_spaces_to_suffix(x,width)
     {var slack=width - caml_ml_string_length(x) | 0;
      return caml_call2(_Fp_,x,spaces_string(slack))}
    function indent_and_newline(x)
     {return caml_call1(_rD_,[0,[0,indentation,0],[0,x,_aly_]])}
    var lhs_pad=spaces_string(29),dot_indentation_offset=27;
    function _alz_(v){return indent_and_newline([0,lhs_pad,[0,v,0]])}
    function to_string$34(t)
     {return caml_call2
              (_Bq_,
               0,
               caml_call2
                (_qK_,
                 t,
                 function(t)
                  {var
                    flag=t[1],
                    flag_name_with_aliases=caml_call2(_Bq_,_alA_,[0,flag,t[3]]),
                    flag_width=
                     2
                     +
                     caml_ml_string_length(flag_name_with_aliases)
                     |
                     0,
                    _a2H_=t[2],
                    flag_on_its_own_line=
                     caml_call2(_No_,flag_width,29)
                      ?indent_and_newline([0,flag_name_with_aliases,0])
                      :indent_and_newline
                        ([0,
                          pad_spaces_to_suffix
                           (flag_name_with_aliases,dot_indentation_offset),
                          [0,spacing_dot,0]]),
                    wrapped_documentation=word_wrap(_a2H_,49);
                   if(wrapped_documentation)
                    var
                     doc_wrapped_rest_lines=wrapped_documentation[2],
                     doc_wrapped_first_line=wrapped_documentation[1],
                     wrapped_doc_lines=
                      caml_call2(_qF_,doc_wrapped_rest_lines,_alz_),
                     prefix_doc_wrapped_first_line_=
                      function(x)
                       {return indent_and_newline
                                ([0,
                                  pad_spaces_to_suffix(x,dot_indentation_offset),
                                  [0,spacing_dot,[0,doc_wrapped_first_line,0]]])},
                     _a2I_=
                      caml_call2
                        (_No_,
                         caml_ml_string_length(flag_name_with_aliases),
                         dot_indentation_offset)
                       ?[0,
                         flag_on_its_own_line,
                         [0,
                          prefix_doc_wrapped_first_line_(cst$207),
                          wrapped_doc_lines]]
                       :[0,
                         prefix_doc_wrapped_first_line_(flag_name_with_aliases),
                         wrapped_doc_lines];
                   else
                    var _a2I_=[0,flag_on_its_own_line,0];
                   return caml_call1(_rD_,_a2I_)}))}
    function to_string$35(param){return param?cst_flag:cst_subcommand}
    var Key_type=[0,to_string$35];
    function lookup_expand(alist,prefix,key_type)
     {var
       is_dash=caml_call1(equal_char,45),
       alist$0=
        caml_call2(_A7_,prefix,is_dash)
         ?caml_call2
           (_qF_,
            alist,
            function(param)
             {var match=param[2],data=match[1],key=param[1];
              return [0,key,[0,data,-461087063]]})
         :alist,
       matches=
        caml_call2
         (_qj_,
          alist$0,
          function(param)
           {var _a2G_=param[1];
            return -461087063 <= param[2][2]
                    ?caml_call2(symbol$17,_a2G_,prefix)
                    :caml_call2(_BQ_,_a2G_,prefix)});
      if(matches)
       {if(matches[2])
         {var
           match=
            caml_call2
             (_pO_,
              matches,
              function(param)
               {var key=param[1];return caml_call2(symbol$17,key,prefix)});
          if(match)
           {var _a2C_=match[1],match$0=_a2C_[2],data=match$0[1],key=_a2C_[1];
            return [0,[0,key,data]]}
          var
           matching_keys=
            caml_call2(_qF_,matches,function(_a2F_){return _a2F_[1]}),
           _a2D_=caml_call2(_Bq_,_alB_,matching_keys);
          return [1,
                  caml_call4
                   (_fx_,
                    [0,
                     [24,
                      _alD_,
                      function(param,custom_printf_681)
                       {return caml_call1(Key_type[1],custom_printf_681)},
                      _alC_],
                     cst_Key_type_s_is_an_ambiguous],
                    key_type,
                    prefix,
                    _a2D_)]}
        var
         _a2E_=matches[1],
         match$1=_a2E_[2],
         data$0=match$1[1],
         key$0=_a2E_[1];
        return [0,[0,key$0,data$0]]}
      return [1,
              caml_call3
               (_fx_,
                [0,
                 [11,
                  cst_unknown,
                  [24,
                   _alF_,
                   function(param,custom_printf_680)
                    {return caml_call1(Key_type[1],custom_printf_680)},
                   _alE_]],
                 cst_unknown_Key_type_s],
                key_type,
                prefix)]}
    var
     _alG_=
      [0,
       [0,cst_anons$2,bin_shape_t$128],
       [0,[0,cst_flags$5,bin_shape_list(bin_shape_t$129)],0]],
     _alH_=
      [0,
       [0,cst_summary$20,bin_shape_string],
       [0,[0,cst_readme$13,bin_shape_option(bin_shape_string)],_alG_]],
     _alI_=caml_call1(Bin_prot_Shape[8],_alH_),
     _alJ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$257),0,_alI_],0],
     _alK_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$28),
     group$138=caml_call2(Bin_prot_Shape[6],_alK_,_alJ_),
     _alL_=caml_call1(Bin_prot_Shape[2][1],cst_t$258),
     bin_shape_t$130=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$138,_alL_),0);
    function bin_size_t$80(param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1$1=param[1],
       _a2y_=caml_call1(bin_size_t$47,v1$1),
       size=caml_call2(Bin_prot_Common[23],0,_a2y_),
       _a2z_=bin_size_option(bin_size_t$47,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_a2z_);
      if(0 === v3[0])
       var
        v1=v3[1],
        _a2w_=caml_call1(bin_size_t$47,v1),
        _a2A_=caml_call2(Bin_prot_Common[23],1,_a2w_);
      else
       var
        v1$0=v3[1],
        _a2x_=bin_size_t$78(v1$0),
        _a2A_=caml_call2(Bin_prot_Common[23],1,_a2x_);
      var
       size$1=caml_call2(Bin_prot_Common[23],size$0,_a2A_),
       _a2B_=bin_size_list(bin_size_t$79,v4);
      return caml_call2(Bin_prot_Common[23],size$1,_a2B_)}
    function bin_write_t$81(buf,pos$1,param)
     {var
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1$1=param[1],
       pos$2=caml_call3(bin_write_t$47,buf,pos$1,v1$1),
       pos$4=bin_write_option(bin_write_t$47,buf,pos$2,v2);
      if(0 === v3[0])
       var
        v1=v3[1],
        pos=caml_call3(Bin_prot_Write[31],buf,pos$4,0),
        pos$3=caml_call3(bin_write_t$47,buf,pos,v1);
      else
       var
        v1$0=v3[1],
        pos$0=caml_call3(Bin_prot_Write[31],buf,pos$4,1),
        pos$3=bin_write_t$79(buf,pos$0,v1$0);
      return bin_write_list(bin_write_t$80,buf,pos$3,v4)}
    var bin_writer_t$107=[0,bin_size_t$80,bin_write_t$81];
    function bin_read_t$159(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$29,
               pos_ref[1])}
    function bin_read_t$160(buf,pos_ref)
     {var
       v_summary=caml_call2(bin_read_t$96,buf,pos_ref),
       v_readme=bin_read_option$0(bin_read_t$96,buf,pos_ref),
       match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(0 === match)
       var arg_1=caml_call2(bin_read_t$96,buf,pos_ref),v_anons=[0,arg_1];
      else
       if(1 === match)
        var arg_1$0=bin_read_t$156(buf,pos_ref),v_anons=[1,arg_1$0];
       else
        var v_anons=caml_call2(Bin_prot_Common[18],_ak2_,pos_ref[1]);
      var v_flags=bin_read_list$0(bin_read_t$158,buf,pos_ref);
      return [0,v_summary,v_readme,v_anons,v_flags]}
    var
     bin_reader_t$107=[0,bin_read_t$160,bin_read_t$159],
     bin_t$107=[0,bin_shape_t$130,bin_writer_t$107,bin_reader_t$107];
    function compare$96(a_682,b_683)
     {if(caml_call2(Ppx_compare_lib[1],a_682,b_683))return 0;
      var n=caml_call2(compare$37,a_682[1],b_683[1]);
      if(0 === n)
       {var
         _a2s_=b_683[2],
         _a2t_=a_682[2],
         n$0=
          compare_option
           (function(a_684,b_685){return caml_call2(compare$37,a_684,b_685)},
            _a2t_,
            _a2s_);
        if(0 === n$0)
         {var n$1=compare$93(a_682[3],b_683[3]);
          if(0 === n$1)
           {var _a2u_=b_683[4],_a2v_=a_682[4];
            return compare_list
                    (function(a_686,b_687){return compare$95(a_686,b_687)},
                     _a2v_,
                     _a2u_)}
          return n$1}
        return n$0}
      return n}
    function flags(r){return r[4]}
    function anons(r){return r[3]}
    function readme(r){return r[2]}
    function summary(r){return r[1]}
    function _alM_(r,v){return [0,r[1],r[2],r[3],v]}
    var
     _alN_=0,
     flags$0=[0,function(param){return 0},cst_flags$6,_alN_,flags,_alM_];
    function _alO_(r,v){return [0,r[1],r[2],v,r[4]]}
    var
     _alP_=0,
     anons$0=[0,function(param){return 0},cst_anons$3,_alP_,anons,_alO_];
    function _alQ_(r,v){return [0,r[1],v,r[3],r[4]]}
    var
     _alR_=0,
     readme$0=[0,function(param){return 0},cst_readme$14,_alR_,readme,_alQ_];
    function _alS_(r,v){return [0,v,r[2],r[3],r[4]]}
    var
     _alT_=0,
     summary$0=
      [0,function(param){return 0},cst_summary$21,_alT_,summary,_alS_];
    function make_creator$2
     (summary_fun,readme_fun,anons_fun,flags_fun,compile_acc)
     {var
       match=caml_call2(summary_fun,summary$0,compile_acc),
       compile_acc$0=match[2],
       summary_gen=match[1],
       match$0=caml_call2(readme_fun,readme$0,compile_acc$0),
       compile_acc$1=match$0[2],
       readme_gen=match$0[1],
       match$1=caml_call2(anons_fun,anons$0,compile_acc$1),
       compile_acc$2=match$1[2],
       anons_gen=match$1[1],
       match$2=caml_call2(flags_fun,flags$0,compile_acc$2),
       compile_acc$3=match$2[2],
       flags_gen=match$2[1];
      return [0,
              function(acc)
               {var
                 summary=caml_call1(summary_gen,acc),
                 readme=caml_call1(readme_gen,acc),
                 anons=caml_call1(anons_gen,acc),
                 flags=caml_call1(flags_gen,acc);
                return [0,summary,readme,anons,flags]},
              compile_acc$3]}
    function create$31(summary,readme,anons,flags)
     {return [0,summary,readme,anons,flags]}
    function map$32(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _a2p_=caml_call1(flags_fun,flags$0),
       _a2q_=caml_call1(anons_fun,anons$0),
       _a2r_=caml_call1(readme_fun,readme$0);
      return [0,caml_call1(summary_fun,summary$0),_a2r_,_a2q_,_a2p_]}
    function iter$24(summary_fun,readme_fun,anons_fun,flags_fun)
     {caml_call1(summary_fun,summary$0);
      caml_call1(readme_fun,readme$0);
      caml_call1(anons_fun,anons$0);
      return caml_call1(flags_fun,flags$0)}
    function fold$19(init,summary_fun,readme_fun,anons_fun,flags_fun)
     {return caml_call2
              (flags_fun,
               caml_call2
                (anons_fun,
                 caml_call2
                  (readme_fun,caml_call2(summary_fun,init,summary$0),readme$0),
                 anons$0),
               flags$0)}
    function map_poly$2(record)
     {var
       _a2m_=[0,caml_call1(record[1],flags$0),0],
       _a2n_=[0,caml_call1(record[1],anons$0),_a2m_],
       _a2o_=[0,caml_call1(record[1],readme$0),_a2n_];
      return [0,caml_call1(record[1],summary$0),_a2o_]}
    function for_all$17(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _a2j_=caml_call1(summary_fun,summary$0),
       _a2k_=_a2j_?caml_call1(readme_fun,readme$0):_a2j_,
       _a2l_=_a2k_?caml_call1(anons_fun,anons$0):_a2k_;
      return _a2l_?caml_call1(flags_fun,flags$0):_a2l_}
    function exists$17(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _a2i_=caml_call1(summary_fun,summary$0),
       _a2g_=_a2i_ || caml_call1(readme_fun,readme$0),
       _a2h_=_a2g_ || caml_call1(anons_fun,anons$0);
      return _a2h_?_a2h_:caml_call1(flags_fun,flags$0)}
    function to_list$13(summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _a2d_=[0,caml_call1(flags_fun,flags$0),0],
       _a2e_=[0,caml_call1(anons_fun,anons$0),_a2d_],
       _a2f_=[0,caml_call1(readme_fun,readme$0),_a2e_];
      return [0,caml_call1(summary_fun,summary$0),_a2f_]}
    function iter$25(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {caml_call3(summary_fun,summary$0,record,record[1]);
      caml_call3(readme_fun,readme$0,record,record[2]);
      caml_call3(anons_fun,anons$0,record,record[3]);
      return caml_call3(flags_fun,flags$0,record,record[4])}
    function fold$20(record,init,summary_fun,readme_fun,anons_fun,flags_fun)
     {var _a2a_=record[4],_a2b_=record[3],_a2c_=record[2];
      return caml_call4
              (flags_fun,
               caml_call4
                (anons_fun,
                 caml_call4
                  (readme_fun,
                   caml_call4(summary_fun,init,summary$0,record,record[1]),
                   readme$0,
                   record,
                   _a2c_),
                 anons$0,
                 record,
                 _a2b_),
               flags$0,
               record,
               _a2a_)}
    function for_all$18(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _a19_=caml_call3(summary_fun,summary$0,record,record[1]),
       _a1__=_a19_?caml_call3(readme_fun,readme$0,record,record[2]):_a19_,
       _a1$_=_a1__?caml_call3(anons_fun,anons$0,record,record[3]):_a1__;
      return _a1$_?caml_call3(flags_fun,flags$0,record,record[4]):_a1$_}
    function exists$18(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _a18_=caml_call3(summary_fun,summary$0,record,record[1]),
       _a16_=_a18_ || caml_call3(readme_fun,readme$0,record,record[2]),
       _a17_=_a16_ || caml_call3(anons_fun,anons$0,record,record[3]);
      return _a17_?_a17_:caml_call3(flags_fun,flags$0,record,record[4])}
    function to_list$14(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _a13_=[0,caml_call3(flags_fun,flags$0,record,record[4]),0],
       _a14_=[0,caml_call3(anons_fun,anons$0,record,record[3]),_a13_],
       _a15_=[0,caml_call3(readme_fun,readme$0,record,record[2]),_a14_];
      return [0,caml_call3(summary_fun,summary$0,record,record[1]),_a15_]}
    function map$33(record,summary_fun,readme_fun,anons_fun,flags_fun)
     {var
       _a10_=caml_call3(flags_fun,flags$0,record,record[4]),
       _a11_=caml_call3(anons_fun,anons$0,record,record[3]),
       _a12_=caml_call3(readme_fun,readme$0,record,record[2]);
      return [0,
              caml_call3(summary_fun,summary$0,record,record[1]),
              _a12_,
              _a11_,
              _a10_]}
    function set_all_mutable_fields$2(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$2=
      [0,
       iter$25,
       fold$20,
       for_all$18,
       exists$18,
       to_list$14,
       map$33,
       set_all_mutable_fields$2];
    function t_of_sexp$100(sexp_689)
     {if(0 === sexp_689[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_708,sexp_689);
      var
       field_sexps_690=sexp_689[1],
       summary_691=[0,0],
       readme_693=[0,0],
       anons_695=[0,0],
       flags_697=[0,0],
       duplicates_699=[0,0],
       extra_700=[0,0],
       param=field_sexps_690;
      for(;;)
       {if(param)
         {var _a1Q_=param[1];
          if(1 === _a1Q_[0])
           {var _a1R_=_a1Q_[1];
            if(_a1R_)
             {var _a1S_=_a1R_[1];
              if(0 === _a1S_[0])
               {var _a1T_=_a1R_[2],_a1U_=_a1S_[1],switch$0=0;
                if(! _a1T_ || ! _a1T_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_710=param[2],
                   field_sexp_702$3=
                    function(_a1Z_)
                     {function field_sexp_702(param)
                       {if(_a1Z_)
                         {if(_a1Z_[2])throw [0,Assert_failure,_alU_];
                          var x_711=_a1Z_[1];
                          return x_711}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_708,sexp_689)}
                      return field_sexp_702},
                   field_sexp_702=field_sexp_702$3(_a1T_);
                  if(caml_string_notequal(_a1U_,cst_anons$4))
                   if(caml_string_notequal(_a1U_,cst_flags$7))
                    if(caml_string_notequal(_a1U_,cst_readme$15))
                     if(caml_string_notequal(_a1U_,cst_summary$22))
                      {if(Sexplib0_Sexp_conv[26][1])
                        extra_700[1] = [0,_a1U_,extra_700[1]]}
                     else
                      if(summary_691[1])
                       duplicates_699[1] = [0,_a1U_,duplicates_699[1]];
                      else
                       {var
                         field_sexp_702$0=field_sexp_702(0),
                         fvalue_707=caml_call1(t_of_sexp$34,field_sexp_702$0);
                        summary_691[1] = [0,fvalue_707]}
                    else
                     if(readme_693[1])
                      duplicates_699[1] = [0,_a1U_,duplicates_699[1]];
                     else
                      {var
                        field_sexp_702$1=field_sexp_702(0),
                        fvalue_706=caml_call1(t_of_sexp$34,field_sexp_702$1);
                       readme_693[1] = [0,fvalue_706]}
                   else
                    if(flags_697[1])
                     duplicates_699[1] = [0,_a1U_,duplicates_699[1]];
                    else
                     {var
                       field_sexp_702$2=field_sexp_702(0),
                       fvalue_704=
                        caml_call2(list_of_sexp,t_of_sexp$99,field_sexp_702$2);
                      flags_697[1] = [0,fvalue_704]}
                  else
                   if(anons_695[1])
                    duplicates_699[1] = [0,_a1U_,duplicates_699[1]];
                   else
                    {var sexp_612=field_sexp_702(0),switch$1=0;
                     if(0 === sexp_612[0])
                      {var _a1M_=sexp_612[1],switch$2=0;
                       if(caml_string_notequal(_a1M_,cst_Grammar$3))
                        {var switch$3=0;
                         if(caml_string_notequal(_a1M_,cst_Usage$3))
                          if(caml_string_notequal(_a1M_,cst_grammar$1))
                           {if(caml_string_notequal(_a1M_,cst_usage$4))
                             {switch$1 = 1;switch$2 = 1;switch$3 = 1}}
                          else
                           switch$3 = 1;
                         if(! switch$3)
                          {var
                            fvalue_705=
                             caml_call2
                              (Sexplib0_Sexp_conv_error[5],error_source_610,sexp_612);
                           switch$2 = 1}}
                       if(! switch$2)
                        var
                         fvalue_705=
                          caml_call2
                           (Sexplib0_Sexp_conv_error[5],error_source_610,sexp_612)}
                     else
                      {var _a1N_=sexp_612[1];
                       if(_a1N_)
                        {var _a1O_=_a1N_[1];
                         if(0 === _a1O_[0])
                          {var _a1P_=_a1O_[1],switch$4=0;
                           if(caml_string_notequal(_a1P_,cst_Grammar$4))
                            {var switch$5=0;
                             if(caml_string_notequal(_a1P_,cst_Usage$4))
                              if(caml_string_notequal(_a1P_,cst_grammar$2))
                               {if(caml_string_notequal(_a1P_,cst_usage$5))
                                 {switch$1 = 1;switch$4 = 1;switch$5 = 1}}
                              else
                               switch$5 = 1;
                             if(! switch$5)
                              {var sexp_args_614=_a1N_[2],switch$6=0;
                               if(sexp_args_614 && ! sexp_args_614[2])
                                {var
                                  arg0_615=sexp_args_614[1],
                                  res0_616=caml_call1(t_of_sexp$34,arg0_615),
                                  fvalue_705=[0,res0_616];
                                 switch$4 = 1;
                                 switch$6 = 1}
                               if(! switch$6)
                                {var
                                  fvalue_705=
                                   caml_call3
                                    (Sexplib0_Sexp_conv_error[4],
                                     error_source_610,
                                     _a1P_,
                                     sexp_612);
                                 switch$4 = 1}}}
                           if(! switch$4)
                            {var sexp_args_619=_a1N_[2],switch$7=0;
                             if(sexp_args_619 && ! sexp_args_619[2])
                              var
                               arg0_620=sexp_args_619[1],
                               res0_621=caml_call1(t_of_sexp$98,arg0_620),
                               fvalue_705=[1,res0_621];
                             else
                              switch$7 = 1;
                             if(switch$7)
                              var
                               fvalue_705=
                                caml_call3
                                 (Sexplib0_Sexp_conv_error[4],
                                  error_source_610,
                                  _a1P_,
                                  sexp_612)}}
                         else
                          var
                           fvalue_705=
                            caml_call2
                             (Sexplib0_Sexp_conv_error[6],error_source_610,sexp_612)}
                       else
                        var
                         fvalue_705=
                          caml_call2
                           (Sexplib0_Sexp_conv_error[7],error_source_610,sexp_612)}
                     if(switch$1)
                      var
                       fvalue_705=
                        caml_call2
                         (Sexplib0_Sexp_conv_error[8],error_source_610,sexp_612);
                     anons_695[1] = [0,fvalue_705]}
                  var param=tail_710;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_708,_a1Q_)}
        if(duplicates_699[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_708,
                  duplicates_699[1],
                  sexp_689);
        if(extra_700[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_708,
                  extra_700[1],
                  sexp_689);
        var
         _a1V_=summary_691[1],
         _a1X_=anons_695[1],
         _a1Y_=flags_697[1],
         _a1W_=readme_693[1];
        if(_a1V_ && _a1X_ && _a1Y_)
         {var flags_698=_a1Y_[1],anons_696=_a1X_[1],summary_692=_a1V_[1];
          return [0,summary_692,_a1W_,anons_696,flags_698]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_708,
                 sexp_689,
                 [0,
                  [0,0 === summary_691[1]?1:0,cst_summary$23],
                  [0,
                   [0,0 === anons_695[1]?1:0,cst_anons$5],
                   [0,[0,0 === flags_697[1]?1:0,cst_flags$8],0]]])}}
    function sexp_of_t$112(param)
     {var
       flags_721=param[4],
       anons_719=param[3],
       readme_715=param[2],
       summary_713=param[1],
       arg_722=caml_call2(sexp_of_list,sexp_of_t$111,flags_721),
       bnds_712=[0,[1,[0,_alV_,[0,arg_722,0]]],0],
       arg_720=sexp_of_t$109(anons_719),
       bnds_712$0=[0,[1,[0,_alW_,[0,arg_720,0]]],bnds_712];
      if(readme_715)
       var
        v_716=readme_715[1],
        arg_718=caml_call1(sexp_of_t$41,v_716),
        bnd_717=[1,[0,_alX_,[0,arg_718,0]]],
        bnds_712$1=[0,bnd_717,bnds_712$0];
      else
       var bnds_712$1=bnds_712$0;
      var
       arg_714=caml_call1(sexp_of_t$41,summary_713),
       bnds_712$2=[0,[1,[0,_alY_,[0,arg_714,0]]],bnds_712$1];
      return [1,bnds_712$2]}
    function find_flag(t,prefix)
     {var match=caml_call2(_BQ_,prefix,cst$208);
      if(match)
       {var
         _a1D_=
          function(choices)
           {function _a1K_(_a1L_){return _a1L_[2]}
            return caml_call2
                    (_oK_,
                     caml_call2
                      (_h1_,lookup_expand(caml_call1(_rD_,choices),prefix,1),_nG_),
                     _a1K_)},
         _a1E_=
          function(flag_info)
           {function _a1H_(flag_name)
             {function _a1J_(key){return [0,key,[0,flag_info,-481604174]]}
              return [0,caml_call2(_qF_,[0,flag_name,flag_info[3]],_a1J_)]}
            var _a1I_=flag_name(flag_info);
            return caml_call2(include$23[25][4][2],_a1I_,_a1H_)},
         _a1F_=caml_call1(_oN_,caml_call2(_qF_,t[4],_a1E_));
        return caml_call2(include$23[25][4][2],_a1F_,_a1D_)}
      var _a1G_=[0,caml_call1(Sexplib0_Sexp_conv[7],prefix),0];
      return caml_call1
              (_oC_,
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_Flags_must_begin_with),
                 _a1G_]])}
    function get_usage(t)
     {var _a1C_=t[3];
      if(0 === _a1C_[0]){var usage$0=_a1C_[1];return usage$0}
      var grammar=_a1C_[1];
      return usage(grammar)}
    var
     _alZ_=caml_call1(Bin_prot_Shape[3][1],cst_a$80),
     _al0_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$30),
     _al1_=
      [0,bin_shape_string,[0,caml_call2(Bin_prot_Shape[15],_al0_,_alZ_),0]],
     _al2_=
      [0,
       [0,
        cst_subcommands$5,
        bin_shape_t$72(bin_shape_t$27(caml_call1(Bin_prot_Shape[7],_al1_)))],
       0],
     _al3_=
      [0,
       [0,cst_summary$24,bin_shape_string],
       [0,[0,cst_readme$16,bin_shape_option(bin_shape_string)],_al2_]],
     _al4_=caml_call1(Bin_prot_Shape[8],_al3_),
     _al5_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$81),0],
     _al6_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$259),_al5_,_al4_],0],
     _al7_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$31),
     group$139=caml_call2(Bin_prot_Shape[6],_al7_,_al6_);
    function bin_shape_t$131(a)
     {var _a1B_=caml_call1(Bin_prot_Shape[2][1],cst_t$260);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$139,_a1B_),[0,a,0])}
    function bin_size_t$81(size_of_a,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _a1u_=caml_call1(bin_size_t$47,v1),
       size=caml_call2(Bin_prot_Common[23],0,_a1u_),
       _a1v_=bin_size_option(bin_size_t$47,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_a1v_);
      function _a1w_(param)
       {var
         v2=param[2],
         v1=param[1],
         _a1z_=caml_call1(bin_size_t$47,v1),
         size=caml_call2(Bin_prot_Common[23],0,_a1z_),
         _a1A_=caml_call1(size_of_a,v2);
        return caml_call2(Bin_prot_Common[23],size,_a1A_)}
      var
       _a1x_=
        bin_size_t$54(function(_a1y_){return bin_size_t$33(_a1w_,_a1y_)},v3);
      return caml_call2(Bin_prot_Common[23],size$0,_a1x_)}
    function bin_write_t$82(write_a,buf,pos,param)
     {var
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$47,buf,pos,v1),
       pos$1=bin_write_option(bin_write_t$47,buf,pos$0,v2);
      function _a1q_(buf,pos,param)
       {var
         v2=param[2],
         v1=param[1],
         pos$0=caml_call3(bin_write_t$47,buf,pos,v1);
        return caml_call3(write_a,buf,pos$0,v2)}
      return bin_write_t$54
              (function(_a1r_,_a1s_,_a1t_)
                {return bin_write_t$33(_a1q_,_a1r_,_a1s_,_a1t_)},
               buf,
               pos$1,
               v3)}
    function bin_writer_t$108(bin_writer_a)
     {function _a1m_(v)
       {var _a1n_=bin_writer_a[2];
        return function(_a1o_,_a1p_)
         {return bin_write_t$82(_a1n_,v,_a1o_,_a1p_)}}
      return [0,function(v){return bin_size_t$81(bin_writer_a[1],v)},_a1m_]}
    function bin_read_t$161(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$32,
               pos_ref[1])}
    function bin_read_t$162(of_a,buf,pos_ref)
     {var
       v_summary=caml_call2(bin_read_t$96,buf,pos_ref),
       v_readme=bin_read_option$0(bin_read_t$96,buf,pos_ref);
      function _a1j_(buf,pos_ref)
       {var
         v1=caml_call2(bin_read_t$96,buf,pos_ref),
         v2=caml_call2(of_a,buf,pos_ref);
        return [0,v1,v2]}
      var
       v_subcommands=
        bin_read_t$111
         (function(_a1k_,_a1l_){return bin_read_t$69(_a1j_,_a1k_,_a1l_)},
          buf,
          pos_ref);
      return [0,v_summary,v_readme,v_subcommands]}
    function bin_reader_t$108(bin_reader_a)
     {function _a1i_(buf,pos_ref,vtag)
       {return bin_read_t$161(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$162(bin_reader_a[1],buf,pos_ref)},
              _a1i_]}
    function bin_t$108(bin_a)
     {var _a1g_=bin_reader_t$108(bin_a[3]),_a1h_=bin_writer_t$108(bin_a[2]);
      return [0,bin_shape_t$131(bin_a[1]),_a1h_,_a1g_]}
    function compare$97(cmp_a,a_725,b_726)
     {if(caml_call2(Ppx_compare_lib[1],a_725,b_726))return 0;
      var n=caml_call2(compare$37,a_725[1],b_726[1]);
      if(0 === n)
       {var
         _a1c_=b_726[2],
         _a1d_=a_725[2],
         n$0=
          compare_option
           (function(a_727,b_728){return caml_call2(compare$37,a_727,b_728)},
            _a1d_,
            _a1c_);
        if(0 === n$0)
         {var _a1e_=b_726[3],_a1f_=a_725[3];
          return caml_call3
                  (_KV_,
                   function(a_729,b_730)
                    {return caml_call3
                             (_pE_,
                              function(a_731,b_732)
                               {var
                                 t_734=a_731[2],
                                 t_733=a_731[1],
                                 t_736=b_732[2],
                                 t_735=b_732[1],
                                 n=caml_call2(compare$37,t_733,t_735);
                                return 0 === n?caml_call2(cmp_a,t_734,t_736):n},
                              a_729,
                              b_730)},
                   _a1f_,
                   _a1e_)}
        return n$0}
      return n}
    function subcommands(r){return r[3]}
    function readme$1(r){return r[2]}
    function summary$1(r){return r[1]}
    function _al8_(r,v){return [0,r[1],r[2],v]}
    var
     _al9_=0,
     subcommands$0=
      [0,function(param){return 0},cst_subcommands$6,_al9_,subcommands,_al8_];
    function _al__(r,v){return [0,r[1],v,r[3]]}
    var
     _al$_=0,
     readme$2=[0,function(param){return 0},cst_readme$17,_al$_,readme$1,_al__];
    function _ama_(r,v){return [0,v,r[2],r[3]]}
    var
     _amb_=0,
     summary$2=
      [0,function(param){return 0},cst_summary$25,_amb_,summary$1,_ama_];
    function make_creator$3
     (summary_fun,readme_fun,subcommands_fun,compile_acc)
     {var
       match=caml_call2(summary_fun,summary$2,compile_acc),
       compile_acc$0=match[2],
       summary_gen=match[1],
       match$0=caml_call2(readme_fun,readme$2,compile_acc$0),
       compile_acc$1=match$0[2],
       readme_gen=match$0[1],
       match$1=caml_call2(subcommands_fun,subcommands$0,compile_acc$1),
       compile_acc$2=match$1[2],
       subcommands_gen=match$1[1];
      return [0,
              function(acc)
               {var
                 summary=caml_call1(summary_gen,acc),
                 readme=caml_call1(readme_gen,acc),
                 subcommands=caml_call1(subcommands_gen,acc);
                return [0,summary,readme,subcommands]},
              compile_acc$2]}
    function create$32(summary,readme,subcommands)
     {return [0,summary,readme,subcommands]}
    function map$34(summary_fun,readme_fun,subcommands_fun)
     {var
       _a1a_=caml_call1(subcommands_fun,subcommands$0),
       _a1b_=caml_call1(readme_fun,readme$2);
      return [0,caml_call1(summary_fun,summary$2),_a1b_,_a1a_]}
    function iter$26(summary_fun,readme_fun,subcommands_fun)
     {caml_call1(summary_fun,summary$2);
      caml_call1(readme_fun,readme$2);
      return caml_call1(subcommands_fun,subcommands$0)}
    function fold$21(init,summary_fun,readme_fun,subcommands_fun)
     {return caml_call2
              (subcommands_fun,
               caml_call2
                (readme_fun,caml_call2(summary_fun,init,summary$2),readme$2),
               subcommands$0)}
    function map_poly$3(record)
     {var
       _a0__=[0,caml_call1(record[1],subcommands$0),0],
       _a0$_=[0,caml_call1(record[1],readme$2),_a0__];
      return [0,caml_call1(record[1],summary$2),_a0$_]}
    function for_all$19(summary_fun,readme_fun,subcommands_fun)
     {var
       _a08_=caml_call1(summary_fun,summary$2),
       _a09_=_a08_?caml_call1(readme_fun,readme$2):_a08_;
      return _a09_?caml_call1(subcommands_fun,subcommands$0):_a09_}
    function exists$19(summary_fun,readme_fun,subcommands_fun)
     {var
       _a07_=caml_call1(summary_fun,summary$2),
       _a06_=_a07_ || caml_call1(readme_fun,readme$2);
      return _a06_?_a06_:caml_call1(subcommands_fun,subcommands$0)}
    function to_list$15(summary_fun,readme_fun,subcommands_fun)
     {var
       _a04_=[0,caml_call1(subcommands_fun,subcommands$0),0],
       _a05_=[0,caml_call1(readme_fun,readme$2),_a04_];
      return [0,caml_call1(summary_fun,summary$2),_a05_]}
    function iter$27(record,summary_fun,readme_fun,subcommands_fun)
     {caml_call3(summary_fun,summary$2,record,record[1]);
      caml_call3(readme_fun,readme$2,record,record[2]);
      return caml_call3(subcommands_fun,subcommands$0,record,record[3])}
    function fold$22(record,init,summary_fun,readme_fun,subcommands_fun)
     {var _a02_=record[3],_a03_=record[2];
      return caml_call4
              (subcommands_fun,
               caml_call4
                (readme_fun,
                 caml_call4(summary_fun,init,summary$2,record,record[1]),
                 readme$2,
                 record,
                 _a03_),
               subcommands$0,
               record,
               _a02_)}
    function for_all$20(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _a00_=caml_call3(summary_fun,summary$2,record,record[1]),
       _a01_=_a00_?caml_call3(readme_fun,readme$2,record,record[2]):_a00_;
      return _a01_
              ?caml_call3(subcommands_fun,subcommands$0,record,record[3])
              :_a01_}
    function exists$20(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _a0Z_=caml_call3(summary_fun,summary$2,record,record[1]),
       _a0Y_=_a0Z_ || caml_call3(readme_fun,readme$2,record,record[2]);
      return _a0Y_
              ?_a0Y_
              :caml_call3(subcommands_fun,subcommands$0,record,record[3])}
    function to_list$16(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _a0W_=[0,caml_call3(subcommands_fun,subcommands$0,record,record[3]),0],
       _a0X_=[0,caml_call3(readme_fun,readme$2,record,record[2]),_a0W_];
      return [0,caml_call3(summary_fun,summary$2,record,record[1]),_a0X_]}
    function map$35(record,summary_fun,readme_fun,subcommands_fun)
     {var
       _a0U_=caml_call3(subcommands_fun,subcommands$0,record,record[3]),
       _a0V_=caml_call3(readme_fun,readme$2,record,record[2]);
      return [0,
              caml_call3(summary_fun,summary$2,record,record[1]),
              _a0V_,
              _a0U_]}
    function set_all_mutable_fields$3(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$3=
      [0,
       iter$27,
       fold$22,
       for_all$20,
       exists$20,
       to_list$16,
       map$35,
       set_all_mutable_fields$3];
    function t_of_sexp$101(of_a_737,sexp_739)
     {if(0 === sexp_739[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_757,sexp_739);
      var
       field_sexps_740=sexp_739[1],
       summary_741=[0,0],
       readme_743=[0,0],
       subcommands_745=[0,0],
       duplicates_747=[0,0],
       extra_748=[0,0],
       param=field_sexps_740;
      for(;;)
       {if(param)
         {var _a0J_=param[1];
          if(1 === _a0J_[0])
           {var _a0K_=_a0J_[1];
            if(_a0K_)
             {var _a0L_=_a0K_[1];
              if(0 === _a0L_[0])
               {var _a0M_=_a0K_[2],_a0N_=_a0L_[1],switch$0=0;
                if(! _a0M_ || ! _a0M_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_762=param[2],
                   field_sexp_750$3=
                    function(_a0T_)
                     {function field_sexp_750(param)
                       {if(_a0T_)
                         {if(_a0T_[2])throw [0,Assert_failure,_amc_];
                          var x_763=_a0T_[1];
                          return x_763}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_757,sexp_739)}
                      return field_sexp_750},
                   field_sexp_750=field_sexp_750$3(_a0M_);
                  if(caml_string_notequal(_a0N_,cst_readme$18))
                   if(caml_string_notequal(_a0N_,cst_subcommands$7))
                    if(caml_string_notequal(_a0N_,cst_summary$26))
                     {if(Sexplib0_Sexp_conv[26][1])
                       extra_748[1] = [0,_a0N_,extra_748[1]]}
                    else
                     if(summary_741[1])
                      duplicates_747[1] = [0,_a0N_,duplicates_747[1]];
                     else
                      {var
                        field_sexp_750$0=field_sexp_750(0),
                        fvalue_760=caml_call1(t_of_sexp$34,field_sexp_750$0);
                       summary_741[1] = [0,fvalue_760]}
                   else
                    if(subcommands_745[1])
                     duplicates_747[1] = [0,_a0N_,duplicates_747[1]];
                    else
                     {var
                       field_sexp_750$1=field_sexp_750(0),
                       fvalue_758=
                        caml_call2
                         (lazy_t_of_sexp,
                          caml_call1
                           (list_of_sexp,
                            function(sexp_756)
                             {if(1 === sexp_756[0])
                               {var _a0R_=sexp_756[1];
                                if(_a0R_)
                                 {var _a0S_=_a0R_[2];
                                  if(_a0S_ && ! _a0S_[2])
                                   {var
                                     arg1_753=_a0S_[1],
                                     arg0_752=_a0R_[1],
                                     res0_754=caml_call1(t_of_sexp$34,arg0_752),
                                     res1_755=caml_call1(of_a_737,arg1_753);
                                    return [0,res0_754,res1_755]}}}
                              return caml_call3
                                      (Sexplib0_Sexp_conv_error[2],error_source_757,2,sexp_756)}),
                          field_sexp_750$1);
                      subcommands_745[1] = [0,fvalue_758]}
                  else
                   if(readme_743[1])
                    duplicates_747[1] = [0,_a0N_,duplicates_747[1]];
                   else
                    {var
                      field_sexp_750$2=field_sexp_750(0),
                      fvalue_759=caml_call1(t_of_sexp$34,field_sexp_750$2);
                     readme_743[1] = [0,fvalue_759]}
                  var param=tail_762;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_757,_a0J_)}
        if(duplicates_747[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_757,
                  duplicates_747[1],
                  sexp_739);
        if(extra_748[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_757,
                  extra_748[1],
                  sexp_739);
        var _a0O_=summary_741[1],_a0Q_=subcommands_745[1],_a0P_=readme_743[1];
        if(_a0O_ && _a0Q_)
         {var subcommands_746=_a0Q_[1],summary_742=_a0O_[1];
          return [0,summary_742,_a0P_,subcommands_746]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_757,
                 sexp_739,
                 [0,
                  [0,0 === summary_741[1]?1:0,cst_summary$27],
                  [0,[0,0 === subcommands_745[1]?1:0,cst_subcommands$8],0]])}}
    function sexp_of_t$113(of_a_764,param)
     {var
       subcommands_772=param[3],
       readme_768=param[2],
       summary_766=param[1],
       bnds_765=0,
       arg_773=
        caml_call2
         (sexp_of_lazy_t,
          caml_call1
           (sexp_of_list,
            function(param)
             {var
               arg1_775=param[2],
               arg0_774=param[1],
               res0_776=caml_call1(sexp_of_t$41,arg0_774),
               res1_777=caml_call1(of_a_764,arg1_775);
              return [1,[0,res0_776,[0,res1_777,0]]]}),
          subcommands_772),
       bnds_765$0=[0,[1,[0,_amd_,[0,arg_773,0]]],bnds_765];
      if(readme_768)
       var
        v_769=readme_768[1],
        arg_771=caml_call1(sexp_of_t$41,v_769),
        bnd_770=[1,[0,_ame_,[0,arg_771,0]]],
        bnds_765$1=[0,bnd_770,bnds_765$0];
      else
       var bnds_765$1=bnds_765$0;
      var
       arg_767=caml_call1(sexp_of_t$41,summary_766),
       bnds_765$2=[0,[1,[0,_amf_,[0,arg_767,0]]],bnds_765$1];
      return [1,bnds_765$2]}
    function find_subcommand(t,prefix)
     {var match=caml_call2(_BQ_,prefix,cst$209);
      if(match)
       {var _a0F_=[0,caml_call1(Sexplib0_Sexp_conv[7],prefix),0];
        return caml_call1
                (_oC_,
                 [1,
                  [0,
                   caml_call1
                    (Sexplib0_Sexp_conv[7],cst_Subcommands_must_not_begin),
                   _a0F_]])}
      function _a0G_(param)
       {var a=param[2],key=param[1];return [0,key,[0,a,-481604174]]}
      var choices=caml_call2(_qF_,force(t[3]),_a0G_);
      function _a0H_(_a0I_){return _a0I_[2]}
      return caml_call2
              (_oK_,
               caml_call2(_h1_,lookup_expand(choices,prefix,0),_nG_),
               _a0H_)}
    var
     _amg_=
      [0,
       [0,cst_working_dir$5,bin_shape_string],
       [0,
        [0,cst_path_to_exe$8,bin_shape_string],
        [0,[0,cst_child_subcommand$2,bin_shape_list(bin_shape_string)],0]]],
     _amh_=
      [0,
       [0,cst_summary$28,bin_shape_string],
       [0,[0,cst_readme$19,bin_shape_option(bin_shape_string)],_amg_]],
     _ami_=caml_call1(Bin_prot_Shape[8],_amh_),
     _amj_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$261),0,_ami_],0],
     _amk_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$33),
     group$140=caml_call2(Bin_prot_Shape[6],_amk_,_amj_),
     _aml_=caml_call1(Bin_prot_Shape[2][1],cst_t$262),
     bin_shape_t$132=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$140,_aml_),0);
    function bin_size_t$82(param)
     {var
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _a0A_=caml_call1(bin_size_t$47,v1),
       size=caml_call2(Bin_prot_Common[23],0,_a0A_),
       _a0B_=bin_size_option(bin_size_t$47,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_a0B_),
       _a0C_=caml_call1(bin_size_t$47,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_a0C_),
       _a0D_=caml_call1(bin_size_t$47,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_a0D_),
       _a0E_=bin_size_list(bin_size_t$47,v5);
      return caml_call2(Bin_prot_Common[23],size$2,_a0E_)}
    function bin_write_t$83(buf,pos,param)
     {var
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$47,buf,pos,v1),
       pos$3=bin_write_option(bin_write_t$47,buf,pos$0,v2),
       pos$1=caml_call3(bin_write_t$47,buf,pos$3,v3),
       pos$2=caml_call3(bin_write_t$47,buf,pos$1,v4);
      return bin_write_list(bin_write_t$47,buf,pos$2,v5)}
    var bin_writer_t$109=[0,bin_size_t$82,bin_write_t$83];
    function bin_read_t$163(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$34,
               pos_ref[1])}
    function bin_read_t$164(buf,pos_ref)
     {var
       v_summary=caml_call2(bin_read_t$96,buf,pos_ref),
       v_readme=bin_read_option$0(bin_read_t$96,buf,pos_ref),
       v_working_dir=caml_call2(bin_read_t$96,buf,pos_ref),
       v_path_to_exe=caml_call2(bin_read_t$96,buf,pos_ref),
       v_child_subcommand=bin_read_list$0(bin_read_t$96,buf,pos_ref);
      return [0,
              v_summary,
              v_readme,
              v_working_dir,
              v_path_to_exe,
              v_child_subcommand]}
    var
     bin_reader_t$109=[0,bin_read_t$164,bin_read_t$163],
     bin_t$109=[0,bin_shape_t$132,bin_writer_t$109,bin_reader_t$109];
    function compare$98(a_778,b_779)
     {if(caml_call2(Ppx_compare_lib[1],a_778,b_779))return 0;
      var n=caml_call2(compare$37,a_778[1],b_779[1]);
      if(0 === n)
       {var
         _a0w_=b_779[2],
         _a0x_=a_778[2],
         n$0=
          compare_option
           (function(a_780,b_781){return caml_call2(compare$37,a_780,b_781)},
            _a0x_,
            _a0w_);
        if(0 === n$0)
         {var n$1=caml_call2(compare$37,a_778[3],b_779[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare$37,a_778[4],b_779[4]);
            if(0 === n$2)
             {var _a0y_=b_779[5],_a0z_=a_778[5];
              return compare_list
                      (function(a_782,b_783)
                        {return caml_call2(compare$37,a_782,b_783)},
                       _a0z_,
                       _a0y_)}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function child_subcommand(r){return r[5]}
    function path_to_exe(r){return r[4]}
    function working_dir(r){return r[3]}
    function readme$3(r){return r[2]}
    function summary$3(r){return r[1]}
    function _amm_(r,v){return [0,r[1],r[2],r[3],r[4],v]}
    var
     _amn_=0,
     child_subcommand$0=
      [0,
       function(param){return 0},
       cst_child_subcommand$3,
       _amn_,
       child_subcommand,
       _amm_];
    function _amo_(r,v){return [0,r[1],r[2],r[3],v,r[5]]}
    var
     _amp_=0,
     path_to_exe$0=
      [0,function(param){return 0},cst_path_to_exe$9,_amp_,path_to_exe,_amo_];
    function _amq_(r,v){return [0,r[1],r[2],v,r[4],r[5]]}
    var
     _amr_=0,
     working_dir$0=
      [0,function(param){return 0},cst_working_dir$6,_amr_,working_dir,_amq_];
    function _ams_(r,v){return [0,r[1],v,r[3],r[4],r[5]]}
    var
     _amt_=0,
     readme$4=[0,function(param){return 0},cst_readme$20,_amt_,readme$3,_ams_];
    function _amu_(r,v){return [0,v,r[2],r[3],r[4],r[5]]}
    var
     _amv_=0,
     summary$4=
      [0,function(param){return 0},cst_summary$29,_amv_,summary$3,_amu_];
    function make_creator$4
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun,
      compile_acc)
     {var
       match=caml_call2(summary_fun,summary$4,compile_acc),
       compile_acc$0=match[2],
       summary_gen=match[1],
       match$0=caml_call2(readme_fun,readme$4,compile_acc$0),
       compile_acc$1=match$0[2],
       readme_gen=match$0[1],
       match$1=caml_call2(working_dir_fun,working_dir$0,compile_acc$1),
       compile_acc$2=match$1[2],
       working_dir_gen=match$1[1],
       match$2=caml_call2(path_to_exe_fun,path_to_exe$0,compile_acc$2),
       compile_acc$3=match$2[2],
       path_to_exe_gen=match$2[1],
       match$3=
        caml_call2(child_subcommand_fun,child_subcommand$0,compile_acc$3),
       compile_acc$4=match$3[2],
       child_subcommand_gen=match$3[1];
      return [0,
              function(acc)
               {var
                 summary=caml_call1(summary_gen,acc),
                 readme=caml_call1(readme_gen,acc),
                 working_dir=caml_call1(working_dir_gen,acc),
                 path_to_exe=caml_call1(path_to_exe_gen,acc),
                 child_subcommand=caml_call1(child_subcommand_gen,acc);
                return [0,
                        summary,
                        readme,
                        working_dir,
                        path_to_exe,
                        child_subcommand]},
              compile_acc$4]}
    function create$33
     (summary,readme,working_dir,path_to_exe,child_subcommand)
     {return [0,summary,readme,working_dir,path_to_exe,child_subcommand]}
    function map$36
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _a0s_=caml_call1(child_subcommand_fun,child_subcommand$0),
       _a0t_=caml_call1(path_to_exe_fun,path_to_exe$0),
       _a0u_=caml_call1(working_dir_fun,working_dir$0),
       _a0v_=caml_call1(readme_fun,readme$4);
      return [0,caml_call1(summary_fun,summary$4),_a0v_,_a0u_,_a0t_,_a0s_]}
    function iter$28
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {caml_call1(summary_fun,summary$4);
      caml_call1(readme_fun,readme$4);
      caml_call1(working_dir_fun,working_dir$0);
      caml_call1(path_to_exe_fun,path_to_exe$0);
      return caml_call1(child_subcommand_fun,child_subcommand$0)}
    function fold$23
     (init,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {return caml_call2
              (child_subcommand_fun,
               caml_call2
                (path_to_exe_fun,
                 caml_call2
                  (working_dir_fun,
                   caml_call2
                    (readme_fun,caml_call2(summary_fun,init,summary$4),readme$4),
                   working_dir$0),
                 path_to_exe$0),
               child_subcommand$0)}
    function map_poly$4(record)
     {var
       _a0o_=[0,caml_call1(record[1],child_subcommand$0),0],
       _a0p_=[0,caml_call1(record[1],path_to_exe$0),_a0o_],
       _a0q_=[0,caml_call1(record[1],working_dir$0),_a0p_],
       _a0r_=[0,caml_call1(record[1],readme$4),_a0q_];
      return [0,caml_call1(record[1],summary$4),_a0r_]}
    function for_all$21
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _a0k_=caml_call1(summary_fun,summary$4),
       _a0l_=_a0k_?caml_call1(readme_fun,readme$4):_a0k_,
       _a0m_=_a0l_?caml_call1(working_dir_fun,working_dir$0):_a0l_,
       _a0n_=_a0m_?caml_call1(path_to_exe_fun,path_to_exe$0):_a0m_;
      return _a0n_?caml_call1(child_subcommand_fun,child_subcommand$0):_a0n_}
    function exists$21
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _a0j_=caml_call1(summary_fun,summary$4),
       _a0g_=_a0j_ || caml_call1(readme_fun,readme$4),
       _a0h_=_a0g_ || caml_call1(working_dir_fun,working_dir$0),
       _a0i_=_a0h_ || caml_call1(path_to_exe_fun,path_to_exe$0);
      return _a0i_?_a0i_:caml_call1(child_subcommand_fun,child_subcommand$0)}
    function to_list$17
     (summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _a0c_=[0,caml_call1(child_subcommand_fun,child_subcommand$0),0],
       _a0d_=[0,caml_call1(path_to_exe_fun,path_to_exe$0),_a0c_],
       _a0e_=[0,caml_call1(working_dir_fun,working_dir$0),_a0d_],
       _a0f_=[0,caml_call1(readme_fun,readme$4),_a0e_];
      return [0,caml_call1(summary_fun,summary$4),_a0f_]}
    function iter$29
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {caml_call3(summary_fun,summary$4,record,record[1]);
      caml_call3(readme_fun,readme$4,record,record[2]);
      caml_call3(working_dir_fun,working_dir$0,record,record[3]);
      caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]);
      return caml_call3
              (child_subcommand_fun,child_subcommand$0,record,record[5])}
    function fold$24
     (record,
      init,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var _aZ__=record[5],_aZ$_=record[4],_a0a_=record[3],_a0b_=record[2];
      return caml_call4
              (child_subcommand_fun,
               caml_call4
                (path_to_exe_fun,
                 caml_call4
                  (working_dir_fun,
                   caml_call4
                    (readme_fun,
                     caml_call4(summary_fun,init,summary$4,record,record[1]),
                     readme$4,
                     record,
                     _a0b_),
                   working_dir$0,
                   record,
                   _a0a_),
                 path_to_exe$0,
                 record,
                 _aZ$_),
               child_subcommand$0,
               record,
               _aZ__)}
    function for_all$22
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aZ6_=caml_call3(summary_fun,summary$4,record,record[1]),
       _aZ7_=_aZ6_?caml_call3(readme_fun,readme$4,record,record[2]):_aZ6_,
       _aZ8_=
        _aZ7_?caml_call3(working_dir_fun,working_dir$0,record,record[3]):_aZ7_,
       _aZ9_=
        _aZ8_?caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]):_aZ8_;
      return _aZ9_
              ?caml_call3
                (child_subcommand_fun,child_subcommand$0,record,record[5])
              :_aZ9_}
    function exists$22
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aZ5_=caml_call3(summary_fun,summary$4,record,record[1]),
       _aZ2_=_aZ5_ || caml_call3(readme_fun,readme$4,record,record[2]),
       _aZ3_=
        _aZ2_
        ||
        caml_call3(working_dir_fun,working_dir$0,record,record[3]),
       _aZ4_=
        _aZ3_
        ||
        caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]);
      return _aZ4_
              ?_aZ4_
              :caml_call3
                (child_subcommand_fun,child_subcommand$0,record,record[5])}
    function to_list$18
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aZY_=
        [0,
         caml_call3(child_subcommand_fun,child_subcommand$0,record,record[5]),
         0],
       _aZZ_=
        [0,caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]),_aZY_],
       _aZ0_=
        [0,caml_call3(working_dir_fun,working_dir$0,record,record[3]),_aZZ_],
       _aZ1_=[0,caml_call3(readme_fun,readme$4,record,record[2]),_aZ0_];
      return [0,caml_call3(summary_fun,summary$4,record,record[1]),_aZ1_]}
    function map$37
     (record,
      summary_fun,
      readme_fun,
      working_dir_fun,
      path_to_exe_fun,
      child_subcommand_fun)
     {var
       _aZU_=
        caml_call3(child_subcommand_fun,child_subcommand$0,record,record[5]),
       _aZV_=caml_call3(path_to_exe_fun,path_to_exe$0,record,record[4]),
       _aZW_=caml_call3(working_dir_fun,working_dir$0,record,record[3]),
       _aZX_=caml_call3(readme_fun,readme$4,record,record[2]);
      return [0,
              caml_call3(summary_fun,summary$4,record,record[1]),
              _aZX_,
              _aZW_,
              _aZV_,
              _aZU_]}
    function set_all_mutable_fields$4(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$4=
      [0,
       iter$29,
       fold$24,
       for_all$22,
       exists$22,
       to_list$18,
       map$37,
       set_all_mutable_fields$4];
    function t_of_sexp$102(sexp_785)
     {if(0 === sexp_785[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_807,sexp_785);
      var
       field_sexps_786=sexp_785[1],
       summary_787=[0,0],
       readme_789=[0,0],
       working_dir_791=[0,0],
       path_to_exe_793=[0,0],
       child_subcommand_795=[0,0],
       duplicates_797=[0,0],
       extra_798=[0,0],
       param=field_sexps_786;
      for(;;)
       {if(param)
         {var _aZJ_=param[1];
          if(1 === _aZJ_[0])
           {var _aZK_=_aZJ_[1];
            if(_aZK_)
             {var _aZL_=_aZK_[1];
              if(0 === _aZL_[0])
               {var _aZM_=_aZK_[2],_aZN_=_aZL_[1],switch$0=0;
                if(! _aZM_ || ! _aZM_[2])switch$0 = 1;
                if(switch$0)
                 {var
                   tail_809=param[2],
                   field_sexp_800$5=
                    function(_aZT_)
                     {function field_sexp_800(param)
                       {if(_aZT_)
                         {if(_aZT_[2])throw [0,Assert_failure,_amw_];
                          var x_810=_aZT_[1];
                          return x_810}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_807,sexp_785)}
                      return field_sexp_800},
                   field_sexp_800=field_sexp_800$5(_aZM_);
                  if(caml_string_notequal(_aZN_,cst_child_subcommand$4))
                   if(caml_string_notequal(_aZN_,cst_path_to_exe$10))
                    if(caml_string_notequal(_aZN_,cst_readme$21))
                     if(caml_string_notequal(_aZN_,cst_summary$30))
                      if(caml_string_notequal(_aZN_,cst_working_dir$7))
                       {if(Sexplib0_Sexp_conv[26][1])
                         extra_798[1] = [0,_aZN_,extra_798[1]]}
                      else
                       if(working_dir_791[1])
                        duplicates_797[1] = [0,_aZN_,duplicates_797[1]];
                       else
                        {var
                          field_sexp_800$0=field_sexp_800(0),
                          fvalue_804=caml_call1(t_of_sexp$34,field_sexp_800$0);
                         working_dir_791[1] = [0,fvalue_804]}
                     else
                      if(summary_787[1])
                       duplicates_797[1] = [0,_aZN_,duplicates_797[1]];
                      else
                       {var
                         field_sexp_800$1=field_sexp_800(0),
                         fvalue_806=caml_call1(t_of_sexp$34,field_sexp_800$1);
                        summary_787[1] = [0,fvalue_806]}
                    else
                     if(readme_789[1])
                      duplicates_797[1] = [0,_aZN_,duplicates_797[1]];
                     else
                      {var
                        field_sexp_800$2=field_sexp_800(0),
                        fvalue_805=caml_call1(t_of_sexp$34,field_sexp_800$2);
                       readme_789[1] = [0,fvalue_805]}
                   else
                    if(path_to_exe_793[1])
                     duplicates_797[1] = [0,_aZN_,duplicates_797[1]];
                    else
                     {var
                       field_sexp_800$3=field_sexp_800(0),
                       fvalue_803=caml_call1(t_of_sexp$34,field_sexp_800$3);
                      path_to_exe_793[1] = [0,fvalue_803]}
                  else
                   if(child_subcommand_795[1])
                    duplicates_797[1] = [0,_aZN_,duplicates_797[1]];
                   else
                    {var
                      field_sexp_800$4=field_sexp_800(0),
                      fvalue_802=
                       caml_call2(list_of_sexp,t_of_sexp$34,field_sexp_800$4);
                     child_subcommand_795[1] = [0,fvalue_802]}
                  var param=tail_809;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_807,_aZJ_)}
        if(duplicates_797[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_807,
                  duplicates_797[1],
                  sexp_785);
        if(extra_798[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_807,
                  extra_798[1],
                  sexp_785);
        var
         _aZO_=summary_787[1],
         _aZQ_=working_dir_791[1],
         _aZR_=path_to_exe_793[1],
         _aZS_=child_subcommand_795[1],
         _aZP_=readme_789[1];
        if(_aZO_ && _aZQ_ && _aZR_ && _aZS_)
         {var
           child_subcommand_796=_aZS_[1],
           path_to_exe_794=_aZR_[1],
           working_dir_792=_aZQ_[1],
           summary_788=_aZO_[1];
          return [0,
                  summary_788,
                  _aZP_,
                  working_dir_792,
                  path_to_exe_794,
                  child_subcommand_796]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_807,
                 sexp_785,
                 [0,
                  [0,0 === summary_787[1]?1:0,cst_summary$31],
                  [0,
                   [0,0 === working_dir_791[1]?1:0,cst_working_dir$8],
                   [0,
                    [0,0 === path_to_exe_793[1]?1:0,cst_path_to_exe$11],
                    [0,
                     [0,0 === child_subcommand_795[1]?1:0,cst_child_subcommand$5],
                     0]]]])}}
    function sexp_of_t$114(param)
     {var
       child_subcommand_822=param[5],
       path_to_exe_820=param[4],
       working_dir_818=param[3],
       readme_814=param[2],
       summary_812=param[1],
       arg_823=caml_call2(sexp_of_list,sexp_of_t$41,child_subcommand_822),
       bnds_811=[0,[1,[0,_amx_,[0,arg_823,0]]],0],
       arg_821=caml_call1(sexp_of_t$41,path_to_exe_820),
       bnds_811$0=[0,[1,[0,_amy_,[0,arg_821,0]]],bnds_811],
       arg_819=caml_call1(sexp_of_t$41,working_dir_818),
       bnds_811$1=[0,[1,[0,_amz_,[0,arg_819,0]]],bnds_811$0];
      if(readme_814)
       var
        v_815=readme_814[1],
        arg_817=caml_call1(sexp_of_t$41,v_815),
        bnd_816=[1,[0,_amA_,[0,arg_817,0]]],
        bnds_811$2=[0,bnd_816,bnds_811$1];
      else
       var bnds_811$2=bnds_811$1;
      var
       arg_813=caml_call1(sexp_of_t$41,summary_812),
       bnds_811$3=[0,[1,[0,_amB_,[0,arg_813,0]]],bnds_811$2];
      return [1,bnds_811$3]}
    var
     _amC_=caml_call1(Bin_prot_Shape[2][1],cst_t$263),
     _amD_=
      [0,
       [0,
        cst_Exec$11,
        [0,
         bin_shape_t$132,
         [0,caml_call1(caml_call1(Bin_prot_Shape[13],_amC_),0),0]]],
       0],
     _amE_=caml_call1(Bin_prot_Shape[2][1],cst_t$264),
     _amF_=
      [0,
       [0,cst_Basic$2,[0,bin_shape_t$130,0]],
       [0,
        [0,
         cst_Group$11,
         [0,
          bin_shape_t$131(caml_call1(caml_call1(Bin_prot_Shape[13],_amE_),0)),
          0]],
        _amD_]],
     _amG_=caml_call1(Bin_prot_Shape[9],_amF_),
     _amH_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$265),0,_amG_],0],
     _amI_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_command_shape_ml_$35),
     group$141=caml_call2(Bin_prot_Shape[6],_amI_,_amH_),
     _amJ_=caml_call1(Bin_prot_Shape[2][1],cst_t$266),
     bin_shape_t$133=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$141,_amJ_),0);
    function bin_size_t$83(param)
     {switch(param[0])
       {case 0:
         var v1=param[1],_aZF_=bin_size_t$80(v1);
         return caml_call2(Bin_prot_Common[23],1,_aZF_);
        case 1:
         var v1$0=param[1],_aZG_=bin_size_t$81(bin_size_t$83,v1$0);
         return caml_call2(Bin_prot_Common[23],1,_aZG_);
        default:
         var
          v2=param[2],
          v1$1=param[1],
          _aZH_=bin_size_t$82(v1$1),
          size=caml_call2(Bin_prot_Common[23],1,_aZH_),
          _aZI_=bin_size_t$83(v2);
         return caml_call2(Bin_prot_Common[23],size,_aZI_)}}
    function bin_write_t$84(buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:
          var v1=param$0[1],pos$1=caml_call3(Bin_prot_Write[31],buf,pos$0,0);
          return bin_write_t$81(buf,pos$1,v1);
         case 1:
          var
           v1$0=param$0[1],
           pos$2=caml_call3(Bin_prot_Write[31],buf,pos$0,1);
          return bin_write_t$82(bin_write_t$84,buf,pos$2,v1$0);
         default:
          var
           v2=param$0[2],
           v1$1=param$0[1],
           pos$3=caml_call3(Bin_prot_Write[31],buf,pos$0,2),
           pos$4=bin_write_t$83(buf,pos$3,v1$1),
           pos$0=pos$4,
           param$0=v2;
          continue}}
    var bin_writer_t$110=[0,bin_size_t$83,bin_write_t$84];
    function bin_read_t$165(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_command_shape_ml_$36,
               pos_ref[1])}
    function bin_read_t$166(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_amK_,pos_ref[1]);
      switch(match)
       {case 0:var arg_1=bin_read_t$160(buf,pos_ref);return [0,arg_1];
        case 1:
         var arg_1$1=bin_read_t$162(bin_read_t$166,buf,pos_ref);
         return [1,arg_1$1];
        default:
         var
          arg_1$0=bin_read_t$164(buf,pos_ref),
          arg_2=bin_read_t$166(buf,pos_ref);
         return [2,arg_1$0,arg_2]}}
    var
     bin_reader_t$110=[0,bin_read_t$166,bin_read_t$165],
     bin_t$110=[0,bin_shape_t$133,bin_writer_t$110,bin_reader_t$110];
    function compare$99(a_824,b_825)
     {var a_824$0=a_824,b_825$0=b_825;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_824$0,b_825$0))return 0;
        switch(a_824$0[0])
         {case 0:
           var _aZB_=a_824$0[1];
           if(0 === b_825$0[0])
            {var b_827=b_825$0[1];return compare$96(_aZB_,b_827)}
           return -1;
          case 1:
           var _aZC_=a_824$0[1];
           switch(b_825$0[0])
            {case 0:break;
             case 1:
              var b_829=b_825$0[1];
              return compare$97
                      (function(a_830,b_831){return compare$99(a_830,b_831)},
                       _aZC_,
                       b_829);
             default:return -1}
           break;
          default:
           var _aZD_=a_824$0[2],_aZE_=a_824$0[1];
           switch(b_825$0[0])
            {case 0:break;
             case 1:return 1;
             default:
              var b_835=b_825$0[2],b_833=b_825$0[1],n=compare$98(_aZE_,b_833);
              if(0 === n){var a_824$0=_aZD_,b_825$0=b_835;continue}
              return n}}
        return 1}}
    var t_of_sexp$103=function _aZA_(_aZz_){return _aZA_.fun(_aZz_)};
    caml_update_dummy
     (t_of_sexp$103,
      function(sexp_840)
       {if(0 === sexp_840[0])
         {var _aZu_=sexp_840[1],switch$0=0;
          if(caml_string_notequal(_aZu_,cst_Basic$3))
           {var switch$1=0;
            if(caml_string_notequal(_aZu_,cst_Exec$12))
             {var switch$2=0;
              if(caml_string_notequal(_aZu_,cst_Group$12))
               if(caml_string_notequal(_aZu_,cst_basic$1))
                if(caml_string_notequal(_aZu_,cst_exec$7))
                 {if(caml_string_notequal(_aZu_,cst_group$7))
                   {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
                else
                 switch$2 = 1;
               else
                {switch$1 = 1;switch$2 = 1}
              if(! switch$2)
               return caml_call2
                       (Sexplib0_Sexp_conv_error[5],error_source_838,sexp_840)}
            if(! switch$1)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[5],error_source_838,sexp_840)}
          if(! switch$0)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[5],error_source_838,sexp_840)}
        else
         {var _aZv_=sexp_840[1];
          if(! _aZv_)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[7],error_source_838,sexp_840);
          var _aZw_=_aZv_[1];
          if(0 !== _aZw_[0])
           return caml_call2
                   (Sexplib0_Sexp_conv_error[6],error_source_838,sexp_840);
          var _aZx_=_aZw_[1],switch$3=0;
          if(caml_string_notequal(_aZx_,cst_Basic$4))
           {var switch$4=0;
            if(caml_string_notequal(_aZx_,cst_Exec$13))
             {var switch$5=0;
              if(caml_string_notequal(_aZx_,cst_Group$13))
               if(caml_string_notequal(_aZx_,cst_basic$2))
                if(caml_string_notequal(_aZx_,cst_exec$8))
                 {if(caml_string_notequal(_aZx_,cst_group$8))
                   {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
                else
                 switch$5 = 1;
               else
                {switch$4 = 1;switch$5 = 1}
              if(! switch$5)
               {var sexp_args_847=_aZv_[2];
                if(sexp_args_847 && ! sexp_args_847[2])
                 {var
                   arg0_848=sexp_args_847[1],
                   res0_849=t_of_sexp$101(t_of_sexp$103,arg0_848);
                  return [1,res0_849]}
                return caml_call3
                        (Sexplib0_Sexp_conv_error[4],
                         error_source_838,
                         _aZx_,
                         sexp_840)}}
            if(! switch$4)
             {var sexp_args_852=_aZv_[2];
              if(sexp_args_852)
               {var _aZy_=sexp_args_852[2];
                if(_aZy_ && ! _aZy_[2])
                 {var
                   arg1_854=_aZy_[1],
                   arg0_853=sexp_args_852[1],
                   res0_855=t_of_sexp$102(arg0_853),
                   res1_856=caml_call1(t_of_sexp$103,arg1_854);
                  return [2,res0_855,res1_856]}}
              return caml_call3
                      (Sexplib0_Sexp_conv_error[4],
                       error_source_838,
                       _aZx_,
                       sexp_840)}}
          if(! switch$3)
           {var sexp_args_842=_aZv_[2];
            if(sexp_args_842 && ! sexp_args_842[2])
             {var arg0_843=sexp_args_842[1],res0_844=t_of_sexp$100(arg0_843);
              return [0,res0_844]}
            return caml_call3
                    (Sexplib0_Sexp_conv_error[4],
                     error_source_838,
                     _aZx_,
                     sexp_840)}}
        return caml_call2
                (Sexplib0_Sexp_conv_error[8],error_source_838,sexp_840)});
    function sexp_of_t$115(param)
     {switch(param[0])
       {case 0:
         var arg0_857=param[1],res0_858=sexp_of_t$112(arg0_857);
         return [1,[0,_amL_,[0,res0_858,0]]];
        case 1:
         var arg0_859=param[1],res0_860=sexp_of_t$113(sexp_of_t$115,arg0_859);
         return [1,[0,_amM_,[0,res0_860,0]]];
        default:
         var
          arg1_862=param[2],
          arg0_861=param[1],
          res0_863=sexp_of_t$114(arg0_861),
          res1_864=sexp_of_t$115(arg1_862);
         return [1,[0,_amN_,[0,res0_863,[0,res1_864,0]]]]}}
    function expanded_subcommands(t)
     {function expand(param)
       {var param$0=param;
        for(;;)
         switch(param$0[0])
          {case 0:return _amO_;
           case 1:
            var
             match=param$0[1],
             subcommands=match[3],
             _aZq_=
              function(param)
               {var t=param[2],name=param[1];
                function _aZt_(path){return [0,name,path]}
                return caml_call2(_qF_,expand(t),_aZt_)},
             _aZr_=caml_obj_tag(subcommands),
             _aZs_=
              250 === _aZr_
               ?subcommands[1]
               :246 === _aZr_
                 ?caml_call1(CamlinternalLazy[2],subcommands)
                 :subcommands;
            return caml_call2(_qK_,_aZs_,_aZq_);
           default:var param$1=param$0[2],param$0=param$1;continue}}
      return caml_call1(parts,expand(t))}
    function sexp_of_t$116(param)
     {switch(param[0])
       {case 0:
         var arg0_865=param[1],res0_866=sexp_of_t$112(arg0_865);
         return [1,[0,_amP_,[0,res0_866,0]]];
        case 1:
         var arg0_867=param[1],res0_868=sexp_of_t$113(sexp_of_t$116,arg0_867);
         return [1,[0,_amQ_,[0,res0_868,0]]];
        case 2:
         var arg0_869=param[1],res0_870=sexp_of_t$114(arg0_869);
         return [1,[0,_amR_,[0,res0_870,0]]];
        default:
         var
          arg0_871=param[1],
          res0_872=caml_call2(sexp_of_lazy_t,sexp_of_t$116,arg0_871);
         return [1,[0,_amS_,[0,res0_872,0]]]}}
    var extraction_var=to_string$33(1);
    function f(i,supported,param){return caml_call2(add$7,supported,i)}
    var _amT_=3;
    function _amU_(_aZo_,_aZp_){return f(_amT_,_aZo_,_aZp_)}
    var _amV_=2;
    function _amW_(_aZm_,_aZn_){return f(_amV_,_aZm_,_aZn_)}
    var _amX_=1;
    function _amY_(_aZk_,_aZl_){return f(_amX_,_aZk_,_aZl_)}
    var
     supported_versions=
      fold$14(caml_call1(empty$6,[0,comparator$9]),_amY_,_amW_,_amU_);
    function to_versioned(t,version_to_use)
     {var switcher=version_to_use - 1 | 0;
      if(2 < switcher >>> 0)
       return failwiths
               (0,_akF_,cst_unsupported_version_to_use,version_to_use,_$N_);
      switch(switcher)
       {case 0:return [0,of_latest$4(t)];
        case 1:return [1,of_latest$3(t)];
        default:return [2,t]}}
    function fully_forced(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var b=param$0[1];return [0,b];
         case 1:var g=param$0[1];return [1,map$26(g,fully_forced)];
         case 2:
          var f=param$0[2],e=param$0[1];
          return [2,e,fully_forced(caml_call1(f,0))];
         default:
          var
           thunk=param$0[1],
           _aZj_=caml_obj_tag(thunk),
           param$1=
            250 === _aZj_
             ?thunk[1]
             :246 === _aZj_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    function get_summary(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var b=param$0[1];return b[1];
         case 1:var g=param$0[1];return g[1];
         case 2:var e=param$0[1];return e[1];
         default:
          var
           thunk=param$0[1],
           _aZi_=caml_obj_tag(thunk),
           param$1=
            250 === _aZi_
             ?thunk[1]
             :246 === _aZi_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$424);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Command_shape$0);
    var
     _amZ_=[0,Key_type,abs_path,help_screen_compare,lookup_expand,word_wrap],
     include$139=
      [0,
       sexp_of_t$116,
       extraction_var,
       supported_versions,
       [0,t_of_sexp$97,sexp_of_t$107],
       of_versioned,
       to_versioned],
     _am0_=
      [0,
       compare$99,
       sexp_of_t$115,
       expanded_subcommands,
       bin_size_t$83,
       bin_write_t$84,
       bin_read_t$166,
       bin_read_t$165,
       bin_shape_t$133,
       bin_writer_t$110,
       bin_reader_t$110,
       bin_t$110,
       t_of_sexp$103],
     _am1_=
      [0,
       compare$96,
       flags,
       anons,
       readme,
       summary,
       [0,
        names$2,
        flags$0,
        anons$0,
        readme$0,
        summary$0,
        fold$19,
        make_creator$2,
        create$31,
        map$32,
        iter$24,
        for_all$17,
        exists$17,
        to_list$13,
        map_poly$2,
        Direct$2],
       sexp_of_t$112,
       find_flag,
       get_usage,
       bin_size_t$80,
       bin_write_t$81,
       bin_read_t$160,
       bin_read_t$159,
       bin_shape_t$130,
       bin_writer_t$107,
       bin_reader_t$107,
       bin_t$107,
       t_of_sexp$100],
     _am2_=[0,sort$0,to_string$34],
     _am3_=
      [0,
       compare$94,
       all$6,
       at_most_once,
       at_least_once,
       [0,
        names$0,
        at_most_once$0,
        at_least_once$0,
        fold$15,
        make_creator$0,
        create$29,
        map$28,
        iter$20,
        for_all$13,
        exists$13,
        to_list$9,
        map_poly$0,
        Direct$0],
       sexp_of_t$110,
       to_help_string],
     _am4_=
      [0,
       [0,bin_shape_t$127,compare$92,sexp_of_t$108,invariant$13,usage],
       bin_shape_t$128,
       compare$93,
       sexp_of_t$109],
     Core_Command_shape=
      [0,
       _am4_,
       _am3_,
       [0,
        compare$95,
        aliases,
        doc,
        name$64,
        [0,
         names$1,
         aliases$0,
         doc$0,
         name$65,
         fold$17,
         make_creator$1,
         create$30,
         map$30,
         iter$22,
         for_all$15,
         exists$15,
         to_list$11,
         map_poly$1,
         Direct$1],
        sexp_of_t$111,
        flag_name,
        num_occurrences,
        requires_arg,
        bin_size_t$79,
        bin_write_t$80,
        bin_read_t$158,
        bin_read_t$157,
        bin_shape_t$129,
        bin_writer_t$106,
        bin_reader_t$106,
        bin_t$106,
        t_of_sexp$99],
       _am2_,
       _am1_,
       [0,
        compare$97,
        subcommands,
        readme$1,
        summary$1,
        [0,
         names$3,
         subcommands$0,
         readme$2,
         summary$2,
         fold$21,
         make_creator$3,
         create$32,
         map$34,
         iter$26,
         for_all$19,
         exists$19,
         to_list$15,
         map_poly$3,
         Direct$3],
        sexp_of_t$113,
        find_subcommand,
        map$26,
        bin_shape_t$131,
        bin_size_t$81,
        bin_write_t$82,
        bin_read_t$162,
        bin_read_t$161,
        bin_writer_t$108,
        bin_reader_t$108,
        bin_t$108,
        t_of_sexp$101],
       [0,
        compare$98,
        child_subcommand,
        path_to_exe,
        working_dir,
        readme$3,
        summary$3,
        [0,
         names$4,
         child_subcommand$0,
         path_to_exe$0,
         working_dir$0,
         readme$4,
         summary$4,
         fold$23,
         make_creator$4,
         create$33,
         map$36,
         iter$28,
         for_all$21,
         exists$21,
         to_list$17,
         map_poly$4,
         Direct$4],
        sexp_of_t$114,
        bin_size_t$82,
        bin_write_t$83,
        bin_read_t$164,
        bin_read_t$163,
        bin_shape_t$132,
        bin_writer_t$109,
        bin_reader_t$109,
        bin_t$109,
        t_of_sexp$102],
       _am0_,
       fully_forced,
       get_summary,
       include$139,
       228660148,
       [0,
        [0,
         [0,
          [0,
           bin_size_t$71,
           bin_write_t$72,
           bin_read_t$143,
           bin_read_t$142,
           bin_shape_t$112,
           bin_writer_t$99,
           bin_reader_t$99,
           bin_t$99,
           compare$85,
           t_of_sexp$86,
           sexp_of_t$96]],
         [0,
          bin_size_t$72,
          bin_write_t$73,
          bin_read_t$145,
          bin_read_t$144,
          bin_shape_t$113,
          bin_writer_t$100,
          bin_reader_t$100,
          bin_t$100,
          compare$86,
          t_of_sexp$87,
          sexp_of_t$97]],
        [0,
         [0,
          bin_size_t$73,
          bin_write_t$74,
          bin_read_t$147,
          bin_read_t$146,
          bin_shape_t$114,
          bin_writer_t$101,
          bin_reader_t$101,
          bin_t$101,
          compare$87,
          t_of_sexp$88,
          sexp_of_t$98]],
        [0,
         [0,
          bin_size_t$74,
          bin_write_t$75,
          bin_read_t$149,
          bin_read_t$148,
          bin_shape_t$115,
          bin_writer_t$102,
          bin_reader_t$102,
          bin_t$102,
          compare$88,
          t_of_sexp$89,
          sexp_of_t$99]],
        [0,
         [0,
          bin_shape_t$117,
          bin_size_t$75,
          bin_write_t$76,
          bin_read_t$151,
          bin_read_t$150,
          bin_writer_t$103,
          bin_reader_t$103,
          bin_t$103,
          compare$89,
          t_of_sexp$90,
          sexp_of_t$100,
          map$26]],
        [0,
         [0,
          bin_size_t$76,
          bin_write_t$77,
          bin_read_t$153,
          bin_read_t$152,
          bin_shape_t$119,
          bin_writer_t$104,
          bin_reader_t$104,
          bin_t$104,
          compare$90,
          t_of_sexp$92,
          sexp_of_t$102]],
        [0,
         [0,
          bin_size_t$77,
          bin_write_t$78,
          bin_read_t$155,
          bin_read_t$154,
          bin_shape_t$122,
          bin_writer_t$105,
          bin_reader_t$105,
          bin_t$105,
          compare$91,
          t_of_sexp$93,
          sexp_of_t$103]]],
       _amZ_];
    caml_register_global(5421,Core_Command_shape,"Core__Command_shape");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Command_shape_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$425);
    caml_call1(Expect_test_collector[5][1],cst_core_src_command_shape_int);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$426,cst$210);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$427);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Command_shape_intf$0);
    var Core_Command_shape_intf=[0];
    caml_register_global
     (5422,Core_Command_shape_intf,"Core__Command_shape_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Host_and_port);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$428);
    caml_call1(Expect_test_collector[5][1],cst_core_src_host_and_port_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$429,cst$211);
    var help_text=228660148;
    function t_of_sexp$104(sexp_006)
     {if(1 === sexp_006[0])
       {var _aZg_=sexp_006[1];
        if(_aZg_)
         {var _aZh_=_aZg_[2];
          if(_aZh_ && ! _aZh_[2])
           {var
             arg1_003=_aZh_[1],
             arg0_002=_aZg_[1],
             res0_004=caml_call1(_$r_,arg0_002),
             res1_005=caml_call1(_$M_,arg1_003);
            return [0,res0_004,res1_005]}}}
      return caml_call3
              (Sexplib0_Sexp_conv_error[2],error_source_007,2,sexp_006)}
    function sexp_of_t$117(param)
     {var
       arg1_009=param[2],
       arg0_008=param[1],
       res0_010=caml_call1(_$s_,arg0_008),
       res1_011=caml_call1(_$N_,arg1_009);
      return [1,[0,res0_010,[0,res1_011,0]]]}
    var
     _am5_=caml_call1(Bin_prot_Shape[7],[0,_Yn_,[0,_YI_,0]]),
     _am6_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$267),0,_am5_],0],
     _am7_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_host_and_port_ml_),
     group$142=caml_call2(Bin_prot_Shape[6],_am7_,_am6_),
     _am8_=caml_call1(Bin_prot_Shape[2][1],cst_t$268),
     bin_shape_t$134=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$142,_am8_),0);
    function bin_size_t$84(param)
     {var
       v2=param[2],
       v1=param[1],
       _aZe_=caml_call1(_Xu_,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aZe_),
       _aZf_=caml_call1(_Xx_,v2);
      return caml_call2(Bin_prot_Common[23],size,_aZf_)}
    function bin_write_t$85(buf,pos,param)
     {var v2=param[2],v1=param[1],pos$0=caml_call3(_Yp_,buf,pos,v1);
      return caml_call3(_YK_,buf,pos$0,v2)}
    function bin_read_t$167(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_host_and_port_ml_$0,
               pos_ref[1])}
    function bin_read_t$168(buf,pos_ref)
     {var v1=caml_call2(_Yr_,buf,pos_ref),v2=caml_call2(_YM_,buf,pos_ref);
      return [0,v1,v2]}
    function compare$100(a_012,b_013)
     {if(caml_call2(Ppx_compare_lib[1],a_012,b_013))return 0;
      var n=caml_call2(compare$37,a_012[1],b_013[1]);
      return 0 === n?caml_call2(compare$42,a_012[2],b_013[2]):n}
    function equal$42(a_014,b_015)
     {if(caml_call2(Ppx_compare_lib[1],a_014,b_015))return 1;
      var _aZd_=caml_call2(equal$21,a_014[1],b_015[1]);
      return _aZd_?caml_call2(equal$24,a_014[2],b_015[2]):_aZd_}
    function hash_fold_t$41(hsv,arg)
     {var hsv$0=caml_call2(hash_fold_t$15,hsv,arg[1]);
      return caml_call2(hash_fold_t$19,hsv$0,arg[2])}
    function hash$55(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aZc_=hash_fold_t$41(hsv,x);
      return caml_call1(Base_Hash[9],_aZc_)}
    function _am9_(size_022,random_023)
     {var
       _aZb_=
        caml_call3(Base_quickcheck_Generator[118],_Jt_,size_022,random_023);
      return [0,
              caml_call3
               (Base_quickcheck_Generator[118],_CO_,size_022,random_023),
              _aZb_]}
    var
     quickcheck_generator$25=
      caml_call1(Base_quickcheck_Generator[117],_am9_);
    function _am__(param,size_020,hash_021)
     {var
       x_019=param[2],
       x_018=param[1],
       hash_021$0=
        caml_call4(Base_quickcheck_Observer[37],_CP_,x_018,size_020,hash_021),
       hash_021$1=
        caml_call4
         (Base_quickcheck_Observer[37],_Ju_,x_019,size_020,hash_021$0);
      return hash_021$1}
    var quickcheck_observer$22=caml_call1(Base_quickcheck_Observer[36],_am__);
    function _am$_(param)
     {var x_017=param[2],x_016=param[1],_aY6_=0;
      function _aY7_(x_017){return [0,x_016,x_017]}
      var
       _aY8_=caml_call2(Base_quickcheck_Shrinker[37],_Jv_,x_017),
       _aY9_=[0,caml_call2(include$9[32],_aY8_,_aY7_),_aY6_];
      function _aY__(x_016){return [0,x_016,x_017]}
      var
       _aY$_=caml_call2(Base_quickcheck_Shrinker[37],_CQ_,x_016),
       _aZa_=[0,caml_call2(include$9[32],_aY$_,_aY__),_aY9_];
      return caml_call1(include$9[68],_aZa_)}
    var quickcheck_shrinker$23=caml_call1(Base_quickcheck_Shrinker[36],_am$_);
    function to_serializable(param)
     {var port=param[2],host=param[1];return [0,host,port]}
    function of_serializable(param)
     {var port=param[2],host=param[1];return [0,host,port]}
    var
     include$140=
      caml_call1
       (caml_call1
         (Stable$0[1][1],
          [0,
           bin_shape_t$134,
           bin_size_t$84,
           bin_write_t$85,
           bin_read_t$168,
           bin_read_t$167]),
        [0,to_serializable,of_serializable]),
     bin_size_t$85=include$140[1],
     bin_write_t$86=include$140[2],
     bin_read_t$169=include$140[3],
     bin_read_t$170=include$140[4],
     bin_shape_t$135=include$140[5],
     bin_writer_t$111=include$140[6],
     bin_reader_t$111=include$140[7],
     bin_t$111=include$140[8],
     Expect_test_collector$16=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _ana_(param)
     {var
       _aY1_=caml_call1(Bin_prot_Shape[21],bin_shape_t$135),
       _aY2_=caml_call1(Bin_prot_Shape[18][4],_aY1_);
      caml_call1(Stdlib[46],_aY2_);
      var
       _aY3_=caml_call1(Bin_prot_Shape[21],bin_shape_t$134),
       _aY4_=caml_call1(Bin_prot_Shape[18][4],_aY3_);
      caml_call1(Stdlib[46],_aY4_);
      var
       _aY5_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_host_and_port_ml$0),
         36,
         843,
         853,
         859];
      return caml_call1(Expect_test_collector$16[1],_aY5_)}
    var
     _anb_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_host_and_port_ml$1),
       37,
       860,
       870,
       977],
     _ane_=
      [0,
       [0,
        _and_,
        _anc_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_host_and_port_ml$2),
         36,
         843,
         853,
         859],
        _anb_],
       0],
     _ang_=
      [0,
       caml_call1
        (Expect_test_common_File[1][6],cst_core_src_host_and_port_ml$4),
       33,
       717,
       723,
       978],
     _anh_=
      caml_call1(Expect_test_common_File[4][3],cst_b64ae259269031fe1d40eb7fbc);
    caml_call9
     (Expect_test_collector$16[3],
      _anh_,
      _ang_,
      cst_core_src_host_and_port_ml$3,
      _anf_,
      0,
      _ane_,
      0,
      Inline_test_config,
      _ana_);
    var
     include$141=
      caml_call1
       (caml_call1(Stable[1][1],[0,t_of_sexp$104,sexp_of_t$117]),
        [0,to_serializable,of_serializable]),
     sexp_of_t$118=include$141[2],
     _ani_=include$141[1];
    function to_string$36(param)
     {var port=param[2],host=param[1];return caml_call3(_fx_,_anj_,host,port)}
    function of_string$30(s)
     {var match=caml_call2(_BV_,s,58);
      if(match)
       {var _aYY_=match[2];
        if(_aYY_ && ! _aYY_[2])
         {var port=_aYY_[1],host=match[1];
          try
           {var _aYZ_=caml_call1(of_string$5,port),port$0=_aYZ_}
          catch(_aY0_){var port$0=caml_call3(failwithf$0,_anl_,s,0)}
          return [0,host,port$0]}}
      return caml_call3(failwithf$0,_ank_,s,0)}
    function t_of_sexp$105(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _aYX_=of_string$30(s);return _aYX_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Stdlib[7])
           {var err=exn[2];return caml_call2(_Oo_,err,sexp)}
          throw exn}}
      return caml_call1(_ani_,sexp)}
    var
     include$142=caml_call2(_hd_[1][1],compare$100,sexp_of_t$118),
     comparator$31=include$142[1],
     include$143=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$85,
         bin_write_t$86,
         bin_read_t$169,
         bin_read_t$170,
         bin_shape_t$135,
         bin_writer_t$111,
         bin_reader_t$111,
         bin_t$111,
         compare$100,
         t_of_sexp$105,
         sexp_of_t$118,
         comparator$31]),
     _anm_=include$143[1],
     _ann_=include$143[2];
    function _ano_(param)
     {var
       got=t_of_sexp$105(caml_call1(of_string,cst_localhost_8080)),
       equal=0,
       message=0,
       here=0;
      function comparator(a_024,b_025){return compare$100(a_024,b_025)}
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos,
        sexp_of_t$118,
        comparator,
        here,
        message,
        equal,
        expect,
        got);
      var
       got$0=t_of_sexp$105(caml_call1(of_string,cst_localhost_8080$0)),
       equal$0=0,
       message$0=0,
       here$0=0;
      function comparator$0(a_026,b_027){return compare$100(a_026,b_027)}
      caml_call8
       (Ppx_assert_lib_Runtime[3],
        pos$0,
        sexp_of_t$118,
        comparator$0,
        here$0,
        message$0,
        equal$0,
        expect$0,
        got$0);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_t_of_sexp,
      0,
      cst_core_src_host_and_port_ml$5,
      94,
      4,
      298,
      _ano_);
    function _anp_(param)
     {caml_call9
       (_pw_,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        quickcheck_generator$25,
        function(expect)
         {var
           got=t_of_sexp$105(caml_call1(sexp_of_t$118,expect)),
           equal=0,
           message=0,
           here=0;
          function comparator(a_028,b_029){return compare$100(a_028,b_029)}
          return caml_call8
                  (Ppx_assert_lib_Runtime[3],
                   pos$1,
                   sexp_of_t$118,
                   comparator,
                   here,
                   message,
                   equal,
                   expect,
                   got)});
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[5],
      Inline_test_config,
      cst_sexp_roundtrip,
      0,
      cst_core_src_host_and_port_ml$6,
      103,
      4,
      161,
      _anp_);
    function create$34(host,port){return [0,host,port]}
    function host(t){return t[1]}
    function port(t){return t[2]}
    function tuple(t){return to_serializable(t)}
    var
     _anq_=
      caml_call1(Base_Pretty_printer[2],[0,module_name$12,to_string$36])[1],
     _anr_=
      Make_binable
       ([0,
         hash_fold_t$41,
         bin_size_t$85,
         bin_write_t$86,
         bin_read_t$169,
         bin_read_t$170,
         bin_shape_t$135,
         bin_writer_t$111,
         bin_reader_t$111,
         bin_t$111,
         t_of_sexp$105,
         compare$100,
         sexp_of_t$118,
         hash$55]),
     _ans_=_anr_[1],
     _ant_=_anr_[2],
     _anu_=_anr_[3],
     _anv_=_anr_[4],
     _anw_=_anr_[5],
     _anx_=_anr_[6],
     include$144=
      _w6_
       ([0,
         bin_size_t$85,
         bin_write_t$86,
         bin_read_t$169,
         bin_read_t$170,
         bin_shape_t$135,
         bin_writer_t$111,
         bin_reader_t$111,
         bin_t$111,
         t_of_sexp$105,
         sexp_of_t$118,
         comparator$31]),
     _any_=include$144[1],
     _anz_=include$144[2],
     _anA_=include$144[3],
     _anB_=include$144[4],
     _anC_=include$144[5],
     _anD_=include$144[6],
     _anE_=include$144[7],
     _anF_=include$144[8],
     _anG_=include$144[9],
     _anH_=include$144[10],
     _anI_=include$144[11],
     _anJ_=include$144[12],
     _anK_=include$144[13],
     _anL_=include$144[14],
     _anM_=include$144[15],
     _anN_=include$144[16],
     _anO_=include$144[17],
     _anP_=include$144[18],
     _anQ_=include$144[19],
     _anR_=include$144[20],
     _anS_=include$144[21],
     _anT_=include$144[22],
     type_id$0=caml_call2(Id$0[3],cst_Host_and_port,sexp_of_t$118);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$430);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Host_and_port$0);
    var
     Core_Host_and_port=
      [0,
       create$34,
       host,
       port,
       tuple,
       bin_size_t$85,
       bin_write_t$86,
       bin_read_t$169,
       bin_read_t$170,
       bin_shape_t$135,
       bin_writer_t$111,
       bin_reader_t$111,
       bin_t$111,
       t_of_sexp$105,
       sexp_of_t$118,
       of_string$30,
       to_string$36,
       _anq_,
       _any_,
       _anz_,
       _anA_,
       _anB_,
       _anC_,
       _anD_,
       _anE_,
       _anF_,
       _anG_,
       _anH_,
       _anI_,
       _anJ_,
       _anK_,
       _anL_,
       _anM_,
       _anN_,
       _anO_,
       _anP_,
       _anQ_,
       _anR_,
       _anS_,
       _anT_,
       _ans_,
       _ant_,
       _anu_,
       _anv_,
       _anw_,
       _anx_,
       [0,
        [0,
         t_sexp_grammar$36,
         equal$42,
         hash_fold_t$41,
         hash$55,
         quickcheck_generator$25,
         quickcheck_observer$22,
         quickcheck_shrinker$23,
         of_string$30,
         to_string$36,
         bin_size_t$85,
         bin_write_t$86,
         bin_read_t$169,
         bin_read_t$170,
         bin_shape_t$135,
         bin_writer_t$111,
         bin_reader_t$111,
         bin_t$111,
         compare$100,
         t_of_sexp$105,
         sexp_of_t$118,
         comparator$31,
         _anm_,
         _ann_]],
       type_id$0];
    caml_register_global(5424,Core_Host_and_port,"Core__Host_and_port");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Pid);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$431);
    caml_call1(Expect_test_collector[5][1],cst_core_src_pid_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$432,cst$212);
    var
     compare$101=Stable$5[1][9],
     Pid_must_be_positive=
      [248,cst_Core_Pid_Stable_V1_Without,caml_fresh_oo_id(0)];
    function _anU_(param)
     {if(param[1] === Pid_must_be_positive)
       {var arg0_003=param[2],res0_004=caml_call1(Stable$5[1][11],arg0_003);
        return [1,[0,_anV_,[0,res0_004,0]]]}
      throw [0,Assert_failure,_anW_]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Pid_must_be_positive,_anU_);
    function ensure(i){if(0 < i)return i;throw [0,Pid_must_be_positive,i]}
    function to_sexpable(_aYW_){return _aYW_}
    var
     _anX_=Stable$5[1],
     include$145=
      caml_call1
       (caml_call1(Stable[1][1],[0,_anX_[10],_anX_[11]]),
        [0,to_sexpable,ensure]),
     t_of_sexp$106=include$145[1],
     sexp_of_t$119=include$145[2];
    function to_binable$5(_aYV_){return _aYV_}
    var
     _anY_=Stable$5[1],
     include$146=
      caml_call1
       (caml_call1
         (Stable$0[1][1],[0,_anY_[5],_anY_[1],_anY_[2],_anY_[3],_anY_[4]]),
        [0,to_binable$5,ensure]),
     bin_size_t$86=include$146[1],
     bin_write_t$87=include$146[2],
     bin_read_t$171=include$146[3],
     bin_read_t$172=include$146[4],
     bin_shape_t$136=include$146[5],
     bin_writer_t$112=include$146[6],
     bin_reader_t$112=include$146[7],
     bin_t$112=include$146[8],
     include$147=caml_call2(_hd_[1][1],compare$101,sexp_of_t$119),
     comparator$32=include$147[1],
     _anZ_=
      caml_call1
       (Stable$2[1][1],
        [0,
         bin_size_t$86,
         bin_write_t$87,
         bin_read_t$171,
         bin_read_t$172,
         bin_shape_t$136,
         bin_writer_t$112,
         bin_reader_t$112,
         bin_t$112,
         compare$101,
         t_of_sexp$106,
         sexp_of_t$119,
         comparator$32]),
     Map$32=_anZ_[1],
     Set$32=_anZ_[2];
    function of_int$6(i){return ensure(i)}
    function to_int$8(_aYU_){return _aYU_}
    function of_string$31(string)
     {return ensure(caml_call1(of_string$5,string))}
    var
     init$5=of_int$6(1),
     _an0_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$269),0,bin_shape_t$136],0],
     _an1_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_pid_ml_52_4),
     group$143=caml_call2(Bin_prot_Shape[6],_an1_,_an0_),
     _an2_=caml_call1(Bin_prot_Shape[2][1],cst_t$270),
     bin_shape_t$137=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$143,_an2_),0),
     bin_writer_t$113=[0,bin_size_t$86,bin_write_t$87],
     bin_reader_t$113=[0,bin_read_t$171,bin_read_t$172],
     bin_t$113=[0,bin_shape_t$137,bin_writer_t$113,bin_reader_t$113];
    function hash$56(x){return caml_call1(_C_,x)}
    var
     include$148=
      _AU_
       ([0,
         bin_size_t$86,
         bin_write_t$87,
         bin_read_t$171,
         bin_read_t$172,
         bin_shape_t$137,
         bin_writer_t$113,
         bin_reader_t$113,
         bin_t$113,
         compare$101,
         hash_fold_t,
         hash$56,
         t_of_sexp$106,
         sexp_of_t$119,
         comparator$32,
         of_string$31,
         to_string$6,
         module_name$13]),
     _aoc_=include$148[12],
     _an3_=include$148[1],
     _an4_=include$148[2],
     _an5_=include$148[3],
     _an6_=include$148[4],
     _an7_=include$148[5],
     _an8_=include$148[6],
     _an9_=include$148[7],
     _an__=include$148[8],
     _an$_=include$148[9],
     _aoa_=include$148[10],
     _aob_=include$148[11],
     _aod_=include$148[13],
     _aoe_=include$148[14],
     _aof_=include$148[15],
     _aog_=include$148[16],
     _aoh_=include$148[17],
     _aoi_=include$148[18],
     _aoj_=include$148[19],
     _aok_=include$148[20],
     _aol_=include$148[21],
     _aom_=include$148[22],
     _aon_=include$148[23],
     _aoo_=include$148[24],
     _aop_=include$148[25],
     _aoq_=include$148[26],
     _aor_=include$148[27],
     _aos_=include$148[28],
     _aot_=include$148[29],
     _aou_=include$148[30],
     _aov_=include$148[31],
     _aow_=include$148[32],
     _aox_=include$148[33],
     _aoy_=include$148[34],
     _aoz_=include$148[35],
     _aoA_=include$148[36],
     _aoB_=include$148[37],
     _aoC_=include$148[38],
     _aoD_=include$148[39],
     _aoE_=include$148[40],
     _aoF_=include$148[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$433);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Pid$0);
    var
     Core_Pid=
      [0,
       _an3_,
       _an4_,
       _an5_,
       _an6_,
       _an7_,
       _an8_,
       _an9_,
       _an__,
       _an$_,
       _aoa_,
       _aob_,
       _aoc_,
       _aod_,
       _aoe_,
       _aof_,
       _aog_,
       _aoh_,
       _aoi_,
       _aoj_,
       _aok_,
       _aol_,
       _aom_,
       _aon_,
       _aoo_,
       _aop_,
       _aoq_,
       _aor_,
       _aos_,
       _aot_,
       _aou_,
       _aov_,
       _aow_,
       _aox_,
       _aoy_,
       _aoz_,
       _aoA_,
       _aoB_,
       _aoC_,
       _aoD_,
       _aoE_,
       _aoF_,
       of_int$6,
       to_int$8,
       init$5,
       [0,
        [0,
         bin_size_t$86,
         bin_write_t$87,
         bin_read_t$171,
         bin_read_t$172,
         bin_shape_t$136,
         bin_writer_t$112,
         bin_reader_t$112,
         bin_t$112,
         compare$101,
         t_of_sexp$106,
         sexp_of_t$119,
         comparator$32,
         Map$32,
         Set$32]]];
    caml_register_global(5425,Core_Pid,"Core__Pid");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Command_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$434);
    caml_call1(Expect_test_collector[5][1],cst_core_src_command_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$435,cst$213);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$436);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Command_intf$0);
    var Core_Command_intf=[0];
    caml_register_global(5426,Core_Command_intf,"Core__Command_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Fdeque);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$437);
    caml_call1(Expect_test_collector[5][1],cst_core_src_fdeque_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$438,cst$214);
    var Empty=[248,cst_Core_Fdeque_Empty,caml_fresh_oo_id(0)];
    function _aoG_(param)
     {if(param === Empty)return _aoH_;throw [0,Assert_failure,_aoI_]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Empty,_aoG_);
    function length$18(t){return t[3]}
    function is_empty$13(t){return caml_call2(_Nq_,t[3],0)}
    function invariant$14(f,t)
     {var n_front=caml_call1(length$0,t[1]),n_back=caml_call1(length$0,t[2]);
      if(caml_call2(_Nq_,t[3],n_front + n_back | 0))
       {if(! caml_call2(_Ns_,t[3],2))
         {var switch$0=0;
          if(! caml_call2(_Nt_,n_front,0) || ! caml_call2(_Nt_,n_back,0))
           switch$0 = 1;
          if(switch$0)throw [0,Assert_failure,_aoJ_]}
        caml_call2(_pH_,t[1],f);
        return caml_call2(_pH_,t[2],f)}
      throw [0,Assert_failure,_aoK_]}
    function make$0(length,front,back)
     {if(front)
       {var switch$0=0;
        if(front[2])
         {if(! back)
           {var
             match=caml_call2(_qq_,front,length / 2 | 0),
             rev_back=match[2],
             front$0=match[1];
            return [0,front$0,caml_call1(parts,rev_back),length]}
          switch$0 = 1}
        else
         if(back)switch$0 = 1}
      else
       if(back && back[2])
        {var
          match$0=caml_call2(_qq_,back,length / 2 | 0),
          rev_front=match$0[2],
          back$0=match$0[1];
         return [0,caml_call1(parts,rev_front),back$0,length]}
      return [0,front,back,length]}
    function enqueue_front(t,x){return make$0(t[3] + 1 | 0,[0,x,t[1]],t[2])}
    function enqueue(t,x){return make$0(t[3] + 1 | 0,t[1],[0,x,t[2]])}
    function raise_front_invariant(param)
     {return caml_call1
              (_nX_,
               caml_call1(Sexplib0_Sexp_conv[7],cst_BUG_Fdeque_front_0_back_2))}
    function raise_back_invariant(param)
     {return caml_call1
              (_nX_,
               caml_call1(Sexplib0_Sexp_conv[7],cst_BUG_Fdeque_back_0_front_2))}
    function top_exn(t)
     {var _aYR_=t[1];
      if(_aYR_){var x=_aYR_[1];return x}
      var _aYS_=t[2];
      if(_aYS_)
       {var _aYT_=_aYS_[1];return _aYS_[2]?raise_front_invariant(0):_aYT_}
      throw Empty}
    function peek_back_exn(t)
     {var _aYO_=t[2];
      if(_aYO_){var x=_aYO_[1];return x}
      var _aYP_=t[1];
      if(_aYP_)
       {var _aYQ_=_aYP_[1];return _aYP_[2]?raise_back_invariant(0):_aYQ_}
      throw Empty}
    function discard_exn(t)
     {var _aYM_=t[1];
      if(_aYM_){var xs=_aYM_[2];return make$0(t[3] - 1 | 0,xs,t[2])}
      var _aYN_=t[2];
      if(_aYN_)return _aYN_[2]?raise_front_invariant(0):acc;
      throw Empty}
    function drop_back_exn(t)
     {var _aYK_=t[2];
      if(_aYK_){var xs=_aYK_[2];return make$0(t[3] - 1 | 0,t[1],xs)}
      var _aYL_=t[1];
      if(_aYL_)return _aYL_[2]?raise_back_invariant(0):acc;
      throw Empty}
    function dequeue_exn(t)
     {var _aYJ_=discard_exn(t);return [0,top_exn(t),_aYJ_]}
    function dequeue_back_exn(t)
     {var _aYI_=drop_back_exn(t);return [0,peek_back_exn(t),_aYI_]}
    function optional(f,t)
     {try
       {var x=caml_call1(f,t)}
      catch(_aYH_)
       {_aYH_ = caml_wrap_exception(_aYH_);
        if(_aYH_ === Empty)return 0;
        throw _aYH_}
      return [0,x]}
    function top(t){return optional(top_exn,t)}
    function peek_back(t){return optional(peek_back_exn,t)}
    function drop_front(t){return optional(discard_exn,t)}
    function drop_back(t){return optional(drop_back_exn,t)}
    function dequeue(t){return optional(dequeue_exn,t)}
    function dequeue_back(t){return optional(dequeue_back_exn,t)}
    function enqueue$0(t,side,x)
     {return 109975721 <= side?enqueue_front(t,x):enqueue(t,x)}
    function peek(t,side){return 109975721 <= side?top(t):peek_back(t)}
    function peek_exn(t,side)
     {return 109975721 <= side?top_exn(t):peek_back_exn(t)}
    function drop(t,side){return 109975721 <= side?drop_front(t):drop_back(t)}
    function drop_exn(t,side)
     {return 109975721 <= side?discard_exn(t):drop_back_exn(t)}
    function dequeue$0(t,side)
     {return 109975721 <= side?dequeue(t):dequeue_back(t)}
    function dequeue_exn$0(t,side)
     {return 109975721 <= side?dequeue_exn(t):dequeue_back_exn(t)}
    function rev$0(t){return [0,t[2],t[1],t[3]]}
    function to_list$19(t){return caml_call2(_p6_,t[1],t[2])}
    function to_array$6(t){return caml_call1(of_list,to_list$19(t))}
    function to_sequence$9(t)
     {var _aYG_=caml_call1(_j8_,t[2]);
      return caml_call2(_ju_,caml_call1(_j8_,t[1]),_aYG_)}
    function sum$6(M)
     {return function(t,f)
       {var _aYE_=caml_call3(_pN_,M,t[2],f),_aYF_=caml_call3(_pN_,M,t[1],f);
        return caml_call2(M[2],_aYF_,_aYE_)}}
    function count$10(t,f)
     {var _aYD_=caml_call2(_rk_,t[2],f);
      return caml_call2(_rk_,t[1],f) + _aYD_ | 0}
    function for_all$23(t,f)
     {var _aYC_=caml_call2(_pM_,t[1],f);
      return _aYC_?caml_call2(_pM_,t[2],f):_aYC_}
    function exists$23(t,f)
     {var _aYB_=caml_call2(_pL_,t[1],f);
      return _aYB_?_aYB_:caml_call2(_pL_,t[2],f)}
    function mem$11(t,x,equal)
     {var _aYA_=caml_call3(_pG_,t[1],x,equal);
      return _aYA_?_aYA_:caml_call3(_pG_,t[2],x,equal)}
    function iter$30(t,f)
     {caml_call2(_pH_,t[1],f);return caml_call2(_pH_,t[2],f)}
    function fold$25(t,init,f)
     {var init$0=caml_call3(_pI_,t[1],init,f);
      return caml_call3(_pI_,t[2],init$0,f)}
    function fold_result$5(t,init,f){return caml_call4(_ih_,fold$25,init,f,t)}
    function fold_until$9(t,init,f)
     {var _aYy_=caml_call3(_ii_,fold$25,init,f);
      return function(_aYz_){return caml_call2(_aYy_,_aYz_,t)}}
    function find$13(t,f)
     {var some=caml_call2(_pO_,t[1],f);
      return some?some:caml_call2(_pO_,t[2],f)}
    function find_map$5(t,f)
     {var some=caml_call2(_pP_,t[1],f);
      return some?some:caml_call2(_pP_,t[2],f)}
    function max_elt$10(t,compare)
     {var
       match=caml_call2(_pT_,t[1],compare),
       match$0=caml_call2(_pT_,t[2],compare);
      if(match)
       {if(match$0)
         {var y=match$0[1],x=match[1];
          return caml_call2(_No_,caml_call2(compare,x,y),0)?match:match$0}
        var opt=match}
      else
       var opt=match$0;
      return opt}
    function min_elt$10(t,compare)
     {var
       match=caml_call2(_pS_,t[1],compare),
       match$0=caml_call2(_pS_,t[2],compare);
      if(match)
       {if(match$0)
         {var y=match$0[1],x=match[1];
          return caml_call2(_Np_,caml_call2(compare,x,y),0)?match:match$0}
        var opt=match}
      else
       var opt=match$0;
      return opt}
    function Make_container(F)
     {var to_list=F[1];
      function mem(t,x,equal)
       {return caml_call3(_pG_,caml_call1(to_list,t),x,equal)}
      function iter(t,f){return caml_call2(_pH_,caml_call1(to_list,t),f)}
      function fold(t,init,f)
       {return caml_call3(_pI_,caml_call1(to_list,t),init,f)}
      function exists(t,f){return caml_call2(_pL_,caml_call1(to_list,t),f)}
      function for_all(t,f){return caml_call2(_pM_,caml_call1(to_list,t),f)}
      function count(t,f){return caml_call2(_rk_,caml_call1(to_list,t),f)}
      function sum(m,t,f){return caml_call3(_pN_,m,caml_call1(to_list,t),f)}
      function find(t,f){return caml_call2(_pO_,caml_call1(to_list,t),f)}
      function find_map(t,f){return caml_call2(_pP_,caml_call1(to_list,t),f)}
      function to_array(t){return caml_call1(_pR_,caml_call1(to_list,t))}
      function min_elt(t,compare)
       {return caml_call2(_pS_,caml_call1(to_list,t),compare)}
      function max_elt(t,compare)
       {return caml_call2(_pT_,caml_call1(to_list,t),compare)}
      function fold_result(t,init,f){return caml_call4(_ih_,fold,init,f,t)}
      function fold_until(t,init,f)
       {var _aYw_=caml_call3(_ii_,fold,init,f);
        return function(_aYx_){return caml_call2(_aYw_,_aYx_,t)}}
      return [0,
              to_list,
              is_empty$13,
              length$18,
              mem,
              iter,
              fold,
              exists,
              for_all,
              count,
              sum,
              find,
              find_map,
              to_array,
              min_elt,
              max_elt,
              fold_result,
              fold_until]}
    function of_list$9(list){return make$0(caml_call1(length$0,list),list,0)}
    function to_list$20(t)
     {var _aYv_=caml_call1(parts,t[2]);return caml_call2(_Oq_,t[1],_aYv_)}
    function to_sequence$10(t)
     {var _aYu_=caml_call1(_j8_,caml_call1(parts,t[2]));
      return caml_call2(_ju_,caml_call1(_j8_,t[1]),_aYu_)}
    function of_sequence$8(sequence)
     {var
       match=
        caml_call3
         (_iF_,
          sequence,
          _aoL_,
          function(param,a)
           {var acc=param[2],length=param[1];
            return [0,length + 1 | 0,[0,a,acc]]}),
       back=match[2],
       length=match[1];
      return make$0(length,0,back)}
    var
     include$149=Make_container([0,to_list$20]),
     to_list$21=include$149[1],
     is_empty$14=include$149[2],
     length$19=include$149[3],
     mem$12=include$149[4],
     iter$31=include$149[5],
     fold$26=include$149[6],
     exists$24=include$149[7],
     for_all$24=include$149[8],
     count$11=include$149[9],
     sum$7=include$149[10],
     find$14=include$149[11],
     find_map$6=include$149[12],
     to_array$7=include$149[13],
     min_elt$11=include$149[14],
     max_elt$11=include$149[15],
     fold_result$6=include$149[16],
     fold_until$10=include$149[17];
    function to_list$22(t)
     {var _aYt_=caml_call1(parts,t[1]);return caml_call2(_Oq_,t[2],_aYt_)}
    function of_list$10(list){return make$0(caml_call1(length$0,list),0,list)}
    function to_sequence$11(t)
     {var _aYs_=caml_call1(_j8_,caml_call1(parts,t[1]));
      return caml_call2(_ju_,caml_call1(_j8_,t[2]),_aYs_)}
    function of_sequence$9(sequence)
     {var
       match=
        caml_call3
         (_iF_,
          sequence,
          _aoM_,
          function(param,a)
           {var acc=param[2],length=param[1];
            return [0,length + 1 | 0,[0,a,acc]]}),
       front=match[2],
       length=match[1];
      return make$0(length,front,0)}
    var
     include$150=Make_container([0,to_list$22]),
     to_list$23=include$150[1],
     is_empty$15=include$150[2],
     length$20=include$150[3],
     mem$13=include$150[4],
     iter$32=include$150[5],
     fold$27=include$150[6],
     exists$25=include$150[7],
     for_all$25=include$150[8],
     count$12=include$150[9],
     sum$8=include$150[10],
     find$15=include$150[11],
     find_map$7=include$150[12],
     to_array$8=include$150[13],
     min_elt$12=include$150[14],
     max_elt$12=include$150[15],
     fold_result$7=include$150[16],
     fold_until$11=include$150[17];
    function singleton$11(x){return of_list$9([0,x,0])}
    function bind$2(t,f)
     {return caml_call3
              (fold$26,
               t,
               acc,
               function(t,elt)
                {return caml_call3(fold$26,caml_call1(f,elt),t,enqueue)})}
    var
     map$38=
      [0,
       -198771759,
       function(t,f)
        {var _aYq_=t[3],_aYr_=caml_call2(_qF_,t[2],f);
         return [0,caml_call2(_qF_,t[1],f),_aYr_,_aYq_]}],
     include$151=caml_call1(Base_Monad[1],[0,bind$2,singleton$11,map$38]),
     _aoN_=include$151[1],
     _aoO_=include$151[2],
     _aoP_=include$151[3],
     _aoQ_=include$151[4],
     _aoR_=include$151[5],
     _aoS_=include$151[6],
     _aoT_=include$151[7],
     _aoU_=include$151[8],
     _aoV_=include$151[9],
     _aoW_=include$151[10],
     _aoX_=include$151[11];
    function compare$102(cmp,t1,t2)
     {var _aYp_=caml_call1(to_list$21,t2);
      return caml_call3(_pE_,cmp,caml_call1(to_list$21,t1),_aYp_)}
    function equal$43(eq,t1,t2)
     {var _aYo_=caml_call1(to_list$21,t2);
      return caml_call3(_rM_,eq,caml_call1(to_list$21,t1),_aYo_)}
    function hash_fold_t$42(hash_fold_a,state,t)
     {return caml_call3
              (fold$26,
               t,
               caml_call2(hash_fold_t$19,state,caml_call1(length$19,t)),
               hash_fold_a)}
    function sexp_of_t$120(sexp_of_elt,t)
     {var x_001=caml_call1(to_list$21,t);
      return caml_call2(sexp_of_list,sexp_of_elt,x_001)}
    function t_of_sexp$107(elt_of_sexp,sexp)
     {return of_list$9(caml_call2(list_of_sexp,elt_of_sexp,sexp))}
    var
     _aoY_=caml_call1(Bin_prot_Shape[3][1],cst_a$82),
     _aoZ_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_fdeque_ml_314_21),
     _ao0_=caml_call2(Bin_prot_Shape[15],_aoZ_,_aoY_),
     _ao1_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$83),0],
     _ao2_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$13),_ao1_,_ao0_],0],
     _ao3_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_fdeque_ml_314_8),
     group$144=caml_call2(Bin_prot_Shape[6],_ao3_,_ao2_);
    function bin_shape_el$2(a)
     {var _aYn_=caml_call1(Bin_prot_Shape[2][1],cst_el$14);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$144,_aYn_),[0,a,0])}
    function bin_size_el$2(size_of_a){return size_of_a}
    function bin_write_el$2(write_a){return write_a}
    function bin_read_el$2(of_a){return of_a}
    var
     caller_identity$2=
      caml_call1(Bin_prot_Shape[5][1],cst_83f96982_4992_11e6_919d_fb);
    function iter$33(t,f){return caml_call2(_pH_,caml_call1(to_list$21,t),f)}
    function init$6(len,next)
     {var acc$0=acc,n=0;
      for(;;)
       {if(caml_call2(_Nq_,len,n))return acc$0;
        if(caml_call2(_Nq_,n,caml_call1(length$19,acc$0)))
         {var
           x=caml_call1(next,0),
           n$0=n + 1 | 0,
           acc$1=enqueue(acc$0,x),
           acc$0=acc$1,
           n=n$0;
          continue}
        throw [0,Assert_failure,_ao4_]}}
    var
     include$152=
      caml_call1
       (Bin_prot_Utils[16],
        [0,
         caller_identity$2,
         module_name$14,
         length$19,
         iter$33,
         init$6,
         bin_size_el$2,
         bin_write_el$2,
         bin_read_el$2,
         bin_shape_el$2]),
     bin_shape_t$138=include$152[1],
     bin_size_t$87=include$152[2],
     bin_write_t$88=include$152[3],
     bin_read_t$173=include$152[4],
     bin_read_t$174=include$152[5],
     bin_writer_t$114=include$152[6],
     bin_reader_t$114=include$152[7],
     bin_t$114=include$152[8];
    function build(front,back)
     {var
       _aYl_=caml_call1(length$0,back),
       length=caml_call1(length$0,front) + _aYl_ | 0,
       t=[0,front,back,length];
      invariant$14(function(_aYm_){return 0},t);
      return t}
    var Private$4=[0,build];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$439);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Fdeque$0);
    var
     Stable$9=
      [0,
       [0,
        bin_shape_t$138,
        bin_size_t$87,
        bin_write_t$88,
        bin_read_t$173,
        bin_read_t$174,
        bin_writer_t$114,
        bin_reader_t$114,
        bin_t$114,
        compare$102,
        t_of_sexp$107,
        sexp_of_t$120,
        _aoS_]],
     Front_to_back=
      [0,
       of_list$9,
       mem$12,
       length$19,
       is_empty$14,
       iter$31,
       fold$26,
       fold_result$6,
       fold_until$10,
       exists$24,
       for_all$24,
       count$11,
       sum$7,
       find$14,
       find_map$6,
       to_list$21,
       to_array$7,
       min_elt$11,
       max_elt$11,
       to_sequence$10,
       of_sequence$8],
     include$153=
      [0,
       bin_shape_t$138,
       bin_size_t$87,
       bin_write_t$88,
       bin_read_t$173,
       bin_read_t$174,
       bin_writer_t$114,
       bin_reader_t$114,
       bin_t$114,
       compare$102,
       equal$43,
       hash_fold_t$42,
       t_of_sexp$107,
       sexp_of_t$120,
       mem$12,
       length$19,
       is_empty$14,
       iter$31,
       fold$26,
       fold_result$6,
       fold_until$10,
       exists$24,
       for_all$24,
       count$11,
       sum$7,
       find$14,
       find_map$6,
       to_list$21,
       to_array$7,
       min_elt$11,
       max_elt$11,
       invariant$14,
       _aoN_,
       _aoO_,
       _aoP_,
       _aoQ_,
       _aoR_,
       _aoS_,
       _aoT_,
       _aoU_,
       _aoV_,
       _aoW_,
       _aoX_,
       [0,
        mem$11,
        length$18,
        is_empty$13,
        iter$30,
        fold$25,
        fold_result$5,
        fold_until$9,
        exists$23,
        for_all$23,
        count$10,
        sum$6,
        find$13,
        find_map$5,
        to_list$19,
        to_array$6,
        min_elt$10,
        max_elt$10,
        to_sequence$9],
       Front_to_back,
       [0,
        of_list$10,
        mem$13,
        length$20,
        is_empty$15,
        iter$32,
        fold$27,
        fold_result$7,
        fold_until$11,
        exists$25,
        for_all$25,
        count$12,
        sum$8,
        find$15,
        find_map$7,
        to_list$23,
        to_array$8,
        min_elt$12,
        max_elt$12,
        to_sequence$11,
        of_sequence$9],
       acc,
       singleton$11,
       of_list$9,
       rev$0,
       enqueue$0,
       enqueue_front,
       enqueue,
       peek,
       peek_exn,
       top,
       top_exn,
       peek_back,
       peek_back_exn,
       drop,
       drop_exn,
       drop_front,
       discard_exn,
       drop_back,
       drop_back_exn,
       dequeue$0,
       dequeue_exn$0,
       dequeue,
       dequeue_exn,
       dequeue_back,
       dequeue_back_exn,
       Stable$9,
       Private$4];
    caml_register_global(5428,include$153,"Core__Fdeque");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Fqueue);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$440);
    caml_call1(Expect_test_collector[5][1],cst_core_src_fqueue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$441,cst$215);
    var _ao5_=Front_to_back[19],_ao6_=Front_to_back[20];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$442);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Fqueue$0);
    var
     Core_Fqueue=
      [0,
       bin_shape_t$138,
       bin_size_t$87,
       bin_write_t$88,
       bin_read_t$173,
       bin_read_t$174,
       bin_writer_t$114,
       bin_reader_t$114,
       bin_t$114,
       compare$102,
       equal$43,
       hash_fold_t$42,
       t_of_sexp$107,
       sexp_of_t$120,
       mem$12,
       iter$31,
       fold$26,
       fold_result$6,
       fold_until$10,
       exists$24,
       for_all$24,
       count$11,
       sum$7,
       find$14,
       find_map$6,
       to_array$7,
       min_elt$11,
       max_elt$11,
       invariant$14,
       _aoN_,
       _aoO_,
       _aoP_,
       _aoQ_,
       _aoR_,
       _aoS_,
       _aoT_,
       _aoU_,
       _aoV_,
       _aoW_,
       _aoX_,
       acc,
       enqueue,
       top_exn,
       top_exn,
       top,
       top,
       dequeue_exn,
       dequeue,
       discard_exn,
       discard_exn,
       to_list$21,
       of_list$9,
       _ao5_,
       _ao6_,
       length$19,
       is_empty$14,
       singleton$11,
       Stable$9];
    caml_register_global(5429,Core_Fqueue,"Core__Fqueue");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Set_once);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$443);
    caml_call1(Expect_test_collector[5][1],cst_core_src_set_once_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$444,cst$216);
    var
     _ao7_=caml_call1(Bin_prot_Shape[3][1],cst_a$84),
     _ao8_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_set_once_ml_14_18),
     _ao9_=
      caml_call1
       (_Zs_,caml_call1(_ZN_,caml_call2(Bin_prot_Shape[15],_ao8_,_ao7_))),
     _ao__=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$85),0],
     _ao$_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$271),_ao__,_ao9_],0],
     _apa_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_set_once_ml_14_6),
     group$145=caml_call2(Bin_prot_Shape[6],_apa_,_ao$_);
    function bin_shape_t$139(a)
     {var _aYk_=caml_call1(Bin_prot_Shape[2][1],cst_t$272);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$145,_aYk_),[0,a,0])}
    function bin_size_t$88(size_of_a,v)
     {return caml_call2(_XD_,caml_call1(_XG_,size_of_a),v)}
    function bin_write_t$89(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_Zu_,caml_call1(_ZP_,write_a)),buf,pos,v)}
    function bin_read_t$175(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1(_Zx_,caml_call1(_ZR_,of_a)),buf,pos_ref,vint)}
    function bin_read_t$176(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_Zw_,caml_call1(_ZR_,of_a)),buf,pos_ref)}
    function t_of_sexp$108(of_a_001,x_003)
     {return caml_call2(_$u_,caml_call1(_$x_,of_a_001),x_003)}
    function sexp_of_t$121(of_a_004,x_005)
     {return caml_call2(_$v_,caml_call1(_$y_,of_a_004),x_005)}
    function of_format(v1){return [0,v1[1],_apb_]}
    function to_format(t){return [0,t[1]]}
    var
     _apc_=
      caml_call1
       (caml_call1
         (_fq_,
          [0,
           bin_shape_t$139,
           bin_size_t$88,
           bin_write_t$89,
           bin_read_t$176,
           bin_read_t$175]),
        [0,to_format,of_format]),
     bin_shape_t$140=_apc_[1],
     bin_size_t$89=_apc_[2],
     bin_write_t$90=_apc_[3],
     bin_read_t$177=_apc_[4],
     bin_read_t$178=_apc_[5],
     bin_writer_t$115=_apc_[6],
     bin_reader_t$115=_apc_[7],
     bin_t$115=_apc_[8],
     include$154=
      caml_call1
       (caml_call1(Base_Sexpable[2],[0,t_of_sexp$108,sexp_of_t$121]),
        [0,to_format,of_format]),
     t_of_sexp$109=include$154[1],
     sexp_of_t$122=include$154[2];
    function sexp_of_t$123(sexp_of_a,param)
     {var value=param[1],set_at=param[2];
      if(value)
       {var
         value$0=value[1],
         _aYi_=caml_call1(_my_,set_at),
         _aYj_=
          [0,[1,[0,_apd_,[0,caml_call1(Sexplib0_Sexp_conv[7],_aYi_),0]]],0];
        return [1,[0,[1,[0,_ape_,[0,caml_call1(sexp_of_a,value$0),0]]],_aYj_]]}
      return caml_call1(Sexplib0_Sexp_conv[7],cst_unset)}
    function invariant$15(invariant_a,t)
     {var _aYh_=t[1];
      if(_aYh_){var a=_aYh_[1];return caml_call1(invariant_a,a)}
      return 0}
    function create$35(param){return [0,0,_apf_]}
    function set_internal(t,here,value){t[1] = [0,value];t[2] = here;return 0}
    function set_if_none(t,here,value)
     {var _aYg_=caml_call1(_xZ_,t[1]);
      return _aYg_?set_internal(t,here,value):_aYg_}
    function set$12(t,here,value)
     {if(caml_call1(_xZ_,t[1])){set_internal(t,here,value);return _apg_}
      var
       _aYe_=[0,[1,[0,_aph_,[0,caml_call1(_mz_,t[2]),0]]],0],
       _aYf_=[0,[1,[0,_api_,[0,caml_call1(_mz_,here),0]]],_aYe_];
      return caml_call1
              (_oC_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_Set_once_set_exn_already_s),
                 _aYf_]])}
    function set_exn(t,here,value)
     {return caml_call1(_oy_,set$12(t,here,value))}
    function get$5(t){return t[1]}
    function get_exn(t,here)
     {var _aYc_=t[1];
      if(_aYc_){var a=_aYc_[1];return a}
      var _aYd_=[0,[1,[0,_apj_,[0,caml_call1(_mz_,here),0]]],0];
      return caml_call1
              (_a5_,
               [1,
                [0,
                 caml_call1(Sexplib0_Sexp_conv[7],cst_Set_once_get_exn_unset),
                 _aYd_]])}
    function is_none$1(t){return caml_call1(_xZ_,t[1])}
    function is_some$0(t){return caml_call1(_x0_,t[1])}
    function iter$34(t,f){return caml_call2(_xK_,t[1],f)}
    function unsafe_value$0(t){return get_exn(t,_apk_)}
    var
     Optional_syntax$3=[0,is_none$1,unsafe_value$0],
     Optional_syntax$4=[0,Optional_syntax$3];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$445);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Set_once$0);
    var
     Core_Set_once=
      [0,
       sexp_of_t$123,
       invariant$15,
       create$35,
       set$12,
       set_exn,
       set_if_none,
       get$5,
       get_exn,
       is_none$1,
       is_some$0,
       iter$34,
       Optional_syntax$4,
       [0,
        bin_shape_t$140,
        bin_size_t$89,
        bin_write_t$90,
        bin_read_t$177,
        bin_read_t$178,
        bin_writer_t$115,
        bin_reader_t$115,
        bin_t$115,
        t_of_sexp$109,
        sexp_of_t$122],
       [0,
        [0,
         bin_shape_t$140,
         bin_size_t$89,
         bin_write_t$90,
         bin_read_t$177,
         bin_read_t$178,
         bin_writer_t$115,
         bin_reader_t$115,
         bin_t$115,
         t_of_sexp$109,
         sexp_of_t$122]]];
    caml_register_global(5430,Core_Set_once,"Core__Set_once");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Command);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$446);
    caml_call1(Expect_test_collector[5][1],cst_core_src_command_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$447,cst$217);
    var Stable$10=[0],_apl_=Ppx_inline_test_lib_Runtime[7],switch$0=0;
    if(typeof _apl_ !== "number" && 545942154 <= _apl_[2])
     {var _apm_=1;switch$0 = 1}
    if(! switch$0)var _apm_=0;
    var Exit_called=[248,cst_Core_Command_Exit_called,caml_fresh_oo_id(0)];
    function _apn_(param)
     {if(param[1] === Exit_called)
       {var
         status_002=param[2],
         arg_003=caml_call1(sexp_of_int,status_002),
         bnds_001=[0,[1,[0,_apo_,[0,arg_003,0]]],0];
        return [1,[0,_app_,bnds_001]]}
      throw [0,Assert_failure,_apq_]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Exit_called,_apn_);
    function exit(status)
     {if(_apm_)throw [0,Exit_called,status];return caml_call1(_Gr_,status)}
    var to_string$37=Base_Exn[10];
    function handle_uncaught_and_exit(f)
     {if(_apm_)
       try
        {var _aYb_=caml_call1(f,0);return _aYb_}
       catch(exn)
        {exn = caml_wrap_exception(exn);
         if(exn[1] === Exit_called && 0 === exn[2])
          return caml_call2(_Pq_,0,caml_call1(sexp_of_exn,exn));
         throw exn}
      return caml_call1(Base_Exn[15],f)}
    function unparagraphs(xs){return caml_call2(_Bq_,_aps_,xs)}
    var
     Failed_to_parse_command_line=
      [248,cst_Core_Command_Failed_to_par,caml_fresh_oo_id(0)];
    function die(fmt)
     {return caml_call2
              (_fz_,
               function(msg,param){throw [0,Failed_to_parse_command_line,msg]},
               fmt)}
    var help_screen_compare$0=_amZ_[3];
    function key_create(name){return caml_call2(Id$0[3],name,_Oj_)}
    var multi_add=Multi[4],set_with_default=With_default[2],Auto_complete=[0];
    function run_and_exit(t,env,part)
     {caml_call2
       (_xK_,
        t,
        function(completions)
         {return caml_call2(_pH_,caml_call2(completions,env,part),_FE_)});
      return exit(0)}
    function extra_doc(r){return r[4]}
    function parse$1(t,s)
     {return caml_call1(_h9_,function(param){return caml_call1(t[1],s)})}
    function create$36(complete,key,of_string)
     {return [0,of_string,complete,key,caml_call1(_La_,0)]}
    function map$39(key,t,f)
     {var _aX$_=t[4],_aYa_=t[2];
      return [0,
              function(s){return caml_call1(f,caml_call1(t[1],s))},
              _aYa_,
              key,
              _aX$_]}
    function of_lazy(key,t)
     {function parse(str){return caml_call1(force(t)[1],str)}
      function complete(env,part)
       {var _aX__=force(t)[2];
        if(_aX__){var complete=_aX__[1];return caml_call2(complete,env,part)}
        return 0}
      var extra_doc$0=caml_call2(_K1_,t,extra_doc);
      return [0,parse,[0,complete],key,extra_doc$0]}
    var
     string$2=create$36(0,0,function(_aX9_){return _aX9_}),
     int$3=create$36(0,0,of_string$5),
     char$4=create$36(0,0,_EP_),
     float$2=create$36(0,0,_Hw_),
     date=create$36(0,0,of_string$19),
     percent=create$36(0,0,of_string$20),
     host_and_port=create$36(0,0,of_string$30),
     sexp=create$36(0,0,of_string);
    function sexp_conv(complete,of_sexp)
     {return create$36
              (complete,
               0,
               function(s){return caml_call1(of_sexp,caml_call1(of_string,s))})}
    function of_alist_exn$6
     (accept_unique_prefixes$0,
      opt,
      list_values_in_help$0,
      auto_complete,
      key,
      alist)
     {if(opt)var sth$1=opt[1],case_sensitive=sth$1;else var case_sensitive=1;
      if(accept_unique_prefixes$0)
       var sth=accept_unique_prefixes$0[1],accept_unique_prefixes=sth;
      else
       var accept_unique_prefixes=1;
      if(list_values_in_help$0)
       var sth$0=list_values_in_help$0[1],list_values_in_help=sth$0;
      else
       var list_values_in_help=1;
      function make(cmp)
       {var match=caml_call2(of_alist$2,[0,cmp[1]],alist);
        if(17724 <= match[1])
         var map=match[2],_aX8_=map;
        else
         var
          _aX5_=function(param){if(param && param[2])return 1;return 0},
          _aX6_=
           caml_call2
            (_qF_,alist,function(param){var k=param[1];return [0,k,k]}),
          x_004=
           caml_call1
            (data$1,
             caml_call2
              (filter$5,caml_call2(of_alist_multi$2,[0,cmp[1]],_aX6_),_aX5_)),
          _aX7_=
           [0,
            [1,
             [0,
              _apt_,
              [0,
               caml_call2
                (sexp_of_list,caml_call1(sexp_of_list,sexp_of_t$41),x_004),
               0]]],
            0],
          _aX8_=
           caml_call1
            (_nX_,
             [1,
              [0,
               caml_call1
                (Sexplib0_Sexp_conv[7],cst_Command_Spec_Arg_type_of_a),
               _aX7_]]);
        return [0,cmp,_aX8_]}
      var
       match=
        case_sensitive
         ?make([0,comparator$4,_BQ_])
         :make([0,Caseless[40],Caseless[3]]),
       map=match[2],
       S=match[1];
      function complete(univ_map,prefix)
       {if(auto_complete)
         {var complete=auto_complete[1];
          return caml_call2(complete,univ_map,prefix)}
        function _aX4_(param)
         {var name=param[1],match=caml_call2(S[2],name,prefix);
          if(match)
           {var
             suffix=caml_call3(_AZ_,[0,caml_ml_string_length(prefix)],0,name),
             name$0=caml_call2(_Fp_,prefix,suffix);
            return [0,name$0]}
          return 0}
        return caml_call2(_rr_,caml_call2(to_alist$1,0,map),_aX4_)}
      var
       _aX1_=
        [246,
         function(_aX3_)
          {if(list_values_in_help)
            {var values=caml_call2(_Bq_,_apu_,caml_call1(keys$2,map));
             return [0,
                     caml_call2
                      (Stdlib_String[6],cst$218,[0,cst_can_be,[0,values,_apv_]])]}
           return 0}];
      return [0,
              function(arg)
               {var s=caml_call2(find$3,map,arg);
                if(s)
                 var match$1=s;
                else
                 if(accept_unique_prefixes)
                  {var
                    _aX2_=
                     function(param)
                      {var name=param[1];return caml_call2(S[2],name,arg)},
                    match=caml_call2(_qj_,caml_call2(to_alist$1,0,map),_aX2_),
                    switch$0=0;
                   if(match && ! match[2])
                    var match$0=match[1],v=match$0[2],match$1=[0,v];
                   else
                    switch$0 = 1;
                   if(switch$0)var match$1=0}
                 else
                  var match$1=0;
                if(match$1){var v$0=match$1[1];return v$0}
                var
                 valid_arguments_extra=
                  case_sensitive?cst$219:cst_case_insensitive;
                return caml_call4
                        (failwithf$0,
                         _apx_,
                         valid_arguments_extra,
                         caml_call2(_Bq_,_apw_,caml_call1(keys$2,map)),
                         0)},
              [0,complete],
              key,
              _aX1_]}
    function of_map
     (accept_unique_prefixes,
      case_sensitive,
      list_values_in_help,
      auto_complete,
      key,
      map)
     {return of_alist_exn$6
              (accept_unique_prefixes,
               case_sensitive,
               list_values_in_help,
               auto_complete,
               key,
               caml_call2(to_alist$1,0,map))}
    function enumerated
     (accept_unique_prefixes,
      case_sensitive,
      list_values_in_help,
      auto_complete,
      key,
      E)
     {function _aX0_(t){return [0,caml_call1(E[2],t),t]}
      return of_alist_exn$6
              (accept_unique_prefixes,
               case_sensitive,
               list_values_in_help,
               auto_complete,
               key,
               caml_call2(include$25[33][4][3],E[1],_aX0_))}
    function enumerated_sexpable
     (accept_unique_prefixes,
      case_sensitive,
      list_values_in_help,
      auto_complete,
      key,
      E)
     {var all=E[1];
      function to_string(t){return caml_call1(to_string$0,caml_call1(E[2],t))}
      return enumerated
              (accept_unique_prefixes,
               case_sensitive,
               list_values_in_help,
               auto_complete,
               key,
               [0,all,to_string])}
    var bool$3=enumerated(0,0,_apy_,0,0,[0,all$0,to_string$4]);
    function comma_separated(opt,key,_aXS_,_aXR_,t)
     {if(opt)var sth=opt[1],allow_empty=sth;else var allow_empty=0;
      if(_aXS_)
       var sth$0=_aXS_[1],strip_whitespace=sth$0;
      else
       var strip_whitespace=0;
      if(_aXR_)
       var sth$1=_aXR_[1],unique_values=sth$1;
      else
       var unique_values=0;
      var
       strip=
        strip_whitespace
         ?function(str){return caml_call2(_B2_,0,str)}
         :function(_aXZ_){return _aXZ_};
      function _aXT_(complete_elt,env,suffix)
       {var match=caml_call1(parts,caml_call2(_BV_,suffix,44));
        if(match)
         var
          tl=match[2],
          hd=match[1],
          suffix$0=hd,
          prefixes=caml_call1(parts,tl);
        else
         var suffix$0=suffix,prefixes=0;
        if(unique_values)
         var
          _aXW_=caml_call2(_qF_,prefixes,strip),
          seen_already=caml_call1(Set$1[57],_aXW_),
          is_allowed=
           function(choice)
            {return 1 - caml_call2(mem$8,seen_already,strip(choice))};
        else
         var is_allowed=function(param){return 1};
        function _aXX_(choice)
         {var _aXY_=1 - caml_call2(_A0_,choice,44);
          return _aXY_?is_allowed(choice):_aXY_}
        var
         choices=caml_call2(_qj_,caml_call2(complete_elt,env,suffix$0),_aXX_),
         switch$0=0;
        if(choices && ! choices[2])
         {var
           choice=choices[1],
           choices$0=[0,choice,[0,caml_call2(_Fp_,choice,cst$220),0]];
          switch$0 = 1}
        if(! switch$0)var choices$0=choices;
        return caml_call2
                (_qF_,
                 choices$0,
                 function(choice)
                  {return caml_call2
                           (_Bq_,_apz_,caml_call2(_Oq_,prefixes,[0,choice,0]))})}
      var complete=caml_call2(_xy_,t[2],_aXT_);
      function of_string(string)
       {var string$0=strip(string);
        if(caml_call1(_A1_,string$0))
         return allow_empty?0:caml_call1(_Fb_,cst_Command_Spec_Arg_type_comm);
        function _aXU_(str)
         {var _aXV_=strip(str);return caml_call1(t[1],_aXV_)}
        return caml_call2(_qF_,caml_call2(_BV_,string$0,44),_aXU_)}
      return create$36(complete,key,of_string)}
    var
     include$155=
      [0,
       string$2,
       int$3,
       char$4,
       float$2,
       bool$3,
       date,
       percent,
       host_and_port,
       sexp,
       sexp_conv];
    function complete(t)
     {var _aXP_=t[2];
      if(_aXP_){var f=_aXP_[1];return f}
      return function(param,_aXQ_){return 0}}
    function parse$2(t,str){return caml_call2(_oA_,0,parse$1(t,str))}
    var For_testing=[0,complete,parse$2];
    function loop$0(acc,enumerate_012,enumerate_013)
     {var
       acc$0=acc,
       enumerate_012$0=enumerate_012,
       enumerate_013$0=enumerate_013;
      for(;;)
       {if(enumerate_013$0)
         {if(enumerate_012$0)
           {var
             enumerate_011=enumerate_013$0[1],
             enumerate_012$1=enumerate_012$0[2],
             enumerate_010=enumerate_012$0[1],
             acc$1=[0,[0,enumerate_010,enumerate_011],acc$0],
             acc$0=acc$1,
             enumerate_012$0=enumerate_012$1;
            continue}
          var
           enumerate_013$1=enumerate_013$0[2],
           enumerate_012$0=enumerate_008,
           enumerate_013$0=enumerate_013$1;
          continue}
        return caml_call1(Stdlib_List[9],acc$0)}}
    loop$0(0,enumerate_008,enumerate_009);
    var to_help_string$0=_am3_[7];
    function parse$3(action,doc)
     {var match=caml_call2(_BT_,doc,32),switch$0=0;
      switch(action[0])
       {case 2:
         var switch$1=0;
         if(match && caml_string_notequal(match[1][1],cst$221))
          {switch$0 = 1;switch$1 = 1}
         if(! switch$1)var doc$0=doc,arg_doc=_apA_;
         break;
        case 3:
         var switch$2=0;
         if(match && caml_string_notequal(match[1][1],cst$222))
          {switch$0 = 1;switch$2 = 1}
         if(! switch$2)var doc$0=doc,arg_doc=0;
         break;
        default:var doc$0=doc,arg_doc=0}
      if(switch$0)
       var
        match$0=match[1],
        doc$1=match$0[2],
        arg=match$0[1],
        arg_doc$0=[0,arg],
        doc$0=doc$1,
        arg_doc=arg_doc$0;
      return [0,arg_doc,caml_call2(_B2_,0,doc$0)]}
    function concat$0(name,arg_doc)
     {if(arg_doc)
       {var arg_doc$0=arg_doc[1];
        return caml_call2(_Fp_,name,caml_call2(_Fp_,cst$223,arg_doc$0))}
      return name}
    function wrap_if_optional(t,x)
     {var at_least_once=t[6][1];
      return caml_call2(to_help_string$0,[0,at_least_once,1],x)}
    function help(t)
     {var doc=t[5],action=t[4],aliases=t[2],name=t[1];
      if(caml_call2(_BQ_,doc,cst$224))
       {var
         _aXM_=
          caml_call2
           (_qF_,
            aliases,
            function(x){return [0,x,caml_call2(_fx_,_apB_,name)]});
        return [0,[0,name,caml_call2(_B0_,0,doc)],_aXM_]}
      var
       match=parse$3(action,doc),
       doc$0=match[2],
       arg_doc=match[1],
       _aXN_=
        caml_call2
         (_qF_,
          aliases,
          function(x)
           {var _aXO_=caml_call2(_fx_,_apC_,name);
            return [0,wrap_if_optional(t,concat$0(x,arg_doc)),_aXO_]});
      return [0,[0,wrap_if_optional(t,concat$0(name,arg_doc)),doc$0],_aXN_]}
    function align(t)
     {var
       doc=t[5],
       action=t[4],
       aliases=t[2],
       name$0=t[1],
       match=parse$3(action,doc),
       doc$0=match[2],
       arg_doc=match[1],
       flag_name=concat$0(name$0,arg_doc),
       name=caml_call2(to_help_string$0,t[6],flag_name);
      return [0,name,doc$0,aliases]}
    function create$37(flags)
     {var
       _aXJ_=caml_call2(_qF_,flags,function(flag){return [0,flag[1],flag]}),
       match=caml_call1(Map$1[7],_aXJ_);
      if(17724 <= match[1])
       {var
         map=match[2],
         _aXK_=function(x){return caml_call3(failwithf$0,_apD_,x,0)},
         _aXL_=
          function(a_020,b_021){return caml_call2(compare$37,a_020,b_021)};
        caml_call2
         (_xK_,
          caml_call2
           (_rg_,
            caml_call2(_qK_,flags,function(flag){return [0,flag[1],flag[2]]}),
            _aXL_),
          _aXK_);
        return map}
      var flag=match[2];
      return caml_call3(failwithf$0,_apE_,flag,0)}
    function arg_flag(name,arg_type,read,write,num_occurrences)
     {var _aXH_=arg_type[4];
      function update(env,arg)
       {var match=parse$1(arg_type,arg);
        if(0 === match[0])
         {var
           arg$0=match[1],
           env$0=caml_call2(write,env,arg$0),
           match$0=arg_type[3];
          if(match$0)
           {var key=match$0[1];return caml_call3(multi_add,env$0,key,arg$0)}
          return env$0}
        var exn=match[1],_aXI_=caml_call1(to_string$37,exn);
        return caml_call4(die(_apF_),name,arg,_aXI_,0)}
      return [0,[2,update,arg_type[2]],read,num_occurrences,_aXH_]}
    function map_flag(t,f,input)
     {var
       match=caml_call1(t,input),
       extra_doc=match[4],
       num_occurrences=match[3],
       read=match[2],
       action=match[1];
      return [0,
              action,
              function(env){return caml_call1(f,caml_call1(read,env))},
              num_occurrences,
              extra_doc]}
    function write_option(name,key,env,arg)
     {return caml_call3
              (update$4,
               env,
               key,
               function(param){return param?caml_call2(die(_apG_),name,0):arg})}
    function required_value(default$0,arg_type,name,num_occurrences)
     {function _aXG_(param){return _apH_}
      var key=caml_call2(Id$0[3],name,_aXG_);
      function read(env)
       {var match=caml_call2(find$10,env,key);
        if(match){var v=match[1];return v}
        if(default$0){var v$0=default$0[1];return v$0}
        return caml_call2(die(_apI_),name,0)}
      function write(env,arg){return write_option(name,key,env,arg)}
      return arg_flag(name,arg_type,read,write,num_occurrences)}
    function required$0(arg_type,name)
     {return required_value(0,arg_type,name,exactly_once)}
    function optional_with_default(default$0,arg_type,name)
     {return required_value([0,default$0],arg_type,name,at_most_once$1)}
    function optional$0(arg_type,name)
     {function _aXF_(param){return _apJ_}
      var key=caml_call2(Id$0[3],name,_aXF_);
      function read(env){return caml_call2(find$10,env,key)}
      function write(env,arg){return write_option(name,key,env,arg)}
      return arg_flag(name,arg_type,read,write,at_most_once$1)}
    function no_arg_general(key_value,deprecated_hook,name)
     {var key=caml_call2(Id$0[3],name,sexp_of_unit);
      function read(env){return caml_call2(mem$10,env,key)}
      function action(env)
       {var
         env$0=
          caml_call3
           (_xH_,
            key_value,
            env,
            function(env,param)
             {var value=param[2],key=param[1];
              return caml_call3(set_with_default,env,key,value)});
        return caml_call2(mem$10,env$0,key)
                ?caml_call2(die(_apK_),name,0)
                :caml_call3(set$8,env$0,key,0)}
      if(deprecated_hook)
       var
        f=deprecated_hook[1],
        action$0=
         function(env){var env$0=action(env);caml_call1(f,0);return env$0};
      else
       var action$0=action;
      return [0,[0,action$0],read,at_most_once$1,caml_call1(_La_,0)]}
    function no_arg(name){return no_arg_general(0,0,name)}
    function no_arg_register(key,value,name)
     {return no_arg_general([0,[0,key,value]],0,name)}
    function no_arg_some(value)
     {function _aXD_(param){return param?[0,value]:0}
      return function(_aXE_){return map_flag(no_arg,_aXD_,_aXE_)}}
    function listed(arg_type,name)
     {function _aXB_(x_022)
       {return caml_call2(sexp_of_list,function(param){return _apL_},x_022)}
      var key=caml_call3(With_default[1][1],0,name,_aXB_);
      function read(env)
       {return caml_call1(parts,caml_call2(With_default[3],env,key))}
      function write(env,arg)
       {function _aXC_(list){return [0,arg,list]}
        return caml_call3(With_default[4],env,key,_aXC_)}
      return arg_flag(name,arg_type,read,write,any)}
    function one_or_more_as_pair(arg_type,name)
     {function _aXz_(x_023)
       {return sexp_of_t$120(function(param){return _apM_},x_023)}
      var key=caml_call3(With_default[1][1],acc,name,_aXz_);
      function read(env)
       {var match=caml_call1(to_list$21,caml_call2(With_default[3],env,key));
        if(match){var rest=match[2],first=match[1];return [0,first,rest]}
        return caml_call2(die(_apN_),name,0)}
      function write(env,arg)
       {function _aXA_(q){return enqueue(q,arg)}
        return caml_call3(With_default[4],env,key,_aXA_)}
      return arg_flag(name,arg_type,read,write,at_least_once$1)}
    function one_or_more_as_list(arg_type)
     {function _aXv_(param){var xs=param[2],x=param[1];return [0,x,xs]}
      function _aXw_(_aXy_){return one_or_more_as_pair(arg_type,_aXy_)}
      return function(_aXx_){return map_flag(_aXw_,_aXv_,_aXx_)}}
    function escape_general(deprecated_hook,name)
     {function _aXu_(x_024)
       {return caml_call2(sexp_of_list,sexp_of_t$41,x_024)}
      var key=caml_call2(Id$0[3],name,_aXu_);
      function action(env,cmd_line){return caml_call3(set$8,env,key,cmd_line)}
      function read(env){return caml_call2(find$10,env,key)}
      if(deprecated_hook)
       var
        f=deprecated_hook[1],
        action$0=function(env,x){caml_call1(f,x);return action(env,x)};
      else
       var action$0=action;
      return [0,[3,action$0],read,at_most_once$1,caml_call1(_La_,0)]}
    function no_arg_abort(exit,name)
     {var _aXs_=caml_call1(_La_,0);
      function _aXt_(param){return 0}
      return [0,
              [0,function(param){return caml_call1(_LC_,caml_call1(exit,0))}],
              _aXt_,
              at_most_once$1,
              _aXs_]}
    function escape(name){return escape_general(0,name)}
    function no_arg$0(hook,name){return no_arg_general(0,[0,hook],name)}
    function escape$0(hook)
     {var _aXq_=[0,hook];
      return function(_aXr_){return escape_general(_aXq_,_aXr_)}}
    var empty$11=0;
    function create$38(path_to_exe){return [0,path_to_exe,0]}
    function append$4(t,subcommand){return [0,subcommand,t]}
    function parts_exe_basename(t)
     {var match=caml_call1(parts,t);
      if(match)
       {var tl=match[2],hd=match[1];return [0,caml_call1(basename,hd),tl]}
      return 0}
    function to_string$38(t)
     {var xs=parts_exe_basename(t);return caml_call2(_Bq_,_apr_,xs)}
    function replace_first(t,from,to)
     {var parts$1=caml_call1(parts,t),parts$0=parts$1,acc=0;
      for(;;)
       {if(parts$0)
         {var tl=parts$0[2],hd=parts$0[1];
          if(caml_call2(symbol$17,hd,from))
           return caml_call2(_p6_,tl,[0,to,acc]);
          var acc$0=[0,hd,acc],parts$0=tl,acc=acc$0;
          continue}
        return acc}}
    function to_string_dots(t)
     {if(t)
       var
        init=t[2],
        last=t[1],
        _aXp_=[0,last,caml_call2(_qF_,init,caml_call1(_ip_,cst$225))];
      else
       var _aXp_=0;
      return to_string$38(_aXp_)}
    var invariant$16=_am4_[1][4],usage$0=_am4_[1][5];
    function is_fixed_arity(param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 1;
       else
        switch(param$0[0])
         {case 0:return 1;
          case 1:return 0;
          case 2:return 0;
          case 3:
           var ts=param$0[1],match=caml_call1(parts,ts);
           if(match)
            {var others=match[2],last=match[1];
             if(caml_call2(_pM_,others,is_fixed_arity))
              {var param$0=last;continue}
             throw [0,Assert_failure,_apP_]}
           return caml_call1(_Fb_,cst_bug_in_command_ml$1);
          default:return 0}}
    function names$5(param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 0;
       else
        switch(param$0[0])
         {case 0:var s=param$0[1];return [0,s,0];
          case 1:var param$1=param$0[1],param$0=param$1;continue;
          case 2:var param$2=param$0[1],param$0=param$2;continue;
          case 3:var ts=param$0[1];return caml_call2(_qK_,ts,names$5);
          default:var s$0=param$0[1];return [0,s$0,0]}}
    var zero$7=0;
    function concat$1(param)
     {if(param)
       {var
         cdr=param[2],
         car=param[1],
         match=
          caml_call3
           (_pI_,
            cdr,
            [0,car,0],
            function(param,t2)
             {var acc=param[2],t1=param[1];
              if(typeof t1 === "number")
               var t=t2;
              else
               {if(typeof t2 !== "number")
                 {if(is_fixed_arity(t1))return [0,t2,[0,t1,acc]];
                  var
                   _aXn_=caml_call1(usage$0,t1),
                   _aXo_=caml_call1(usage$0,t2);
                  return caml_call5
                          (failwithf$0,
                           _apR_,
                           caml_call1(usage$0,[3,caml_call1(parts,[0,t2,[0,t1,acc]])]),
                           _aXo_,
                           _aXn_,
                           0)}
                var t=t1}
              return [0,t,acc]}),
         cdr$0=match[2],
         car$0=match[1];
        return cdr$0?[3,caml_call1(parts,[0,car$0,cdr$0])]:car$0}
      return 0}
    function return$3(a){return [0,function(param){return a}]}
    function pack_for_completion(x)
     {switch(x[0])
       {case 0:return 0;
        case 3:var ps=x[1];return ps;
        default:return [0,[0,x],0]}}
    function parse_more(param,f)
     {var complete=param[3],parse=param[2],name=param[1];
      function parse$0(arg,for_completion)
       {var
         match=caml_call2(parse,arg,for_completion),
         update_env=match[2],
         parser=match[1];
        return [0,caml_call1(f,parser),update_env]}
      return [1,[0,name,parse$0,complete]]}
    function symbol$235(t_left,t_right)
     {var switch$0=0;
      switch(t_left[0])
       {case 0:
         var _aXl_=t_left[1];
         switch(t_right[0])
          {case 0:
            var x=t_right[1];
            return [0,
                    function(env)
                     {return caml_call2(_aXl_,env,caml_call1(x,env))}];
           case 1:
            var more=t_right[1];
            return parse_more(more,function(tr){return symbol$235(t_left,tr)});
           case 2:
            var test=t_right[1];
            return [2,
                    function(more)
                     {return symbol$235(t_left,caml_call1(test,more))}];
           case 3:break;
           default:var tr=t_right[1],tl=t_left;switch$0 = 1}
         break;
        case 1:
         var more$0=t_left[1];
         return parse_more(more$0,function(tl){return symbol$235(tl,t_right)});
        case 2:
         var test$0=t_left[1];
         return [2,
                 function(more)
                  {return symbol$235(caml_call1(test$0,more),t_right)}];
        case 4:var tr=t_right,tl=t_left[1];switch$0 = 1;break
        }
      if(switch$0)return [4,symbol$235(tl,tr)];
      var _aXm_=pack_for_completion(t_right);
      return [3,caml_call2(_Oq_,pack_for_completion(t_left),_aXm_)]}
    function symbol_map$1(t,f){return symbol$235(return$3(f),t)}
    function one$4(name,arg_type)
     {return [2,
              function(more)
               {if(more)
                 {var
                   parse=
                    function(anon,for_completion)
                     {var match=parse$1(arg_type,anon);
                      if(0 === match[0])
                       {var
                         v=match[1],
                         _aXh_=
                          function(env)
                           {function _aXk_(env,key)
                             {return caml_call3(multi_add,env,key,v)}
                            return caml_call3(_xH_,arg_type[3],env,_aXk_)};
                        return [0,return$3(v),_aXh_]}
                      var exn=match[1];
                      if(for_completion)
                       return [0,_apS_,function(_aXj_){return _aXj_}];
                      var _aXi_=caml_call1(to_string$37,exn);
                      return caml_call4(die(_apT_),name,anon,_aXi_,0)};
                  return [1,[0,name,parse,arg_type[2]]]}
                return caml_call2(die(_apU_),name,0)}]}
    function sequence(t)
     {var loop=[];
      caml_update_dummy
       (loop,
        [2,
         function(more)
          {return more
                   ?symbol$235
                     (symbol$235(return$3(function(v,acc){return [0,v,acc]}),t),
                      loop)
                   :return$3(0)}]);
      return loop}
    function consume(t,arg,for_completion)
     {var t$0=t;
      for(;;)
       switch(t$0[0])
        {case 0:return caml_call1(die(_apW_),0);
         case 1:
          var
           match=t$0[1],
           parse=match[2],
           match$0=caml_call2(parse,arg,for_completion),
           update_env=match$0[2],
           parser=match$0[1];
          return [0,parser,1,update_env];
         case 2:var f=t$0[1],t$1=caml_call1(f,1),t$0=t$1;continue;
         case 3:
          var packed=t$0[1];
          if(packed)
           {var
             rest=packed[2],
             match$1=packed[1],
             t$2=match$1[1],
             match$2=consume(t$2,arg,for_completion),
             update_env$0=match$2[3],
             parse_flags=match$2[2],
             parser$0=match$2[1];
            return [0,
                    [3,caml_call2(_Oq_,pack_for_completion(parser$0),rest)],
                    parse_flags,
                    update_env$0]}
          return [0,_apX_,1,function(_aXg_){return _aXg_}];
         default:
          var t$3=t$0[1],_aXf_=consume(t$3,arg,for_completion);
          return [0,_aXf_[1],0,_aXf_[3]]}}
    function t2(t1,t2)
     {var _aXc_=concat$1([0,t1[2],[0,t2[2],0]]),_aXd_=t2[1],_aXe_=t1[1];
      return [0,
              symbol$235
               (symbol$235(return$3(function(a1,a2){return [0,a1,a2]}),_aXe_),
                _aXd_),
              _aXc_]}
    function t3(t1,t2,t3)
     {var
       _aW__=concat$1([0,t1[2],[0,t2[2],[0,t3[2],0]]]),
       _aW$_=t3[1],
       _aXa_=t2[1],
       _aXb_=t1[1];
      return [0,
              symbol$235
               (symbol$235
                 (symbol$235
                   (return$3(function(a1,a2,a3){return [0,a1,a2,a3]}),_aXb_),
                  _aXa_),
                _aW$_),
              _aW__]}
    function t4(t1,t2,t3,t4)
     {var
       _aW5_=concat$1([0,t1[2],[0,t2[2],[0,t3[2],[0,t4[2],0]]]]),
       _aW6_=t4[1],
       _aW7_=t3[1],
       _aW8_=t2[1],
       _aW9_=t1[1];
      return [0,
              symbol$235
               (symbol$235
                 (symbol$235
                   (symbol$235
                     (return$3(function(a1,a2,a3,a4){return [0,a1,a2,a3,a4]}),
                      _aW9_),
                    _aW8_),
                  _aW7_),
                _aW6_),
              _aW5_]}
    function normalize$1(str)
     {var strlen=caml_ml_string_length(str);
      if(caml_call2(_Nq_,strlen,0))
       caml_call1(_Fb_,cst_Empty_anonymous_argument_n);
      if(caml_call2(symbol$20,caml_call2(_B2_,0,str),str))
       caml_call3(failwithf$0,_apY_,str,0);
      var
       special_chars=caml_call1(_D8_[57],_apZ_),
       has_special_chars=caml_call2(_A6_,str,caml_call1(mem$8,special_chars));
      return has_special_chars?str:caml_call1(_Bt_,str)}
    function symbol$236(name,arg_type)
     {var name$0=normalize$1(name);
      return [0,one$4(name$0,arg_type),[0,name$0]]}
    function map_anons(t,f)
     {var _aW4_=t[2];return [0,symbol_map$1(t[1],f),_aW4_]}
    function maybe(t)
     {var _aW1_=t[2],_aW2_=typeof _aW1_ === "number"?0:[2,_aW1_],_aW3_=t[1];
      return [0,
              [2,
               function(more)
                {return more
                         ?symbol_map$1(_aW3_,function(a){return [0,a]})
                         :return$3(0)}],
              _aW2_]}
    function maybe_with_default(default$0,t)
     {var init=maybe(t),_aWZ_=init[2];
      function _aW0_(v){return caml_call2(_xD_,v,default$0)}
      return [0,symbol_map$1(init[1],_aW0_),_aWZ_]}
    function sequence$0(t)
     {var _aWX_=t[2];
      if(typeof _aWX_ === "number")
       var _aWY_=0;
      else
       {if(1 - is_fixed_arity(_aWX_))
         caml_call3(failwithf$0,_apQ_,caml_call1(usage$0,_aWX_),0);
        var _aWY_=[1,_aWX_]}
      return [0,sequence(t[1]),_aWY_]}
    function non_empty_sequence_as_pair(t){return t2(t,sequence$0(t))}
    function non_empty_sequence_as_list(t)
     {var init=non_empty_sequence_as_pair(t),_aWV_=init[2];
      function _aWW_(param){var xs=param[2],x=param[1];return [0,x,xs]}
      return [0,symbol_map$1(init[1],_aWW_),_aWV_]}
    function ad_hoc(usage_arg)
     {return [0,
              sequence(one$4(cst_WILL_NEVER_BE_PRINTED,include$155[1])),
              [4,usage_arg]]}
    function compare$103(a_025,b_026)
     {var a_025$0=a_025,b_026$0=b_026;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_025$0,b_026$0))return 0;
        if(typeof a_025$0 === "number")
         return typeof b_026$0 === "number"?0:-1;
        else
         if(0 === a_025$0[0])
          {var _aWS_=a_025$0[2],_aWT_=a_025$0[1];
           if(typeof b_026$0 !== "number")
            {if(0 === b_026$0[0])
              {var
                b_030=b_026$0[2],
                b_028=b_026$0[1],
                n=caml_call2(compare$37,_aWT_,b_028);
               if(0 === n){var a_025$0=_aWS_,b_026$0=b_030;continue}
               return n}
             return -1}}
         else
          {var _aWU_=a_025$0[1];
           if(typeof b_026$0 !== "number")
            {if(0 === b_026$0[0])return 1;
             var b_032=b_026$0[1];
             return caml_call2(compare$37,_aWU_,b_032)}}
        return 1}}
    function of_list$11(args)
     {var _aWR_=0;
      return caml_call3
              (_qT_,args,function(arg,args){return [0,arg,args]},_aWR_)}
    function to_list$24(param)
     {if(typeof param === "number")
       return 0;
      else
       {if(0 === param[0])
         {var xs=param[2],x=param[1];return [0,x,to_list$24(xs)]}
        var x$0=param[1];
        return [0,x$0,0]}}
    function ends_in_complete(param)
     {var param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 0;
       else
        {if(0 === param$0[0]){var param$1=param$0[2],param$0=param$1;continue}
         return 1}}
    function extend(t,extend,path)
     {if(ends_in_complete(t))return t;
      var
       path_list=caml_call2(_xD_,caml_call1(_qv_,caml_call1(parts,path)),0),
       _aWQ_=caml_call1(extend,path_list);
      return of_list$11(caml_call2(_Oq_,to_list$24(t),_aWQ_))}
    function normalize$2(key_type,key)
     {if(caml_call2(_A6_,key,function(c){return caml_call2(_EL_,c,95)}))
       caml_call4(failwithf$0,_ap0_,caml_call1(_amZ_[1][1],key_type),key,0);
      if(key_type)
       {if(caml_call2(equal$21,key,cst$226))
         {var _aWO_=0;
          caml_call4
           (failwithf$0,
            [0,
             [11,
              cst_invalid,
              [24,
               _ap2_,
               function(param,custom_printf_033)
                {return caml_call1(_amZ_[1][1],custom_printf_033)},
               _ap1_]],
             cst_invalid_Key_type_name_S],
            key_type,
            key,
            _aWO_)}
        if(caml_call2(_A6_,key,_Ej_))
         {var _aWP_=0;
          caml_call4
           (failwithf$0,
            [0,
             [11,
              cst_invalid$0,
              [24,
               _ap4_,
               function(param,custom_printf_034)
                {return caml_call1(_amZ_[1][1],custom_printf_034)},
               _ap3_]],
             cst_invalid_Key_type_name_cont],
            key_type,
            key,
            _aWP_)}
        return caml_call2(_BQ_,key,cst$227)?key:caml_call2(_Fp_,cst$228,key)}
      return caml_call1(_Bu_,key)}
    var lookup_expand$0=_amZ_[4];
    function subcommand_cmp_fst(param,_aWN_)
     {var c=_aWN_[1],a=param[1];return caml_call2(help_screen_compare$0,a,c)}
    function shape(t)
     {function _aWH_(a,b){return caml_call2(compare$37,a[1],b[1])}
      var
       _aWI_=
        caml_call2
         (_qr_,caml_call2(_qF_,caml_call1(Map$1[68],t[3]),align),_aWH_),
       _aWJ_=caml_call1(_am2_[1],_aWI_),
       _aWK_=[1,t[5]];
      function _aWL_(readme){return caml_call1(readme,0)}
      var _aWM_=caml_call2(_xy_,t[2],_aWL_);
      return [0,t[1],_aWM_,_aWK_,_aWJ_]}
    var
     path_key=key_create(cst_path),
     args_key=key_create(cst_args),
     help_key=key_create(cst_help$5);
    function get_flag_and_action(t,arg)
     {var key_type=1,_aWF_=t[3];
      function _aWE_(flag)
       {var
         name_matching=flag[8],
         aliases_excluded_from_help=flag[3],
         aliases=flag[2],
         name=flag[1],
         data=[0,flag,name_matching],
         aliases$0=caml_call2(_Oq_,aliases_excluded_from_help,aliases);
        return [0,
                [0,name,data],
                caml_call2
                 (_qF_,aliases$0,function(alias){return [0,alias,data]})]}
      var
       alist=caml_call2(_qK_,caml_call1(Map$1[68],_aWF_),_aWE_),
       match=
        caml_call2
         (_rg_,
          alist,
          function(param,_aWG_)
           {var s2=_aWG_[1],s1=param[1];return caml_call2(compare$37,s1,s2)});
      if(match)
       var
        match$0=match[1],
        flag=match$0[1],
        match$1=caml_call3(failwithf$0,_ap5_,flag,0);
      else
       var match$1=caml_call3(lookup_expand$0,alist,arg,key_type);
      if(0 === match$1[0])
       {var match$2=match$1[1],flag$0=match$2[2],flag_name=match$2[1];
        return [0,flag_name,flag$0[4]]}
      var msg=match$1[1];
      return caml_call2(die(_ap7_),msg,0)}
    function run_flag(t,env,arg,args)
     {var match=get_flag_and_action(t,arg),action=match[2],flag=match[1];
      switch(action[0])
       {case 0:var f=action[1];return [0,caml_call1(f,env),args];
        case 1:
         var info=action[1],completing=ends_in_complete(args);
         return completing
                 ?[0,env,args]
                 :(caml_call1(_FE_,caml_call1(info,env)),exit(0));
        case 2:
         var comp=action[2],f$0=action[1];
         if(typeof args === "number")
          return caml_call2(die(_ap8_),flag,0);
         else
          {if(0 === args[0])
            {var rest=args[2],arg$0=args[1];
             try
              {var _aWD_=caml_call2(f$0,env,arg$0),env$0=_aWD_}
             catch(e)
              {e = caml_wrap_exception(e);
               if(e[1] !== Failed_to_parse_command_line)throw e;
               if(! ends_in_complete(rest))throw e;
               var env$0=env}
             return [0,env$0,rest]}
           var part=args[1];
           return caml_call1(_LC_,run_and_exit(comp,env,part))}
        default:
         var f$1=action[1];
         if(ends_in_complete(args))exit(0);
         return [0,caml_call2(f$1,env,to_list$24(args)),0]}}
    function app(t1,t2,f)
     {function _aWx_(param)
       {var _aWC_=caml_call1(t1[3],0);
        return caml_call2(_Oq_,caml_call1(t2[3],0),_aWC_)}
      function _aWy_(param)
       {var _aWB_=[0,caml_call1(t2[2],0),0];
        return concat$1([0,caml_call1(t1[2],0),_aWB_])}
      return [0,
              function(param)
               {var _aWz_=caml_call1(t2[1],0),_aWA_=caml_call1(t1[1],0);
                return symbol$235(symbol$235(return$3(f),_aWA_),_aWz_)},
              _aWy_,
              _aWx_]}
    function apply$1(pf,px)
     {function _aWr_(param)
       {var _aWw_=caml_call1(pf[1][3],0);
        return caml_call2(_Oq_,caml_call1(px[1][3],0),_aWw_)}
      function _aWs_(param)
       {var _aWv_=[0,caml_call1(px[1][2],0),0];
        return concat$1([0,caml_call1(pf[1][2],0),_aWv_])}
      return [0,
              [0,
               function(param)
                {var
                  _aWt_=caml_call1(px[1][1],0),
                  _aWu_=caml_call1(pf[1][1],0);
                 return symbol$235
                         (symbol$235
                           (return$3
                             (function(mf,mx,k)
                               {return caml_call1
                                        (mf,
                                         function(f)
                                          {return caml_call1
                                                   (mx,function(x){return caml_call1(k,caml_call1(f,x))})})}),
                            _aWu_),
                          _aWt_)},
               _aWs_,
               _aWr_]]}
    function symbol$237(t1,t2)
     {return app
              (t1,
               t2,
               function(f1,f2,x){return caml_call1(f2,caml_call1(f1,x))})}
    function symbol$238(t1,p2)
     {function _aWq_(f1,f2,x){return caml_call1(f2,caml_call1(f1,x))}
      return app(t1,p2[1],_aWq_)}
    function symbol$239(t1,p2)
     {function _aWp_(f2,f1,x){return caml_call1(f1,caml_call1(f2,x))}
      return app(p2[1],t1,_aWp_)}
    function step(f)
     {function _aWn_(param){return 0}
      function _aWo_(param){return zero$7}
      return [0,function(param){return return$3(f)},_aWo_,_aWn_]}
    function _ap__(param){return 0}
    function _ap$_(param){return zero$7}
    var
     empty$12=
      [0,
       function(param){return return$3(function(_aWm_){return _aWm_})},
       _ap$_,
       _ap__];
    function const$0(v)
     {function _aWk_(param){return 0}
      function _aWl_(param){return zero$7}
      return [0,
              [0,
               function(param)
                {return return$3(function(k){return caml_call1(k,v)})},
               _aWl_,
               _aWk_]]}
    function map$40(p,f)
     {var _aWh_=p[1][3],_aWi_=p[1][2];
      return [0,
              [0,
               function(param)
                {function _aWj_(c,k)
                  {return caml_call1
                           (c,function(v){return caml_call1(k,caml_call1(f,v))})}
                 return symbol_map$1(caml_call1(p[1][1],0),_aWj_)},
               _aWi_,
               _aWh_]]}
    function wrap(f,t)
     {var _aWe_=t[3],_aWf_=t[2];
      return [0,
              function(param)
               {function _aWg_(run,main){return caml_call2(f,run,main)}
                return symbol_map$1(caml_call1(t[1],0),_aWg_)},
              _aWf_,
              _aWe_]}
    function of_param(p){return p[1]}
    function to_param(t,main)
     {function _aWc_(k){return caml_call1(k,main)}
      var _aWa_=t[3],_aWb_=t[2];
      return map$40
              ([0,
                [0,
                 function(param)
                  {function _aWd_(f,k){return caml_call1(k,f)}
                   return symbol_map$1(caml_call1(t[1],0),_aWd_)},
                 _aWb_,
                 _aWa_]],
               _aWc_)}
    function lookup(key)
     {function _aV__(param){return 0}
      function _aV$_(param){return zero$7}
      return [0,
              [0,
               function(param)
                {return [0,
                         function(env,m)
                          {return caml_call1(m,caml_call2(find_exn$9,env,key))}]},
               _aV$_,
               _aV__]]}
    var path=lookup(path_key),args=lookup(args_key),help$0=lookup(help_key);
    function _aqa_(param){return 0}
    function _aqb_(param){return zero$7}
    var
     env=
      [0,
       [0,
        function(param){return [0,function(env,m){return caml_call1(m,env)}]},
        _aqb_,
        _aqa_]],
     string$3=include$155[1],
     int$4=include$155[2],
     char$5=include$155[3],
     float$3=include$155[4],
     bool$4=include$155[5],
     date$0=include$155[6],
     percent$0=include$155[7],
     host_and_port$0=include$155[8],
     sexp$0=include$155[9],
     sexp_conv$0=include$155[10];
    function anon(spec)
     {caml_call1(invariant$16,spec[2]);
      function _aV7_(param){return 0}
      function _aV8_(param){return spec[2]}
      return [0,
              [0,
               function(param)
                {function _aV9_(v,k){return caml_call1(k,v)}
                 return symbol_map$1(spec[1],_aV9_)},
               _aV8_,
               _aV7_]]}
    function escape_anon(final_anon)
     {var t=t2(final_anon,sequence$0(symbol$236(cst_ARG,string$3)));
      return anon([0,[4,t[1]],t[2]])}
    function flag(opt,full_flag_required,name)
     {return function(mode)
       {return function(doc)
         {var aliases_excluded_from_help=0;
          if(opt)var sth=opt[1],aliases=sth;else var aliases=0;
          function normalize(flag){return normalize$2(1,flag)}
          var
           name$0=normalize(name),
           aliases$0=caml_call2(_qF_,aliases,normalize),
           match=caml_call1(mode,name$0),
           extra_doc=match[4],
           num_occurrences=match[3],
           read=match[2],
           action=match[1],
           check_available=
            num_occurrences[1]
             ?function(env){caml_call1(read,env);return 0}
             :function(_aV6_){return 0},
           name_matching=
            caml_call1(_x0_,full_flag_required)?-461087063:-481604174;
          function _aV2_(param)
           {var match=force(extra_doc),_aV4_=0;
            if(match)
             var
              extra_doc$0=match[1],
              _aV5_=
               caml_call2
                (Stdlib_String[6],
                 cst$235,
                 [0,doc,[0,cst$234,[0,extra_doc$0,0]]]);
            else
             var _aV5_=doc;
            return [0,
                    [0,
                     name$0,
                     aliases$0,
                     aliases_excluded_from_help,
                     action,
                     _aV5_,
                     num_occurrences,
                     check_available,
                     name_matching],
                    _aV4_]}
          function _aV3_(param){return zero$7}
          return [0,
                  [0,
                   function(param)
                    {return [0,
                             function(env,m){return caml_call1(m,caml_call1(read,env))}]},
                   _aV3_,
                   _aV2_]]}}}
    function flag_optional_with_default_doc
     (aliases,full_flag_required,name,arg_type,sexp_of_default,default$0,doc)
     {var default_sexp=caml_call1(sexp_of_default,default$0),switch$0=0;
      if
       (0
        ===
        default_sexp[0]
        &&
        !
        caml_string_notequal(default_sexp[1],cst$236))
       {var doc$0=doc;switch$0 = 1}
      if(! switch$0)
       var
        doc$0=
         caml_call3
          (_fx_,
           [0,
            [2,
             0,
             [11,
              cst_default,
              [24,
               _aqd_,
               function(param,custom_printf_035)
                {return caml_call1(to_string$0,custom_printf_035)},
               _aqc_]]],
            cst_s_default_Sexp],
           doc,
           default_sexp);
      function _aV0_(_aV1_)
       {return optional_with_default(default$0,arg_type,_aV1_)}
      return caml_call2(flag(aliases,full_flag_required,name),_aV0_,doc$0)}
    var
     map$41=[0,-198771759,map$40],
     include$156=caml_call1(Base_Applicative[5],[0,const$0,apply$1,map$41]),
     return$4=include$156[1],
     map$42=include$156[2],
     pair=include$156[3],
     symbol$240=include$156[4],
     symbol$241=include$156[5],
     symbol$242=include$156[6],
     symbol_map$2=include$156[7],
     apply$2=include$156[8],
     map2$2=include$156[9],
     map3$0=include$156[10],
     all$7=include$156[11],
     all_unit$0=include$156[12],
     Applicative_infix$0=include$156[13];
    function flags_of_args_exn(args)
     {return caml_call3
              (_pI_,
               args,
               empty$12,
               function(acc,param)
                {var doc=param[3],spec=param[2],name=param[1];
                 function gen(f,flag_type)
                  {var _aVZ_=caml_call2(flag(0,0,name),flag_type,doc);
                   return symbol$238
                           (step(function(m,x){caml_call1(f,x);return m}),_aVZ_)}
                 function call(f,arg_type)
                  {function _aVX_(_aVY_){return optional$0(arg_type,_aVY_)}
                   return gen(function(x){return caml_call2(_xK_,x,f)},_aVX_)}
                 function set(r,arg_type)
                  {return call(function(x){r[1] = x;return 0},arg_type)}
                 function set_bool(r,b)
                  {return gen
                           (function(passed)
                             {var _aVW_=passed?(r[1] = b,0):passed;return _aVW_},
                            no_arg)}
                 switch(spec[0])
                  {case 0:
                    var
                     f=spec[1],
                     _aVU_=
                      gen
                       (function(passed){return passed?caml_call1(f,0):passed},
                        no_arg);
                    break;
                   case 1:var f$0=spec[1],_aVU_=call(f$0,bool$4);break;
                   case 2:var r=spec[1],_aVU_=set_bool(r,1);break;
                   case 3:var r$0=spec[1],_aVU_=set_bool(r$0,0);break;
                   case 4:var f$1=spec[1],_aVU_=call(f$1,string$3);break;
                   case 5:var r$1=spec[1],_aVU_=set(r$1,string$3);break;
                   case 6:var f$2=spec[1],_aVU_=call(f$2,int$4);break;
                   case 7:var r$2=spec[1],_aVU_=set(r$2,int$4);break;
                   case 8:var f$3=spec[1],_aVU_=call(f$3,float$3);break;
                   case 9:var r$3=spec[1],_aVU_=set(r$3,float$3);break;
                   case 10:
                    var _aVU_=caml_call1(_Fb_,cst_Arg_Tuple_is_not_supported);
                    break;
                   case 11:
                    var
                     f$4=spec[2],
                     syms=spec[1],
                     arg_type=
                      of_alist_exn$6
                       (0,
                        0,
                        _aqe_,
                        0,
                        0,
                        caml_call2(_qF_,syms,function(sym){return [0,sym,sym]})),
                     _aVU_=call(f$4,arg_type);
                    break;
                   case 12:
                    var
                     f$5=spec[1],
                     _aVU_=
                      gen
                       (function(x)
                         {return caml_call2
                                  (_xK_,x,function(_aVV_){return caml_call2(_pH_,_aVV_,f$5)})},
                        escape);
                    break;
                   case 13:
                    var _aVU_=caml_call1(_Fb_,cst_Arg_Rest_all_is_not_suppor);
                    break;
                   default:
                    var _aVU_=caml_call1(_Fb_,cst_Arg_Expand_is_not_supporte)}
                 return symbol$237(acc,_aVU_)})}
    var Deprecated=[0,no_arg$0,escape$0,ad_hoc];
    function arg_names(param)
     {var
       t=param[1],
       flag_names=caml_call1(keys$2,create$37(caml_call1(t[3],0))),
       anon_names=names$5(caml_call1(t[2],0));
      return caml_call1(_rD_,[0,flag_names,[0,anon_names,0]])}
    function compare$104(a_036,b_037)
     {return compare_list
              (function(a_038,b_039)
                {return caml_call2(compare$37,a_038,b_039)},
               a_036,
               b_037)}
    function sexp_of_t$124(x_040)
     {return caml_call2(sexp_of_list,sexp_of_t$41,x_040)}
    var
     T=[0,compare$104,sexp_of_t$124],
     _aqf_=T[2],
     include$157=caml_call1(Make,T),
     _aqg_=include$157[1];
    function create_exn$0(param)
     {var
       names=arg_names(param),
       names_with_commas=
        caml_call2(_qj_,names,function(s){return caml_call4(_Bs_,0,0,s,44)});
      if(1 - caml_call1(is_empty$0,names_with_commas))
       failwiths
        (0,
         _aqh_,
         cst_For_simplicity_Command_Spe,
         names_with_commas,
         function(x_041){return caml_call2(sexp_of_list,sexp_of_t$41,x_041)});
      return names
              ?names
              :caml_call1
                (_nX_,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_choose_one_expects_choices))}
    var to_string$39=caml_call1(_Bq_,_aqi_);
    function list_to_string(ts)
     {return caml_call2(_Bq_,_aqj_,caml_call2(_qF_,ts,to_string$39))}
    var If_nothing_chosen=[0];
    function choose_one(ts,if_nothing_chosen)
     {var
       match=
        caml_call2
         (of_alist$2,
          [0,_aqg_],
          caml_call2(_qF_,ts,function(t){return [0,create_exn$0(t),t]}));
      if(17724 <= match[1])
       {var
         ts$0=match[2],
         _aVK_=
          function(passed)
           {if(passed)
             {var _aVM_=passed[1];
              if(passed[2])
               {var
                 _aVN_=0,
                 _aVO_=
                  caml_call2(_qF_,passed,function(_aVT_){return _aVT_[1]}),
                 _aVP_=0;
                return caml_call2
                        (die
                          ([0,
                            [11,
                             cst_Cannot_pass_more_than_one_$0,
                             [24,
                              _aqk_,
                              function(param,custom_printf_042)
                               {return list_to_string(custom_printf_042)},
                              _aVP_]],
                            cst_Cannot_pass_more_than_one_]),
                         _aVO_,
                         _aVN_)}
              var value=_aVM_[2];
              return typeof if_nothing_chosen === "number"
                      ?if_nothing_chosen?[0,value]:value
                      :value}
            if(typeof if_nothing_chosen === "number")
             {if(if_nothing_chosen)return 0;
              var _aVQ_=0,_aVR_=caml_call1(keys$2,ts$0),_aVS_=0;
              return caml_call2
                      (die
                        ([0,
                          [11,
                           cst_Must_pass_one_of_these,
                           [24,
                            _aql_,
                            function(param,custom_printf_043)
                             {return list_to_string(custom_printf_043)},
                            _aVS_]],
                          cst_Must_pass_one_of_these_Cho]),
                       _aVR_,
                       _aVQ_)}
            var value$0=if_nothing_chosen[1];
            return value$0},
         _aVL_=
          function(name,t,init)
           {return caml_call3
                    (map2$2,
                     init,
                     t,
                     function(init,value)
                      {return caml_call3
                               (_xH_,
                                value,
                                init,
                                function(init,value){return [0,[0,name,value],init]})})};
        return caml_call2
                (map$42,
                 caml_call3(fold$5,ts$0,caml_call1(return$4,0),_aVL_),
                 _aVK_)}
      var name=match[2];
      return failwiths(0,_aqm_,cst_Command_Spec_choose_one_ca,name,_aqf_)}
    function and_arg_names(t)
     {return caml_call2
              (map$42,t,function(value){return [0,value,arg_names(t)]})}
    function and_arg_name(t)
     {var x_044=arg_names(t);
      if(x_044 && ! x_044[2])
       {var name=x_044[1];
        return caml_call2(map$42,t,function(value){return [0,value,name]})}
      var _aVJ_=[0,caml_call2(sexp_of_list,sexp_of_t$41,x_044),0];
      return caml_call1
              (_nX_,
               [1,
                [0,
                 caml_call1
                  (Sexplib0_Sexp_conv[7],cst_and_arg_name_expects_exact),
                 _aVJ_]])}
    function shape$0(subcommand_to_shape,t)
     {var _aVD_=_xi_[18];
      function _aVE_(_aVI_)
       {return caml_call2(_aVD_,_aVI_,subcommand_to_shape)}
      var _aVF_=caml_call2(_K3_,t[3],_aVE_);
      function _aVG_(readme){return caml_call1(readme,0)}
      var _aVH_=caml_call2(_xy_,t[2],_aVG_);
      return [0,t[1],_aVH_,_aVF_]}
    var abs_path$0=_amZ_[2],key=2;
    function shape$1(t)
     {var _aVy_=t[5],_aVz_=t[4],_aVA_=t[3];
      function _aVB_(readme){return caml_call1(readme,0)}
      var _aVC_=caml_call2(_xy_,t[2],_aVB_);
      return [0,t[1],_aVC_,_aVA_,_aVz_,_aVy_]}
    function sexpable_shape(param)
     {switch(param[0])
       {case 0:var base=param[1];return [0,shape(base)];
        case 1:var group=param[1];return [1,shape$0(sexpable_shape,group)];
        case 2:var exec=param[1];return [2,shape$1(exec)];
        default:
         var thunk=param[1];return [3,caml_call2(_K3_,thunk,sexpable_shape)]}}
    function extend_exn(mem,add,map,key_type,key,data)
     {if(caml_call2(mem,map,key))
       caml_call4(failwithf$0,_aqn_,caml_call1(_amZ_[1][1],key_type),key,0);
      return caml_call3(add,map,key,data)}
    function extend_alist_exn(alist,key_type,key,data)
     {function _aVx_(alist,key,data)
       {return caml_call4(_xi_[13],alist,equal$21,key,data)}
      return extend_exn
              (function(alist,key)
                {return caml_call3(_xi_[16],alist,equal$21,key)},
               _aVx_,
               alist,
               key_type,
               key,
               data)}
    function add$17
     (base,name,aliases,aliases_excluded_from_help,text,text_summary)
     {var flags$0=base[3],_aVt_=-481604174;
      function _aVu_(_aVw_){return 0}
      var
       _aVv_=caml_call2(_fx_,_aqo_,text_summary),
       data=
        [0,
         name,
         aliases,
         aliases_excluded_from_help,
         [1,function(env){return caml_call1(text,env)}],
         _aVv_,
         at_most_once$1,
         _aVu_,
         _aVt_],
       flags=extend_exn(mem$3,set$2,flags$0,1,name,data);
      return [0,base[1],base[2],flags,base[4],base[5]]}
    function basic(summary,readme,param,main)
     {var
       flags=param[3],
       usage=param[2],
       f=param[1],
       flags$0=caml_call1(flags,0),
       usage$0=caml_call1(usage,0);
      function anons(param)
       {function _aVs_(k,param)
         {var thunk=caml_call1(k,main);
          return function(param){return caml_call1(thunk,0)}}
        return symbol_map$1(caml_call1(f,0),_aVs_)}
      var
       flags$1=create$37(flags$0),
       base=[0,summary,readme,flags$1,anons,usage$0],
       base$0=
        add$17
         (base,
          cst_help$7,
          _aqq_,
          _aqp_,
          function(env)
           {var
             _aVq_=caml_call2(find_exn$9,env,help_key),
             _aVr_=caml_obj_tag(_aVq_);
            return 250 === _aVr_
                    ?_aVq_[1]
                    :246 === _aVr_?caml_call1(CamlinternalLazy[2],_aVq_):_aVq_},
          cst_this_help_text);
      return [0,base$0]}
    var subs_key=key_create(cst_subcommands$9);
    function lazy_group(summary,readme,preserve_subcommand_order,body,alist)
     {var
       subcommands=
        caml_call2
         (_K3_,
          alist,
          function(alist)
           {var
             alist$0=
              caml_call2
               (_qF_,
                alist,
                function(param)
                 {var t=param[2],name=param[1];
                  return [0,normalize$2(0,name),t]}),
             match=caml_call1(Map$1[7],alist$0);
            if(17724 <= match[1])
             {var map=match[2];
              return preserve_subcommand_order
                      ?alist$0
                      :caml_call2(to_alist$1,0,map)}
            var name=match[2];
            return caml_call3(failwithf$0,_aqr_,name,0)});
      return [1,[0,summary,readme,subcommands,body]]}
    function group$146(summary,readme,preserve_subcommand_order,body,alist)
     {var
       readme$0=
        caml_call2
         (_xy_,
          readme,
          function(f,param){return caml_call2(_B2_,0,caml_call1(f,0))});
      return lazy_group
              (summary,
               readme$0,
               preserve_subcommand_order,
               body,
               caml_call1(_La_,alist))}
    function exec(summary,readme,opt,env,path_to_exe,param)
     {if(opt)var sth=opt[1],child_subcommand=sth;else var child_subcommand=0;
      var
       _aVp_=
        -310138871 <= path_to_exe[1]
         ?Stdlib_Sys[1]
         :caml_check_bound(caml_sys_argv(0),0)[1],
       working_dir=caml_call1(dirname,_aVp_);
      if(491227799 <= path_to_exe[1])
       var
        p=path_to_exe[2],
        p$0=is_absolute(p)?p:caml_call1(_Fb_,cst_Path_passed_to_Absolute_mu),
        path_to_exe$0=p$0;
      else
       var
        p$1=path_to_exe[2],
        p$2=
         caml_call1(_agt_,p$1)
          ?p$1
          :caml_call1(_Fb_,cst_Path_passed_to_Relative_to),
        path_to_exe$0=p$2;
      return [2,
              [0,
               summary,
               readme,
               working_dir,
               path_to_exe$0,
               child_subcommand,
               env]]}
    function of_lazy$0(thunk){return [3,thunk]}
    function kind_of_sexpable
     (sexpable,working_dir,path_to_exe,child_subcommand,path_to_subcommand)
     {switch(sexpable[0])
       {case 0:var b=sexpable[1];return [0,b];
        case 1:
         var
          g=sexpable[1],
          _aVl_=
           function(param)
            {var
              sexpable=param[2],
              str=param[1],
              path_to_subcommand$0=
               caml_call2(_Oq_,path_to_subcommand,[0,str,0]),
              proxy=
               proxy_of_sexpable
                (sexpable,
                 working_dir,
                 path_to_exe,
                 child_subcommand,
                 path_to_subcommand$0);
             return [0,str,proxy]},
          _aVm_=function(_aVo_){return caml_call2(_qF_,_aVo_,_aVl_)},
          _aVn_=caml_call2(_K3_,g[3],_aVm_);
         return [1,[0,g[1],g[2],_aVn_]];
        case 2:var e=sexpable[1];return [2,e];
        default:
         var l=sexpable[1];
         return [3,
                 caml_call2
                  (_K3_,
                   l,
                   function(sexpable)
                    {return kind_of_sexpable
                             (sexpable,
                              working_dir,
                              path_to_exe,
                              child_subcommand,
                              path_to_subcommand)})]}}
    function proxy_of_sexpable
     (sexpable,working_dir,path_to_exe,child_subcommand,path_to_subcommand)
     {var
       kind=
        kind_of_sexpable
         (sexpable,
          working_dir,
          path_to_exe,
          child_subcommand,
          path_to_subcommand);
      return [0,
              working_dir,
              path_to_exe,
              path_to_subcommand,
              child_subcommand,
              kind]}
    function Version_info(M)
     {function print_version(version){return caml_call1(_FE_,force(version))}
      function print_build_info(build_info)
       {return caml_call1(_FE_,force(build_info))}
      function command(version,build_info)
       {function _aVj_(version_flag,build_info_flag)
         {if(build_info_flag)
           print_build_info(build_info);
          else
           if(version_flag)
            print_version(version);
           else
            {print_build_info(build_info);print_version(version)}
          return exit(0)}
        var
         _aVk_=
          caml_call2
           (flag(0,0,cst_build_info$1),no_arg,cst_print_build_info_for_this_);
        return basic
                (cst_print_version_information,
                 0,
                 symbol$238
                  (symbol$238
                    (empty$12,
                     caml_call2
                      (flag(0,0,cst_version$3),
                       no_arg,
                       cst_print_the_version_of_this_)),
                   _aVk_),
                 _aVj_)}
      function add(version,build_info,unversioned)
       {switch(unversioned[0])
         {case 0:
           var
            base=unversioned[1],
            base$0=
             add$17
              (base,
               cst_version$4,
               0,
               _aqs_,
               function(param){return force(version)},
               cst_the_version_of_this_build),
            base$1=
             add$17
              (base$0,
               cst_build_info$2,
               0,
               _aqt_,
               function(param){return force(build_info)},
               cst_info_about_this_build);
           return [0,base$1];
          case 1:
           var
            group=unversioned[1],
            _aVf_=
             function(subcommands)
              {return extend_alist_exn
                       (subcommands,0,cst_version$5,command(version,build_info))},
            subcommands=caml_call2(_K3_,group[3],_aVf_);
           return [1,[0,group[1],group[2],subcommands,group[4]]];
          case 2:var exec=unversioned[1];return [2,exec];
          default:
           var thunk=unversioned[1];
           return [3,
                   [246,
                    function(_aVg_)
                     {var
                       _aVh_=caml_obj_tag(thunk),
                       _aVi_=
                        250 === _aVh_
                         ?thunk[1]
                         :246 === _aVh_?caml_call1(CamlinternalLazy[2],thunk):thunk;
                      return add(version,build_info,_aVi_)}]]}}
      function normalize_version_lines(lines)
       {return caml_call2(_Bq_,_aqu_,caml_call2(_qr_,lines,compare$37))}
      var
       default_version=
        [246,function(_aVe_){return normalize_version_lines(M[1][1])}],
       default_build_info=
        [246,function(_aVd_){return caml_call1(M[1][2],M[2][1])}];
      return [0,
              print_version,
              print_build_info,
              command,
              add,
              normalize_version_lines,
              default_version,
              default_build_info]}
    function _aqv_(param)
     {function reprint_build_info(to_sexp)
       {return caml_call1(to_string$0,caml_call1(to_sexp,epoch))}
      var Version_util=[0,version_list,reprint_build_info];
      function sexp_of_t(t)
       {return caml_call1(of_string,caml_call1(to_string_utc,t))}
      var
       Time=[0,sexp_of_t],
       Version_info$0=Version_info([0,Version_util,Time]),
       Expect_test_collector$0=
        caml_call1(Expect_test_collector[2],Expect_test_config);
      function _aU3_(param)
       {caml_call1(Version_info$0[1],Version_info$0[6]);
        var
         _aVc_=
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_core_src_command_ml$0),
           2193,
           65518,
           65526,
           65532];
        return caml_call1(Expect_test_collector$0[1],_aVc_)}
      var
       _aU4_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_core_src_command_ml$1),
         2193,
         65518,
         65533,
         65602],
       _aU5_=
        [0,
         [0,
          _aqx_,
          _aqw_,
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_core_src_command_ml$2),
           2193,
           65518,
           65526,
           65532],
          _aU4_],
         0],
       _aU6_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_core_src_command_ml$4),
         2191,
         65378,
         65382,
         65603],
       _aU7_=
        caml_call1
         (Expect_test_common_File[4][3],cst_7cccd00f8f5b5ef8ad56c69272);
      caml_call9
       (Expect_test_collector$0[3],
        _aU7_,
        _aU6_,
        cst_core_src_command_ml$3,
        _aqy_,
        0,
        _aU5_,
        0,
        Inline_test_config,
        _aU3_);
      var
       Expect_test_collector$1=
        caml_call1(Expect_test_collector[2],Expect_test_config);
      function _aU8_(param)
       {caml_call1(Version_info$0[2],cst_some_build_info);
        var
         _aVb_=
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_core_src_command_ml$5),
           2200,
           65727,
           65735,
           65741];
        return caml_call1(Expect_test_collector$1[1],_aVb_)}
      var
       _aU9_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_core_src_command_ml$6),
         2200,
         65727,
         65742,
         65763],
       _aU__=
        [0,
         [0,
          _aqA_,
          _aqz_,
          [0,
           caml_call1(Expect_test_common_File[1][6],cst_core_src_command_ml$7),
           2200,
           65727,
           65735,
           65741],
          _aU9_],
         0],
       _aU$_=
        [0,
         caml_call1(Expect_test_common_File[1][6],cst_core_src_command_ml$9),
         2198,
         65612,
         65616,
         65764],
       _aVa_=
        caml_call1
         (Expect_test_common_File[4][3],cst_7cccd00f8f5b5ef8ad56c69272$0);
      caml_call9
       (Expect_test_collector$1[3],
        _aVa_,
        _aU$_,
        cst_core_src_command_ml$8,
        _aqB_,
        0,
        _aU__,
        0,
        Inline_test_config,
        _aU8_);
      return 0}
    caml_call8
     (Ppx_inline_test_lib_Runtime[6],
      Inline_test_config,
      cst_Version_info,
      0,
      cst_core_src_command_ml$10,
      2176,
      0,
      876,
      _aqv_);
    function summary$5(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var x=param$0[1];return x[1];
         case 1:var x$0=param$0[1];return x$0[1];
         case 2:var x$1=param$0[1];return x$1[1];
         default:
          var
           thunk=param$0[1],
           _aU2_=caml_obj_tag(thunk),
           param$1=
            250 === _aU2_
             ?thunk[1]
             :246 === _aU2_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue}}
    var path$0=caml_call2(map$42,path,parts_exe_basename);
    function get_flag_names(param)
     {var param$0=param;
      for(;;)
       switch(param$0[0])
        {case 0:var base=param$0[1];return caml_call1(Map$1[67],base[3]);
         case 3:
          var
           thunk=param$0[1],
           _aU1_=caml_obj_tag(thunk),
           param$1=
            250 === _aU1_
             ?thunk[1]
             :246 === _aU1_?caml_call1(CamlinternalLazy[2],thunk):thunk,
           param$0=param$1;
          continue;
         default:throw [0,Assert_failure,_aqC_]}}
    function help_recursive(cmd,with_flags,expand_dots,t,s)
     {function help_recursive_rec(cmd,t,s)
       {var t$0=t;
        for(;;)
         {var
           cmd$0=expand_dots?cmd:cst$238,
           new_s=caml_call2(_Fp_,s,caml_call2(_Fp_,cmd$0,cst$237));
          switch(t$0[0])
           {case 0:
             var
              base=t$0[1],
              _aUU_=summary$5([0,base]),
              base_help=[0,caml_call2(_Fp_,s,cmd),_aUU_];
             if(with_flags)
              {var
                _aUV_=
                 function(param)
                  {var h=param[2],flag=param[1];
                   return [0,caml_call2(_Fp_,new_s,flag),h]},
                sth=opt[1],
                flags=caml_call1(Map$1[68],base[3]),
                flags$0=
                 sth
                  ?flags
                  :caml_call2
                    (_qj_,
                     flags,
                     function(f){return caml_call2(symbol$20,f[1],cst_help$4)});
               return [0,
                       base_help,
                       caml_call2
                        (_qF_,
                         caml_call2
                          (_qr_,caml_call2(_qK_,flags$0,help),subcommand_cmp_fst),
                         _aUV_)]}
             return [0,base_help,0];
            case 1:
             var
              match=t$0[1],
              subcommands=match[3],
              summary=match[1],
              _aUW_=
               function(param)
                {var t=param[2],cmd=param[1];
                 return help_recursive_rec(cmd,t,new_s)},
              _aUX_=caml_obj_tag(subcommands),
              _aUY_=
               250 === _aUX_
                ?subcommands[1]
                :246 === _aUX_
                  ?caml_call1(CamlinternalLazy[2],subcommands)
                  :subcommands,
              _aUZ_=
               caml_call2
                (_qK_,caml_call2(_qr_,_aUY_,subcommand_cmp_fst),_aUW_);
             return [0,[0,caml_call2(_Fp_,s,cmd),summary],_aUZ_];
            case 2:return 0;
            default:
             var
              thunk=t$0[1],
              _aU0_=caml_obj_tag(thunk),
              t$1=
               250 === _aU0_
                ?thunk[1]
                :246 === _aU0_?caml_call1(CamlinternalLazy[2],thunk):thunk,
              t$0=t$1;
             continue}}}
      return help_recursive_rec(cmd,t,s)}
    var
     map$43=[0,-198771759,map$42],
     include$158=caml_call1(Base_Applicative[5],[0,const$0,apply$2,map$43]),
     return$5=include$158[1],
     map$44=include$158[2],
     both$0=include$158[3],
     symbol$243=include$158[4],
     symbol$244=include$158[5],
     symbol$245=include$158[6],
     symbol_map$3=include$158[7],
     apply$3=include$158[8],
     map2$3=include$158[9],
     map3$1=include$158[10],
     all$8=include$158[11],
     all_unit$1=include$158[12],
     Applicative_infix$1=include$158[13],
     string$4=include$155[1],
     int$5=include$155[2],
     char$6=include$155[3],
     float$4=include$155[4],
     bool$5=include$155[5],
     date$1=include$155[6],
     percent$1=include$155[7],
     host_and_port$1=include$155[8],
     sexp$1=include$155[9],
     sexp_conv$1=include$155[10];
    function basic$0(summary,readme,param)
     {var
       params=
        caml_call2
         (map$44,param,function(run,param,_aUT_){return caml_call1(run,0)}),
       t=params[1],
       _aUP_=t[3],
       _aUQ_=t[2],
       spec=
        [0,
         function(param)
          {function _aUR_(run,main)
            {return caml_call2(run,function(_aUS_){return _aUS_},main)}
           return symbol_map$1(caml_call1(t[1],0),_aUR_)},
         _aUQ_,
         _aUP_],
       readme$0=
        caml_call2
         (_xy_,
          readme,
          function(f,param){return caml_call2(_B2_,0,caml_call1(f,0))});
      return basic(summary,readme$0,spec,0)}
    var word_wrap$0=_amZ_[5];
    function to_string_for_choose_one(param)
     {return caml_call1(to_string$39,create_exn$0(param))}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$448);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Command$0);
    var
     run$1=228660148,
     shape$2=228660148,
     _aqV_=
      [0,
       create$36,
       map$39,
       of_lazy,
       of_map,
       of_alist_exn$6,
       enumerated,
       enumerated_sexpable,
       comma_separated,
       include$155,
       For_testing],
     Core_Command=
      [0,
       Auto_complete,
       _aqV_,
       [0,
        required$0,
        optional$0,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_abort,
        escape,
        map_flag],
       [0,
        symbol$236,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons],
       [0,
        return$5,
        map$44,
        both$0,
        symbol$243,
        symbol$244,
        symbol$245,
        symbol_map$3,
        apply$3,
        map2$3,
        map3$1,
        all$8,
        all_unit$1,
        Applicative_infix$1,
        help$0,
        path$0,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        escape_anon,
        If_nothing_chosen,
        choose_one,
        and_arg_names,
        and_arg_name,
        arg_names,
        [0,
         create$36,
         map$39,
         of_lazy,
         of_map,
         of_alist_exn$6,
         enumerated,
         enumerated_sexpable,
         comma_separated,
         include$155,
         For_testing],
        string$4,
        int$5,
        char$6,
        float$4,
        bool$5,
        date$1,
        percent$1,
        host_and_port$1,
        sexp$1,
        sexp_conv$1,
        required$0,
        optional$0,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_abort,
        escape,
        map_flag,
        symbol$236,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons],
       [0,
        return$5,
        symbol$243,
        symbol$244,
        symbol$245,
        symbol_map$3,
        [0,return$5,map$44,both$0]],
       [0,
        return$4,
        map$42,
        pair,
        symbol$240,
        symbol$241,
        symbol$242,
        symbol_map$2,
        apply$2,
        map2$2,
        map3$0,
        all$7,
        all_unit$0,
        Applicative_infix$0,
        help$0,
        path$0,
        args,
        flag,
        flag_optional_with_default_doc,
        anon,
        escape_anon,
        If_nothing_chosen,
        choose_one,
        and_arg_names,
        and_arg_name,
        arg_names,
        const$0,
        pair,
        empty$12,
        symbol$237,
        symbol$238,
        symbol$239,
        step,
        wrap,
        [0,
         create$36,
         map$39,
         of_lazy,
         of_map,
         of_alist_exn$6,
         enumerated,
         enumerated_sexpable,
         comma_separated,
         include$155,
         For_testing],
        string$3,
        int$4,
        char$5,
        float$3,
        bool$4,
        date$0,
        percent$0,
        host_and_port$0,
        sexp$0,
        sexp_conv$0,
        required$0,
        optional$0,
        optional_with_default,
        listed,
        one_or_more_as_pair,
        one_or_more_as_pair,
        one_or_more_as_list,
        no_arg,
        no_arg_register,
        no_arg_some,
        no_arg_abort,
        escape,
        map_flag,
        flags_of_args_exn,
        symbol$236,
        sequence$0,
        non_empty_sequence_as_pair,
        non_empty_sequence_as_list,
        maybe,
        maybe_with_default,
        t2,
        t3,
        t4,
        map_anons,
        to_param,
        of_param],
       basic,
       basic$0,
       group$146,
       lazy_group,
       exec,
       of_lazy$0,
       summary$5,
       [0,fully_forced,get_summary,help_text],
       exit,
       [0,Deprecated,summary$5,help_recursive,get_flag_names],
       run$1,
       [0],
       shape$2,
       [0,
        abs_path$0,
        word_wrap$0,
        [0,normalize$1],
        [0,
         empty$11,
         create$38,
         append$4,
         parts,
         replace_first,
         to_string$38,
         to_string_dots],
        [0,compare$103,of_list$11,extend],
        [0,flags_of_args_exn,to_string_for_choose_one],
        function(For_unix_with_string_env_var)
         {var
           Version_info$0=
            Version_info
             ([0,
               For_unix_with_string_env_var[1],
               For_unix_with_string_env_var[4]]),
           Thread=For_unix_with_string_env_var[3],
           Unix=For_unix_with_string_env_var[5],
           getpid=Unix[4],
           close=Unix[5],
           in_channel_of_descr=Unix[8],
           wait=Unix[15],
           _aTf_=Unix[9],
           _aTg_=Unix[10],
           _aTh_=Unix[11],
           _aTi_=Unix[14];
          function create_process_env
           (working_dir,prog_search_path,argv0,prog,args,env,param)
           {var _aUN_=0;
            function convert_command_env_var_to_str(list)
             {return caml_call2
                      (_qF_,
                       list,
                       function(param)
                        {var str=param[2],env_var=param[1];
                         return [0,to_string$33(env_var),str]})}
            var _aUM_=env[1];
            if(-72399366 <= _aUM_)
             if(584703596 <= _aUM_)
              var
               list=env[2],
               _aUO_=[0,584703596,convert_command_env_var_to_str(list)];
             else
              var
               list$0=env[2],
               _aUO_=[0,-72399366,convert_command_env_var_to_str(list$0)];
            else
             if(-126259180 <= _aUM_)
              var
               list$1=env[2],
               _aUO_=[0,-126259180,convert_command_env_var_to_str(list$1)];
             else
              var _aUO_=env;
            return caml_call7
                    (_aTi_,
                     working_dir,
                     prog_search_path,
                     argv0,
                     prog,
                     args,
                     _aUO_,
                     _aUN_)}
          function getenv_and_clear(key)
           {var value=caml_call1(_aTh_,to_string$33(key));
            if(caml_call1(_x0_,value))caml_call1(_aTg_,to_string$33(key));
            return value}
          var
           supported_versions=include$139[3],
           Versioned=include$139[4],
           of_versioned=include$139[5],
           to_versioned=include$139[6];
          function read_stdout_and_stderr(process_info)
           {function start_reading(descr,info)
             {var output=create$35(0),_aUH_=0;
              function _aUI_(param)
               {return set_exn
                        (output,
                         _aqD_,
                         caml_call1
                          (_h9_,
                           function(param)
                            {var _aUL_=caml_call1(in_channel_of_descr,descr);
                             return caml_call1(Stdio_In_channel[14],_aUL_)}))}
              var thread=caml_call3(Thread[1],890699316,_aUI_,_aUH_);
              return caml_call1
                      (_Pw_,
                       function(param)
                        {caml_call1(Thread[2],thread);
                         caml_call2(close,0,descr);
                         var match=output[1];
                         if(match)
                          {var _aUJ_=match[1];
                           if(0 === _aUJ_[0]){var output$0=_aUJ_[1];return output$0}
                           var exn=_aUJ_[1];
                           throw exn}
                         var _aUK_=[0,[1,[0,_aqE_,[0,caml_call1(_mY_,info),0]]],0];
                         return caml_call1
                                 (_nX_,
                                  [1,
                                   [0,
                                    caml_call1(Sexplib0_Sexp_conv[7],cst_BUG_failed_to_read),
                                    _aUK_]])})}
            var
             _aUE_=caml_call1(_m4_,cst_stdout),
             finish_stdout=start_reading(process_info[3],_aUE_),
             _aUF_=caml_call1(_m4_,cst_stderr),
             finish_stderr=start_reading(process_info[4],_aUF_),
             _aUG_=caml_call2(_Px_,finish_stderr,0);
            return [0,caml_call2(_Px_,finish_stdout,0),_aUG_]}
          function of_external(working_dir,path_to_exe,child_subcommand)
           {var
             help_sexp=
              caml_call1(to_string$0,caml_call1(Set$6[75],supported_versions)),
             process_info=
              create_process_env
               (0,
                0,
                0,
                caml_call2(abs_path$0,working_dir,path_to_exe),
                child_subcommand,
                [0,-72399366,[0,[0,1,help_sexp],0]],
                0);
            caml_call2(close,0,process_info[2]);
            var
             match=read_stdout_and_stderr(process_info),
             stderr=match[2],
             stdout=match[1];
            caml_call2(wait,0,[0,4001835,process_info[1]]);
            try
             {var
               _aUD_=caml_call1(of_string,stdout),
               t=caml_call1(of_versioned,caml_call1(Versioned[1],_aUD_));
              return t}
            catch(exn)
             {exn = caml_wrap_exception(exn);
              var
               _aUA_=[0,[1,[0,_aqF_,[0,caml_call1(sexp_of_t$41,stderr),0]]],0],
               _aUB_=
                [0,[1,[0,_aqG_,[0,caml_call1(sexp_of_t$41,stdout),0]]],_aUA_],
               _aUC_=[0,caml_call1(sexp_of_exn,exn),_aUB_];
              return caml_call1
                      (_nX_,
                       [1,
                        [0,
                         caml_call1
                          (Sexplib0_Sexp_conv[7],cst_cannot_parse_command_shape),
                         _aUC_]])}}
          function shape_of_exe
           (param,child_subcommand,path_to_exe,working_dir)
           {return shape_of_proxy
                    (proxy_of_sexpable
                      (of_external(working_dir,path_to_exe,child_subcommand),
                       working_dir,
                       path_to_exe,
                       child_subcommand,
                       0))}
          function shape_of_proxy(proxy){return shape_of_proxy_kind(proxy[5])}
          function shape_of_proxy_kind(kind)
           {switch(kind[0])
             {case 0:var b=kind[1];return [0,b];
              case 1:
               var
                g=kind[1],
                _aUv_=_xi_[18],
                _aUw_=
                 function(_aUz_)
                  {return caml_call2(_aUv_,_aUz_,shape_of_proxy)},
                _aUx_=caml_call2(_K3_,g[3],_aUw_);
               return [1,[0,g[1],g[2],_aUx_]];
              case 2:
               var
                e=kind[1],
                child_subcommand=e[5],
                path_to_exe=e[4],
                working_dir=e[3];
               return [2,
                       e,
                       function(_aUy_)
                        {return shape_of_exe
                                 (_aUy_,child_subcommand,path_to_exe,working_dir)}];
              default:
               var l=kind[1];return [3,caml_call2(_K3_,l,shape_of_proxy_kind)]}}
          function shape$2(t)
           {var t$0=t;
            for(;;)
             switch(t$0[0])
              {case 0:var b=t$0[1];return [0,shape(b)];
               case 1:var g=t$0[1];return [1,shape$0(shape$2,g)];
               case 2:
                var
                 e=t$0[1],
                 child_subcommand=e[5],
                 path_to_exe=e[4],
                 working_dir=e[3],
                 _aUs_=
                  function(_aUu_)
                   {return shape_of_exe
                            (_aUu_,child_subcommand,path_to_exe,working_dir)};
                return [2,shape$1(e),_aUs_];
               default:
                var
                 thunk=t$0[1],
                 _aUt_=caml_obj_tag(thunk),
                 t$1=
                  250 === _aUt_
                   ?thunk[1]
                   :246 === _aUt_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                 t$0=t$1;
                continue}}
          function group_or_exec_help_text
           (flags,path,summary,readme,format_list)
           {var
             _aUq_=[0,[0,caml_call1(_am2_[2],format_list)],0],
             _aUr_=flags?cst_subcommands_and_flags:cst_subcommands$10;
            return unparagraphs
                    (caml_call1
                      (_rt_,
                       [0,
                        [0,summary],
                        [0,
                         [0,
                          caml_call2(_Bq_,0,[0,cst$239,[0,to_string$38(path),_aqJ_]])],
                         [0,readme,[0,[0,_aUr_],_aUq_]]]]))}
          function help_for_shape(shape,path,expand_dots,flags,recursive)
           {var shape$0=shape;
            for(;;)
             {var
               loop=
                function(path,acc,shape)
                 {var shape$0=shape;
                  for(;;)
                   {var
                     string_of_path=expand_dots?to_string$38:to_string_dots,
                     gather_group$0=
                      function(string_of_path)
                       {function gather_group(path,acc,subcommands)
                         {var
                           filtered_subcommands=
                            caml_call1(is_empty$0,path)
                             ?subcommands
                             :caml_call3(_xi_[17],subcommands,symbol$17,cst_help$8);
                          function _aUp_(acc,param)
                           {var
                             shape=param[2],
                             subcommand=param[1],
                             path$0=[0,subcommand,path],
                             name=string_of_path(path$0),
                             doc=get_summary(shape),
                             acc$0=enqueue(acc,[0,name,doc,0]);
                            return recursive?loop(path$0,acc$0,shape):acc$0}
                          return caml_call3
                                  (_pI_,
                                   caml_call2
                                    (_qs_,
                                     filtered_subcommands,
                                     function(a,b)
                                      {return caml_call2(help_screen_compare$0,a[1],b[1])}),
                                   acc,
                                   _aUp_)}
                        return gather_group},
                     gather_group=gather_group$0(string_of_path);
                    switch(shape$0[0])
                     {case 0:
                       var b=shape$0[1];
                       if(flags)
                        {var
                          _aUf_=
                           function(acc,fmt)
                            {var
                              path$0=[0,fmt[1],path],
                              _aUn_=fmt[3],
                              _aUo_=fmt[2],
                              fmt$0=[0,string_of_path(path$0),_aUo_,_aUn_];
                             return enqueue(acc,fmt$0)},
                          _aUg_=
                           function(fmt)
                            {return caml_call2(symbol$20,fmt[1],cst_help$9)};
                         return caml_call3
                                 (_pI_,caml_call2(_qj_,b[4],_aUg_),acc,_aUf_)}
                       return acc;
                      case 1:
                       var
                        g=shape$0[1],
                        _aUh_=g[3],
                        _aUi_=caml_obj_tag(_aUh_),
                        _aUj_=
                         250 === _aUi_
                          ?_aUh_[1]
                          :246 === _aUi_?caml_call1(CamlinternalLazy[2],_aUh_):_aUh_;
                       return gather_group(path,acc,_aUj_);
                      case 2:
                       var shape$1=shape$0[2];
                       try
                        {var _aUk_=loop(path,acc,caml_call1(shape$1,0));
                         return _aUk_}
                       catch(_aUm_){return acc}
                      default:
                       var
                        thunk=shape$0[1],
                        _aUl_=caml_obj_tag(thunk),
                        shape$2=
                         250 === _aUl_
                          ?thunk[1]
                          :246 === _aUl_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                        shape$0=shape$2;
                       continue}}},
               format_list=caml_call1(to_list$21,loop(empty$11,acc,shape$0));
              switch(shape$0[0])
               {case 0:
                 var
                  b=shape$0[1],
                  usage=caml_call1(_am1_[9],b),
                  _aUa_=[0,_aqK_,[0,[0,caml_call1(_am2_[2],b[4])],0]],
                  _aUb_=[0,b[2],_aUa_],
                  _aUc_=caml_call2(_Fp_,cst$240,usage),
                  _aUd_=
                   [0,
                    [0,
                     caml_call2
                      (_Fp_,cst$241,caml_call2(_Fp_,to_string$38(path),_aUc_))],
                    _aUb_];
                 return unparagraphs(caml_call1(_rt_,[0,[0,b[1]],_aUd_]));
                case 1:
                 var g=shape$0[1];
                 return group_or_exec_help_text
                         (flags,path,g[1],g[2],format_list);
                case 2:
                 var e=shape$0[1];
                 return group_or_exec_help_text
                         (flags,path,e[1],e[2],format_list);
                default:
                 var
                  thunk=shape$0[1],
                  _aUe_=caml_obj_tag(thunk),
                  shape$1=
                   250 === _aUe_
                    ?thunk[1]
                    :246 === _aUe_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                  shape$0=shape$1;
                 continue}}}
          function handle_environment(t,argv)
           {if(argv)
             {var
               args=argv[2],
               cmd=argv[1],
               _aT2_=
                function(version)
                 {var
                   _aT$_=caml_call1(of_string,version),
                   supported_versions$0=caml_call1(Set$6[74],_aT$_),
                   _aT8_=
                    caml_call2
                     (Set$6[21],supported_versions,supported_versions$0),
                   param=caml_call1(Set$6[37],_aT8_);
                  if(param)
                   {var
                     version_to_use=param[1],
                     t$4=sexpable_shape(t),
                     t$0=t$4,
                     path_to_subcommand=args;
                    for(;;)
                     {if(path_to_subcommand)
                       {var subs=path_to_subcommand[2],sub=path_to_subcommand[1];
                        switch(t$0[0])
                         {case 0:var _aT9_=caml_call3(failwithf$0,_aqH_,sub,0);break;
                          case 1:
                           var
                            g=t$0[1],
                            _aT4_=g[3],
                            _aT5_=caml_obj_tag(_aT4_),
                            _aT6_=
                             250 === _aT5_
                              ?_aT4_[1]
                              :246 === _aT5_?caml_call1(CamlinternalLazy[2],_aT4_):_aT4_,
                            match=caml_call3(_xi_[14],_aT6_,equal$21,sub);
                           if(match)
                            {var t$1=match[1],t$0=t$1,path_to_subcommand=subs;continue}
                           var _aT9_=caml_call3(failwithf$0,_aqI_,sub,0);
                           break;
                          case 2:
                           var
                            match$0=t$0[1],
                            child_subcommand=match$0[5],
                            path_to_exe=match$0[4],
                            working_dir=match$0[3],
                            path_to_subcommand$0=
                             [0,sub,caml_call2(_Oq_,subs,child_subcommand)],
                            t$2=of_external(working_dir,path_to_exe,child_subcommand),
                            t$0=t$2,
                            path_to_subcommand=path_to_subcommand$0;
                           continue;
                          default:
                           var
                            thunk=t$0[1],
                            _aT7_=caml_obj_tag(thunk),
                            t$3=
                             250 === _aT7_
                              ?thunk[1]
                              :246 === _aT7_?caml_call1(CamlinternalLazy[2],thunk):thunk,
                            t$0=t$3;
                           continue}}
                      else
                       var _aT9_=t$0;
                      var _aT__=caml_call2(to_versioned,_aT9_,version_to_use);
                      caml_call1
                       (_FA_,
                        caml_call1(to_string$0,caml_call1(Versioned[2],_aT__)));
                      break}}
                  else
                   failwiths
                    (0,
                     _aqP_,
                     cst_Couldn_t_choose_a_supporte,
                     supported_versions,
                     Set$6[75]);
                  return exit(0)};
              caml_call2(_xK_,getenv_and_clear(1),_aT2_);
              var
               _aT3_=
                function(param)
                 {var
                   fname=
                    caml_call2
                     (_fx_,_aqN_,caml_call1(_aoc_,caml_call1(getpid,0))),
                   argv_0=caml_check_bound(caml_sys_argv(0),0)[1];
                  caml_call5(_fF_,_aqO_,fname,argv_0,fname,argv_0);
                  return exit(0)};
              caml_call2(_xK_,getenv_and_clear(0),_aT3_);
              return [0,cmd,args]}
            return caml_call1(_Fb_,cst_missing_executable_name)}
          function process_args(cmd,args)
           {var
             maybe_comp_cword=
              caml_call2(_xy_,getenv_and_clear(key),of_string$5);
            if(maybe_comp_cword)
             var
              comp_cword=maybe_comp_cword[1],
              args$0=caml_call2(_rw_,caml_call2(_Oq_,args,_aqQ_),comp_cword),
              _aT1_=0,
              args$1=
               caml_call3
                (_qT_,
                 args$0,
                 function(arg,args)
                  {return typeof args === "number"?[1,arg]:[0,arg,args]},
                 _aT1_);
            else
             var args$1=of_list$11(args);
            return [0,create$38(cmd),args$1,maybe_comp_cword]}
          function add_help_subcommands(t)
           {switch(t[0])
             {case 0:return t;
              case 1:
               var
                match=t[1],
                body=match[4],
                subcommands=match[3],
                readme=match[2],
                summary=match[1],
                subcommands$0=
                 caml_call2
                  (_K3_,
                   subcommands,
                   function(subcommands)
                    {function _aTP_
                      (recursive,flags,expand_dots,path,env,cmd_opt,param)
                      {var match=caml_call2(find$10,env,subs_key);
                       if(match)
                        {var subs=match[1];
                         if(path && ! caml_string_notequal(path[1],cst_help$3))
                          {var
                            t=path[2],
                            path$0=
                             caml_call3
                              (_xH_,
                               cmd_opt,
                               t,
                               function(path,subcommand){return [0,subcommand,path]});
                           if(cmd_opt)
                            {var
                              cmd=cmd_opt[1],
                              _aTU_=0,
                              _aTV_=function(x){return [0,x,-481604174]},
                              match$0=
                               caml_call3
                                (lookup_expand$0,caml_call2(_xi_[18],subs,_aTV_),cmd,_aTU_);
                             if(0 === match$0[0])
                              var
                               match$1=match$0[1],
                               t$0=match$1[2],
                               possibly_expanded_name=match$1[1],
                               path$1=replace_first(path$0,cmd,possibly_expanded_name),
                               shape=shape$2(t$0),
                               path$2=path$1;
                             else
                              var
                               e=match$0[1],
                               _aTW_=to_string$38(path$0),
                               _aTX_=caml_call4(die(_aqL_),cmd,_aTW_,e,0),
                               shape=_aTX_[2],
                               path$2=_aTX_[1]}
                           else
                            var
                             subcommands=
                              caml_call1(_La_,caml_call2(_xi_[18],subs,shape$2)),
                             readme$0=
                              caml_call2
                               (_xy_,readme,function(readme){return caml_call1(readme,0)}),
                             shape$0=[1,[0,summary,readme$0,subcommands]],
                             shape=shape$0,
                             path$2=path$0;
                           return caml_call1
                                   (_FE_,
                                    help_for_shape(shape,path$2,expand_dots,flags,recursive))}
                         throw [0,Assert_failure,_apO_]}
                       throw [0,Assert_failure,_aqM_]}
                     var
                      _aTQ_=anon(maybe(symbol$236(cst_SUBCOMMAND,string$3))),
                      _aTR_=
                       caml_call2
                        (flag(0,0,cst_expand_dots),
                         no_arg,
                         cst_expand_subcommands_in_recu),
                      _aTS_=
                       caml_call2
                        (flag(0,0,cst_flags$9),
                         no_arg,
                         cst_show_flags_as_well_in_recu),
                      _aTT_=
                       basic
                        (cst_explain_a_given_subcommand,
                         0,
                         symbol$238
                          (symbol$238
                            (symbol$238
                              (symbol$238
                                (symbol$238
                                  (symbol$238
                                    (empty$12,
                                     caml_call2
                                      (flag(0,0,cst_recursive),
                                       no_arg,
                                       cst_show_subcommands_of_subcom)),
                                   _aTS_),
                                 _aTR_),
                               path),
                             env),
                           _aTQ_),
                         _aTP_);
                     return extend_alist_exn
                             (caml_call2(_xi_[18],subcommands,add_help_subcommands),
                              0,
                              cst_help$10,
                              _aTT_)});
               return [1,[0,summary,readme,subcommands$0,body]];
              case 2:return t;
              default:
               var thunk=t[1];
               return [3,
                       [246,
                        function(_aTY_)
                         {var
                           _aTZ_=caml_obj_tag(thunk),
                           _aT0_=
                            250 === _aTZ_
                             ?thunk[1]
                             :246 === _aTZ_?caml_call1(CamlinternalLazy[2],thunk):thunk;
                          return add_help_subcommands(_aT0_)}]]}}
          function maybe_apply_extend(args,extend$0,path)
           {return caml_call3
                    (_xF_,extend$0,args,function(f){return extend(args,f,path)})}
          function dispatch
           (t,
            env$1,
            extend,
            path,
            args$0,
            maybe_new_comp_cword,
            version,
            build_info,
            verbose_on_parse_error,
            when_parsing_succeeds,
            complete_subcommands)
           {var t$0=t;
            for(;;)
             switch(t$0[0])
              {case 0:
                var
                 base=t$0[1],
                 args$1=maybe_apply_extend(args$0,extend,path),
                 help_text=
                  [246,
                   function(_aTO_)
                    {return help_for_shape(shape$2(t$0),path,0,1,0)}],
                 for_completion=ends_in_complete(args$1),
                 _aTu_=to_list$24(args$1),
                 env=
                  caml_call3
                   (set$8,
                    caml_call3
                     (set$8,caml_call3(set$8,env$1,path_key,path),args_key,_aTu_),
                    help_key,
                    help_text),
                 match=
                  caml_call1
                   (_h9_,
                    function(param)
                     {var
                       parser$1=caml_call1(base[4],0),
                       env$0=env,
                       parser=parser$1,
                       cmdline=args$1,
                       parse_flags=1,
                       _aTL_=15369289;
                      for(;;)
                       {if(typeof cmdline === "number")
                         {var _aTH_=function(flag){return caml_call1(flag[7],env$0)};
                          caml_call2(_pH_,caml_call1(Map$1[68],base[3]),_aTH_);
                          var t=parser;
                          for(;;)
                           {switch(t[0])
                             {case 0:var a=t[1],_aTI_=caml_call1(a,env$0);break;
                              case 1:
                               var
                                match=t[1],
                                name=match[1],
                                _aTI_=caml_call2(die(_apV_),name,0);
                               break;
                              case 2:var f=t[1],t$0=caml_call1(f,0),t=t$0;continue;
                              case 3:
                               var _aTI_=caml_call1(_Fb_,cst_BUG_asked_for_final_value_);
                               break;
                              default:var t$1=t[1],t=t$1;continue}
                            var _aTM_=_aTI_;
                            break}}
                        else
                         {if(0 === cmdline[0])
                           {var args=cmdline[2],arg=cmdline[1];
                            if(parse_flags && caml_string_notequal(arg,cst$230))
                             {var switch$0=0;
                              if
                               (caml_string_notequal(arg,cst_anon)
                                ||
                                typeof args
                                ===
                                "number"
                                ||
                                !
                                (0 === args[0]))
                               switch$0 = 1;
                              else
                               var
                                args$2=args[2],
                                arg$1=args[1],
                                arg_is_flag=0,
                                args$0=args$2,
                                arg$0=arg$1;
                              if(switch$0)
                               var
                                arg_is_flag=caml_call2(_BQ_,arg,cst$231),
                                args$0=args,
                                arg$0=arg}
                            else
                             var arg_is_flag=0,args$0=args,arg$0=arg;
                            if(arg_is_flag)
                             {var
                               match$2=run_flag(base,env$0,arg$0,args$0),
                               cmdline$0=match$2[2],
                               env$1=match$2[1],
                               env$0=env$1,
                               cmdline=cmdline$0;
                              continue}
                            var
                             match$3=consume(parser,arg$0,for_completion),
                             update_env=match$3[3],
                             parse_flags2=match$3[2],
                             parser$0=match$3[1],
                             env$2=caml_call1(update_env,env$0),
                             parse_flags$0=parse_flags?parse_flags2:parse_flags,
                             env$0=env$2,
                             parser=parser$0,
                             cmdline=args$0,
                             parse_flags=parse_flags$0;
                            continue}
                          var part=cmdline[1],switch$1=0;
                          if(parse_flags && caml_call2(_BQ_,part,cst$232))
                           {var
                             _aTJ_=
                              function(name)
                               {var _aTN_=caml_call2(_BQ_,name,part);
                                return _aTN_?caml_call1(_FE_,name):_aTN_};
                            caml_call2(_pH_,caml_call1(Map$1[67],base[3]),_aTJ_);
                            var _aTM_=exit(0)}
                          else
                           switch$1 = 1;
                          if(switch$1)
                           {var t$2=parser;
                            for(;;)
                             {switch(t$2[0])
                               {case 0:var _aTK_=exit(0);break;
                                case 1:
                                 var
                                  match$0=t$2[1],
                                  complete=match$0[3],
                                  _aTK_=run_and_exit(complete,env$0,part);
                                 break;
                                case 2:
                                 var f$0=t$2[1],t$3=caml_call1(f$0,1),t$2=t$3;continue;
                                case 3:
                                 var t$4=t$2[1];
                                 if(t$4){var match$1=t$4[1],t$5=match$1[1],t$2=t$5;continue}
                                 var _aTK_=exit(0);
                                 break;
                                default:var t$6=t$2[1],t$2=t$6;continue}
                              var _aTM_=caml_call1(_LC_,_aTK_);
                              break}}}
                        return caml_call1(_aTM_,_aTL_)}});
                if(0 === match[0])
                 {var thunk=match[1];
                  caml_call1(when_parsing_succeeds,0);
                  return caml_call1(thunk,-903816947)}
                var exn=match[1];
                if(exn[1] === Failed_to_parse_command_line && for_completion)
                 return exit(0);
                if(exn[1] === Exit_called)
                 {var status=exn[2];return exit(status)}
                if(exn[1] === Failed_to_parse_command_line)
                 var msg=exn[2],exn_str=msg;
                else
                 var
                  exn_str=
                   caml_call2(to_string_hum,0,caml_call1(sexp_of_exn,exn));
                var verbose=caml_call2(_xD_,verbose_on_parse_error,1);
                if(verbose)
                 var
                  _aTt_=
                   [0,
                    cst_For_usage_information_run,
                    [0,
                     caml_call2
                      (_Fp_,
                       cst$233,
                       caml_call2(_Fp_,to_string$38(path),cst_help$6)),
                     0]],
                  _aTs_=function(line){return caml_call2(_Fp_,cst$229,line)},
                  error_msg=
                   caml_call2
                    (_Bq_,
                     _ap9_,
                     [0,
                      cst_Error_parsing_command_line,
                      [0,
                       caml_call2
                        (_Bq_,
                         _ap6_,
                         caml_call2(_qF_,caml_call2(_BV_,exn_str,10),_aTs_)),
                       _aTt_]]);
                else
                 var error_msg=exn_str;
                caml_call1(_FL_,error_msg);
                return exit(1);
               case 1:
                var
                 group=t$0[1],
                 body=group[4],
                 subs=group[3],
                 readme=group[2],
                 summary=group[1],
                 completing=ends_in_complete(args$0),
                 _aTv_=caml_obj_tag(subs),
                 _aTw_=
                  250 === _aTv_
                   ?subs[1]
                   :246 === _aTv_?caml_call1(CamlinternalLazy[2],subs):subs,
                 env$2=caml_call3(set$8,env$1,subs_key,_aTw_),
                 die_showing_help=
                  function(msg)
                   {return completing
                            ?exit(0)
                            :(caml_call2
                               (_fC_,
                                _aqR_,
                                help_for_shape
                                 (shape$2([1,[0,summary,readme,subs,body]]),path,0,0,0)),
                              caml_call2(die(_aqS_),msg,0))},
                 parse_group=
                  function(args,maybe_new_comp_cword)
                   {var
                     maybe_new_comp_cword$0=
                      caml_call2(_xy_,maybe_new_comp_cword,prev$1);
                    function skip(rest)
                     {return parse_group(rest,maybe_new_comp_cword$0)}
                    function resolve(sub,rest)
                     {function _aTE_(x){return [0,x,-481604174]}
                      var
                       _aTF_=caml_obj_tag(subs),
                       _aTG_=
                        250 === _aTF_
                         ?subs[1]
                         :246 === _aTF_?caml_call1(CamlinternalLazy[2],subs):subs,
                       subs$0=caml_call2(_xi_[18],_aTG_,_aTE_),
                       match=caml_call3(lookup_expand$0,subs$0,sub,0);
                      if(0 === match[0])
                       {var match$0=match[1],t=match$0[2],sub$0=match$0[1];
                        return dispatch
                                (t,
                                 env$2,
                                 extend,
                                 [0,sub$0,path],
                                 rest,
                                 maybe_new_comp_cword$0,
                                 version,
                                 build_info,
                                 verbose_on_parse_error,
                                 when_parsing_succeeds,
                                 complete_subcommands)}
                      var msg=match[1];
                      return die_showing_help(msg)}
                    if(typeof args === "number")
                     {if(body)
                       {var body$0=body[1];
                        return caml_call1(body$0,parts_exe_basename(path))}
                      return die_showing_help
                              (caml_call2(_fx_,_aqT_,to_string$38(path)))}
                    else
                     {if(0 === args[0])
                       {var rest=args[2],sub=args[1],switch$0=0;
                        if(caml_string_notequal(sub,cst_build_info$3))
                         {var switch$1=0;
                          if(caml_string_notequal(sub,cst_help$11))
                           {var switch$2=0;
                            if(caml_string_notequal(sub,cst_version$6))
                             if(caml_string_notequal(sub,cst_build_info$4))
                              if(caml_string_notequal(sub,cst_help$12))
                               {if(caml_string_notequal(sub,cst_version$7))
                                 {switch$1 = 1;switch$2 = 1}}
                              else
                               switch$2 = 1;
                             else
                              {switch$0 = 1;switch$1 = 1;switch$2 = 1}
                            if(! switch$2)
                             {if(caml_call2(_Nq_,caml_call1(length$0,path),1))
                               return completing
                                       ?skip(rest)
                                       :(caml_call1(Version_info$0[1],version),exit(0));
                              switch$1 = 1}}
                          if(! switch$1)
                           {if(completing)return skip(rest);
                            if(typeof rest !== "number" && 0 === rest[0])
                             {var rest_of_rest=rest[2],first_of_rest=rest[1];
                              return resolve(first_of_rest,[0,sub,rest_of_rest])}
                            caml_call1
                             (_FE_,
                              help_for_shape
                               (shape$2([1,[0,group[1],group[2],subs,group[4]]]),
                                path,
                                0,
                                0,
                                0));
                            return exit(0)}}
                        else
                         switch$0 = 1;
                        if(switch$0 && caml_call2(_Nq_,caml_call1(length$0,path),1))
                         return completing
                                 ?skip(rest)
                                 :(caml_call1(Version_info$0[2],build_info),exit(0));
                        return resolve(sub,rest)}
                      var
                       part=args[1],
                       _aTy_=function(name){return caml_call2(_BQ_,name,part)},
                       _aTz_=function(_aTD_){return _aTD_[1]},
                       _aTA_=caml_obj_tag(subs),
                       _aTB_=
                        250 === _aTA_
                         ?subs[1]
                         :246 === _aTA_?caml_call1(CamlinternalLazy[2],subs):subs,
                       subs$0=
                        caml_call2
                         (_qr_,
                          caml_call2(_qj_,caml_call2(_qF_,_aTB_,_aTz_),_aTy_),
                          compare$37);
                      if(complete_subcommands)
                       {var
                         f=complete_subcommands[1],
                         _aTC_=fully_forced(shape$2(t$0)),
                         subcommands=caml_call1(_am0_[3],_aTC_),
                         match=caml_call3(f,caml_call1(parts,path),part,subcommands);
                        if(match)
                         {var to_output=match[1];
                          caml_call1(_FE_,caml_call2(_Bq_,_aqU_,to_output));
                          return exit(0)}
                        return exit(1)}
                      caml_call2(_pH_,subs$0,_FE_);
                      return exit(0)}};
                return parse_group(args$0,maybe_new_comp_cword);
               case 2:
                var
                 exec=t$0[1],
                 args$2=to_list$24(maybe_apply_extend(args$0,extend,path)),
                 prog=caml_call2(abs_path$0,exec[3],exec[4]),
                 args=caml_call2(_Oq_,exec[5],args$2),
                 env$0=exec[6];
                caml_call2
                 (_xK_,
                  maybe_new_comp_cword,
                  function(n)
                   {var
                     new_value=n + caml_call1(length$0,exec[5]) | 0,
                     data=caml_call1(to_string$6,new_value);
                    return caml_call2(_aTf_,to_string$33(key),data)});
                return caml_call1
                        (_LC_,
                         caml_call5
                          (For_unix_with_string_env_var[5][12],
                           prog,
                           [0,prog,args],
                           0,
                           env$0,
                           0));
               default:
                var
                 thunk$0=t$0[1],
                 _aTx_=caml_obj_tag(thunk$0),
                 t$1=
                  250 === _aTx_
                   ?thunk$0[1]
                   :246 === _aTx_
                     ?caml_call1(CamlinternalLazy[2],thunk$0)
                     :thunk$0,
                 t$0=t$1;
                continue}}
          function run
           (verbose_on_parse_error,
            version,
            build_info,
            opt,
            extend,
            _aTm_,
            complete_subcommands,
            t)
           {if(opt)
             var sth=opt[1],argv=sth;
            else
             var argv=caml_call1(to_list,caml_sys_argv(0));
            if(_aTm_)
             var sth$0=_aTm_[1],when_parsing_succeeds=sth$0;
            else
             var when_parsing_succeeds=function(_aTr_){return _aTr_};
            if(build_info)
             var v=build_info[1],build_info$0=v;
            else
             var build_info$0=Version_info$0[7];
            if(version)
             var
              v$0=version[1],
              version$0=
               [246,
                function(param)
                 {function _aTo_(_aTq_){return caml_call2(_BV_,_aTq_,10)}
                  var _aTp_=caml_call2(_qK_,caml_call2(_BV_,v$0,32),_aTo_);
                  return caml_call1(Version_info$0[5],_aTp_)}];
            else
             var version$0=Version_info$0[6];
            return handle_uncaught_and_exit
                    (function(param)
                      {var
                        t$0=caml_call3(Version_info$0[4],version$0,build_info$0,t),
                        t$1=add_help_subcommands(t$0),
                        match=handle_environment(t$1,argv),
                        args=match[2],
                        cmd=match[1],
                        match$0=process_args(cmd,args),
                        maybe_new_comp_cword=match$0[3],
                        args$0=match$0[2],
                        path=match$0[1];
                       try
                        {var
                          _aTn_=
                           dispatch
                            (t$1,
                             empty$9,
                             extend,
                             path,
                             args$0,
                             maybe_new_comp_cword,
                             version$0,
                             build_info$0,
                             verbose_on_parse_error,
                             when_parsing_succeeds,
                             complete_subcommands);
                         return _aTn_}
                       catch(exn)
                        {exn = caml_wrap_exception(exn);
                         if(exn[1] === Failed_to_parse_command_line)
                          {var msg=exn[2];
                           return ends_in_complete(args$0)
                                   ?exit(0)
                                   :(caml_call1(_FL_,msg),exit(1))}
                         throw exn}})}
          function deprecated_run
           (t,cmd,args,is_help,is_help_rec,is_help_rec_flags,is_expand_dots)
           {var
             parts$0=caml_call2(_BV_,cmd,32),
             path=caml_call1(parts,parts$0),
             args$0=is_expand_dots?[0,cst_expand_dots$0,args]:args,
             args$1=is_help_rec_flags?[0,cst_flags$10,args$0]:args$0,
             args$2=is_help_rec?[0,cst_r,args$1]:args$1,
             args$3=is_help?[0,cst_help$13,args$2]:args$2,
             args$4=of_list$11(args$3),
             t$0=add_help_subcommands(t),
             _aTj_=0;
            function _aTk_(_aTl_){return _aTl_}
            return dispatch
                    (t$0,
                     empty$9,
                     0,
                     path,
                     args$4,
                     0,
                     Version_info$0[6],
                     Version_info$0[7],
                     0,
                     _aTk_,
                     _aTj_)}
          return [0,shape$2,help_for_shape,run,deprecated_run]}],
       Stable$10];
    caml_register_global(5434,Core_Command,"Core__Command");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_String_id_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$449);
    caml_call1(Expect_test_collector[5][1],cst_core_src_string_id_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$450,cst$242);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$451);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_String_id_intf$0);
    var Core_String_id_intf=[0];
    caml_register_global(5435,Core_String_id_intf,"Core__String_id_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_String_id);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$452);
    caml_call1(Expect_test_collector[5][1],cst_core_src_string_id_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$453,cst$243);
    function Make_with_validate_without_pre(M,symbol)
     {function hash(x){return hash_string(x)}
      var
       Typename_of_t=caml_call1(Typerep_lib_Make_typename[1],[0,name$66]),
       typename_of_t=Typename_of_t[2],
       name_of_t=Typename_of_t[1],
       typerep_of_t=[9,[0,name_of_t,[0,typerep_of_string]]];
      function invalid(s,reason)
       {return [1,caml_call4(_fx_,_aqW_,s,M[1],reason)]}
      function check_for_whitespace(s)
       {var len=caml_ml_string_length(s);
        if(len === 0)return invalid(s,cst_it_is_empty);
        if
         (!
          caml_call1(_Ej_,caml_string_get(s,0))
          &&
          !
          caml_call1(_Ej_,caml_string_get(s,len - 1 | 0)))
         return _aqX_;
        return invalid(s,cst_it_has_whitespace_on_the_e)}
      function validate(s){return caml_call2(_h1_,caml_call1(M[2],s),_nE_)}
      function check(s)
       {if(M[3])
         {var match=check_for_whitespace(s);
          if(0 === match[0])return validate(s);
          var error=match[1];
          return [1,error]}
        return validate(s)}
      function to_string(_aTe_){return _aTe_}
      function of_string(s)
       {var match=check(s);
        if(0 === match[0])return s;
        var err=match[1];
        return caml_call1(_Fa_,err)}
      function t_of_sexp(sexp)
       {var s=caml_call1(Stable$4[1][16],sexp),match=check(s);
        if(0 === match[0])return s;
        var err=match[1];
        return caml_call2(_Oo_,err,sexp)}
      function to_binable(_aTd_){return _aTd_}
      var
       include=
        caml_call1
         (caml_call1
           (_fr_,
            [0,
             bin_shape_t$44,
             bin_size_t$47,
             bin_write_t$47,
             bin_read_t$96,
             bin_read_t$97]),
          [0,to_binable,of_string]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8],
       T=
        [0,
         compare$37,
         equal$21,
         hash_fold_t$15,
         hash,
         sexp_of_t$41,
         t_sexp_grammar$8,
         Typename_of_t,
         typename_of_t,
         typerep_of_t,
         check_for_whitespace,
         validate,
         check,
         to_string,
         pp$1,
         of_string,
         t_of_sexp,
         bin_size_t,
         bin_write_t,
         bin_read_t,
         bin_read_t$0,
         bin_shape_t,
         bin_writer_t,
         bin_reader_t,
         bin_t],
       compare=T[1],
       equal=T[2],
       hash_fold_t=T[3],
       hash$0=T[4],
       sexp_of_t=T[5],
       t_sexp_grammar=T[6],
       Typename_of_t$0=T[7],
       typename_of_t$0=T[8],
       typerep_of_t$0=T[9],
       check_for_whitespace$0=T[10],
       validate$0=T[11],
       check$0=T[12],
       to_string$0=T[13],
       pp=T[14],
       of_string$0=T[15],
       t_of_sexp$0=T[16],
       bin_size_t$0=T[17],
       bin_write_t$0=T[18],
       bin_read_t$1=T[19],
       bin_read_t$2=T[20],
       bin_shape_t$0=T[21],
       bin_writer_t$0=T[22],
       bin_reader_t$0=T[23],
       bin_t$0=T[24],
       include$0=caml_call1(_hd_[1][2],[0,T[1],T[5]]),
       comparator=include$0[1],
       T_with_comparator=
        [0,
         compare,
         equal,
         hash_fold_t,
         hash$0,
         sexp_of_t,
         t_sexp_grammar,
         Typename_of_t$0,
         typename_of_t$0,
         typerep_of_t$0,
         check_for_whitespace$0,
         validate$0,
         check$0,
         to_string$0,
         pp,
         of_string$0,
         t_of_sexp$0,
         bin_size_t$0,
         bin_write_t$0,
         bin_read_t$1,
         bin_read_t$2,
         bin_shape_t$0,
         bin_writer_t$0,
         bin_reader_t$0,
         bin_t$0,
         comparator],
       compare$0=T_with_comparator[1],
       equal$0=T_with_comparator[2],
       hash_fold_t$0=T_with_comparator[3],
       hash$1=T_with_comparator[4],
       sexp_of_t$0=T_with_comparator[5],
       t_sexp_grammar$0=T_with_comparator[6],
       Typename_of_t$1=T_with_comparator[7],
       typename_of_t$1=T_with_comparator[8],
       typerep_of_t$1=T_with_comparator[9],
       check_for_whitespace$1=T_with_comparator[10],
       validate$1=T_with_comparator[11],
       check$1=T_with_comparator[12],
       to_string$1=T_with_comparator[13],
       pp$0=T_with_comparator[14],
       of_string$1=T_with_comparator[15],
       t_of_sexp$1=T_with_comparator[16],
       bin_size_t$1=T_with_comparator[17],
       bin_write_t$1=T_with_comparator[18],
       bin_read_t$3=T_with_comparator[19],
       bin_read_t$4=T_with_comparator[20],
       bin_shape_t$1=T_with_comparator[21],
       bin_writer_t$1=T_with_comparator[22],
       bin_reader_t$1=T_with_comparator[23],
       bin_t$1=T_with_comparator[24],
       comparator$0=T_with_comparator[25],
       _aSm_=
        caml_call1
         (Stable$2[1][1],
          [0,
           T_with_comparator[17],
           T_with_comparator[18],
           T_with_comparator[19],
           T_with_comparator[20],
           T_with_comparator[21],
           T_with_comparator[22],
           T_with_comparator[23],
           T_with_comparator[24],
           T_with_comparator[1],
           T_with_comparator[16],
           T_with_comparator[5],
           T_with_comparator[25]]),
       Map=_aSm_[1],
       Set=_aSm_[2],
       include$1=
        caml_call1
         (Stable$3[1][1],
          [0,
           T_with_comparator[17],
           T_with_comparator[18],
           T_with_comparator[19],
           T_with_comparator[20],
           T_with_comparator[21],
           T_with_comparator[22],
           T_with_comparator[23],
           T_with_comparator[24],
           T_with_comparator[16],
           T_with_comparator[1],
           T_with_comparator[5],
           T_with_comparator[4]]),
       Table=include$1[1],
       Hash_set=include$1[2],
       hashable=include$1[3],
       V1=
        [0,
         T,
         T_with_comparator,
         compare$0,
         equal$0,
         hash_fold_t$0,
         hash$1,
         sexp_of_t$0,
         t_sexp_grammar$0,
         Typename_of_t$1,
         typename_of_t$1,
         typerep_of_t$1,
         check_for_whitespace$1,
         validate$1,
         check$1,
         to_string$1,
         pp$0,
         of_string$1,
         t_of_sexp$1,
         bin_size_t$1,
         bin_write_t$1,
         bin_read_t$3,
         bin_read_t$4,
         bin_shape_t$1,
         bin_writer_t$1,
         bin_reader_t$1,
         bin_t$1,
         comparator$0,
         Map,
         Set,
         Table,
         Hash_set,
         hashable],
       Stable=[0,V1],
       _aSn_=Stable[1][2],
       _aSv_=_aSn_[12],
       _aSy_=_aSn_[15],
       _aSI_=Stable[1][2],
       _aSo_=_aSn_[5],
       _aSp_=_aSn_[6],
       _aSq_=_aSn_[7],
       _aSr_=_aSn_[8],
       _aSs_=_aSn_[9],
       _aSt_=_aSn_[10],
       _aSu_=_aSn_[11],
       _aSw_=_aSn_[13],
       _aSx_=_aSn_[14],
       _aSz_=_aSn_[16],
       _aSA_=_aSn_[17],
       _aSB_=_aSn_[18],
       _aSC_=_aSn_[19],
       _aSD_=_aSn_[20],
       _aSE_=_aSn_[21],
       _aSF_=_aSn_[22],
       _aSG_=_aSn_[23],
       _aSH_=_aSn_[24],
       _aSJ_=
        _w6_
         ([0,
           _aSI_[17],
           _aSI_[18],
           _aSI_[19],
           _aSI_[20],
           _aSI_[21],
           _aSI_[22],
           _aSI_[23],
           _aSI_[24],
           _aSI_[16],
           _aSI_[5],
           _aSI_[25]]),
       _aS6_=Stable[1][2],
       _aSK_=_aSJ_[1],
       _aSL_=_aSJ_[2],
       _aSM_=_aSJ_[3],
       _aSN_=_aSJ_[4],
       _aSO_=_aSJ_[5],
       _aSP_=_aSJ_[6],
       _aSQ_=_aSJ_[7],
       _aSR_=_aSJ_[8],
       _aSS_=_aSJ_[9],
       _aST_=_aSJ_[10],
       _aSU_=_aSJ_[11],
       _aSV_=_aSJ_[12],
       _aSW_=_aSJ_[13],
       _aSX_=_aSJ_[14],
       _aSY_=_aSJ_[15],
       _aSZ_=_aSJ_[16],
       _aS0_=_aSJ_[17],
       _aS1_=_aSJ_[18],
       _aS2_=_aSJ_[19],
       _aS3_=_aSJ_[20],
       _aS4_=_aSJ_[21],
       _aS5_=_aSJ_[22],
       include$2=
        Make_binable
         ([0,
           _aS6_[3],
           _aS6_[17],
           _aS6_[18],
           _aS6_[19],
           _aS6_[20],
           _aS6_[21],
           _aS6_[22],
           _aS6_[23],
           _aS6_[24],
           _aS6_[16],
           _aS6_[1],
           _aS6_[5],
           _aS6_[4]]),
       _aS7_=include$2[1],
       _aS8_=include$2[2],
       _aS9_=include$2[3],
       _aS__=include$2[4],
       _aS$_=include$2[5],
       _aTa_=include$2[6],
       quickcheck_shrinker=caml_call1(_pB_[3],0);
      function _aTb_(string){return caml_call1(_hR_,caml_call1(_aSv_,string))}
      var
       _aTc_=caml_call1(_CT_,_E9_),
       quickcheck_generator=caml_call2(_pD_[60],_aTc_,_aTb_),
       arg_type=caml_call3(_aqV_[1],0,0,_aSy_);
      return [0,
              Stable,
              _aSo_,
              _aSp_,
              _aSq_,
              _aSr_,
              _aSs_,
              _aSt_,
              _aSu_,
              _aSv_,
              _aSw_,
              _aSx_,
              _aSy_,
              _aSz_,
              _aSA_,
              _aSB_,
              _aSC_,
              _aSD_,
              _aSE_,
              _aSF_,
              _aSG_,
              _aSH_,
              _aSK_,
              _aSL_,
              _aSM_,
              _aSN_,
              _aSO_,
              _aSP_,
              _aSQ_,
              _aSR_,
              _aSS_,
              _aST_,
              _aSU_,
              _aSV_,
              _aSW_,
              _aSX_,
              _aSY_,
              _aSZ_,
              _aS0_,
              _aS1_,
              _aS2_,
              _aS3_,
              _aS4_,
              _aS5_,
              _aS7_,
              _aS8_,
              _aS9_,
              _aS__,
              _aS$_,
              _aTa_,
              quickcheck_shrinker,
              _CP_,
              quickcheck_generator,
              arg_type]}
    function Make_without_pretty_printer(M,symbol)
     {var
       _aSl_=M[1],
       validate=caml_call1(_ip_,_aqY_),
       include=Make_with_validate_without_pre([0,_aSl_,validate,1],[0]),
       Stable=include[1],
       sexp_of_t=include[2],
       t_sexp_grammar=include[3],
       Typename_of_t=include[4],
       typename_of_t=include[5],
       typerep_of_t=include[6],
       check_for_whitespace=include[7],
       validate$0=include[8],
       check=include[9],
       to_string=include[10],
       pp=include[11],
       of_string=include[12],
       t_of_sexp=include[13],
       bin_size_t=include[14],
       bin_write_t=include[15],
       bin_read_t=include[16],
       bin_read_t$0=include[17],
       bin_shape_t=include[18],
       bin_writer_t=include[19],
       bin_reader_t=include[20],
       bin_t=include[21],
       symbol$0=include[22],
       symbol$1=include[23],
       symbol$2=include[24],
       symbol$3=include[25],
       symbol$4=include[26],
       symbol$5=include[27],
       equal=include[28],
       compare=include[29],
       min=include[30],
       max=include[31],
       ascending=include[32],
       descending=include[33],
       between=include[34],
       clamp_exn=include[35],
       clamp=include[36],
       validate_lbound=include[37],
       validate_ubound=include[38],
       validate_bound=include[39],
       Replace_polymorphic_compare=include[40],
       comparator=include[41],
       Map=include[42],
       Set=include[43],
       hash_fold_t=include[44],
       hash=include[45],
       hashable=include[46],
       Table=include[47],
       Hash_set=include[48],
       Hash_queue=include[49],
       quickcheck_shrinker=include[50],
       quickcheck_observer=include[51],
       quickcheck_generator=include[52],
       arg_type=include[53];
      return [0,
              Stable,
              sexp_of_t,
              t_sexp_grammar,
              Typename_of_t,
              typename_of_t,
              typerep_of_t,
              check_for_whitespace,
              validate$0,
              check,
              to_string,
              pp,
              of_string,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              symbol$5,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              quickcheck_shrinker,
              quickcheck_observer,
              quickcheck_generator,
              arg_type]}
    function Make$12(M,symbol)
     {var
       include$0=Make_without_pretty_printer(M,[0]),
       Stable=include$0[1],
       sexp_of_t=include$0[2],
       t_sexp_grammar=include$0[3],
       Typename_of_t=include$0[4],
       typename_of_t=include$0[5],
       typerep_of_t=include$0[6],
       check_for_whitespace=include$0[7],
       validate=include$0[8],
       check=include$0[9],
       to_string=include$0[10],
       of_string=include$0[12],
       t_of_sexp=include$0[13],
       bin_size_t=include$0[14],
       bin_write_t=include$0[15],
       bin_read_t=include$0[16],
       bin_read_t$0=include$0[17],
       bin_shape_t=include$0[18],
       bin_writer_t=include$0[19],
       bin_reader_t=include$0[20],
       bin_t=include$0[21],
       symbol$0=include$0[22],
       symbol$1=include$0[23],
       symbol$2=include$0[24],
       symbol$3=include$0[25],
       symbol$4=include$0[26],
       symbol$5=include$0[27],
       equal=include$0[28],
       compare=include$0[29],
       min=include$0[30],
       max=include$0[31],
       ascending=include$0[32],
       descending=include$0[33],
       between=include$0[34],
       clamp_exn=include$0[35],
       clamp=include$0[36],
       validate_lbound=include$0[37],
       validate_ubound=include$0[38],
       validate_bound=include$0[39],
       Replace_polymorphic_compare=include$0[40],
       comparator=include$0[41],
       Map=include$0[42],
       Set=include$0[43],
       hash_fold_t=include$0[44],
       hash=include$0[45],
       hashable=include$0[46],
       Table=include$0[47],
       Hash_set=include$0[48],
       Hash_queue=include$0[49],
       quickcheck_shrinker=include$0[50],
       quickcheck_observer=include$0[51],
       quickcheck_generator=include$0[52],
       arg_type=include$0[53],
       module_name=M[1],
       include=caml_call1(Base_Pretty_printer[2],[0,module_name,to_string]),
       pp=include[1];
      return [0,
              Stable,
              sexp_of_t,
              t_sexp_grammar,
              Typename_of_t,
              typename_of_t,
              typerep_of_t,
              check_for_whitespace,
              validate,
              check,
              to_string,
              of_string,
              t_of_sexp,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              symbol$5,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              quickcheck_shrinker,
              quickcheck_observer,
              quickcheck_generator,
              arg_type,
              pp]}
    var
     _aqZ_=[0],
     _aq0_=[0,module_name$15],
     include$159=function(_aSk_){return Make$12(_aq0_,_aSk_)}(_aqZ_),
     _aq1_=include$159[1],
     _aq2_=include$159[2],
     _aq3_=include$159[3],
     _aq4_=include$159[10],
     _aq5_=include$159[11],
     _aq6_=include$159[12],
     _aq7_=include$159[13],
     _aq8_=include$159[14],
     _aq9_=include$159[15],
     _aq__=include$159[16],
     _aq$_=include$159[17],
     _ara_=include$159[18],
     _arb_=include$159[19],
     _arc_=include$159[20],
     _ard_=include$159[21],
     _are_=include$159[22],
     _arf_=include$159[23],
     _arg_=include$159[24],
     _arh_=include$159[25],
     _ari_=include$159[26],
     _arj_=include$159[27],
     _ark_=include$159[28],
     _arl_=include$159[29],
     _arm_=include$159[30],
     _arn_=include$159[31],
     _aro_=include$159[32],
     _arp_=include$159[33],
     _arq_=include$159[34],
     _arr_=include$159[35],
     _ars_=include$159[36],
     _art_=include$159[37],
     _aru_=include$159[38],
     _arv_=include$159[39],
     _arw_=include$159[40],
     _arx_=include$159[41],
     _ary_=include$159[42],
     _arz_=include$159[43],
     _arA_=include$159[44],
     _arB_=include$159[45],
     _arC_=include$159[46],
     _arD_=include$159[47],
     _arE_=include$159[48],
     _arF_=include$159[49],
     _arG_=include$159[50],
     _arH_=include$159[51],
     _arI_=include$159[52],
     _arJ_=include$159[53];
    function _arK_(_aSj_){return _aSj_}
    var arg_type$1=caml_call3(_aqV_[1],0,0,_arK_);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$454);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_String_id$0);
    var
     _arL_=
      [0,
       t_sexp_grammar$8,
       bin_size_t$47,
       bin_write_t$47,
       bin_read_t$96,
       bin_read_t$97,
       bin_shape_t$44,
       bin_writer_t$38,
       bin_reader_t$38,
       bin_t$38,
       t_of_sexp$34,
       sexp_of_t$41,
       of_string$2,
       to_string$3,
       pp$1,
       symbol$15,
       symbol$16,
       symbol$17,
       symbol$18,
       symbol$19,
       symbol$20,
       equal$21,
       compare$37,
       min$2,
       max$2,
       ascending$1,
       descending$1,
       between$1,
       clamp_exn$1,
       clamp$1,
       validate_lbound$0,
       validate_ubound$0,
       validate_bound$0,
       Replace_polymorphic_compare$0,
       comparator$4,
       Map$1,
       Set$1,
       hash_fold_t$15,
       hash$11,
       hashable$1,
       Table$1,
       Hash_set$1,
       Hash_queue$0,
       _CO_,
       _CP_,
       _CQ_,
       arg_type$1,
       Stable$4];
    function _arM_(_aSg_,_aSf_)
     {var _aSh_=Make_with_validate_without_pre(_aSg_,_aSf_),_aSi_=_aSh_[1][1];
      return [0,
              _aSh_[6],
              _aSh_[5],
              _aSh_[3],
              _aSh_[14],
              _aSh_[15],
              _aSh_[16],
              _aSh_[17],
              _aSh_[18],
              _aSh_[19],
              _aSh_[20],
              _aSh_[21],
              _aSh_[13],
              _aSh_[2],
              _aSh_[12],
              _aSh_[10],
              _aSh_[11],
              _aSh_[22],
              _aSh_[23],
              _aSh_[24],
              _aSh_[25],
              _aSh_[26],
              _aSh_[27],
              _aSh_[28],
              _aSh_[29],
              _aSh_[30],
              _aSh_[31],
              _aSh_[32],
              _aSh_[33],
              _aSh_[34],
              _aSh_[35],
              _aSh_[36],
              _aSh_[37],
              _aSh_[38],
              _aSh_[39],
              _aSh_[40],
              _aSh_[41],
              _aSh_[42],
              _aSh_[43],
              _aSh_[44],
              _aSh_[45],
              _aSh_[46],
              _aSh_[47],
              _aSh_[48],
              _aSh_[49],
              _aSh_[52],
              _aSh_[51],
              _aSh_[50],
              _aSh_[53],
              [0,
               [0,
                _aSi_[4],
                _aSi_[5],
                _aSi_[6],
                _aSi_[8],
                _aSi_[17],
                _aSi_[15],
                _aSi_[19],
                _aSi_[20],
                _aSi_[21],
                _aSi_[22],
                _aSi_[23],
                _aSi_[24],
                _aSi_[25],
                _aSi_[26],
                _aSi_[3],
                _aSi_[18],
                _aSi_[7],
                _aSi_[27],
                _aSi_[28],
                _aSi_[29],
                _aSi_[30],
                _aSi_[31],
                _aSi_[32]]]]}
    function _arN_(_aSc_,_aSb_)
     {var _aSd_=Make_without_pretty_printer(_aSc_,_aSb_),_aSe_=_aSd_[1][1];
      return [0,
              _aSd_[6],
              _aSd_[5],
              _aSd_[3],
              _aSd_[14],
              _aSd_[15],
              _aSd_[16],
              _aSd_[17],
              _aSd_[18],
              _aSd_[19],
              _aSd_[20],
              _aSd_[21],
              _aSd_[13],
              _aSd_[2],
              _aSd_[12],
              _aSd_[10],
              _aSd_[11],
              _aSd_[22],
              _aSd_[23],
              _aSd_[24],
              _aSd_[25],
              _aSd_[26],
              _aSd_[27],
              _aSd_[28],
              _aSd_[29],
              _aSd_[30],
              _aSd_[31],
              _aSd_[32],
              _aSd_[33],
              _aSd_[34],
              _aSd_[35],
              _aSd_[36],
              _aSd_[37],
              _aSd_[38],
              _aSd_[39],
              _aSd_[40],
              _aSd_[41],
              _aSd_[42],
              _aSd_[43],
              _aSd_[44],
              _aSd_[45],
              _aSd_[46],
              _aSd_[47],
              _aSd_[48],
              _aSd_[49],
              _aSd_[52],
              _aSd_[51],
              _aSd_[50],
              _aSd_[53],
              [0,
               [0,
                _aSe_[4],
                _aSe_[5],
                _aSe_[6],
                _aSe_[8],
                _aSe_[17],
                _aSe_[15],
                _aSe_[19],
                _aSe_[20],
                _aSe_[21],
                _aSe_[22],
                _aSe_[23],
                _aSe_[24],
                _aSe_[25],
                _aSe_[26],
                _aSe_[3],
                _aSe_[18],
                _aSe_[7],
                _aSe_[27],
                _aSe_[28],
                _aSe_[29],
                _aSe_[30],
                _aSe_[31],
                _aSe_[32]]]]}
    function _arO_(M,_aR$_)
     {var
       include$0=Make_with_validate_without_pre(M,[0]),
       Stable=include$0[1],
       sexp_of_t=include$0[2],
       t_sexp_grammar=include$0[3],
       typename_of_t=include$0[5],
       typerep_of_t=include$0[6],
       to_string=include$0[10],
       of_string=include$0[12],
       t_of_sexp=include$0[13],
       bin_size_t=include$0[14],
       bin_write_t=include$0[15],
       bin_read_t=include$0[16],
       bin_read_t$0=include$0[17],
       bin_shape_t=include$0[18],
       bin_writer_t=include$0[19],
       bin_reader_t=include$0[20],
       bin_t=include$0[21],
       symbol=include$0[22],
       symbol$0=include$0[23],
       symbol$1=include$0[24],
       symbol$2=include$0[25],
       symbol$3=include$0[26],
       symbol$4=include$0[27],
       equal=include$0[28],
       compare=include$0[29],
       min=include$0[30],
       max=include$0[31],
       ascending=include$0[32],
       descending=include$0[33],
       between=include$0[34],
       clamp_exn=include$0[35],
       clamp=include$0[36],
       validate_lbound=include$0[37],
       validate_ubound=include$0[38],
       validate_bound=include$0[39],
       Replace_polymorphic_compare=include$0[40],
       comparator=include$0[41],
       Map=include$0[42],
       Set=include$0[43],
       hash_fold_t=include$0[44],
       hash=include$0[45],
       hashable=include$0[46],
       Table=include$0[47],
       Hash_set=include$0[48],
       Hash_queue=include$0[49],
       quickcheck_shrinker=include$0[50],
       quickcheck_observer=include$0[51],
       quickcheck_generator=include$0[52],
       arg_type=include$0[53],
       module_name=M[1],
       include=caml_call1(Base_Pretty_printer[2],[0,module_name,to_string]),
       pp=include[1],
       _aSa_=Stable[1];
      return [0,
              typerep_of_t,
              typename_of_t,
              t_sexp_grammar,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              t_of_sexp,
              sexp_of_t,
              of_string,
              to_string,
              pp,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator,
              Map,
              Set,
              hash_fold_t,
              hash,
              hashable,
              Table,
              Hash_set,
              Hash_queue,
              quickcheck_generator,
              quickcheck_observer,
              quickcheck_shrinker,
              arg_type,
              [0,
               [0,
                _aSa_[4],
                _aSa_[5],
                _aSa_[6],
                _aSa_[8],
                _aSa_[17],
                _aSa_[15],
                _aSa_[19],
                _aSa_[20],
                _aSa_[21],
                _aSa_[22],
                _aSa_[23],
                _aSa_[24],
                _aSa_[25],
                _aSa_[26],
                _aSa_[3],
                _aSa_[18],
                _aSa_[7],
                _aSa_[27],
                _aSa_[28],
                _aSa_[29],
                _aSa_[30],
                _aSa_[31],
                _aSa_[32]]]]}
    function _arP_(_aR8_,_aR7_)
     {var _aR9_=Make$12(_aR8_,_aR7_),_aR__=_aR9_[1][1];
      return [0,
              _aR9_[6],
              _aR9_[5],
              _aR9_[3],
              _aR9_[13],
              _aR9_[14],
              _aR9_[15],
              _aR9_[16],
              _aR9_[17],
              _aR9_[18],
              _aR9_[19],
              _aR9_[20],
              _aR9_[12],
              _aR9_[2],
              _aR9_[11],
              _aR9_[10],
              _aR9_[53],
              _aR9_[21],
              _aR9_[22],
              _aR9_[23],
              _aR9_[24],
              _aR9_[25],
              _aR9_[26],
              _aR9_[27],
              _aR9_[28],
              _aR9_[29],
              _aR9_[30],
              _aR9_[31],
              _aR9_[32],
              _aR9_[33],
              _aR9_[34],
              _aR9_[35],
              _aR9_[36],
              _aR9_[37],
              _aR9_[38],
              _aR9_[39],
              _aR9_[40],
              _aR9_[41],
              _aR9_[42],
              _aR9_[43],
              _aR9_[44],
              _aR9_[45],
              _aR9_[46],
              _aR9_[47],
              _aR9_[48],
              _aR9_[51],
              _aR9_[50],
              _aR9_[49],
              _aR9_[52],
              [0,
               [0,
                _aR__[4],
                _aR__[5],
                _aR__[6],
                _aR__[8],
                _aR__[17],
                _aR__[15],
                _aR__[19],
                _aR__[20],
                _aR__[21],
                _aR__[22],
                _aR__[23],
                _aR__[24],
                _aR__[25],
                _aR__[26],
                _aR__[3],
                _aR__[18],
                _aR__[7],
                _aR__[27],
                _aR__[28],
                _aR__[29],
                _aR__[30],
                _aR__[31],
                _aR__[32]]]]}
    var
     _arQ_=_aq1_[1],
     Core_String_id=
      [0,
       _aq3_,
       _aq7_,
       _aq8_,
       _aq9_,
       _aq__,
       _aq$_,
       _ara_,
       _arb_,
       _arc_,
       _aq6_,
       _aq2_,
       _aq5_,
       _aq4_,
       _arJ_,
       _ard_,
       _are_,
       _arf_,
       _arg_,
       _arh_,
       _ari_,
       _arj_,
       _ark_,
       _arl_,
       _arm_,
       _arn_,
       _aro_,
       _arp_,
       _arq_,
       _arr_,
       _ars_,
       _art_,
       _aru_,
       _arv_,
       _arw_,
       _arx_,
       _ary_,
       _arz_,
       _arA_,
       _arB_,
       _arC_,
       _arD_,
       _arE_,
       _arH_,
       _arG_,
       _arF_,
       _arI_,
       [0,
        [0,
         _arQ_[4],
         _arQ_[5],
         _arQ_[6],
         _arQ_[8],
         _arQ_[17],
         _arQ_[15],
         _arQ_[19],
         _arQ_[20],
         _arQ_[21],
         _arQ_[22],
         _arQ_[23],
         _arQ_[24],
         _arQ_[25],
         _arQ_[26],
         _arQ_[3],
         _arQ_[18],
         _arQ_[7],
         _arQ_[27],
         _arQ_[28],
         _arQ_[29],
         _arQ_[30],
         _arQ_[31],
         _arQ_[32]]],
       _arP_,
       _arO_,
       _arN_,
       _arM_,
       _arL_];
    caml_register_global(5436,Core_String_id,"Core__String_id");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Stack);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$455);
    caml_call1(Expect_test_collector[5][1],cst_core_src_stack_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$456,cst$244);
    var
     t_of_sexp$110=include$160[1],
     sexp_of_t$125=include$160[2],
     t_sexp_grammar$37=include$160[3],
     invariant$17=include$160[4],
     mem$14=include$160[5],
     length$21=include$160[6],
     is_empty$16=include$160[7],
     iter$35=include$160[8],
     fold$28=include$160[9],
     fold_result$8=include$160[10],
     fold_until$12=include$160[11],
     exists$26=include$160[12],
     for_all$26=include$160[13],
     count$13=include$160[14],
     sum$9=include$160[15],
     find$16=include$160[16],
     find_map$8=include$160[17],
     to_list$25=include$160[18],
     to_array$9=include$160[19],
     min_elt$13=include$160[20],
     max_elt$13=include$160[21],
     of_list$12=include$160[22],
     create$39=include$160[23],
     singleton$12=include$160[24],
     push=include$160[25],
     pop=include$160[26],
     pop_exn=include$160[27],
     top$0=include$160[28],
     top_exn$0=include$160[29],
     clear$2=include$160[30],
     copy$4=include$160[31],
     until_empty=include$160[32],
     capacity=include$160[33],
     set_capacity=include$160[34],
     include$161=
      caml_call1
       (Bin_prot_Utils[12],
        [0,
         [0,
          bin_shape_t$27,
          bin_size_t$33,
          bin_write_t$33,
          bin_read_t$69,
          bin_read_t$68],
         to_list$25,
         of_list$12]),
     _arR_=include$161[1],
     _arS_=include$161[2],
     _arT_=include$161[3],
     _arU_=include$161[4],
     _arV_=include$161[5],
     _arW_=include$161[6],
     _arX_=include$161[7],
     _arY_=include$161[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$457);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Stack$0);
    var
     Core_Stack=
      [0,
       t_of_sexp$110,
       sexp_of_t$125,
       t_sexp_grammar$37,
       invariant$17,
       mem$14,
       length$21,
       is_empty$16,
       iter$35,
       fold$28,
       fold_result$8,
       fold_until$12,
       exists$26,
       for_all$26,
       count$13,
       sum$9,
       find$16,
       find_map$8,
       to_list$25,
       to_array$9,
       min_elt$13,
       max_elt$13,
       of_list$12,
       create$39,
       singleton$12,
       push,
       pop,
       pop_exn,
       top$0,
       top_exn$0,
       clear$2,
       copy$4,
       until_empty,
       capacity,
       set_capacity,
       _arR_,
       _arS_,
       _arT_,
       _arU_,
       _arV_,
       _arW_,
       _arX_,
       _arY_];
    caml_register_global(5438,Core_Stack,"Core__Stack");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Stable_unit_test);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$458);
    caml_call1(Expect_test_collector[5][1],cst_core_src_stable_unit_test_$0);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$459,cst$245);
    function Make_sexp_deserialization_test(_aR3_)
     {function _aR4_(param)
       {function _aR5_(param)
         {var
           sexp_as_string=param[2],
           t=param[1],
           error=
            caml_call2
             (_ov_,
              0,
              function(param)
               {var _aR6_=caml_call1(of_string,sexp_as_string);
                return caml_call1(_aR3_[1],_aR6_)});
          if(0 === error[0])
           {var t$0=error[1];
            return caml_call2(_aR3_[11],t,t$0)
                    ?_arZ_
                    :caml_call5
                      (_oB_,
                       0,
                       0,
                       cst_sexp_deserialization_misma,
                       [0,[0,434236056,t],[0,165604846,t$0]],
                       function(param)
                        {var
                          arg1_009=param[2],
                          arg0_008=param[1],
                          v_006=arg0_008[2],
                          res0_010=[1,[0,_ar0_,[0,caml_call1(_aR3_[2],v_006),0]]],
                          v_007=arg1_009[2],
                          res1_011=[1,[0,_ar1_,[0,caml_call1(_aR3_[2],v_007),0]]];
                         return [1,[0,res0_010,[0,res1_011,0]]]})}
          return caml_call4
                  (_oI_,
                   error,
                   cst_could_not_deserialize_sexp,
                   [0,sexp_as_string,[0,434236056,t]],
                   function(param)
                    {var
                      arg1_003=param[2],
                      arg0_002=param[1],
                      res0_004=caml_call1(sexp_of_t$41,arg0_002),
                      v_001=arg1_003[2],
                      res1_005=[1,[0,_ar2_,[0,caml_call1(_aR3_[2],v_001),0]]];
                     return [1,[0,res0_004,[0,res1_005,0]]]})}
        caml_call1(_oy_,caml_call1(_oO_,caml_call2(_qF_,_aR3_[12],_aR5_)));
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_sexp_deserialization,
        0,
        cst_core_src_stable_unit_test_$1,
        6,
        2,
        772,
        _aR4_);
      return [0]}
    function Make_sexp_serialization_test(_aRZ_)
     {function _aR0_(param)
       {function _aR1_(param)
         {var sexp_as_string=param[2],t=param[1];
          return caml_call2
                  (_ov_,
                   0,
                   function(param)
                    {var
                      sexp=caml_call1(of_string,sexp_as_string),
                      serialized_sexp=caml_call1(_aRZ_[2],t),
                      _aR2_=caml_call2(_zj_,serialized_sexp,sexp);
                     return _aR2_
                             ?failwiths
                               (0,
                                _ar5_,
                                cst_sexp_serialization_mismatc,
                                [0,[0,434236056,sexp],[0,165604846,serialized_sexp]],
                                function(param)
                                 {var
                                   arg1_015=param[2],
                                   arg0_014=param[1],
                                   v_012=arg0_014[2],
                                   res0_016=[1,[0,_ar3_,[0,caml_call1(sexp_of_t$35,v_012),0]]],
                                   v_013=arg1_015[2],
                                   res1_017=[1,[0,_ar4_,[0,caml_call1(sexp_of_t$35,v_013),0]]];
                                  return [1,[0,res0_016,[0,res1_017,0]]]})
                             :_aR2_})}
        caml_call1(_oy_,caml_call1(_oO_,caml_call2(_qF_,_aRZ_[12],_aR1_)));
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_sexp_serialization,
        0,
        cst_core_src_stable_unit_test_$2,
        32,
        2,
        583,
        _aR0_);
      return [0]}
    function Make_bin_io_test(_aRV_)
     {function _aRW_(param)
       {function _aRX_(param)
         {var
           expected_bin_io=param[3],
           t=param[1],
           binable_m=
            [0,
             _aRV_[3],
             _aRV_[4],
             _aRV_[5],
             _aRV_[6],
             _aRV_[7],
             _aRV_[8],
             _aRV_[9],
             _aRV_[10]],
           serialized_bin_io=to_string$18(binable_m,t);
          if(caml_call2(symbol$20,serialized_bin_io,expected_bin_io))
           failwiths
            (0,
             _ar8_,
             cst_bin_io_serialization_misma,
             [0,
              t,
              [0,434236056,expected_bin_io],
              [0,165604846,serialized_bin_io]],
             function(param)
              {var
                arg2_022=param[3],
                arg1_021=param[2],
                arg0_020=param[1],
                res0_023=caml_call1(_aRV_[2],arg0_020),
                v_018=arg1_021[2],
                res1_024=[1,[0,_ar6_,[0,caml_call1(sexp_of_t$41,v_018),0]]],
                v_019=arg2_022[2],
                res2_025=[1,[0,_ar7_,[0,caml_call1(sexp_of_t$41,v_019),0]]];
               return [1,[0,res0_023,[0,res1_024,[0,res2_025,0]]]]});
          var
           t$0=of_string$16(binable_m,serialized_bin_io),
           _aRY_=1 - caml_call2(_aRV_[11],t,t$0);
          return _aRY_
                  ?failwiths
                    (0,
                     _ar$_,
                     cst_bin_io_deserialization_mis,
                     [0,[0,434236056,t],[0,165604846,t$0]],
                     function(param)
                      {var
                        arg1_029=param[2],
                        arg0_028=param[1],
                        v_026=arg0_028[2],
                        res0_030=[1,[0,_ar9_,[0,caml_call1(_aRV_[2],v_026),0]]],
                        v_027=arg1_029[2],
                        res1_031=[1,[0,_ar__,[0,caml_call1(_aRV_[2],v_027),0]]];
                       return [1,[0,res0_030,[0,res1_031,0]]]})
                  :_aRY_}
        caml_call2(_pH_,_aRV_[12],_aRX_);
        return 0}
      caml_call8
       (Ppx_inline_test_lib_Runtime[5],
        Inline_test_config,
        cst_bin_io,
        0,
        cst_core_src_stable_unit_test_$3,
        50,
        2,
        850,
        _aRW_);
      return [0]}
    function Make$13(T)
     {Make_sexp_deserialization_test(T);
      Make_sexp_serialization_test(T);
      Make_bin_io_test(T);
      return [0]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$460);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Stable_unit_test$0);
    var
     Core_Stable_unit_test=
      [0,
       Make_sexp_deserialization_test,
       Make_sexp_serialization_test,
       Make_bin_io_test,
       Make$13,
       function(T)
        {function _aRO_(param)
          {function _aRT_(param)
            {var
              match=param[2],
              sexps=match[1],
              t=param[1],
              sexps$0=caml_call2(_qF_,sexps,of_string),
              match$0=caml_call1(T[2],t);
             if(0 === match$0[0])
              var
               serialized_elements=
                failwiths(0,_asa_,cst_expected_list_when_seriali,t,T[2]);
             else
              var sexps$1=match$0[1],serialized_elements=sexps$1;
             var
              sorted_sexps=caml_call2(_qr_,sexps$0,_zl_),
              sorted_serialized=caml_call2(_qr_,serialized_elements,_zl_);
             if(1 - caml_call3(_rM_,_zg_,sorted_sexps,sorted_serialized))
              failwiths
               (0,
                _asd_,
                cst_sexp_serialization_mismatc$0,
                [0,[0,434236056,sexps$0],[0,165604846,serialized_elements]],
                function(param)
                 {var
                   arg1_035=param[2],
                   arg0_034=param[1],
                   v_032=arg0_034[2],
                   res0_036=
                    [1,
                     [0,_asb_,[0,caml_call2(sexp_of_list,sexp_of_t$35,v_032),0]]],
                   v_033=arg1_035[2],
                   res1_037=
                    [1,
                     [0,_asc_,[0,caml_call2(sexp_of_list,sexp_of_t$35,v_033),0]]];
                  return [1,[0,res0_036,[0,res1_037,0]]]});
             var
              sexp_permutations=
               caml_call2
                (_ro_,10,function(param){return caml_call2(_rH_,0,sexps$0)});
             return caml_call2
                     (_pH_,
                      sexp_permutations,
                      function(sexps)
                       {var
                         t$0=caml_call1(T[1],[1,sexps]),
                         _aRU_=1 - caml_call2(T[11],t,t$0);
                        return _aRU_
                                ?failwiths
                                  (0,
                                   _asg_,
                                   cst_sexp_deserialization_msima,
                                   [0,[0,434236056,t],[0,165604846,t$0]],
                                   function(param)
                                    {var
                                      arg1_041=param[2],
                                      arg0_040=param[1],
                                      v_038=arg0_040[2],
                                      res0_042=[1,[0,_ase_,[0,caml_call1(T[2],v_038),0]]],
                                      v_039=arg1_041[2],
                                      res1_043=[1,[0,_asf_,[0,caml_call1(T[2],v_039),0]]];
                                     return [1,[0,res0_042,[0,res1_043,0]]]})
                                :_aRU_})}
           caml_call2(_pH_,T[12],_aRT_);
           return 0}
         caml_call8
          (Ppx_inline_test_lib_Runtime[5],
           Inline_test_config,
           cst_sexp,
           0,
           cst_core_src_stable_unit_test_$4,
           83,
           2,
           1290,
           _aRO_);
         function is_concatenation(string,strings)
          {if(caml_call1(_A1_,string))return caml_call2(_pM_,strings,_A1_);
           function loop(rev_skipped,strings)
            {if(strings)
              {var
                strings$0=strings[2],
                prefix=strings[1],
                continue$0=
                 function(param)
                  {return loop([0,prefix,rev_skipped],strings$0)},
                match=caml_call2(_Cc_,string,prefix);
               if(match)
                {var
                  string$0=match[1],
                  _aRS_=
                   is_concatenation
                    (string$0,caml_call2(_p6_,rev_skipped,strings$0));
                 return _aRS_?_aRS_:continue$0(0)}
               return continue$0(0)}
             return 0}
           return loop(0,strings)}
         function _aRP_(param)
          {function _aRQ_(param)
            {var
              match=param[2],
              bin_io_elements=match[3],
              bin_io_header=match[2],
              t=param[1],
              binable_m=[0,T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10]],
              serialized=to_string$18(binable_m,t),
              match$0=caml_call2(_Cc_,serialized,bin_io_header);
             if(match$0)
              var
               elements_string=match$0[1],
               serialization_matches=
                is_concatenation(elements_string,bin_io_elements);
             else
              var serialization_matches=0;
             if(1 - serialization_matches)
              failwiths
               (0,
                _asj_,
                cst_serialization_mismatch,
                [0,
                 [0,434236056,[0,bin_io_header,bin_io_elements]],
                 [0,165604846,serialized]],
                function(param)
                 {var
                   arg1_051=param[2],
                   arg0_050=param[1],
                   v_044=arg0_050[2],
                   arg1_046=v_044[2],
                   arg0_045=v_044[1],
                   res0_047=caml_call1(sexp_of_t$41,arg0_045),
                   res1_048=caml_call2(sexp_of_list,sexp_of_t$41,arg1_046),
                   res0_052=[1,[0,_ash_,[0,[1,[0,res0_047,[0,res1_048,0]]],0]]],
                   v_049=arg1_051[2],
                   res1_053=[1,[0,_asi_,[0,caml_call1(sexp_of_t$41,v_049),0]]];
                  return [1,[0,res0_052,[0,res1_053,0]]]});
             var
              permutatations=
               caml_call2
                (_ro_,
                 10,
                 function(param){return caml_call2(_rH_,0,bin_io_elements)});
             return caml_call2
                     (_pH_,
                      permutatations,
                      function(elements)
                       {var
                         t$0=
                          of_string$16
                           (binable_m,
                            caml_call2(_Fp_,bin_io_header,caml_call2(_Bq_,0,elements))),
                         _aRR_=1 - caml_call2(T[11],t,t$0);
                        return _aRR_
                                ?failwiths
                                  (0,
                                   _asm_,
                                   cst_bin_io_deserialization_mis$0,
                                   [0,[0,434236056,t],[0,165604846,t$0]],
                                   function(param)
                                    {var
                                      arg1_057=param[2],
                                      arg0_056=param[1],
                                      v_054=arg0_056[2],
                                      res0_058=[1,[0,_ask_,[0,caml_call1(T[2],v_054),0]]],
                                      v_055=arg1_057[2],
                                      res1_059=[1,[0,_asl_,[0,caml_call1(T[2],v_055),0]]];
                                     return [1,[0,res0_058,[0,res1_059,0]]]})
                                :_aRR_})}
           caml_call2(_pH_,T[12],_aRQ_);
           return 0}
         caml_call8
          (Ppx_inline_test_lib_Runtime[5],
           Inline_test_config,
           cst_bin_io$0,
           0,
           cst_core_src_stable_unit_test_$5,
           134,
           2,
           1294,
           _aRP_);
         return [0]}];
    caml_register_global(5439,Core_Stable_unit_test,"Core__Stable_unit_test");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Blang);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$461);
    caml_call1(Expect_test_collector[5][1],cst_core_src_blang_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$462,cst$246);
    var
     _asn_=caml_call1(Bin_prot_Shape[3][1],cst_a$86),
     _aso_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_blang_ml_48_14),
     _asp_=
      [0,[0,cst_Base$8,[0,caml_call2(Bin_prot_Shape[15],_aso_,_asn_),0]],0],
     _asq_=caml_call1(Bin_prot_Shape[3][1],cst_a$87),
     _asr_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_blang_ml_47_26),
     _ass_=[0,caml_call2(Bin_prot_Shape[15],_asr_,_asq_),0],
     _ast_=caml_call1(Bin_prot_Shape[2][1],cst_t$273),
     _asu_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_ast_),_ass_),0],
     _asv_=caml_call1(Bin_prot_Shape[3][1],cst_a$88),
     _asw_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_blang_ml_47_19),
     _asx_=[0,caml_call2(Bin_prot_Shape[15],_asw_,_asv_),0],
     _asy_=caml_call1(Bin_prot_Shape[2][1],cst_t$274),
     _asz_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_asy_),_asx_),_asu_],
     _asA_=caml_call1(Bin_prot_Shape[3][1],cst_a$89),
     _asB_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_blang_ml_47_12),
     _asC_=[0,caml_call2(Bin_prot_Shape[15],_asB_,_asA_),0],
     _asD_=caml_call1(Bin_prot_Shape[2][1],cst_t$275),
     _asE_=
      [0,
       [0,
        cst_If,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_asD_),_asC_),_asz_]],
       _asp_],
     _asF_=caml_call1(Bin_prot_Shape[3][1],cst_a$90),
     _asG_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_blang_ml_46_13),
     _asH_=[0,caml_call2(Bin_prot_Shape[15],_asG_,_asF_),0],
     _asI_=caml_call1(Bin_prot_Shape[2][1],cst_t$276),
     _asJ_=
      [0,
       [0,
        cst_Not,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_asI_),_asH_),0]],
       _asE_],
     _asK_=caml_call1(Bin_prot_Shape[3][1],cst_a$91),
     _asL_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_blang_ml_45_19),
     _asM_=[0,caml_call2(Bin_prot_Shape[15],_asL_,_asK_),0],
     _asN_=caml_call1(Bin_prot_Shape[2][1],cst_t$277),
     _asO_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_asN_),_asM_),0],
     _asP_=caml_call1(Bin_prot_Shape[3][1],cst_a$92),
     _asQ_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_blang_ml_45_12),
     _asR_=[0,caml_call2(Bin_prot_Shape[15],_asQ_,_asP_),0],
     _asS_=caml_call1(Bin_prot_Shape[2][1],cst_t$278),
     _asT_=
      [0,
       [0,
        cst_Or,
        [0,caml_call1(caml_call1(Bin_prot_Shape[13],_asS_),_asR_),_asO_]],
       _asJ_],
     _asU_=caml_call1(Bin_prot_Shape[3][1],cst_a$93),
     _asV_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_blang_ml_44_20),
     _asW_=[0,caml_call2(Bin_prot_Shape[15],_asV_,_asU_),0],
     _asX_=caml_call1(Bin_prot_Shape[2][1],cst_t$279),
     _asY_=[0,caml_call1(caml_call1(Bin_prot_Shape[13],_asX_),_asW_),0],
     _asZ_=caml_call1(Bin_prot_Shape[3][1],cst_a$94),
     _as0_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_blang_ml_44_13),
     _as1_=[0,caml_call2(Bin_prot_Shape[15],_as0_,_asZ_),0],
     _as2_=caml_call1(Bin_prot_Shape[2][1],cst_t$280),
     _as5_=
      [0,
       _as4_,
       [0,
        _as3_,
        [0,
         [0,
          cst_And,
          [0,caml_call1(caml_call1(Bin_prot_Shape[13],_as2_),_as1_),_asY_]],
         _asT_]]],
     _as6_=caml_call1(Bin_prot_Shape[9],_as5_),
     _as7_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$95),0],
     _as8_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$281),_as7_,_as6_],0],
     _as9_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_blang_ml_41_2),
     group$147=caml_call2(Bin_prot_Shape[6],_as9_,_as8_);
    function bin_shape_t$141(a)
     {var _aRN_=caml_call1(Bin_prot_Shape[2][1],cst_t$282);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$147,_aRN_),[0,a,0])}
    function bin_size_t$90(size_of_a,param)
     {if(typeof param === "number")
       return 1;
      else
       switch(param[0])
        {case 0:
          var
           v2=param[2],
           v1=param[1],
           _aRE_=bin_size_t$90(size_of_a,v1),
           size=caml_call2(Bin_prot_Common[23],1,_aRE_),
           _aRF_=bin_size_t$90(size_of_a,v2);
          return caml_call2(Bin_prot_Common[23],size,_aRF_);
         case 1:
          var
           v2$0=param[2],
           v1$0=param[1],
           _aRG_=bin_size_t$90(size_of_a,v1$0),
           size$0=caml_call2(Bin_prot_Common[23],1,_aRG_),
           _aRH_=bin_size_t$90(size_of_a,v2$0);
          return caml_call2(Bin_prot_Common[23],size$0,_aRH_);
         case 2:
          var v1$1=param[1],_aRI_=bin_size_t$90(size_of_a,v1$1);
          return caml_call2(Bin_prot_Common[23],1,_aRI_);
         case 3:
          var
           v3=param[3],
           v2$1=param[2],
           v1$2=param[1],
           _aRJ_=bin_size_t$90(size_of_a,v1$2),
           size$1=caml_call2(Bin_prot_Common[23],1,_aRJ_),
           _aRK_=bin_size_t$90(size_of_a,v2$1),
           size$2=caml_call2(Bin_prot_Common[23],size$1,_aRK_),
           _aRL_=bin_size_t$90(size_of_a,v3);
          return caml_call2(Bin_prot_Common[23],size$2,_aRL_);
         default:
          var v1$3=param[1],_aRM_=caml_call1(size_of_a,v1$3);
          return caml_call2(Bin_prot_Common[23],1,_aRM_)}}
    function bin_write_t$91(write_a,buf,pos,param)
     {var pos$0=pos,param$0=param;
      for(;;)
       if(typeof param$0 === "number")
        return 0 === param$0
                ?caml_call3(Bin_prot_Write[31],buf,pos$0,0)
                :caml_call3(Bin_prot_Write[31],buf,pos$0,1);
       else
        switch(param$0[0])
         {case 0:
           var
            v2=param$0[2],
            v1=param$0[1],
            pos$1=caml_call3(Bin_prot_Write[31],buf,pos$0,2),
            pos$6=bin_write_t$91(write_a,buf,pos$1,v1),
            pos$0=pos$6,
            param$0=v2;
           continue;
          case 1:
           var
            v2$0=param$0[2],
            v1$0=param$0[1],
            pos$2=caml_call3(Bin_prot_Write[31],buf,pos$0,3),
            pos$7=bin_write_t$91(write_a,buf,pos$2,v1$0),
            pos$0=pos$7,
            param$0=v2$0;
           continue;
          case 2:
           var
            v1$1=param$0[1],
            pos$3=caml_call3(Bin_prot_Write[31],buf,pos$0,4),
            pos$0=pos$3,
            param$0=v1$1;
           continue;
          case 3:
           var
            v3=param$0[3],
            v2$1=param$0[2],
            v1$2=param$0[1],
            pos$4=caml_call3(Bin_prot_Write[31],buf,pos$0,5),
            pos$8=bin_write_t$91(write_a,buf,pos$4,v1$2),
            pos$9=bin_write_t$91(write_a,buf,pos$8,v2$1),
            pos$0=pos$9,
            param$0=v3;
           continue;
          default:
           var
            v1$3=param$0[1],
            pos$5=caml_call3(Bin_prot_Write[31],buf,pos$0,6);
           return caml_call3(write_a,buf,pos$5,v1$3)}}
    function bin_writer_t$116(bin_writer_a)
     {function _aRA_(v)
       {var _aRB_=bin_writer_a[2];
        return function(_aRC_,_aRD_)
         {return bin_write_t$91(_aRB_,v,_aRC_,_aRD_)}}
      return [0,function(v){return bin_size_t$90(bin_writer_a[1],v)},_aRA_]}
    function bin_read_t$179(of_a,buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_blang_ml_T_t,pos_ref[1])}
    function bin_read_t$180(of_a,buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(6 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_as__,pos_ref[1]);
      switch(match)
       {case 0:return 0;
        case 1:return 1;
        case 2:
         var
          arg_1$0=bin_read_t$180(of_a,buf,pos_ref),
          arg_2=bin_read_t$180(of_a,buf,pos_ref);
         return [0,arg_1$0,arg_2];
        case 3:
         var
          arg_1$1=bin_read_t$180(of_a,buf,pos_ref),
          arg_2$0=bin_read_t$180(of_a,buf,pos_ref);
         return [1,arg_1$1,arg_2$0];
        case 4:
         var arg_1$2=bin_read_t$180(of_a,buf,pos_ref);return [2,arg_1$2];
        case 5:
         var
          arg_1$3=bin_read_t$180(of_a,buf,pos_ref),
          arg_2$1=bin_read_t$180(of_a,buf,pos_ref),
          arg_3=bin_read_t$180(of_a,buf,pos_ref);
         return [3,arg_1$3,arg_2$1,arg_3];
        default:var arg_1=caml_call2(of_a,buf,pos_ref);return [4,arg_1]}}
    function bin_reader_t$116(bin_reader_a)
     {function _aRz_(buf,pos_ref,vtag)
       {return bin_read_t$179(bin_reader_a[1],buf,pos_ref,vtag)}
      return [0,
              function(buf,pos_ref)
               {return bin_read_t$180(bin_reader_a[1],buf,pos_ref)},
              _aRz_]}
    function bin_t$116(bin_a)
     {var _aRx_=bin_reader_t$116(bin_a[3]),_aRy_=bin_writer_t$116(bin_a[2]);
      return [0,bin_shape_t$141(bin_a[1]),_aRy_,_aRx_]}
    function compare$105(cmp_a,a_001,b_002)
     {var cmp_a$0=cmp_a,a_001$0=a_001,b_002$0=b_002;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_001$0,b_002$0))return 0;
        var switch$0=0;
        if(typeof a_001$0 === "number")
         {if(0 === a_001$0)
           {if(typeof b_002$0 === "number" && ! b_002$0)return 0;return -1}
          if(typeof b_002$0 !== "number")return -1;
          if(b_002$0)return 0}
        else
         switch(a_001$0[0])
          {case 0:
            var _aRo_=a_001$0[2],_aRp_=a_001$0[1];
            if(typeof b_002$0 === "number")
             {if(0 !== b_002$0)switch$0 = 1}
            else
             {if(0 === b_002$0[0])
               {var
                 b_006=b_002$0[2],
                 b_004=b_002$0[1],
                 n=
                  compare$105
                   (function(cmp_a)
                      {return function(a_007,b_008)
                        {return caml_call2(cmp_a,a_007,b_008)}}
                     (cmp_a$0),
                    _aRp_,
                    b_004);
                if(0 === n)
                 {var
                   cmp_a$5=
                    function(cmp_a)
                     {function cmp_a$0(a_009,b_010)
                       {return caml_call2(cmp_a,a_009,b_010)}
                      return cmp_a$0},
                   cmp_a$1=cmp_a$5(cmp_a$0),
                   cmp_a$0=cmp_a$1,
                   a_001$0=_aRo_,
                   b_002$0=b_006;
                  continue}
                return n}
              return -1}
            break;
           case 1:
            var _aRq_=a_001$0[2],_aRr_=a_001$0[1];
            if(typeof b_002$0 === "number")
             {if(0 !== b_002$0)switch$0 = 1}
            else
             switch(b_002$0[0])
              {case 0:switch$0 = 2;break;
               case 1:
                var
                 b_014=b_002$0[2],
                 b_012=b_002$0[1],
                 n$0=
                  compare$105
                   (function(cmp_a)
                      {return function(a_015,b_016)
                        {return caml_call2(cmp_a,a_015,b_016)}}
                     (cmp_a$0),
                    _aRr_,
                    b_012);
                if(0 === n$0)
                 {var
                   cmp_a$6=
                    function(cmp_a)
                     {function cmp_a$0(a_017,b_018)
                       {return caml_call2(cmp_a,a_017,b_018)}
                      return cmp_a$0},
                   cmp_a$2=cmp_a$6(cmp_a$0),
                   cmp_a$0=cmp_a$2,
                   a_001$0=_aRq_,
                   b_002$0=b_014;
                  continue}
                return n$0;
               default:return -1}
            break;
           case 2:
            var _aRs_=a_001$0[1];
            if(typeof b_002$0 === "number")
             {if(0 !== b_002$0)switch$0 = 1}
            else
             switch(b_002$0[0])
              {case 0:switch$0 = 2;break;
               case 1:switch$0 = 3;break;
               case 2:
                var
                 b_002$1=b_002$0[1],
                 cmp_a$7=
                  function(cmp_a)
                   {function cmp_a$0(a_021,b_022)
                     {return caml_call2(cmp_a,a_021,b_022)}
                    return cmp_a$0},
                 cmp_a$3=cmp_a$7(cmp_a$0),
                 cmp_a$0=cmp_a$3,
                 a_001$0=_aRs_,
                 b_002$0=b_002$1;
                continue;
               default:return -1}
            break;
           case 3:
            var _aRt_=a_001$0[3],_aRu_=a_001$0[2],_aRv_=a_001$0[1];
            if(typeof b_002$0 === "number")
             {if(0 !== b_002$0)switch$0 = 1}
            else
             switch(b_002$0[0])
              {case 0:switch$0 = 2;break;
               case 1:switch$0 = 3;break;
               case 2:switch$0 = 4;break;
               case 3:
                var
                 b_028=b_002$0[3],
                 b_026=b_002$0[2],
                 b_024=b_002$0[1],
                 n$1=
                  compare$105
                   (function(cmp_a)
                      {return function(a_029,b_030)
                        {return caml_call2(cmp_a,a_029,b_030)}}
                     (cmp_a$0),
                    _aRv_,
                    b_024);
                if(0 === n$1)
                 {var
                   n$2=
                    compare$105
                     (function(cmp_a)
                        {return function(a_031,b_032)
                          {return caml_call2(cmp_a,a_031,b_032)}}
                       (cmp_a$0),
                      _aRu_,
                      b_026);
                  if(0 === n$2)
                   {var
                     cmp_a$8=
                      function(cmp_a)
                       {function cmp_a$0(a_033,b_034)
                         {return caml_call2(cmp_a,a_033,b_034)}
                        return cmp_a$0},
                     cmp_a$4=cmp_a$8(cmp_a$0),
                     cmp_a$0=cmp_a$4,
                     a_001$0=_aRt_,
                     b_002$0=b_028;
                    continue}
                  return n$2}
                return n$1;
               default:return -1}
            break;
           default:
            var _aRw_=a_001$0[1];
            if(typeof b_002$0 === "number")
             {if(0 !== b_002$0)switch$0 = 1}
            else
             switch(b_002$0[0])
              {case 0:switch$0 = 2;break;
               case 1:switch$0 = 3;break;
               case 2:switch$0 = 4;break;
               case 3:return 1;
               default:
                var b_036=b_002$0[1];return caml_call2(cmp_a$0,_aRw_,b_036)}}
        switch(switch$0)
         {case 0:return 1;
          case 1:return 1;
          case 2:return 1;
          case 3:return 1;
          default:return 1}}}
    function equal$44(cmp_a,a_037,b_038)
     {var cmp_a$0=cmp_a,a_037$0=a_037,b_038$0=b_038;
      for(;;)
       {if(caml_call2(Ppx_compare_lib[1],a_037$0,b_038$0))return 1;
        var switch$0=0;
        if(typeof a_037$0 === "number")
         {if(0 === a_037$0)
           {if(typeof b_038$0 === "number" && ! b_038$0)return 1;return 0}
          if(typeof b_038$0 !== "number")return 0;
          if(b_038$0)return 1}
        else
         switch(a_037$0[0])
          {case 0:
            var _aRa_=a_037$0[2],_aRb_=a_037$0[1];
            if(typeof b_038$0 === "number")
             {if(0 !== b_038$0)switch$0 = 1}
            else
             {if(0 === b_038$0[0])
               {var
                 b_042=b_038$0[2],
                 b_040=b_038$0[1],
                 _aRc_=
                  equal$44
                   (function(cmp_a)
                      {return function(a_043,b_044)
                        {return caml_call2(cmp_a,a_043,b_044)}}
                     (cmp_a$0),
                    _aRb_,
                    b_040);
                if(_aRc_)
                 {var
                   cmp_a$5=
                    function(cmp_a)
                     {function cmp_a$0(a_045,b_046)
                       {return caml_call2(cmp_a,a_045,b_046)}
                      return cmp_a$0},
                   cmp_a$1=cmp_a$5(cmp_a$0),
                   cmp_a$0=cmp_a$1,
                   a_037$0=_aRa_,
                   b_038$0=b_042;
                  continue}
                return _aRc_}
              return 0}
            break;
           case 1:
            var _aRd_=a_037$0[2],_aRe_=a_037$0[1];
            if(typeof b_038$0 === "number")
             {if(0 !== b_038$0)switch$0 = 1}
            else
             switch(b_038$0[0])
              {case 0:switch$0 = 2;break;
               case 1:
                var
                 b_050=b_038$0[2],
                 b_048=b_038$0[1],
                 _aRf_=
                  equal$44
                   (function(cmp_a)
                      {return function(a_051,b_052)
                        {return caml_call2(cmp_a,a_051,b_052)}}
                     (cmp_a$0),
                    _aRe_,
                    b_048);
                if(_aRf_)
                 {var
                   cmp_a$6=
                    function(cmp_a)
                     {function cmp_a$0(a_053,b_054)
                       {return caml_call2(cmp_a,a_053,b_054)}
                      return cmp_a$0},
                   cmp_a$2=cmp_a$6(cmp_a$0),
                   cmp_a$0=cmp_a$2,
                   a_037$0=_aRd_,
                   b_038$0=b_050;
                  continue}
                return _aRf_;
               default:return 0}
            break;
           case 2:
            var _aRg_=a_037$0[1];
            if(typeof b_038$0 === "number")
             {if(0 !== b_038$0)switch$0 = 1}
            else
             switch(b_038$0[0])
              {case 0:switch$0 = 2;break;
               case 1:switch$0 = 3;break;
               case 2:
                var
                 b_038$1=b_038$0[1],
                 cmp_a$7=
                  function(cmp_a)
                   {function cmp_a$0(a_057,b_058)
                     {return caml_call2(cmp_a,a_057,b_058)}
                    return cmp_a$0},
                 cmp_a$3=cmp_a$7(cmp_a$0),
                 cmp_a$0=cmp_a$3,
                 a_037$0=_aRg_,
                 b_038$0=b_038$1;
                continue;
               default:return 0}
            break;
           case 3:
            var _aRh_=a_037$0[3],_aRi_=a_037$0[2],_aRj_=a_037$0[1];
            if(typeof b_038$0 === "number")
             {if(0 !== b_038$0)switch$0 = 1}
            else
             switch(b_038$0[0])
              {case 0:switch$0 = 2;break;
               case 1:switch$0 = 3;break;
               case 2:switch$0 = 4;break;
               case 3:
                var
                 b_064=b_038$0[3],
                 b_062=b_038$0[2],
                 b_060=b_038$0[1],
                 _aRk_=
                  equal$44
                   (function(cmp_a)
                      {return function(a_065,b_066)
                        {return caml_call2(cmp_a,a_065,b_066)}}
                     (cmp_a$0),
                    _aRj_,
                    b_060);
                if(_aRk_)
                 {var
                   _aRl_=
                    equal$44
                     (function(cmp_a)
                        {return function(a_067,b_068)
                          {return caml_call2(cmp_a,a_067,b_068)}}
                       (cmp_a$0),
                      _aRi_,
                      b_062);
                  if(_aRl_)
                   {var
                     cmp_a$8=
                      function(cmp_a)
                       {function cmp_a$0(a_069,b_070)
                         {return caml_call2(cmp_a,a_069,b_070)}
                        return cmp_a$0},
                     cmp_a$4=cmp_a$8(cmp_a$0),
                     cmp_a$0=cmp_a$4,
                     a_037$0=_aRh_,
                     b_038$0=b_064;
                    continue}
                  var _aRm_=_aRl_}
                else
                 var _aRm_=_aRk_;
                return _aRm_;
               default:return 0}
            break;
           default:
            var _aRn_=a_037$0[1];
            if(typeof b_038$0 === "number")
             {if(0 !== b_038$0)switch$0 = 1}
            else
             switch(b_038$0[0])
              {case 0:switch$0 = 2;break;
               case 1:switch$0 = 3;break;
               case 2:switch$0 = 4;break;
               case 3:return 0;
               default:
                var b_072=b_038$0[1];return caml_call2(cmp_a$0,_aRn_,b_072)}}
        switch(switch$0)
         {case 0:return 0;
          case 1:return 0;
          case 2:return 0;
          case 3:return 0;
          default:return 0}}}
    function hash_fold_t$43(hash_fold_a,hsv,arg)
     {var hsv$0=hsv,arg$0=arg;
      for(;;)
       if(typeof arg$0 === "number")
        return 0 === arg$0
                ?caml_call2(Base_Hash[3],hsv$0,0)
                :caml_call2(Base_Hash[3],hsv$0,1);
       else
        switch(arg$0[0])
         {case 0:
           var
            a1=arg$0[2],
            a0=arg$0[1],
            hsv$1=caml_call2(Base_Hash[3],hsv$0,2),
            hsv$2=hash_fold_t$43(hash_fold_a,hsv$1,a0),
            hsv$0=hsv$2,
            arg$0=a1;
           continue;
          case 1:
           var
            a1$0=arg$0[2],
            a0$0=arg$0[1],
            hsv$3=caml_call2(Base_Hash[3],hsv$0,3),
            hsv$4=hash_fold_t$43(hash_fold_a,hsv$3,a0$0),
            hsv$0=hsv$4,
            arg$0=a1$0;
           continue;
          case 2:
           var
            a0$1=arg$0[1],
            hsv$5=caml_call2(Base_Hash[3],hsv$0,4),
            hsv$0=hsv$5,
            arg$0=a0$1;
           continue;
          case 3:
           var
            a2=arg$0[3],
            a1$1=arg$0[2],
            a0$2=arg$0[1],
            hsv$6=caml_call2(Base_Hash[3],hsv$0,5),
            hsv$7=hash_fold_t$43(hash_fold_a,hsv$6,a0$2),
            hsv$8=hash_fold_t$43(hash_fold_a,hsv$7,a1$1),
            hsv$0=hsv$8,
            arg$0=a2;
           continue;
          default:
           var a0$3=arg$0[1],hsv$9=caml_call2(Base_Hash[3],hsv$0,6);
           return caml_call2(hash_fold_a,hsv$9,a0$3)}}
    var
     Typename_of_t$30=caml_call1(Typerep_lib_Make_typename[2],[0,name$67]),
     typename_of_t$32=Typename_of_t$30[2];
    function typerep_of_t$32(of_a)
     {var name_of_t=caml_call1(Typename_of_t$30[1],of_a);
      return [9,
              [0,
               name_of_t,
               [0,
                [246,
                 function(_aQT_)
                  {var
                    tag0=
                     caml_call1
                      (Typerep_lib_Std[1][4][9],
                       [0,cst_True,_PE_,0,0,0,0,_PL_,_as$_]),
                    tag1=
                     caml_call1
                      (Typerep_lib_Std[1][4][9],
                       [0,cst_False,_PE_,0,0,1,1,_PL_,_ata_]),
                    _aQU_=
                     [0,
                      function(param)
                       {var v1=param[2],v0=param[1];return [0,v0,v1]}],
                    _aQV_=caml_call2(Typerep_lib_Typename[1],0,0),
                    _aQW_=typerep_of_t$32(of_a),
                    _aQX_=
                     [0,
                      cst_And$0,
                      caml_call2(_PF_,typerep_of_t$32(of_a),_aQW_),
                      2,
                      0,
                      2,
                      0,
                      _aQV_,
                      _aQU_],
                    tag2=caml_call1(Typerep_lib_Std[1][4][9],_aQX_),
                    _aQY_=
                     [0,
                      function(param)
                       {var v1=param[2],v0=param[1];return [1,v0,v1]}],
                    _aQZ_=caml_call2(Typerep_lib_Typename[1],0,0),
                    _aQ0_=typerep_of_t$32(of_a),
                    _aQ1_=
                     [0,
                      cst_Or$0,
                      caml_call2(_PF_,typerep_of_t$32(of_a),_aQ0_),
                      2,
                      0,
                      3,
                      1,
                      _aQZ_,
                      _aQY_],
                    tag3=caml_call1(Typerep_lib_Std[1][4][9],_aQ1_),
                    _aQ2_=[0,function(v0){return [2,v0]}],
                    _aQ3_=caml_call2(Typerep_lib_Typename[1],0,0),
                    _aQ4_=
                     [0,cst_Not$0,typerep_of_t$32(of_a),1,0,4,2,_aQ3_,_aQ2_],
                    tag4=caml_call1(Typerep_lib_Std[1][4][9],_aQ4_),
                    _aQ5_=
                     [0,
                      function(param)
                       {var v2=param[3],v1=param[2],v0=param[1];
                        return [3,v0,v1,v2]}],
                    _aQ6_=caml_call2(Typerep_lib_Typename[1],0,0),
                    _aQ7_=typerep_of_t$32(of_a),
                    _aQ8_=typerep_of_t$32(of_a),
                    _aQ9_=
                     [0,
                      cst_If$0,
                      caml_call3(_PG_,typerep_of_t$32(of_a),_aQ8_,_aQ7_),
                      3,
                      0,
                      5,
                      3,
                      _aQ6_,
                      _aQ5_],
                    tag5=caml_call1(Typerep_lib_Std[1][4][9],_aQ9_),
                    _aQ__=[0,function(v0){return [4,v0]}],
                    _aQ$_=
                     [0,
                      cst_Base$9,
                      of_a,
                      1,
                      0,
                      6,
                      4,
                      caml_call2(Typerep_lib_Typename[1],0,0),
                      _aQ__],
                    tag6=caml_call1(Typerep_lib_Std[1][4][9],_aQ$_),
                    typename=caml_call1(Typerep_lib_Std[1][1][2],name_of_t),
                    tags=
                     [0,
                      [0,tag0],
                      [0,tag1],
                      [0,tag2],
                      [0,tag3],
                      [0,tag4],
                      [0,tag5],
                      [0,tag6]],
                    polymorphic=0;
                   function value(param)
                    {if(typeof param === "number")
                      return 0 === param?[0,tag0,_PC_]:[0,tag1,_PC_];
                     else
                      switch(param[0])
                       {case 0:
                         var v1=param[2],v0=param[1];return [0,tag2,[0,v0,v1]];
                        case 1:
                         var v1$0=param[2],v0$0=param[1];
                         return [0,tag3,[0,v0$0,v1$0]];
                        case 2:var v0$1=param[1];return [0,tag4,v0$1];
                        case 3:
                         var v2=param[3],v1$1=param[2],v0$2=param[1];
                         return [0,tag5,[0,v0$2,v1$1,v2]];
                        default:var v0$3=param[1];return [0,tag6,v0$3]}}
                   return [8,
                           caml_call1
                            (Typerep_lib_Std[1][6][7],
                             [0,typename,tags,polymorphic,value])]}]]]]}
    function subterms(param)
     {if(typeof param !== "number")
       switch(param[0])
        {case 2:var t1$0=param[1];return [0,t1$0,0];
         case 3:
          var t3=param[3],t2$0=param[2],t1$1=param[1];
          return [0,t1$1,[0,t2$0,[0,t3,0]]];
         case 4:break;
         default:var t2=param[2],t1=param[1];return [0,t1,[0,t2,0]]}
      return 0}
    function contains_no_constants(t)
     {if(typeof t === "number")throw [0,Assert_failure,_atb_];
      return caml_call2(_pH_,subterms(t),contains_no_constants)}
    function invariant$18(t)
     {return caml_call2(_pH_,subterms(t),contains_no_constants)}
    var true$0=0,false$0=1;
    function base(v){return [4,v]}
    function not(t)
     {if(typeof t === "number")
       return 0 === t?1:0;
      else
       {if(2 === t[0]){var t$0=t[1];return t$0}return [2,t]}}
    function andalso(t1,t2)
     {var switch$0=0;
      if(typeof t2 === "number" && t2)switch$0 = 1;
      if(! switch$0)
       {var switch$1=0;
        if(typeof t1 === "number" && t1)switch$1 = 1;
        if(! switch$1)
         {if(typeof t2 === "number")
           var other=t1;
          else
           {var switch$2=0;
            if(typeof t1 === "number")
             {if(0 === t1){var other=t2;switch$2 = 1}}
            else
             if(0 === t1[0])
              {var t1b=t1[2],t1a=t1[1];return [0,t1a,andalso(t1b,t2)]}
            if(! switch$2)return [0,t1,t2]}
          return other}}
      return 1}
    function orelse(t1,t2)
     {var switch$0=0;
      if(typeof t2 === "number" && ! t2)switch$0 = 1;
      if(! switch$0)
       {var switch$1=0;
        if(typeof t1 === "number" && ! t1)switch$1 = 1;
        if(! switch$1)
         {if(typeof t2 === "number")
           var other=t1;
          else
           {var switch$2=0;
            if(typeof t1 === "number")
             {if(1 === t1){var other=t2;switch$2 = 1}}
            else
             if(1 === t1[0])
              {var t1b=t1[2],t1a=t1[1];return [1,t1a,orelse(t1b,t2)]}
            if(! switch$2)return [1,t1,t2]}
          return other}}
      return 0}
    function if$0(a,b,c)
     {if(typeof a === "number")return a?c:b;
      if(typeof b === "number" && ! b)return orelse(a,c);
      return typeof c === "number"
              ?c?andalso(a,b):orelse(not(a),b)
              :typeof b === "number"?andalso(not(a),c):[3,a,b,c]}
    function sexp_of_t$126(of_a_073,param)
     {if(typeof param === "number")
       return 0 === param?_atc_:_atd_;
      else
       switch(param[0])
        {case 0:
          var
           arg1_075=param[2],
           arg0_074=param[1],
           res0_076=sexp_of_t$126(of_a_073,arg0_074),
           res1_077=sexp_of_t$126(of_a_073,arg1_075);
          return [1,[0,_ate_,[0,res0_076,[0,res1_077,0]]]];
         case 1:
          var
           arg1_079=param[2],
           arg0_078=param[1],
           res0_080=sexp_of_t$126(of_a_073,arg0_078),
           res1_081=sexp_of_t$126(of_a_073,arg1_079);
          return [1,[0,_atf_,[0,res0_080,[0,res1_081,0]]]];
         case 2:
          var arg0_082=param[1],res0_083=sexp_of_t$126(of_a_073,arg0_082);
          return [1,[0,_atg_,[0,res0_083,0]]];
         case 3:
          var
           arg2_086=param[3],
           arg1_085=param[2],
           arg0_084=param[1],
           res0_087=sexp_of_t$126(of_a_073,arg0_084),
           res1_088=sexp_of_t$126(of_a_073,arg1_085),
           res2_089=sexp_of_t$126(of_a_073,arg2_086);
          return [1,[0,_ath_,[0,res0_087,[0,res1_088,[0,res2_089,0]]]]];
         default:
          var arg0_090=param[1],res0_091=caml_call1(of_a_073,arg0_090);
          return [1,[0,_ati_,[0,res0_091,0]]]}}
    var Raw=[0,sexp_of_t$126];
    function gather_conjuncts(t)
     {var param$3=[0,t,0],acc=0,param=param$3;
      for(;;)
       {if(param)
         {var _aQS_=param[1];
          if(typeof _aQS_ === "number")
           {if(0 === _aQS_){var param$0=param[2],param=param$0;continue}}
          else
           if(0 === _aQS_[0])
            {var
              ts=param[2],
              t2=_aQS_[2],
              t1=_aQS_[1],
              param$2=[0,t1,[0,t2,ts]],
              param=param$2;
             continue}
          var param$1=param[2],acc$0=[0,_aQS_,acc],acc=acc$0,param=param$1;
          continue}
        return caml_call1(parts,acc)}}
    function gather_disjuncts(t)
     {var param$3=[0,t,0],acc=0,param=param$3;
      for(;;)
       {if(param)
         {var _aQR_=param[1];
          if(typeof _aQR_ === "number")
           {if(1 === _aQR_){var param$1=param[2],param=param$1;continue}}
          else
           if(1 === _aQR_[0])
            {var
              ts=param[2],
              t2=_aQR_[2],
              t1=_aQR_[1],
              param$2=[0,t1,[0,t2,ts]],
              param=param$2;
             continue}
          var param$0=param[2],acc$0=[0,_aQR_,acc],acc=acc$0,param=param$0;
          continue}
        return caml_call1(parts,acc)}}
    function and(ts){return caml_call3(_qT_,ts,andalso,true$0)}
    function or(ts){return caml_call3(_qT_,ts,orelse,false$0)}
    function sexp_of_t$127(sexp_of_value,t)
     {function aux(t)
       {if(typeof t === "number")
         return 0 === t?_atl_:_atm_;
        else
         switch(t[0])
          {case 0:
            var ts=gather_conjuncts(t);
            return [1,[0,_atn_,caml_call2(_qF_,ts,aux)]];
           case 1:
            var ts$0=gather_disjuncts(t);
            return [1,[0,_ato_,caml_call2(_qF_,ts$0,aux)]];
           case 2:var t$0=t[1];return [1,[0,_atp_,[0,aux(t$0),0]]];
           case 3:
            var
             t3=t[3],
             t2=t[2],
             t1=t[1],
             _aQP_=[0,aux(t3),0],
             _aQQ_=[0,aux(t2),_aQP_];
            return [1,[0,_atq_,[0,aux(t1),_aQQ_]]];
           default:var x=t[1];return caml_call1(sexp_of_value,x)}}
      return aux(t)}
    function t_of_sexp$111(base_of_sexp,sexp)
     {function base(sexp){return [4,caml_call1(base_of_sexp,sexp)]}
      function aux(sexp)
       {if(0 === sexp[0])
         {var kw=sexp[1],match=caml_call1(_Bu_,kw);
          return caml_string_notequal(match,cst_false)
                  ?caml_string_notequal(match,cst_true)?base(sexp):true$0
                  :false$0}
        var _aQK_=sexp[1];
        if(_aQK_)
         {var _aQL_=_aQK_[1];
          if(0 === _aQL_[0])
           {var args=_aQK_[2],kw$0=_aQL_[1],match$0=caml_call1(_Bu_,kw$0);
            if(caml_string_notequal(match$0,cst_and))
             {if(caml_string_notequal(match$0,cst_if))
               {if(caml_string_notequal(match$0,cst_not))
                 return caml_string_notequal(match$0,cst_or)
                         ?base(sexp)
                         :or(caml_call2(_qF_,args,aux));
                var switch$0=0;
                if(args && ! args[2]){var x=args[1],_aQM_=x;switch$0 = 1}
                if(! switch$0)
                 var
                  n=caml_call1(length$0,args),
                  _aQM_=caml_call2(_Oo_,caml_call3(_fx_,_atj_,name$68,n),sexp);
                return not(aux(_aQM_))}
              var switch$1=0;
              if(args)
               {var _aQI_=args[2];
                if(_aQI_)
                 {var _aQJ_=_aQI_[2];
                  if(_aQJ_ && ! _aQJ_[2])
                   {var z=_aQJ_[1],y=_aQI_[1],x$0=args[1],match$1=[0,x$0,y,z];
                    switch$1 = 1}}}
              if(! switch$1)
               var
                n$0=caml_call1(length$0,args),
                match$1=
                 caml_call2(_Oo_,caml_call3(_fx_,_atk_,name$69,n$0),sexp);
              var
               z$0=match$1[3],
               y$0=match$1[2],
               x$1=match$1[1],
               _aQN_=aux(z$0),
               _aQO_=aux(y$0);
              return if$0(aux(x$1),_aQO_,_aQN_)}
            return and(caml_call2(_qF_,args,aux))}}
        return base(sexp)}
      return aux(sexp)}
    var
     defns=
      [0,
       [0,
        cst_blang,
        _atu_,
        [4,
         [0,
          _att_,
          [0,
           [3,
            [0,
             0,
             [0,
              _ats_,
              [0,
               _atr_,
               [0,
                [1,[0,cst_if$0,[0,[0,blang,[0,blang,[0,blang,0]]]]]],
                [0,
                 [1,[0,cst_and$0,[0,[1,blang]]]],
                 [0,
                  [1,[0,cst_or$0,[0,[1,blang]]]],
                  [0,[1,[0,cst_not$0,[0,[0,blang,0]]]],0]]]]]]]],
           0]]]],
       0];
    function t_sexp_grammar$38(base_grammar)
     {return [8,[7,cst_blang$0,[0,base_grammar,0]],defns]}
    function constant(b){return b?true$0:false$0}
    function symbol$246(a,b){return orelse(not(a),b)}
    function constant_value(param)
     {return typeof param === "number"?param?_atv_:_atw_:0}
    function values(t)
     {var param$7=[0,t,0],acc=0,param=param$7;
      for(;;)
       {if(param)
         {var _aQH_=param[1];
          if(typeof _aQH_ === "number")
           {if(0 === _aQH_){var param$0=param[2],param=param$0;continue}
            var param$1=param[2],param=param$1;
            continue}
          else
           switch(_aQH_[0])
            {case 0:
              var
               ts=param[2],
               t2=_aQH_[2],
               t1=_aQH_[1],
               param$2=[0,t1,[0,t2,ts]],
               param=param$2;
              continue;
             case 1:
              var
               ts$0=param[2],
               t2$0=_aQH_[2],
               t1$0=_aQH_[1],
               param$3=[0,t1$0,[0,t2$0,ts$0]],
               param=param$3;
              continue;
             case 2:
              var
               ts$1=param[2],
               t1$1=_aQH_[1],
               param$4=[0,t1$1,ts$1],
               param=param$4;
              continue;
             case 3:
              var
               ts$2=param[2],
               t3=_aQH_[3],
               t2$1=_aQH_[2],
               t1$2=_aQH_[1],
               param$5=[0,t1$2,[0,t2$1,[0,t3,ts$2]]],
               param=param$5;
              continue;
             default:
              var
               param$6=param[2],
               v=_aQH_[1],
               acc$0=[0,v,acc],
               acc=acc$0,
               param=param$6;
              continue}}
        return caml_call1(parts,acc)}}
    function fold$29(t,init,f)
     {function loop$0(counter,acc,t,pending)
       {var t$0=t,pending$0=pending;
        for(;;)
         if(typeof t$0 === "number")
          {if(counter < 50)
            {var counter$1=counter + 1 | 0;
             return next(counter$1,acc,pending$0)}
           return caml_trampoline_return(next,[0,acc,pending$0])}
         else
          switch(t$0[0])
           {case 2:var t$2=t$0[1],t$0=t$2;continue;
            case 3:
             var
              t3=t$0[3],
              t2$0=t$0[2],
              t$3=t$0[1],
              pending$2=[0,t2$0,[0,t3,pending$0]],
              t$0=t$3,
              pending$0=pending$2;
             continue;
            case 4:
             var a=t$0[1],_aQG_=caml_call2(f,acc,a);
             if(counter < 50)
              {var counter$0=counter + 1 | 0;
               return next(counter$0,_aQG_,pending$0)}
             return caml_trampoline_return(next,[0,_aQG_,pending$0]);
            default:
             var
              t2=t$0[2],
              t$1=t$0[1],
              pending$1=[0,t2,pending$0],
              t$0=t$1,
              pending$0=pending$1;
             continue}}
      function next(counter,acc,param)
       {if(param)
         {var ts=param[2],t=param[1];
          if(counter < 50)
           {var counter$0=counter + 1 | 0;return loop$0(counter$0,acc,t,ts)}
          return caml_trampoline_return(loop$0,[0,acc,t,ts])}
        return acc}
      function loop(acc,t,pending)
       {return caml_trampoline(loop$0(0,acc,t,pending))}
      return loop(init,t,0)}
    var
     C$1=caml_call1(include$7[16],[0,fold$29,-304398144,-304398144]),
     count$14=C$1[10],
     sum$10=C$1[11],
     exists$27=C$1[8],
     find$17=C$1[12],
     find_map$9=C$1[13],
     fold$30=C$1[5],
     for_all$27=C$1[9],
     is_empty$17=C$1[3],
     iter$36=C$1[4],
     length$22=C$1[2],
     mem$15=C$1[1],
     to_array$10=C$1[15],
     to_list$26=C$1[14],
     min_elt$14=C$1[16],
     max_elt$14=C$1[17],
     fold_result$9=C$1[6],
     fold_until$13=C$1[7];
    function bind$3(t,k)
     {var t$0=t;
      for(;;)
       if(typeof t$0 === "number")
        return 0 === t$0?true$0:false$0;
       else
        switch(t$0[0])
         {case 0:
           var t2=t$0[2],t1=t$0[1],other=bind$3(t1,k);
           if(typeof other === "number" && other)return false$0;
           return andalso(other,bind$3(t2,k));
          case 1:
           var t2$0=t$0[2],t1$0=t$0[1],other$0=bind$3(t1$0,k);
           if(typeof other$0 === "number" && ! other$0)return true$0;
           return orelse(other$0,bind$3(t2$0,k));
          case 2:var t1$1=t$0[1];return not(bind$3(t1$1,k));
          case 3:
           var t3=t$0[3],t2$1=t$0[2],t1$2=t$0[1],other$1=bind$3(t1$2,k);
           if(typeof other$1 === "number")
            {if(other$1){var t$0=t3;continue}var t$0=t2$1;continue}
           var _aQF_=bind$3(t3,k);
           return if$0(other$1,bind$3(t2$1,k),_aQF_);
          default:var v=t$0[1];return caml_call1(k,v)}}
    var
     include$162=caml_call1(Base_Monad[1],[0,bind$3,base,-349054340]),
     _atA_=include$162[4],
     _atx_=include$162[1],
     _aty_=include$162[2],
     _atz_=include$162[3],
     _atB_=include$162[5],
     _atC_=include$162[6],
     _atD_=include$162[7],
     _atE_=include$162[8],
     _atF_=include$162[9],
     _atG_=include$162[10],
     _atH_=include$162[11];
    function eval$0(t,base_eval)
     {var t$0=t;
      for(;;)
       if(typeof t$0 === "number")
        return 0 === t$0?1:0;
       else
        switch(t$0[0])
         {case 0:
           var t2=t$0[2],t1=t$0[1],_aQD_=eval$0(t1,base_eval);
           if(_aQD_){var t$0=t2;continue}
           return _aQD_;
          case 1:
           var t2$0=t$0[2],t1$0=t$0[1],_aQE_=eval$0(t1$0,base_eval);
           if(_aQE_)return _aQE_;
           var t$0=t2$0;
           continue;
          case 2:var t$1=t$0[1];return 1 - eval$0(t$1,base_eval);
          case 3:
           var t3=t$0[3],t2$1=t$0[2],t1$1=t$0[1];
           if(eval$0(t1$1,base_eval)){var t$0=t2$1;continue}
           var t$0=t3;
           continue;
          default:var x=t$0[1];return caml_call1(base_eval,x)}}
    function specialize(t,f)
     {return caml_call2
              (_atA_,
               t,
               function(v)
                {var match=caml_call1(f,v);
                 if(typeof match === "number")return [4,v];
                 var c=match[2];
                 return constant(c)})}
    function eval_set(all,set_of_base)
     {function aux(b)
       {if(typeof b === "number")
         {if(0 === b)return force(all);
          var _aQx_=caml_call1(comparator$0,force(all));
          return caml_call1(_wY_[1],_aQx_)}
        else
         switch(b[0])
          {case 0:
            var b$0=b[2],a=b[1],_aQy_=aux(b$0);
            return caml_call2(inter$2,aux(a),_aQy_);
           case 1:
            var b$1=b[2],a$0=b[1],_aQz_=aux(b$1);
            return caml_call2(union$3,aux(a$0),_aQz_);
           case 2:
            var a$1=b[1],_aQA_=aux(a$1);
            return caml_call2(diff$2,force(all),_aQA_);
           case 3:
            var
             b$2=b[3],
             a$2=b[2],
             cond=b[1],
             cond$0=aux(cond),
             _aQB_=aux(b$2),
             _aQC_=
              caml_call2(inter$2,caml_call2(diff$2,force(all),cond$0),_aQB_);
            return caml_call2
                    (union$3,caml_call2(inter$2,cond$0,aux(a$2)),_aQC_);
           default:var a$3=b[1];return caml_call1(set_of_base,a$3)}}
      return aux}
    function For_monad(M)
     {function bind(t,f)
       {if(typeof t === "number")
         return 0 === t?caml_call1(M[5],true$0):caml_call1(M[5],false$0);
        else
         switch(t[0])
          {case 0:
            var
             b=t[2],
             a=t[1],
             _aQi_=
              function(a)
               {if(typeof a === "number")
                 return a?caml_call1(M[5],false$0):bind(b,f);
                function _aQv_(b){return andalso(a,b)}
                var _aQw_=bind(b,f);
                return caml_call2(M[3][2],_aQw_,_aQv_)},
             _aQj_=bind(a,f);
            return caml_call2(M[3][1],_aQj_,_aQi_);
           case 1:
            var
             b$0=t[2],
             a$0=t[1],
             _aQk_=
              function(a)
               {if(typeof a === "number")
                 return a?bind(b$0,f):caml_call1(M[5],true$0);
                function _aQt_(b){return orelse(a,b)}
                var _aQu_=bind(b$0,f);
                return caml_call2(M[3][2],_aQu_,_aQt_)},
             _aQl_=bind(a$0,f);
            return caml_call2(M[3][1],_aQl_,_aQk_);
           case 2:
            var a$1=t[1],_aQm_=bind(a$1,f);
            return caml_call2(M[3][2],_aQm_,not);
           case 3:
            var
             c=t[3],
             b$1=t[2],
             a$2=t[1],
             _aQn_=
              function(a)
               {if(typeof a === "number")return a?bind(c,f):bind(b$1,f);
                function _aQp_(b)
                 {function _aQr_(c){return if$0(a,b,c)}
                  var _aQs_=bind(c,f);
                  return caml_call2(M[3][2],_aQs_,_aQr_)}
                var _aQq_=bind(b$1,f);
                return caml_call2(M[3][1],_aQq_,_aQp_)},
             _aQo_=bind(a$2,f);
            return caml_call2(M[3][1],_aQo_,_aQn_);
           default:var x=t[1];return caml_call1(f,x)}}
      function map(t,f)
       {return bind
                (t,
                 function(x)
                  {var _aQh_=caml_call1(f,x);
                   return caml_call2(M[3][2],_aQh_,base)})}
      function eval$1(t,f)
       {function _aQd_(t){return eval$0(t,_LC_)}
        var
         _aQe_=
          bind
           (t,
            function(x)
             {function _aQf_(param){return param?true$0:false$0}
              var _aQg_=caml_call1(f,x);
              return caml_call2(M[3][2],_aQg_,_aQf_)});
        return caml_call2(M[3][2],_aQe_,_aQd_)}
      return [0,map,bind,eval$1]}
    function quickcheck_generator$26(a_generator)
     {function _aP8_(self)
       {var
         _aQa_=[0,caml_call4(_pD_[18],self,self,self,if$0),0],
         _aQb_=[0,caml_call3(_pD_[17],self,self,andalso),_aQa_],
         _aQc_=[0,caml_call3(_pD_[17],self,self,orelse),_aQb_];
        return [0,caml_call2(_pD_[10],self,not),_aQc_]}
      var
       _aP9_=[0,caml_call1(_pD_[33],false$0),0],
       _aP__=[0,caml_call1(_pD_[33],true$0),_aP9_],
       _aP$_=[0,caml_call2(_pD_[10],a_generator,base),_aP__];
      return caml_call2(_pD_[61],_aP$_,_aP8_)}
    function quickcheck_shrinker$24(a_shrinker)
     {function _aPQ_(self)
       {function binop(operator,left,right)
         {var _aP2_=0;
          function _aP3_(right){return caml_call2(operator,left,right)}
          var
           _aP4_=
            [0,caml_call2(_i2_,caml_call2(_pB_[1],self,right),_aP3_),_aP2_];
          function _aP5_(left){return caml_call2(operator,left,right)}
          var
           _aP6_=
            [0,caml_call2(_i2_,caml_call2(_pB_[1],self,left),_aP5_),_aP4_],
           _aP7_=[0,caml_call1(_j3_,right),_aP6_];
          return caml_call1(_jz_,[0,caml_call1(_j3_,left),_aP7_])}
        function _aPR_(t)
         {if(typeof t === "number")
           return _i7_;
          else
           switch(t[0])
            {case 0:var right=t[2],left=t[1];return binop(andalso,left,right);
             case 1:
              var right$0=t[2],left$0=t[1];
              return binop(orelse,left$0,right$0);
             case 2:
              var
               t$0=t[1],
               _aPS_=caml_call2(_i2_,caml_call2(_pB_[1],self,t$0),not);
              return caml_call2(_ju_,caml_call1(_j3_,t$0),_aPS_);
             case 3:
              var
               else$0=t[3],
               then=t[2],
               if$1=t[1],
               _aPT_=0,
               _aPU_=function(else$0){return if$0(if$1,then,else$0)},
               _aPV_=
                [0,
                 caml_call2(_i2_,caml_call2(_pB_[1],self,else$0),_aPU_),
                 _aPT_],
               _aPW_=function(then){return if$0(if$1,then,else$0)},
               _aPX_=
                [0,caml_call2(_i2_,caml_call2(_pB_[1],self,then),_aPW_),_aPV_],
               _aPY_=function(if$1){return if$0(if$1,then,else$0)},
               _aPZ_=
                [0,caml_call2(_i2_,caml_call2(_pB_[1],self,if$1),_aPY_),_aPX_],
               _aP0_=[0,caml_call1(_j3_,else$0),_aPZ_],
               _aP1_=[0,caml_call1(_j3_,then),_aP0_];
              return caml_call1(_jz_,[0,caml_call1(_j3_,if$1),_aP1_]);
             default:
              var a=t[1];
              return caml_call2(_i2_,caml_call2(_pB_[1],a_shrinker,a),base)}}
        return caml_call1(_pB_[2],_aPR_)}
      return caml_call1(_pB_[19],_aPQ_)}
    function quickcheck_observer$23(a_observer)
     {function _aPP_(t,size,hash)
       {return hash_fold_t$43
                (function(hash,a)
                  {return caml_call4(_pC_[2],a_observer,a,size,hash)},
                 hash,
                 t)}
      return caml_call1(Base_quickcheck_Observer[36],_aPP_)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$463);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Blang$0);
    var
     Core_Blang=
      [0,
       bin_shape_t$141,
       bin_size_t$90,
       bin_write_t$91,
       bin_read_t$180,
       bin_read_t$179,
       bin_writer_t$116,
       bin_reader_t$116,
       bin_t$116,
       compare$105,
       equal$44,
       hash_fold_t$43,
       t_of_sexp$111,
       sexp_of_t$127,
       t_sexp_grammar$38,
       typerep_of_t$32,
       typename_of_t$32,
       Raw,
       base,
       true$0,
       false$0,
       constant,
       not,
       and,
       or,
       if$0,
       [0,
        base,
        true$0,
        false$0,
        constant,
        not,
        and,
        or,
        if$0,
        andalso,
        orelse,
        symbol$246,
        not],
       constant_value,
       gather_conjuncts,
       gather_disjuncts,
       mem$15,
       length$22,
       is_empty$17,
       iter$36,
       fold$30,
       fold_result$9,
       fold_until$13,
       exists$27,
       for_all$27,
       count$14,
       sum$10,
       find$17,
       find_map$9,
       to_list$26,
       to_array$10,
       min_elt$14,
       max_elt$14,
       quickcheck_generator$26,
       quickcheck_observer$23,
       quickcheck_shrinker$24,
       _atx_,
       _aty_,
       _atz_,
       _atA_,
       _atB_,
       _atC_,
       _atD_,
       _atE_,
       _atF_,
       _atG_,
       _atH_,
       values,
       eval$0,
       eval_set,
       specialize,
       For_monad,
       invariant$18,
       [0,
        [0,
         t_of_sexp$111,
         sexp_of_t$127,
         t_sexp_grammar$38,
         bin_shape_t$141,
         bin_size_t$90,
         bin_write_t$91,
         bin_read_t$180,
         bin_read_t$179,
         bin_writer_t$116,
         bin_reader_t$116,
         bin_t$116,
         compare$105,
         equal$44,
         hash_fold_t$43]]];
    caml_register_global(5440,Core_Blang,"Core__Blang");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Byte_units);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$464);
    caml_call1(Expect_test_collector[5][1],cst_core_src_byte_units_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$465,cst$247);
    var
     _atI_=Make_plain$1([0,compare$47,sexp_of_t$55]),
     symbol$247=_atI_[1],
     symbol$248=_atI_[2],
     symbol$249=_atI_[3],
     symbol$250=_atI_[4],
     symbol$251=_atI_[5],
     symbol$252=_atI_[6],
     equal$45=_atI_[7],
     min$22=_atI_[9],
     max$22=_atI_[10],
     ascending$20=_atI_[11],
     descending$20=_atI_[12],
     between$20=_atI_[13],
     clamp_exn$20=_atI_[14],
     clamp$20=_atI_[15],
     comparator$33=_atI_[16],
     validate_lbound$20=_atI_[17],
     validate_ubound$20=_atI_[18],
     validate_bound$20=_atI_[19],
     Replace_polymorphic_compare$16=_atI_[20],
     Map$33=_atI_[21],
     Set$33=_atI_[22],
     include$163=
      Make_plain$2([0,hash_fold_t$23,compare$47,sexp_of_t$55,hash$26]),
     compare$106=include$163[1],
     hash_fold_t$44=include$163[2],
     hash$57=include$163[3],
     hashable$20=include$163[4],
     Table$23=include$163[5],
     Hash_set$23=include$163[6],
     Hash_queue$18=include$163[7];
    function symbol$253(a,b){return caml_call2(symbol$104,a,b)}
    function symbol$254(a,b){return caml_call2(symbol$103,a,b)}
    function symbol$255(a,b){return caml_call2(symbol$111,a,b)}
    function symbol$256(t,s)
     {return caml_call1(of_float$4,caml_call1(to_float$3,t) / s)}
    function scale$3(t,s)
     {return caml_call1(of_float$4,caml_call1(to_float$3,t) * s)}
    function iscale(t,s)
     {return caml_call2(symbol$105,t,caml_call1(of_int$2,s))}
    function bytes_int64(t){return caml_call1(to_int64$2,t)}
    function bytes$0(t){return caml_call1(to_float$3,t)}
    function of_bytes_int(b){return caml_call1(of_int$2,b)}
    function of_bytes_int64_exn(b){return caml_call1(of_int64_exn$2,b)}
    function of_bytes$0(b){return caml_call1(of_float$4,b)}
    var
     kilobyte=of_bytes_int(1024),
     megabyte=iscale(kilobyte,1024),
     gigabyte=iscale(megabyte,1024),
     terabyte=iscale(gigabyte,1024),
     petabyte=iscale(terabyte,1024),
     exabyte=iscale(petabyte,1024),
     _atJ_=Base_Word_size[3]?of_bytes_int(8):of_bytes_int(4);
    function kilobytes(t){return symbol$255(t,kilobyte)}
    function megabytes(t){return symbol$255(t,megabyte)}
    function gigabytes(t){return symbol$255(t,gigabyte)}
    function terabytes(t){return symbol$255(t,terabyte)}
    function petabytes(t){return symbol$255(t,petabyte)}
    function exabytes(t){return symbol$255(t,exabyte)}
    function words_int_exn(t)
     {return caml_call1(to_int_exn$2,caml_call2(symbol$110,t,_atJ_))}
    function words(t){return symbol$255(t,_atJ_)}
    function of_kilobytes(t){return scale$3(kilobyte,t)}
    function of_megabytes(t){return scale$3(megabyte,t)}
    function of_gigabytes(t){return scale$3(gigabyte,t)}
    function of_terabytes(t){return scale$3(terabyte,t)}
    function of_petabytes(t){return scale$3(petabyte,t)}
    function of_exabytes(t){return scale$3(exabyte,t)}
    function of_words_int(t){return iscale(_atJ_,t)}
    function of_words(t){return scale$3(_atJ_,t)}
    function of_string$32(s)
     {var length=caml_ml_string_length(s);
      if(length < 2)caml_call3(_Po_,_atK_,s,0);
      var
       base_str=caml_call3(_AY_,s,0,length - 1 | 0),
       ext_char=caml_call1(_Er_,caml_string_get(s,length - 1 | 0));
      try
       {var _aPN_=caml_call1(_Hw_,base_str),base=_aPN_}
      catch(_aPO_){var base=caml_call4(_Po_,_atL_,s,base_str,0)}
      var switcher=ext_char - 98 | 0;
      if(! (21 < switcher >>> 0))
       switch(switcher)
        {case 0:return of_bytes$0(base);
         case 3:return of_exabytes(base);
         case 5:return of_gigabytes(base);
         case 9:return of_kilobytes(base);
         case 11:return of_megabytes(base);
         case 14:return of_petabytes(base);
         case 18:return of_terabytes(base);
         case 21:return of_words(base)
         }
      return caml_call4(_Po_,_atM_,s,ext_char,0)}
    var arg_type$2=caml_call3(_aqV_[1],0,0,of_string$32);
    function largest_measure(t)
     {var t_abs=caml_call1(abs$4,t);
      return caml_call2(symbol$247,t_abs,exabyte)
              ?-287410883
              :caml_call2(symbol$247,t_abs,petabyte)
                ?-632836503
                :caml_call2(symbol$247,t_abs,terabyte)
                  ?-756914965
                  :caml_call2(symbol$247,t_abs,gigabyte)
                    ?939376143
                    :caml_call2(symbol$247,t_abs,megabyte)
                      ?-992187495
                      :caml_call2(symbol$247,t_abs,kilobyte)?-324157174:-792364981}
    function no_match(param)
     {return caml_call1(_Fb_,cst_Not_a_recognized_Byte_unit)}
    function of_value_sexp_and_unit_name(val_sexp,param)
     {if(caml_string_notequal(param,cst_Bytes))
       return caml_string_notequal(param,cst_Exabytes)
               ?caml_string_notequal(param,cst_Gigabytes)
                 ?caml_string_notequal(param,cst_Kilobytes)
                   ?caml_string_notequal(param,cst_Megabytes)
                     ?caml_string_notequal(param,cst_Petabytes)
                       ?caml_string_notequal(param,cst_Terabytes)
                         ?caml_string_notequal(param,cst_Words)
                           ?no_match(0)
                           :of_words(caml_call1(float_of_sexp,val_sexp))
                         :of_terabytes(caml_call1(float_of_sexp,val_sexp))
                       :of_petabytes(caml_call1(float_of_sexp,val_sexp))
                     :of_megabytes(caml_call1(float_of_sexp,val_sexp))
                   :of_kilobytes(caml_call1(float_of_sexp,val_sexp))
                 :of_gigabytes(caml_call1(float_of_sexp,val_sexp))
               :of_exabytes(caml_call1(float_of_sexp,val_sexp));
      try
       {var _aPL_=caml_call1(_Ki_,val_sexp);return _aPL_}
      catch(_aPM_){return of_bytes$0(caml_call1(float_of_sexp,val_sexp))}}
    function _atN_(param)
     {if(0 === param[0]){var str=param[1];return of_string$32(str)}
      var _aPI_=param[1];
      if(_aPI_)
       {var _aPJ_=_aPI_[1];
        if(0 === _aPJ_[0])
         {var _aPK_=_aPI_[2];
          if(_aPK_ && ! _aPK_[2])
           {var value=_aPK_[1],unit_name=_aPJ_[1];
            return of_value_sexp_and_unit_name(value,unit_name)}}}
      return no_match(0)}
    function t_of_sexp$112(sexp)
     {try
       {var _aPH_=_atN_(sexp);return _aPH_}
      catch(exn)
       {exn = caml_wrap_exception(exn);throw [0,Of_sexp_error,exn,sexp]}}
    function hash$58(x){return caml_call1(hash$57,x)}
    var
     _atO_=
      caml_call1
       (caml_call1
         (_fr_,
          [0,
           bin_shape_t$53,
           bin_size_t$4,
           bin_write_t$4,
           bin_read_t$9,
           bin_read_t$10]),
        [0,bytes$0,of_bytes$0]),
     _atP_=_atO_[1],
     _atQ_=_atO_[2],
     _atR_=_atO_[3],
     _atS_=_atO_[4],
     _atT_=_atO_[5],
     _atU_=_atO_[6],
     _atV_=_atO_[7],
     _atW_=_atO_[8];
    function sexp_of_t$128(t)
     {var match=largest_measure(t);
      return -756914965 <= match
              ?-324157174 === match
                ?[1,[0,_atX_,[0,caml_call1(sexp_of_t$44,kilobytes(t)),0]]]
                :[1,[0,_atY_,[0,caml_call1(sexp_of_t$44,gigabytes(t)),0]]]
              :-792364981 <= match
                ?[1,[0,_atZ_,[0,caml_call1(sexp_of_t$44,bytes$0(t)),0]]]
                :[1,[0,_at0_,[0,caml_call1(sexp_of_t$44,megabytes(t)),0]]]}
    function to_string$40(t){return caml_call1(_Bu_,to_string$16(t))}
    var
     Expect_test_collector$17=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _at1_(param)
     {var _aPg_=of_bytes_int(1000),_aPh_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _at2_,
          function(param,custom_printf_003)
           {return to_string$40(custom_printf_003)},
          _aPh_],
         cst$248],
        _aPg_);
      var
       _aPi_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$0),
         202,
         6281,
         6289,
         6295];
      caml_call1(Expect_test_collector$17[1],_aPi_);
      var _aPj_=of_bytes_int(1023),_aPk_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _at3_,
          function(param,custom_printf_004)
           {return to_string$40(custom_printf_004)},
          _aPk_],
         cst$249],
        _aPj_);
      var
       _aPl_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$1),
         204,
         6351,
         6359,
         6365];
      caml_call1(Expect_test_collector$17[1],_aPl_);
      var _aPm_=of_bytes_int(1024),_aPn_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _at4_,
          function(param,custom_printf_005)
           {return to_string$40(custom_printf_005)},
          _aPn_],
         cst$250],
        _aPm_);
      var
       _aPo_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$2),
         206,
         6421,
         6429,
         6435];
      caml_call1(Expect_test_collector$17[1],_aPo_);
      var _aPp_=of_bytes_int(1025),_aPq_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _at5_,
          function(param,custom_printf_006)
           {return to_string$40(custom_printf_006)},
          _aPq_],
         cst$251],
        _aPp_);
      var
       _aPr_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$3),
         208,
         6488,
         6496,
         6502];
      caml_call1(Expect_test_collector$17[1],_aPr_);
      var _aPs_=of_bytes_int(1500),_aPt_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _at6_,
          function(param,custom_printf_007)
           {return to_string$40(custom_printf_007)},
          _aPt_],
         cst$252],
        _aPs_);
      var
       _aPu_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$4),
         210,
         6561,
         6569,
         6575];
      caml_call1(Expect_test_collector$17[1],_aPu_);
      var _aPv_=of_bytes_int(10000),_aPw_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _at7_,
          function(param,custom_printf_008)
           {return to_string$40(custom_printf_008)},
          _aPw_],
         cst$253],
        _aPv_);
      var
       _aPx_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$5),
         212,
         6635,
         6643,
         6649];
      caml_call1(Expect_test_collector$17[1],_aPx_);
      var _aPy_=of_bytes_int(100000),_aPz_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _at8_,
          function(param,custom_printf_009)
           {return to_string$40(custom_printf_009)},
          _aPz_],
         cst$254],
        _aPy_);
      var
       _aPA_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$6),
         214,
         6710,
         6718,
         6724];
      caml_call1(Expect_test_collector$17[1],_aPA_);
      var _aPB_=of_bytes_int(1000000),_aPC_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _at9_,
          function(param,custom_printf_010)
           {return to_string$40(custom_printf_010)},
          _aPC_],
         cst$255],
        _aPB_);
      var
       _aPD_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$7),
         216,
         6786,
         6794,
         6800];
      caml_call1(Expect_test_collector$17[1],_aPD_);
      var _aPE_=of_bytes_int(10000000),_aPF_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _at__,
          function(param,custom_printf_011)
           {return to_string$40(custom_printf_011)},
          _aPF_],
         cst$256],
        _aPE_);
      var
       _aPG_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$8),
         218,
         6863,
         6871,
         6877];
      return caml_call1(Expect_test_collector$17[1],_aPG_)}
    var
     _at$_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$9),
       202,
       6281,
       6296,
       6307],
     _auc_=
      [0,
       [0,
        _aub_,
        _aua_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$10),
         202,
         6281,
         6289,
         6295],
        _at$_],
       0],
     _aud_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$11),
       204,
       6351,
       6366,
       6377],
     _aug_=
      [0,
       [0,
        _auf_,
        _aue_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$12),
         204,
         6351,
         6359,
         6365],
        _aud_],
       _auc_],
     _auh_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$13),
       206,
       6421,
       6436,
       6444],
     _auk_=
      [0,
       [0,
        _auj_,
        _aui_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$14),
         206,
         6421,
         6429,
         6435],
        _auh_],
       _aug_],
     _aul_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$15),
       208,
       6488,
       6503,
       6517],
     _auo_=
      [0,
       [0,
        _aun_,
        _aum_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$16),
         208,
         6488,
         6496,
         6502],
        _aul_],
       _auk_],
     _aup_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$17),
       210,
       6561,
       6576,
       6590],
     _aus_=
      [0,
       [0,
        _aur_,
        _auq_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$18),
         210,
         6561,
         6569,
         6575],
        _aup_],
       _auo_],
     _aut_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$19),
       212,
       6635,
       6650,
       6664],
     _auw_=
      [0,
       [0,
        _auv_,
        _auu_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$20),
         212,
         6635,
         6643,
         6649],
        _aut_],
       _aus_],
     _aux_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$21),
       214,
       6710,
       6725,
       6739],
     _auA_=
      [0,
       [0,
        _auz_,
        _auy_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$22),
         214,
         6710,
         6718,
         6724],
        _aux_],
       _auw_],
     _auB_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$23),
       216,
       6786,
       6801,
       6815],
     _auE_=
      [0,
       [0,
        _auD_,
        _auC_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$24),
         216,
         6786,
         6794,
         6800],
        _auB_],
       _auA_],
     _auF_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$25),
       218,
       6863,
       6878,
       6892],
     _auI_=
      [0,
       [0,
        _auH_,
        _auG_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$26),
         218,
         6863,
         6871,
         6877],
        _auF_],
       _auE_],
     _auK_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$28),
       200,
       6198,
       6202,
       6893],
     _auL_=
      caml_call1(Expect_test_common_File[4][3],cst_93907cd6dc6cc01a303e474801);
    caml_call9
     (Expect_test_collector$17[3],
      _auL_,
      _auK_,
      cst_core_src_byte_units_ml$27,
      0,
      _auJ_,
      _auI_,
      0,
      Inline_test_config,
      _at1_);
    function t_of_sexp$113(sexp)
     {if(0 === sexp[0])
       {var s=sexp[1];
        try
         {var _aPf_=of_string$32(s);return _aPf_}
        catch(exn)
         {exn = caml_wrap_exception(exn);
          if(exn[1] === Stdlib[6])
           {var msg=exn[2];return caml_call2(_Oo_,msg,sexp)}
          throw exn}}
      return t_of_sexp$112(sexp)}
    function hash$59(x){return caml_call1(hash$57,x)}
    var
     _auM_=
      caml_call1
       (caml_call1
         (_fr_,
          [0,
           bin_shape_t$67,
           bin_size_t$52,
           bin_write_t$52,
           bin_read_t$106,
           bin_read_t$107]),
        [0,bytes_int63,of_bytes_int63]),
     bin_size_t$91=_auM_[1],
     bin_write_t$92=_auM_[2],
     bin_read_t$181=_auM_[3],
     bin_read_t$182=_auM_[4],
     bin_shape_t$142=_auM_[5],
     bin_writer_t$117=_auM_[6],
     bin_reader_t$117=_auM_[7],
     bin_t$117=_auM_[8];
    function sexp_of_t$129(t){return [1,[0,_auN_,[0,caml_call1(_Kj_,t),0]]]}
    function to_string_short(t)
     {function to_units_str(to_unit,ext)
       {var f=caml_call1(to_unit,t),f_abs=caml_call1(abs,f);
        return caml_call2(include$58[2],f_abs,100.)
                ?caml_call3(_fx_,_auO_,f,ext)
                :caml_call2(include$58[2],f_abs,10.)
                  ?caml_call3(_fx_,_auP_,f,ext)
                  :caml_call3(_fx_,_auQ_,f,ext)}
      var match=largest_measure(t);
      return -632836503 <= match
              ?-287410883 <= match
                ?939376143 <= match
                  ?to_units_str(gigabytes,71)
                  :to_units_str(exabytes,69)
                :-324157174 <= match
                  ?to_units_str(kilobytes,75)
                  :to_units_str(petabytes,80)
              :-792364981 === match
                ?caml_call2(_fx_,_auR_,bytes_int_exn(t))
                :-756914965 <= match
                  ?to_units_str(terabytes,84)
                  :to_units_str(megabytes,77)}
    function sexp_of_t$130(t){return [0,to_string_short(t)]}
    var
     Expect_test_collector$18=
      caml_call1(Expect_test_collector[2],Expect_test_config);
    function _auS_(param)
     {var _aOE_=of_bytes_int(1000),_aOF_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _auT_,
          function(param,custom_printf_014)
           {return to_string_short(custom_printf_014)},
          _aOF_],
         cst$257],
        _aOE_);
      var
       _aOG_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$29),
         278,
         8396,
         8402,
         8408];
      caml_call1(Expect_test_collector$18[1],_aOG_);
      var _aOH_=of_bytes_int(1023),_aOI_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _auU_,
          function(param,custom_printf_015)
           {return to_string_short(custom_printf_015)},
          _aOI_],
         cst$258],
        _aOH_);
      var
       _aOJ_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$30),
         280,
         8462,
         8468,
         8474];
      caml_call1(Expect_test_collector$18[1],_aOJ_);
      var _aOK_=of_bytes_int(1024),_aOL_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _auV_,
          function(param,custom_printf_016)
           {return to_string_short(custom_printf_016)},
          _aOL_],
         cst$259],
        _aOK_);
      var
       _aOM_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$31),
         282,
         8528,
         8534,
         8540];
      caml_call1(Expect_test_collector$18[1],_aOM_);
      var _aON_=of_bytes_int(1025),_aOO_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _auW_,
          function(param,custom_printf_017)
           {return to_string_short(custom_printf_017)},
          _aOO_],
         cst$260],
        _aON_);
      var
       _aOP_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$32),
         284,
         8594,
         8600,
         8606];
      caml_call1(Expect_test_collector$18[1],_aOP_);
      var _aOQ_=of_bytes_int(10000),_aOR_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _auX_,
          function(param,custom_printf_018)
           {return to_string_short(custom_printf_018)},
          _aOR_],
         cst$261],
        _aOQ_);
      var
       _aOS_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$33),
         286,
         8661,
         8667,
         8673];
      caml_call1(Expect_test_collector$18[1],_aOS_);
      var _aOT_=of_bytes_int(100000),_aOU_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _auY_,
          function(param,custom_printf_019)
           {return to_string_short(custom_printf_019)},
          _aOU_],
         cst$262],
        _aOT_);
      var
       _aOV_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$34),
         288,
         8729,
         8735,
         8741];
      caml_call1(Expect_test_collector$18[1],_aOV_);
      var _aOW_=of_bytes_int(1000000),_aOX_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _auZ_,
          function(param,custom_printf_020)
           {return to_string_short(custom_printf_020)},
          _aOX_],
         cst$263],
        _aOW_);
      var
       _aOY_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$35),
         290,
         8798,
         8804,
         8810];
      caml_call1(Expect_test_collector$18[1],_aOY_);
      var _aOZ_=of_bytes_int(10000000),_aO0_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _au0_,
          function(param,custom_printf_021)
           {return to_string_short(custom_printf_021)},
          _aO0_],
         cst$264],
        _aOZ_);
      var
       _aO1_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$36),
         292,
         8867,
         8873,
         8879];
      caml_call1(Expect_test_collector$18[1],_aO1_);
      var _aO2_=of_bytes$0(10000000000.),_aO3_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _au1_,
          function(param,custom_printf_022)
           {return to_string_short(custom_printf_022)},
          _aO3_],
         cst$265],
        _aO2_);
      var
       _aO4_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$37),
         294,
         8937,
         8943,
         8949];
      caml_call1(Expect_test_collector$18[1],_aO4_);
      var _aO5_=of_bytes$0(1000000000000.),_aO6_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _au2_,
          function(param,custom_printf_023)
           {return to_string_short(custom_printf_023)},
          _aO6_],
         cst$266],
        _aO5_);
      var
       _aO7_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$38),
         296,
         9009,
         9015,
         9021];
      caml_call1(Expect_test_collector$18[1],_aO7_);
      var _aO8_=of_bytes$0(100000000000000.),_aO9_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _au3_,
          function(param,custom_printf_024)
           {return to_string_short(custom_printf_024)},
          _aO9_],
         cst$267],
        _aO8_);
      var
       _aO__=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$39),
         298,
         9082,
         9088,
         9094];
      caml_call1(Expect_test_collector$18[1],_aO__);
      var _aO$_=of_bytes$0(100000000000000000.),_aPa_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _au4_,
          function(param,custom_printf_025)
           {return to_string_short(custom_printf_025)},
          _aPa_],
         cst$268],
        _aO$_);
      var
       _aPb_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$40),
         300,
         9159,
         9165,
         9171];
      caml_call1(Expect_test_collector$18[1],_aPb_);
      var _aPc_=of_bytes$0(3000000000000000000.),_aPd_=0;
      caml_call2
       (_fF_,
        [0,
         [24,
          _au5_,
          function(param,custom_printf_026)
           {return to_string_short(custom_printf_026)},
          _aPd_],
         cst$269],
        _aPc_);
      var
       _aPe_=
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$41),
         302,
         9237,
         9243,
         9249];
      caml_call1(Expect_test_collector$18[1],_aPe_);
      return 0}
    var
     _au6_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$42),
       278,
       8396,
       8409,
       8420],
     _au9_=
      [0,
       [0,
        _au8_,
        _au7_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$43),
         278,
         8396,
         8402,
         8408],
        _au6_],
       0],
     _au__=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$44),
       280,
       8462,
       8475,
       8486],
     _avb_=
      [0,
       [0,
        _ava_,
        _au$_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$45),
         280,
         8462,
         8468,
         8474],
        _au__],
       _au9_],
     _avc_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$46),
       282,
       8528,
       8541,
       8552],
     _avf_=
      [0,
       [0,
        _ave_,
        _avd_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$47),
         282,
         8528,
         8534,
         8540],
        _avc_],
       _avb_],
     _avg_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$48),
       284,
       8594,
       8607,
       8618],
     _avj_=
      [0,
       [0,
        _avi_,
        _avh_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$49),
         284,
         8594,
         8600,
         8606],
        _avg_],
       _avf_],
     _avk_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$50),
       286,
       8661,
       8674,
       8685],
     _avn_=
      [0,
       [0,
        _avm_,
        _avl_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$51),
         286,
         8661,
         8667,
         8673],
        _avk_],
       _avj_],
     _avo_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$52),
       288,
       8729,
       8742,
       8753],
     _avr_=
      [0,
       [0,
        _avq_,
        _avp_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$53),
         288,
         8729,
         8735,
         8741],
        _avo_],
       _avn_],
     _avs_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$54),
       290,
       8798,
       8811,
       8821],
     _avv_=
      [0,
       [0,
        _avu_,
        _avt_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$55),
         290,
         8798,
         8804,
         8810],
        _avs_],
       _avr_],
     _avw_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$56),
       292,
       8867,
       8880,
       8891],
     _avz_=
      [0,
       [0,
        _avy_,
        _avx_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$57),
         292,
         8867,
         8873,
         8879],
        _avw_],
       _avv_],
     _avA_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$58),
       294,
       8937,
       8950,
       8961],
     _avD_=
      [0,
       [0,
        _avC_,
        _avB_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$59),
         294,
         8937,
         8943,
         8949],
        _avA_],
       _avz_],
     _avE_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$60),
       296,
       9009,
       9022,
       9032],
     _avH_=
      [0,
       [0,
        _avG_,
        _avF_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$61),
         296,
         9009,
         9015,
         9021],
        _avE_],
       _avD_],
     _avI_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$62),
       298,
       9082,
       9095,
       9106],
     _avL_=
      [0,
       [0,
        _avK_,
        _avJ_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$63),
         298,
         9082,
         9088,
         9094],
        _avI_],
       _avH_],
     _avM_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$64),
       300,
       9159,
       9172,
       9183],
     _avP_=
      [0,
       [0,
        _avO_,
        _avN_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$65),
         300,
         9159,
         9165,
         9171],
        _avM_],
       _avL_],
     _avQ_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$66),
       302,
       9237,
       9250,
       9261],
     _avT_=
      [0,
       [0,
        _avS_,
        _avR_,
        [0,
         caml_call1
          (Expect_test_common_File[1][6],cst_core_src_byte_units_ml$67),
         302,
         9237,
         9243,
         9249],
        _avQ_],
       _avP_],
     _avU_=
      [0,
       caml_call1(Expect_test_common_File[1][6],cst_core_src_byte_units_ml$69),
       276,
       8335,
       8337,
       9270],
     _avV_=
      caml_call1
       (Expect_test_common_File[4][3],cst_93907cd6dc6cc01a303e474801$0);
    caml_call9
     (Expect_test_collector$18[3],
      _avV_,
      _avU_,
      cst_core_src_byte_units_ml$68,
      0,
      0,
      _avT_,
      0,
      Inline_test_config,
      _auS_);
    function create$40(units,value)
     {return -792364981 === units
              ?of_bytes$0(value)
              :-324157174 <= units
                ?939376143 <= units?of_gigabytes(value):of_kilobytes(value)
                :-510525623 <= units?of_words(value):of_megabytes(value)}
    var
     _avW_=[0,of_bytes_int63,bytes_int63],
     _avX_=
      [0,quickcheck_generator$11,quickcheck_observer$9,quickcheck_shrinker$9],
     include$164=function(_aOD_){return Of_quickcheckable(_avX_,_aOD_)}(_avW_),
     _avY_=include$164[1],
     _avZ_=include$164[2],
     _av0_=include$164[3];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$466);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Byte_units$0);
    var
     Core_Byte_units=
      [0,
       sexp_of_t$55,
       create$40,
       symbol$247,
       symbol$248,
       symbol$249,
       symbol$250,
       symbol$251,
       symbol$252,
       equal$45,
       min$22,
       max$22,
       ascending$20,
       descending$20,
       between$20,
       clamp_exn$20,
       clamp$20,
       comparator$33,
       validate_lbound$20,
       validate_ubound$20,
       validate_bound$20,
       Replace_polymorphic_compare$16,
       Map$33,
       Set$33,
       compare$106,
       hash_fold_t$44,
       hash$57,
       hashable$20,
       Table$23,
       Hash_set$23,
       Hash_queue$18,
       of_string$32,
       to_string$16,
       of_bytes$0,
       of_bytes_int,
       of_bytes_int63,
       of_bytes_int64_exn,
       of_bytes$0,
       of_kilobytes,
       of_megabytes,
       of_gigabytes,
       of_terabytes,
       of_petabytes,
       of_exabytes,
       of_words,
       of_words_int,
       of_words,
       to_string$16,
       to_string_short,
       [0,sexp_of_t$130,to_string_short],
       bytes$0,
       bytes_int_exn,
       bytes_int63,
       bytes_int64,
       bytes$0,
       kilobytes,
       megabytes,
       gigabytes,
       terabytes,
       petabytes,
       exabytes,
       words,
       words_int_exn,
       words,
       zero$4,
       min_value$2,
       max_value$2,
       scale$3,
       arg_type$2,
       [0,symbol$253,symbol$254,symbol$256,symbol$255],
       symbol$253,
       symbol$254,
       symbol$256,
       symbol$255,
       _avY_,
       _avZ_,
       _av0_,
       [0,
        [0,
         hash_fold_t$44,
         hash$58,
         _atP_,
         _atQ_,
         _atR_,
         _atS_,
         _atT_,
         _atU_,
         _atV_,
         _atW_,
         compare$106,
         t_of_sexp$113,
         sexp_of_t$128],
        [0,
         hash_fold_t$44,
         hash$59,
         bin_size_t$91,
         bin_write_t$92,
         bin_read_t$181,
         bin_read_t$182,
         bin_shape_t$142,
         bin_writer_t$117,
         bin_reader_t$117,
         bin_t$117,
         compare$106,
         t_of_sexp$112,
         sexp_of_t$129]]];
    caml_register_global(5441,Core_Byte_units,"Core__Byte_units");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Heap_block);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$467);
    caml_call1(Expect_test_collector[5][1],cst_core_src_heap_block_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$468,cst$270);
    function sexp_of_t$131(of_a_001){return of_a_001}
    function create$41(v)
     {return runtime.core_heap_block_is_heap_block(v)?[0,v]:0}
    function create_exn$1(v)
     {return runtime.core_heap_block_is_heap_block(v)
              ?v
              :caml_call1(_a3_,cst_Heap_block_create_exn_call)}
    function value$4(t){return t}
    var
     bytes_per_word=
      caml_call1(Base_Word_size[2],Base_Word_size[3]) / 8 | 0;
    function bytes$1(t){return caml_mul(t.length - 1 + 1 | 0,bytes_per_word)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$469);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Heap_block$0);
    var
     Core_Heap_block=
      [0,sexp_of_t$131,create$41,create_exn$1,value$4,bytes$1];
    caml_register_global(5442,Core_Heap_block,"Core__Heap_block");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Gc);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$470);
    caml_call1(Expect_test_collector[5][1],cst_core_src_gc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$471,cst$271);
    var
     _av2_=caml_call1(Bin_prot_Shape[9],_av1_),
     _av3_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$283),0,_av2_],0],
     _av4_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_gc_ml_6_6),
     group$148=caml_call2(Bin_prot_Shape[6],_av4_,_av3_),
     _av5_=caml_call1(Bin_prot_Shape[2][1],cst_t$284),
     bin_shape_t$143=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$148,_av5_),0);
    function bin_size_t$92(param){return 1}
    function bin_write_t$93(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[31],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[31],buf,pos,1);
        default:return caml_call3(Bin_prot_Write[31],buf,pos,2)}}
    var bin_writer_t$118=[0,bin_size_t$92,bin_write_t$93];
    function bin_read_t$183(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_gc_ml_Stable_Allo,pos_ref[1])}
    function bin_read_t$184(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(2 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_av6_,pos_ref[1]);
      switch(match){case 0:return 0;case 1:return 1;default:return 2}}
    var
     bin_reader_t$118=[0,bin_read_t$184,bin_read_t$183],
     bin_t$118=[0,bin_shape_t$143,bin_writer_t$118,bin_reader_t$118],
     compare$107=caml_int_compare;
    function equal$46(_aOC_,_aOB_){return _aOC_ === _aOB_?1:0}
    function hash_fold_t$45(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        default:return caml_call2(Base_Hash[3],hsv,2)}}
    function hash$60(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aOA_=hash_fold_t$45(hsv,x);
      return caml_call1(Base_Hash[9],_aOA_)}
    function t_of_sexp$114(sexp_008)
     {if(0 === sexp_008[0])
       {var _aOw_=sexp_008[1],switch$0=0;
        if(caml_string_notequal(_aOw_,cst_Best_fit))
         {var switch$1=0;
          if(caml_string_notequal(_aOw_,cst_First_fit))
           {var switch$2=0;
            if(caml_string_notequal(_aOw_,cst_Next_fit))
             if(caml_string_notequal(_aOw_,cst_best_fit))
              if(caml_string_notequal(_aOw_,cst_first_fit))
               {if(caml_string_notequal(_aOw_,cst_next_fit))
                 {switch$0 = 1;switch$1 = 1;switch$2 = 1}}
              else
               switch$2 = 1;
             else
              {switch$1 = 1;switch$2 = 1}
            if(! switch$2)return 0}
          if(! switch$1)return 1}
        if(! switch$0)return 2}
      else
       {var _aOx_=sexp_008[1];
        if(! _aOx_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_007$0,sexp_008);
        var _aOy_=_aOx_[1];
        if(0 !== _aOy_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_007$0,sexp_008);
        var _aOz_=_aOy_[1],switch$3=0;
        if(caml_string_notequal(_aOz_,cst_Best_fit$0))
         {var switch$4=0;
          if(caml_string_notequal(_aOz_,cst_First_fit$0))
           {var switch$5=0;
            if(caml_string_notequal(_aOz_,cst_Next_fit$0))
             if(caml_string_notequal(_aOz_,cst_best_fit$0))
              if(caml_string_notequal(_aOz_,cst_first_fit$0))
               {if(caml_string_notequal(_aOz_,cst_next_fit$0))
                 {switch$3 = 1;switch$4 = 1;switch$5 = 1}}
              else
               switch$5 = 1;
             else
              {switch$4 = 1;switch$5 = 1}
            if(! switch$5)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3],error_source_007$0,sexp_008)}
          if(! switch$4)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_007$0,sexp_008)}
        if(! switch$3)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3],error_source_007$0,sexp_008)}
      return caml_call2
              (Sexplib0_Sexp_conv_error[8],error_source_007$0,sexp_008)}
    function sexp_of_t$132(param)
     {switch(param)
       {case 0:return _av7_;case 1:return _av8_;default:return _av9_}}
    var
     _av__=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_minor_words,_b$_],
         [0,
          [0,cst_promoted_words,_b$_],
          [0,
           [0,cst_major_words,_b$_],
           [0,
            [0,cst_minor_collections,_b7_],
            [0,
             [0,cst_major_collections,_b7_],
             [0,
              [0,cst_heap_words,_b7_],
              [0,
               [0,cst_heap_chunks,_b7_],
               [0,
                [0,cst_live_words,_b7_],
                [0,
                 [0,cst_live_blocks,_b7_],
                 [0,
                  [0,cst_free_words,_b7_],
                  [0,
                   [0,cst_free_blocks,_b7_],
                   [0,
                    [0,cst_largest_free,_b7_],
                    [0,
                     [0,cst_fragments,_b7_],
                     [0,
                      [0,cst_compactions,_b7_],
                      [0,
                       [0,cst_top_heap_words,_b7_],
                       [0,[0,cst_stack_size,_b7_],0]]]]]]]]]]]]]]]]),
     _av$_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$285),0,_av__],0],
     _awa_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_gc_ml_65_6),
     group$149=caml_call2(Bin_prot_Shape[6],_awa_,_av$_),
     _awb_=caml_call1(Bin_prot_Shape[2][1],cst_t$286),
     bin_shape_t$144=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$149,_awb_),0);
    function bin_size_t$93(param)
     {var
       v16=param[16],
       v15=param[15],
       v14=param[14],
       v13=param[13],
       v12=param[12],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       v7=param[7],
       v6=param[6],
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aOg_=caml_call1(bin_size_t$4,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aOg_),
       _aOh_=caml_call1(bin_size_t$4,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aOh_),
       _aOi_=caml_call1(bin_size_t$4,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aOi_),
       _aOj_=caml_call1(bin_size_t$3,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_aOj_),
       _aOk_=caml_call1(bin_size_t$3,v5),
       size$3=caml_call2(Bin_prot_Common[23],size$2,_aOk_),
       _aOl_=caml_call1(bin_size_t$3,v6),
       size$4=caml_call2(Bin_prot_Common[23],size$3,_aOl_),
       _aOm_=caml_call1(bin_size_t$3,v7),
       size$5=caml_call2(Bin_prot_Common[23],size$4,_aOm_),
       _aOn_=caml_call1(bin_size_t$3,v8),
       size$6=caml_call2(Bin_prot_Common[23],size$5,_aOn_),
       _aOo_=caml_call1(bin_size_t$3,v9),
       size$7=caml_call2(Bin_prot_Common[23],size$6,_aOo_),
       _aOp_=caml_call1(bin_size_t$3,v10),
       size$8=caml_call2(Bin_prot_Common[23],size$7,_aOp_),
       _aOq_=caml_call1(bin_size_t$3,v11),
       size$9=caml_call2(Bin_prot_Common[23],size$8,_aOq_),
       _aOr_=caml_call1(bin_size_t$3,v12),
       size$10=caml_call2(Bin_prot_Common[23],size$9,_aOr_),
       _aOs_=caml_call1(bin_size_t$3,v13),
       size$11=caml_call2(Bin_prot_Common[23],size$10,_aOs_),
       _aOt_=caml_call1(bin_size_t$3,v14),
       size$12=caml_call2(Bin_prot_Common[23],size$11,_aOt_),
       _aOu_=caml_call1(bin_size_t$3,v15),
       size$13=caml_call2(Bin_prot_Common[23],size$12,_aOu_),
       _aOv_=caml_call1(bin_size_t$3,v16);
      return caml_call2(Bin_prot_Common[23],size$13,_aOv_)}
    function bin_write_t$94(buf,pos,param)
     {var
       v16=param[16],
       v15=param[15],
       v14=param[14],
       v13=param[13],
       v12=param[12],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       v7=param[7],
       v6=param[6],
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$4,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$4,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$4,buf,pos$1,v3),
       pos$3=caml_call3(bin_write_t$3,buf,pos$2,v4),
       pos$4=caml_call3(bin_write_t$3,buf,pos$3,v5),
       pos$5=caml_call3(bin_write_t$3,buf,pos$4,v6),
       pos$6=caml_call3(bin_write_t$3,buf,pos$5,v7),
       pos$7=caml_call3(bin_write_t$3,buf,pos$6,v8),
       pos$8=caml_call3(bin_write_t$3,buf,pos$7,v9),
       pos$9=caml_call3(bin_write_t$3,buf,pos$8,v10),
       pos$10=caml_call3(bin_write_t$3,buf,pos$9,v11),
       pos$11=caml_call3(bin_write_t$3,buf,pos$10,v12),
       pos$12=caml_call3(bin_write_t$3,buf,pos$11,v13),
       pos$13=caml_call3(bin_write_t$3,buf,pos$12,v14),
       pos$14=caml_call3(bin_write_t$3,buf,pos$13,v15);
      return caml_call3(bin_write_t$3,buf,pos$14,v16)}
    var bin_writer_t$119=[0,bin_size_t$93,bin_write_t$94];
    function bin_read_t$185(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_gc_ml_Stable_Stat,pos_ref[1])}
    function bin_read_t$186(buf,pos_ref)
     {var
       v_minor_words=caml_call2(bin_read_t$9,buf,pos_ref),
       v_promoted_words=caml_call2(bin_read_t$9,buf,pos_ref),
       v_major_words=caml_call2(bin_read_t$9,buf,pos_ref),
       v_minor_collections=caml_call2(bin_read_t$7,buf,pos_ref),
       v_major_collections=caml_call2(bin_read_t$7,buf,pos_ref),
       v_heap_words=caml_call2(bin_read_t$7,buf,pos_ref),
       v_heap_chunks=caml_call2(bin_read_t$7,buf,pos_ref),
       v_live_words=caml_call2(bin_read_t$7,buf,pos_ref),
       v_live_blocks=caml_call2(bin_read_t$7,buf,pos_ref),
       v_free_words=caml_call2(bin_read_t$7,buf,pos_ref),
       v_free_blocks=caml_call2(bin_read_t$7,buf,pos_ref),
       v_largest_free=caml_call2(bin_read_t$7,buf,pos_ref),
       v_fragments=caml_call2(bin_read_t$7,buf,pos_ref),
       v_compactions=caml_call2(bin_read_t$7,buf,pos_ref),
       v_top_heap_words=caml_call2(bin_read_t$7,buf,pos_ref),
       v_stack_size=caml_call2(bin_read_t$7,buf,pos_ref);
      return [0,
              v_minor_words,
              v_promoted_words,
              v_major_words,
              v_minor_collections,
              v_major_collections,
              v_heap_words,
              v_heap_chunks,
              v_live_words,
              v_live_blocks,
              v_free_words,
              v_free_blocks,
              v_largest_free,
              v_fragments,
              v_compactions,
              v_top_heap_words,
              v_stack_size]}
    var
     bin_reader_t$119=[0,bin_read_t$186,bin_read_t$185],
     bin_t$119=[0,bin_shape_t$144,bin_writer_t$119,bin_reader_t$119];
    function compare$108(a_009,b_010)
     {if(caml_call2(Ppx_compare_lib[1],a_009,b_010))return 0;
      var n=caml_call2(_u_,a_009[1],b_010[1]);
      if(0 === n)
       {var n$0=caml_call2(_u_,a_009[2],b_010[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_u_,a_009[3],b_010[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare,a_009[4],b_010[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare,a_009[5],b_010[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare,a_009[6],b_010[6]);
                if(0 === n$4)
                 {var n$5=caml_call2(compare,a_009[7],b_010[7]);
                  if(0 === n$5)
                   {var n$6=caml_call2(compare,a_009[8],b_010[8]);
                    if(0 === n$6)
                     {var n$7=caml_call2(compare,a_009[9],b_010[9]);
                      if(0 === n$7)
                       {var n$8=caml_call2(compare,a_009[10],b_010[10]);
                        if(0 === n$8)
                         {var n$9=caml_call2(compare,a_009[11],b_010[11]);
                          if(0 === n$9)
                           {var n$10=caml_call2(compare,a_009[12],b_010[12]);
                            if(0 === n$10)
                             {var n$11=caml_call2(compare,a_009[13],b_010[13]);
                              if(0 === n$11)
                               {var n$12=caml_call2(compare,a_009[14],b_010[14]);
                                if(0 === n$12)
                                 {var n$13=caml_call2(compare,a_009[15],b_010[15]);
                                  return 0 === n$13
                                          ?caml_call2(compare,a_009[16],b_010[16])
                                          :n$13}
                                return n$12}
                              return n$11}
                            return n$10}
                          return n$9}
                        return n$8}
                      return n$7}
                    return n$6}
                  return n$5}
                return n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function equal$47(a_011,b_012)
     {if(caml_call2(Ppx_compare_lib[1],a_011,b_012))return 1;
      var _aN2_=caml_call2(_v_,a_011[1],b_012[1]);
      if(_aN2_)
       {var _aN3_=caml_call2(_v_,a_011[2],b_012[2]);
        if(_aN3_)
         {var _aN4_=caml_call2(_v_,a_011[3],b_012[3]);
          if(_aN4_)
           {var _aN5_=caml_call2(_B_,a_011[4],b_012[4]);
            if(_aN5_)
             {var _aN6_=caml_call2(_B_,a_011[5],b_012[5]);
              if(_aN6_)
               {var _aN7_=caml_call2(_B_,a_011[6],b_012[6]);
                if(_aN7_)
                 {var _aN8_=caml_call2(_B_,a_011[7],b_012[7]);
                  if(_aN8_)
                   {var _aN9_=caml_call2(_B_,a_011[8],b_012[8]);
                    if(_aN9_)
                     {var _aN__=caml_call2(_B_,a_011[9],b_012[9]);
                      if(_aN__)
                       {var _aN$_=caml_call2(_B_,a_011[10],b_012[10]);
                        if(_aN$_)
                         {var _aOa_=caml_call2(_B_,a_011[11],b_012[11]);
                          if(_aOa_)
                           {var _aOb_=caml_call2(_B_,a_011[12],b_012[12]);
                            if(_aOb_)
                             {var _aOc_=caml_call2(_B_,a_011[13],b_012[13]);
                              if(_aOc_)
                               {var _aOd_=caml_call2(_B_,a_011[14],b_012[14]);
                                if(_aOd_)
                                 {var _aOe_=caml_call2(_B_,a_011[15],b_012[15]);
                                  if(_aOe_)return caml_call2(_B_,a_011[16],b_012[16]);
                                  var _aOf_=_aOe_}
                                else
                                 var _aOf_=_aOd_}
                              else
                               var _aOf_=_aOc_}
                            else
                             var _aOf_=_aOb_}
                          else
                           var _aOf_=_aOa_}
                        else
                         var _aOf_=_aN$_}
                      else
                       var _aOf_=_aN__}
                    else
                     var _aOf_=_aN9_}
                  else
                   var _aOf_=_aN8_}
                else
                 var _aOf_=_aN7_}
              else
               var _aOf_=_aN6_}
            else
             var _aOf_=_aN5_}
          else
           var _aOf_=_aN4_}
        else
         var _aOf_=_aN3_}
      else
       var _aOf_=_aN2_;
      return _aOf_}
    function hash_fold_t$46(hsv,arg)
     {var
       hsv$0=caml_call2(_w_,hsv,arg[1]),
       hsv$1=caml_call2(_w_,hsv$0,arg[2]),
       hsv$2=caml_call2(_w_,hsv$1,arg[3]),
       hsv$3=caml_call2(hash_fold_t,hsv$2,arg[4]),
       hsv$4=caml_call2(hash_fold_t,hsv$3,arg[5]),
       hsv$5=caml_call2(hash_fold_t,hsv$4,arg[6]),
       hsv$6=caml_call2(hash_fold_t,hsv$5,arg[7]),
       hsv$7=caml_call2(hash_fold_t,hsv$6,arg[8]),
       hsv$8=caml_call2(hash_fold_t,hsv$7,arg[9]),
       hsv$9=caml_call2(hash_fold_t,hsv$8,arg[10]),
       hsv$10=caml_call2(hash_fold_t,hsv$9,arg[11]),
       hsv$11=caml_call2(hash_fold_t,hsv$10,arg[12]),
       hsv$12=caml_call2(hash_fold_t,hsv$11,arg[13]),
       hsv$13=caml_call2(hash_fold_t,hsv$12,arg[14]),
       hsv$14=caml_call2(hash_fold_t,hsv$13,arg[15]);
      return caml_call2(hash_fold_t,hsv$14,arg[16])}
    function hash$61(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aN1_=hash_fold_t$46(hsv,x);
      return caml_call1(Base_Hash[9],_aN1_)}
    function t_of_sexp$115(sexp_014)
     {if(0 === sexp_014[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_069,sexp_014);
      var
       field_sexps_015=sexp_014[1],
       minor_words_016=[0,0],
       promoted_words_018=[0,0],
       major_words_020=[0,0],
       minor_collections_022=[0,0],
       major_collections_024=[0,0],
       heap_words_026=[0,0],
       heap_chunks_028=[0,0],
       live_words_030=[0,0],
       live_blocks_032=[0,0],
       free_words_034=[0,0],
       free_blocks_036=[0,0],
       largest_free_038=[0,0],
       fragments_040=[0,0],
       compactions_042=[0,0],
       top_heap_words_044=[0,0],
       stack_size_046=[0,0],
       duplicates_048=[0,0],
       extra_049=[0,0];
      function iter_070(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _aNV_=param$0[1];
            if(1 === _aNV_[0])
             {var _aNW_=_aNV_[1];
              if(_aNW_)
               {var _aNX_=_aNW_[1];
                if(0 === _aNX_[0])
                 {var _aNY_=_aNW_[2],_aNZ_=_aNX_[1],switch$1=0;
                  if(! _aNY_ || ! _aNY_[2])switch$1 = 1;
                  if(switch$1)
                   {var
                     tail_071=param$0[2],
                     field_sexp_051$16=
                      function(_aN0_)
                       {function field_sexp_051(param)
                         {if(_aN0_)
                           {if(_aN0_[2])throw [0,Assert_failure,_awc_];
                            var x_072=_aN0_[1];
                            return x_072}
                          return caml_call2
                                  (Sexplib0_Sexp_conv_error[10],error_source_069,sexp_014)}
                        return field_sexp_051},
                     field_sexp_051=field_sexp_051$16(_aNY_),
                     switch$0=caml_string_compare(_aNZ_,cst_live_words$0),
                     switch$2=0;
                    if(0 <= switch$0)
                     if(0 < switch$0)
                      if(caml_string_notequal(_aNZ_,cst_major_collections$0))
                       if(caml_string_notequal(_aNZ_,cst_major_words$0))
                        if(caml_string_notequal(_aNZ_,cst_minor_collections$0))
                         if(caml_string_notequal(_aNZ_,cst_minor_words$0))
                          if(caml_string_notequal(_aNZ_,cst_promoted_words$0))
                           if(caml_string_notequal(_aNZ_,cst_stack_size$0))
                            if(caml_string_notequal(_aNZ_,cst_top_heap_words$0))
                             switch$2 = 1;
                            else
                             if(top_heap_words_044[1])
                              duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                             else
                              {var
                                field_sexp_051$0=field_sexp_051(0),
                                fvalue_054=caml_call1(t_of_sexp,field_sexp_051$0);
                               top_heap_words_044[1] = [0,fvalue_054]}
                           else
                            if(stack_size_046[1])
                             duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                            else
                             {var
                               field_sexp_051$1=field_sexp_051(0),
                               fvalue_053=caml_call1(t_of_sexp,field_sexp_051$1);
                              stack_size_046[1] = [0,fvalue_053]}
                          else
                           if(promoted_words_018[1])
                            duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                           else
                            {var
                              field_sexp_051$2=field_sexp_051(0),
                              fvalue_067=caml_call1(_y_,field_sexp_051$2);
                             promoted_words_018[1] = [0,fvalue_067]}
                         else
                          if(minor_words_016[1])
                           duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                          else
                           {var
                             field_sexp_051$3=field_sexp_051(0),
                             fvalue_068=caml_call1(_y_,field_sexp_051$3);
                            minor_words_016[1] = [0,fvalue_068]}
                        else
                         if(minor_collections_022[1])
                          duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                         else
                          {var
                            field_sexp_051$4=field_sexp_051(0),
                            fvalue_065=caml_call1(t_of_sexp,field_sexp_051$4);
                           minor_collections_022[1] = [0,fvalue_065]}
                       else
                        if(major_words_020[1])
                         duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                        else
                         {var
                           field_sexp_051$5=field_sexp_051(0),
                           fvalue_066=caml_call1(_y_,field_sexp_051$5);
                          major_words_020[1] = [0,fvalue_066]}
                      else
                       if(major_collections_024[1])
                        duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                       else
                        {var
                          field_sexp_051$6=field_sexp_051(0),
                          fvalue_064=caml_call1(t_of_sexp,field_sexp_051$6);
                         major_collections_024[1] = [0,fvalue_064]}
                     else
                      if(live_words_030[1])
                       duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                      else
                       {var
                         field_sexp_051$7=field_sexp_051(0),
                         fvalue_061=caml_call1(t_of_sexp,field_sexp_051$7);
                        live_words_030[1] = [0,fvalue_061]}
                    else
                     if(caml_string_notequal(_aNZ_,cst_compactions$0))
                      if(caml_string_notequal(_aNZ_,cst_fragments$0))
                       if(caml_string_notequal(_aNZ_,cst_free_blocks$0))
                        if(caml_string_notequal(_aNZ_,cst_free_words$0))
                         if(caml_string_notequal(_aNZ_,cst_heap_chunks$0))
                          if(caml_string_notequal(_aNZ_,cst_heap_words$0))
                           if(caml_string_notequal(_aNZ_,cst_largest_free$0))
                            if(caml_string_notequal(_aNZ_,cst_live_blocks$0))
                             switch$2 = 1;
                            else
                             if(live_blocks_032[1])
                              duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                             else
                              {var
                                field_sexp_051$8=field_sexp_051(0),
                                fvalue_060=caml_call1(t_of_sexp,field_sexp_051$8);
                               live_blocks_032[1] = [0,fvalue_060]}
                           else
                            if(largest_free_038[1])
                             duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                            else
                             {var
                               field_sexp_051$9=field_sexp_051(0),
                               fvalue_057=caml_call1(t_of_sexp,field_sexp_051$9);
                              largest_free_038[1] = [0,fvalue_057]}
                          else
                           if(heap_words_026[1])
                            duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                           else
                            {var
                              field_sexp_051$10=field_sexp_051(0),
                              fvalue_063=caml_call1(t_of_sexp,field_sexp_051$10);
                             heap_words_026[1] = [0,fvalue_063]}
                         else
                          if(heap_chunks_028[1])
                           duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                          else
                           {var
                             field_sexp_051$11=field_sexp_051(0),
                             fvalue_062=caml_call1(t_of_sexp,field_sexp_051$11);
                            heap_chunks_028[1] = [0,fvalue_062]}
                        else
                         if(free_words_034[1])
                          duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                         else
                          {var
                            field_sexp_051$12=field_sexp_051(0),
                            fvalue_059=caml_call1(t_of_sexp,field_sexp_051$12);
                           free_words_034[1] = [0,fvalue_059]}
                       else
                        if(free_blocks_036[1])
                         duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                        else
                         {var
                           field_sexp_051$13=field_sexp_051(0),
                           fvalue_058=caml_call1(t_of_sexp,field_sexp_051$13);
                          free_blocks_036[1] = [0,fvalue_058]}
                      else
                       if(fragments_040[1])
                        duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                       else
                        {var
                          field_sexp_051$14=field_sexp_051(0),
                          fvalue_056=caml_call1(t_of_sexp,field_sexp_051$14);
                         fragments_040[1] = [0,fvalue_056]}
                     else
                      if(compactions_042[1])
                       duplicates_048[1] = [0,_aNZ_,duplicates_048[1]];
                      else
                       {var
                         field_sexp_051$15=field_sexp_051(0),
                         fvalue_055=caml_call1(t_of_sexp,field_sexp_051$15);
                        compactions_042[1] = [0,fvalue_055]}
                    if(switch$2 && Sexplib0_Sexp_conv[26][1])
                     extra_049[1] = [0,_aNZ_,extra_049[1]];
                    var param$0=tail_071;
                    continue}}}}
            return caml_call2
                    (Sexplib0_Sexp_conv_error[10],error_source_069,_aNV_)}
          return 0}}
      iter_070(field_sexps_015);
      if(duplicates_048[1])
       return caml_call3
               (Sexplib0_Sexp_conv_error[12],
                error_source_069,
                duplicates_048[1],
                sexp_014);
      if(extra_049[1])
       return caml_call3
               (Sexplib0_Sexp_conv_error[13],
                error_source_069,
                extra_049[1],
                sexp_014);
      var
       _aNF_=minor_words_016[1],
       _aNG_=promoted_words_018[1],
       _aNH_=major_words_020[1],
       _aNI_=minor_collections_022[1],
       _aNJ_=major_collections_024[1],
       _aNK_=heap_words_026[1],
       _aNL_=heap_chunks_028[1],
       _aNM_=live_words_030[1],
       _aNN_=live_blocks_032[1],
       _aNO_=free_words_034[1],
       _aNP_=free_blocks_036[1],
       _aNQ_=largest_free_038[1],
       _aNR_=fragments_040[1],
       _aNS_=compactions_042[1],
       _aNT_=top_heap_words_044[1],
       _aNU_=stack_size_046[1];
      if
       (_aNF_
        &&
        _aNG_
        &&
        _aNH_
        &&
        _aNI_
        &&
        _aNJ_
        &&
        _aNK_
        &&
        _aNL_
        &&
        _aNM_
        &&
        _aNN_
        &&
        _aNO_
        &&
        _aNP_
        &&
        _aNQ_
        &&
        _aNR_
        &&
        _aNS_
        &&
        _aNT_
        &&
        _aNU_)
       {var
         stack_size_047=_aNU_[1],
         top_heap_words_045=_aNT_[1],
         compactions_043=_aNS_[1],
         fragments_041=_aNR_[1],
         largest_free_039=_aNQ_[1],
         free_blocks_037=_aNP_[1],
         free_words_035=_aNO_[1],
         live_blocks_033=_aNN_[1],
         live_words_031=_aNM_[1],
         heap_chunks_029=_aNL_[1],
         heap_words_027=_aNK_[1],
         major_collections_025=_aNJ_[1],
         minor_collections_023=_aNI_[1],
         major_words_021=_aNH_[1],
         promoted_words_019=_aNG_[1],
         minor_words_017=_aNF_[1];
        return [0,
                minor_words_017,
                promoted_words_019,
                major_words_021,
                minor_collections_023,
                major_collections_025,
                heap_words_027,
                heap_chunks_029,
                live_words_031,
                live_blocks_033,
                free_words_035,
                free_blocks_037,
                largest_free_039,
                fragments_041,
                compactions_043,
                top_heap_words_045,
                stack_size_047]}
      return caml_call3
              (Sexplib0_Sexp_conv_error[15],
               error_source_069,
               sexp_014,
               [0,
                [0,0 === minor_words_016[1]?1:0,cst_minor_words$1],
                [0,
                 [0,0 === promoted_words_018[1]?1:0,cst_promoted_words$1],
                 [0,
                  [0,0 === major_words_020[1]?1:0,cst_major_words$1],
                  [0,
                   [0,
                    0 === minor_collections_022[1]?1:0,
                    cst_minor_collections$1],
                   [0,
                    [0,
                     0 === major_collections_024[1]?1:0,
                     cst_major_collections$1],
                    [0,
                     [0,0 === heap_words_026[1]?1:0,cst_heap_words$1],
                     [0,
                      [0,0 === heap_chunks_028[1]?1:0,cst_heap_chunks$1],
                      [0,
                       [0,0 === live_words_030[1]?1:0,cst_live_words$1],
                       [0,
                        [0,0 === live_blocks_032[1]?1:0,cst_live_blocks$1],
                        [0,
                         [0,0 === free_words_034[1]?1:0,cst_free_words$1],
                         [0,
                          [0,0 === free_blocks_036[1]?1:0,cst_free_blocks$1],
                          [0,
                           [0,0 === largest_free_038[1]?1:0,cst_largest_free$1],
                           [0,
                            [0,0 === fragments_040[1]?1:0,cst_fragments$1],
                            [0,
                             [0,0 === compactions_042[1]?1:0,cst_compactions$1],
                             [0,
                              [0,0 === top_heap_words_044[1]?1:0,cst_top_heap_words$1],
                              [0,[0,0 === stack_size_046[1]?1:0,cst_stack_size$1],0]]]]]]]]]]]]]]]])}
    function sexp_of_t$133(param)
     {var
       stack_size_104=param[16],
       top_heap_words_102=param[15],
       compactions_100=param[14],
       fragments_098=param[13],
       largest_free_096=param[12],
       free_blocks_094=param[11],
       free_words_092=param[10],
       live_blocks_090=param[9],
       live_words_088=param[8],
       heap_chunks_086=param[7],
       heap_words_084=param[6],
       major_collections_082=param[5],
       minor_collections_080=param[4],
       major_words_078=param[3],
       promoted_words_076=param[2],
       minor_words_074=param[1],
       arg_105=caml_call1(sexp_of_t$0,stack_size_104),
       bnds_073=[0,[1,[0,_awd_,[0,arg_105,0]]],0],
       arg_103=caml_call1(sexp_of_t$0,top_heap_words_102),
       bnds_073$0=[0,[1,[0,_awe_,[0,arg_103,0]]],bnds_073],
       arg_101=caml_call1(sexp_of_t$0,compactions_100),
       bnds_073$1=[0,[1,[0,_awf_,[0,arg_101,0]]],bnds_073$0],
       arg_099=caml_call1(sexp_of_t$0,fragments_098),
       bnds_073$2=[0,[1,[0,_awg_,[0,arg_099,0]]],bnds_073$1],
       arg_097=caml_call1(sexp_of_t$0,largest_free_096),
       bnds_073$3=[0,[1,[0,_awh_,[0,arg_097,0]]],bnds_073$2],
       arg_095=caml_call1(sexp_of_t$0,free_blocks_094),
       bnds_073$4=[0,[1,[0,_awi_,[0,arg_095,0]]],bnds_073$3],
       arg_093=caml_call1(sexp_of_t$0,free_words_092),
       bnds_073$5=[0,[1,[0,_awj_,[0,arg_093,0]]],bnds_073$4],
       arg_091=caml_call1(sexp_of_t$0,live_blocks_090),
       bnds_073$6=[0,[1,[0,_awk_,[0,arg_091,0]]],bnds_073$5],
       arg_089=caml_call1(sexp_of_t$0,live_words_088),
       bnds_073$7=[0,[1,[0,_awl_,[0,arg_089,0]]],bnds_073$6],
       arg_087=caml_call1(sexp_of_t$0,heap_chunks_086),
       bnds_073$8=[0,[1,[0,_awm_,[0,arg_087,0]]],bnds_073$7],
       arg_085=caml_call1(sexp_of_t$0,heap_words_084),
       bnds_073$9=[0,[1,[0,_awn_,[0,arg_085,0]]],bnds_073$8],
       arg_083=caml_call1(sexp_of_t$0,major_collections_082),
       bnds_073$10=[0,[1,[0,_awo_,[0,arg_083,0]]],bnds_073$9],
       arg_081=caml_call1(sexp_of_t$0,minor_collections_080),
       bnds_073$11=[0,[1,[0,_awp_,[0,arg_081,0]]],bnds_073$10],
       arg_079=caml_call1(_z_,major_words_078),
       bnds_073$12=[0,[1,[0,_awq_,[0,arg_079,0]]],bnds_073$11],
       arg_077=caml_call1(_z_,promoted_words_076),
       bnds_073$13=[0,[1,[0,_awr_,[0,arg_077,0]]],bnds_073$12],
       arg_075=caml_call1(_z_,minor_words_074),
       bnds_073$14=[0,[1,[0,_aws_,[0,arg_075,0]]],bnds_073$13];
      return [1,bnds_073$14]}
    var
     _awt_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_minor_words$2,_b$_],
         [0,
          [0,cst_promoted_words$2,_b$_],
          [0,
           [0,cst_major_words$2,_b$_],
           [0,
            [0,cst_minor_collections$2,_b7_],
            [0,
             [0,cst_major_collections$2,_b7_],
             [0,
              [0,cst_heap_words$2,_b7_],
              [0,
               [0,cst_heap_chunks$2,_b7_],
               [0,
                [0,cst_live_words$2,_b7_],
                [0,
                 [0,cst_live_blocks$2,_b7_],
                 [0,
                  [0,cst_free_words$2,_b7_],
                  [0,
                   [0,cst_free_blocks$2,_b7_],
                   [0,
                    [0,cst_largest_free$2,_b7_],
                    [0,
                     [0,cst_fragments$2,_b7_],
                     [0,
                      [0,cst_compactions$2,_b7_],
                      [0,
                       [0,cst_top_heap_words$2,_b7_],
                       [0,
                        [0,cst_stack_size$2,_b7_],
                        [0,[0,cst_forced_major_collections,_b7_],0]]]]]]]]]]]]]]]]]),
     _awu_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$287),0,_awt_],0],
     _awv_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_gc_ml_87_6),
     group$150=caml_call2(Bin_prot_Shape[6],_awv_,_awu_),
     _aww_=caml_call1(Bin_prot_Shape[2][1],cst_t$288),
     bin_shape_t$145=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$150,_aww_),0);
    function bin_size_t$94(param)
     {var
       v17=param[17],
       v16=param[16],
       v15=param[15],
       v14=param[14],
       v13=param[13],
       v12=param[12],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       v7=param[7],
       v6=param[6],
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       _aNo_=caml_call1(bin_size_t$4,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aNo_),
       _aNp_=caml_call1(bin_size_t$4,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aNp_),
       _aNq_=caml_call1(bin_size_t$4,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aNq_),
       _aNr_=caml_call1(bin_size_t$3,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_aNr_),
       _aNs_=caml_call1(bin_size_t$3,v5),
       size$3=caml_call2(Bin_prot_Common[23],size$2,_aNs_),
       _aNt_=caml_call1(bin_size_t$3,v6),
       size$4=caml_call2(Bin_prot_Common[23],size$3,_aNt_),
       _aNu_=caml_call1(bin_size_t$3,v7),
       size$5=caml_call2(Bin_prot_Common[23],size$4,_aNu_),
       _aNv_=caml_call1(bin_size_t$3,v8),
       size$6=caml_call2(Bin_prot_Common[23],size$5,_aNv_),
       _aNw_=caml_call1(bin_size_t$3,v9),
       size$7=caml_call2(Bin_prot_Common[23],size$6,_aNw_),
       _aNx_=caml_call1(bin_size_t$3,v10),
       size$8=caml_call2(Bin_prot_Common[23],size$7,_aNx_),
       _aNy_=caml_call1(bin_size_t$3,v11),
       size$9=caml_call2(Bin_prot_Common[23],size$8,_aNy_),
       _aNz_=caml_call1(bin_size_t$3,v12),
       size$10=caml_call2(Bin_prot_Common[23],size$9,_aNz_),
       _aNA_=caml_call1(bin_size_t$3,v13),
       size$11=caml_call2(Bin_prot_Common[23],size$10,_aNA_),
       _aNB_=caml_call1(bin_size_t$3,v14),
       size$12=caml_call2(Bin_prot_Common[23],size$11,_aNB_),
       _aNC_=caml_call1(bin_size_t$3,v15),
       size$13=caml_call2(Bin_prot_Common[23],size$12,_aNC_),
       _aND_=caml_call1(bin_size_t$3,v16),
       size$14=caml_call2(Bin_prot_Common[23],size$13,_aND_),
       _aNE_=caml_call1(bin_size_t$3,v17);
      return caml_call2(Bin_prot_Common[23],size$14,_aNE_)}
    function bin_write_t$95(buf,pos,param)
     {var
       v17=param[17],
       v16=param[16],
       v15=param[15],
       v14=param[14],
       v13=param[13],
       v12=param[12],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       v7=param[7],
       v6=param[6],
       v5=param[5],
       v4=param[4],
       v3=param[3],
       v2=param[2],
       v1=param[1],
       pos$0=caml_call3(bin_write_t$4,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$4,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$4,buf,pos$1,v3),
       pos$3=caml_call3(bin_write_t$3,buf,pos$2,v4),
       pos$4=caml_call3(bin_write_t$3,buf,pos$3,v5),
       pos$5=caml_call3(bin_write_t$3,buf,pos$4,v6),
       pos$6=caml_call3(bin_write_t$3,buf,pos$5,v7),
       pos$7=caml_call3(bin_write_t$3,buf,pos$6,v8),
       pos$8=caml_call3(bin_write_t$3,buf,pos$7,v9),
       pos$9=caml_call3(bin_write_t$3,buf,pos$8,v10),
       pos$10=caml_call3(bin_write_t$3,buf,pos$9,v11),
       pos$11=caml_call3(bin_write_t$3,buf,pos$10,v12),
       pos$12=caml_call3(bin_write_t$3,buf,pos$11,v13),
       pos$13=caml_call3(bin_write_t$3,buf,pos$12,v14),
       pos$14=caml_call3(bin_write_t$3,buf,pos$13,v15),
       pos$15=caml_call3(bin_write_t$3,buf,pos$14,v16);
      return caml_call3(bin_write_t$3,buf,pos$15,v17)}
    var bin_writer_t$120=[0,bin_size_t$94,bin_write_t$95];
    function bin_read_t$187(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],
               cst_core_src_gc_ml_Stable_Stat$0,
               pos_ref[1])}
    function bin_read_t$188(buf,pos_ref)
     {var
       v_minor_words=caml_call2(bin_read_t$9,buf,pos_ref),
       v_promoted_words=caml_call2(bin_read_t$9,buf,pos_ref),
       v_major_words=caml_call2(bin_read_t$9,buf,pos_ref),
       v_minor_collections=caml_call2(bin_read_t$7,buf,pos_ref),
       v_major_collections=caml_call2(bin_read_t$7,buf,pos_ref),
       v_heap_words=caml_call2(bin_read_t$7,buf,pos_ref),
       v_heap_chunks=caml_call2(bin_read_t$7,buf,pos_ref),
       v_live_words=caml_call2(bin_read_t$7,buf,pos_ref),
       v_live_blocks=caml_call2(bin_read_t$7,buf,pos_ref),
       v_free_words=caml_call2(bin_read_t$7,buf,pos_ref),
       v_free_blocks=caml_call2(bin_read_t$7,buf,pos_ref),
       v_largest_free=caml_call2(bin_read_t$7,buf,pos_ref),
       v_fragments=caml_call2(bin_read_t$7,buf,pos_ref),
       v_compactions=caml_call2(bin_read_t$7,buf,pos_ref),
       v_top_heap_words=caml_call2(bin_read_t$7,buf,pos_ref),
       v_stack_size=caml_call2(bin_read_t$7,buf,pos_ref),
       v_forced_major_collections=caml_call2(bin_read_t$7,buf,pos_ref);
      return [0,
              v_minor_words,
              v_promoted_words,
              v_major_words,
              v_minor_collections,
              v_major_collections,
              v_heap_words,
              v_heap_chunks,
              v_live_words,
              v_live_blocks,
              v_free_words,
              v_free_blocks,
              v_largest_free,
              v_fragments,
              v_compactions,
              v_top_heap_words,
              v_stack_size,
              v_forced_major_collections]}
    var
     bin_reader_t$120=[0,bin_read_t$188,bin_read_t$187],
     bin_t$120=[0,bin_shape_t$145,bin_writer_t$120,bin_reader_t$120];
    function compare$109(a_106,b_107)
     {if(caml_call2(Ppx_compare_lib[1],a_106,b_107))return 0;
      var n=caml_call2(_u_,a_106[1],b_107[1]);
      if(0 === n)
       {var n$0=caml_call2(_u_,a_106[2],b_107[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_u_,a_106[3],b_107[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare,a_106[4],b_107[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare,a_106[5],b_107[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare,a_106[6],b_107[6]);
                if(0 === n$4)
                 {var n$5=caml_call2(compare,a_106[7],b_107[7]);
                  if(0 === n$5)
                   {var n$6=caml_call2(compare,a_106[8],b_107[8]);
                    if(0 === n$6)
                     {var n$7=caml_call2(compare,a_106[9],b_107[9]);
                      if(0 === n$7)
                       {var n$8=caml_call2(compare,a_106[10],b_107[10]);
                        if(0 === n$8)
                         {var n$9=caml_call2(compare,a_106[11],b_107[11]);
                          if(0 === n$9)
                           {var n$10=caml_call2(compare,a_106[12],b_107[12]);
                            if(0 === n$10)
                             {var n$11=caml_call2(compare,a_106[13],b_107[13]);
                              if(0 === n$11)
                               {var n$12=caml_call2(compare,a_106[14],b_107[14]);
                                if(0 === n$12)
                                 {var n$13=caml_call2(compare,a_106[15],b_107[15]);
                                  if(0 === n$13)
                                   {var n$14=caml_call2(compare,a_106[16],b_107[16]);
                                    return 0 === n$14
                                            ?caml_call2(compare,a_106[17],b_107[17])
                                            :n$14}
                                  return n$13}
                                return n$12}
                              return n$11}
                            return n$10}
                          return n$9}
                        return n$8}
                      return n$7}
                    return n$6}
                  return n$5}
                return n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function equal$48(a_108,b_109)
     {if(caml_call2(Ppx_compare_lib[1],a_108,b_109))return 1;
      var _aM9_=caml_call2(_v_,a_108[1],b_109[1]);
      if(_aM9_)
       {var _aM__=caml_call2(_v_,a_108[2],b_109[2]);
        if(_aM__)
         {var _aM$_=caml_call2(_v_,a_108[3],b_109[3]);
          if(_aM$_)
           {var _aNa_=caml_call2(_B_,a_108[4],b_109[4]);
            if(_aNa_)
             {var _aNb_=caml_call2(_B_,a_108[5],b_109[5]);
              if(_aNb_)
               {var _aNc_=caml_call2(_B_,a_108[6],b_109[6]);
                if(_aNc_)
                 {var _aNd_=caml_call2(_B_,a_108[7],b_109[7]);
                  if(_aNd_)
                   {var _aNe_=caml_call2(_B_,a_108[8],b_109[8]);
                    if(_aNe_)
                     {var _aNf_=caml_call2(_B_,a_108[9],b_109[9]);
                      if(_aNf_)
                       {var _aNg_=caml_call2(_B_,a_108[10],b_109[10]);
                        if(_aNg_)
                         {var _aNh_=caml_call2(_B_,a_108[11],b_109[11]);
                          if(_aNh_)
                           {var _aNi_=caml_call2(_B_,a_108[12],b_109[12]);
                            if(_aNi_)
                             {var _aNj_=caml_call2(_B_,a_108[13],b_109[13]);
                              if(_aNj_)
                               {var _aNk_=caml_call2(_B_,a_108[14],b_109[14]);
                                if(_aNk_)
                                 {var _aNl_=caml_call2(_B_,a_108[15],b_109[15]);
                                  if(_aNl_)
                                   {var _aNm_=caml_call2(_B_,a_108[16],b_109[16]);
                                    if(_aNm_)return caml_call2(_B_,a_108[17],b_109[17]);
                                    var _aNn_=_aNm_}
                                  else
                                   var _aNn_=_aNl_}
                                else
                                 var _aNn_=_aNk_}
                              else
                               var _aNn_=_aNj_}
                            else
                             var _aNn_=_aNi_}
                          else
                           var _aNn_=_aNh_}
                        else
                         var _aNn_=_aNg_}
                      else
                       var _aNn_=_aNf_}
                    else
                     var _aNn_=_aNe_}
                  else
                   var _aNn_=_aNd_}
                else
                 var _aNn_=_aNc_}
              else
               var _aNn_=_aNb_}
            else
             var _aNn_=_aNa_}
          else
           var _aNn_=_aM$_}
        else
         var _aNn_=_aM__}
      else
       var _aNn_=_aM9_;
      return _aNn_}
    function hash_fold_t$47(hsv,arg)
     {var
       hsv$0=caml_call2(_w_,hsv,arg[1]),
       hsv$1=caml_call2(_w_,hsv$0,arg[2]),
       hsv$2=caml_call2(_w_,hsv$1,arg[3]),
       hsv$3=caml_call2(hash_fold_t,hsv$2,arg[4]),
       hsv$4=caml_call2(hash_fold_t,hsv$3,arg[5]),
       hsv$5=caml_call2(hash_fold_t,hsv$4,arg[6]),
       hsv$6=caml_call2(hash_fold_t,hsv$5,arg[7]),
       hsv$7=caml_call2(hash_fold_t,hsv$6,arg[8]),
       hsv$8=caml_call2(hash_fold_t,hsv$7,arg[9]),
       hsv$9=caml_call2(hash_fold_t,hsv$8,arg[10]),
       hsv$10=caml_call2(hash_fold_t,hsv$9,arg[11]),
       hsv$11=caml_call2(hash_fold_t,hsv$10,arg[12]),
       hsv$12=caml_call2(hash_fold_t,hsv$11,arg[13]),
       hsv$13=caml_call2(hash_fold_t,hsv$12,arg[14]),
       hsv$14=caml_call2(hash_fold_t,hsv$13,arg[15]),
       hsv$15=caml_call2(hash_fold_t,hsv$14,arg[16]);
      return caml_call2(hash_fold_t,hsv$15,arg[17])}
    function hash$62(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aM8_=hash_fold_t$47(hsv,x);
      return caml_call1(Base_Hash[9],_aM8_)}
    function t_of_sexp$116(sexp_111)
     {if(0 === sexp_111[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_169,sexp_111);
      var
       field_sexps_112=sexp_111[1],
       minor_words_113=[0,0],
       promoted_words_115=[0,0],
       major_words_117=[0,0],
       minor_collections_119=[0,0],
       major_collections_121=[0,0],
       heap_words_123=[0,0],
       heap_chunks_125=[0,0],
       live_words_127=[0,0],
       live_blocks_129=[0,0],
       free_words_131=[0,0],
       free_blocks_133=[0,0],
       largest_free_135=[0,0],
       fragments_137=[0,0],
       compactions_139=[0,0],
       top_heap_words_141=[0,0],
       stack_size_143=[0,0],
       forced_major_collections_145=[0,0],
       duplicates_147=[0,0],
       extra_148=[0,0];
      function iter_170(param)
       {var param$0=param;
        for(;;)
         {if(param$0)
           {var _aM2_=param$0[1];
            if(1 === _aM2_[0])
             {var _aM3_=_aM2_[1];
              if(_aM3_)
               {var _aM4_=_aM3_[1];
                if(0 === _aM4_[0])
                 {var _aM5_=_aM3_[2],_aM6_=_aM4_[1],switch$1=0;
                  if(! _aM5_ || ! _aM5_[2])switch$1 = 1;
                  if(switch$1)
                   {var
                     tail_171=param$0[2],
                     field_sexp_150$17=
                      function(_aM7_)
                       {function field_sexp_150(param)
                         {if(_aM7_)
                           {if(_aM7_[2])throw [0,Assert_failure,_awx_];
                            var x_172=_aM7_[1];
                            return x_172}
                          return caml_call2
                                  (Sexplib0_Sexp_conv_error[10],error_source_169,sexp_111)}
                        return field_sexp_150},
                     field_sexp_150=field_sexp_150$17(_aM5_),
                     switch$0=caml_string_compare(_aM6_,cst_live_blocks$3),
                     switch$2=0;
                    if(0 <= switch$0)
                     if(0 < switch$0)
                      if(caml_string_notequal(_aM6_,cst_live_words$3))
                       if(caml_string_notequal(_aM6_,cst_major_collections$3))
                        if(caml_string_notequal(_aM6_,cst_major_words$3))
                         if(caml_string_notequal(_aM6_,cst_minor_collections$3))
                          if(caml_string_notequal(_aM6_,cst_minor_words$3))
                           if(caml_string_notequal(_aM6_,cst_promoted_words$3))
                            if(caml_string_notequal(_aM6_,cst_stack_size$3))
                             if(caml_string_notequal(_aM6_,cst_top_heap_words$3))
                              switch$2 = 1;
                             else
                              if(top_heap_words_141[1])
                               duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                              else
                               {var
                                 field_sexp_150$0=field_sexp_150(0),
                                 fvalue_154=caml_call1(t_of_sexp,field_sexp_150$0);
                                top_heap_words_141[1] = [0,fvalue_154]}
                            else
                             if(stack_size_143[1])
                              duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                             else
                              {var
                                field_sexp_150$1=field_sexp_150(0),
                                fvalue_153=caml_call1(t_of_sexp,field_sexp_150$1);
                               stack_size_143[1] = [0,fvalue_153]}
                           else
                            if(promoted_words_115[1])
                             duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                            else
                             {var
                               field_sexp_150$2=field_sexp_150(0),
                               fvalue_167=caml_call1(_y_,field_sexp_150$2);
                              promoted_words_115[1] = [0,fvalue_167]}
                          else
                           if(minor_words_113[1])
                            duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                           else
                            {var
                              field_sexp_150$3=field_sexp_150(0),
                              fvalue_168=caml_call1(_y_,field_sexp_150$3);
                             minor_words_113[1] = [0,fvalue_168]}
                         else
                          if(minor_collections_119[1])
                           duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                          else
                           {var
                             field_sexp_150$4=field_sexp_150(0),
                             fvalue_165=caml_call1(t_of_sexp,field_sexp_150$4);
                            minor_collections_119[1] = [0,fvalue_165]}
                        else
                         if(major_words_117[1])
                          duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                         else
                          {var
                            field_sexp_150$5=field_sexp_150(0),
                            fvalue_166=caml_call1(_y_,field_sexp_150$5);
                           major_words_117[1] = [0,fvalue_166]}
                       else
                        if(major_collections_121[1])
                         duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                        else
                         {var
                           field_sexp_150$6=field_sexp_150(0),
                           fvalue_164=caml_call1(t_of_sexp,field_sexp_150$6);
                          major_collections_121[1] = [0,fvalue_164]}
                      else
                       if(live_words_127[1])
                        duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                       else
                        {var
                          field_sexp_150$7=field_sexp_150(0),
                          fvalue_161=caml_call1(t_of_sexp,field_sexp_150$7);
                         live_words_127[1] = [0,fvalue_161]}
                     else
                      if(live_blocks_129[1])
                       duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                      else
                       {var
                         field_sexp_150$8=field_sexp_150(0),
                         fvalue_160=caml_call1(t_of_sexp,field_sexp_150$8);
                        live_blocks_129[1] = [0,fvalue_160]}
                    else
                     if(caml_string_notequal(_aM6_,cst_compactions$3))
                      if
                       (caml_string_notequal(_aM6_,cst_forced_major_collections$0))
                       if(caml_string_notequal(_aM6_,cst_fragments$3))
                        if(caml_string_notequal(_aM6_,cst_free_blocks$3))
                         if(caml_string_notequal(_aM6_,cst_free_words$3))
                          if(caml_string_notequal(_aM6_,cst_heap_chunks$3))
                           if(caml_string_notequal(_aM6_,cst_heap_words$3))
                            if(caml_string_notequal(_aM6_,cst_largest_free$3))
                             switch$2 = 1;
                            else
                             if(largest_free_135[1])
                              duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                             else
                              {var
                                field_sexp_150$9=field_sexp_150(0),
                                fvalue_157=caml_call1(t_of_sexp,field_sexp_150$9);
                               largest_free_135[1] = [0,fvalue_157]}
                           else
                            if(heap_words_123[1])
                             duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                            else
                             {var
                               field_sexp_150$10=field_sexp_150(0),
                               fvalue_163=caml_call1(t_of_sexp,field_sexp_150$10);
                              heap_words_123[1] = [0,fvalue_163]}
                          else
                           if(heap_chunks_125[1])
                            duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                           else
                            {var
                              field_sexp_150$11=field_sexp_150(0),
                              fvalue_162=caml_call1(t_of_sexp,field_sexp_150$11);
                             heap_chunks_125[1] = [0,fvalue_162]}
                         else
                          if(free_words_131[1])
                           duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                          else
                           {var
                             field_sexp_150$12=field_sexp_150(0),
                             fvalue_159=caml_call1(t_of_sexp,field_sexp_150$12);
                            free_words_131[1] = [0,fvalue_159]}
                        else
                         if(free_blocks_133[1])
                          duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                         else
                          {var
                            field_sexp_150$13=field_sexp_150(0),
                            fvalue_158=caml_call1(t_of_sexp,field_sexp_150$13);
                           free_blocks_133[1] = [0,fvalue_158]}
                       else
                        if(fragments_137[1])
                         duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                        else
                         {var
                           field_sexp_150$14=field_sexp_150(0),
                           fvalue_156=caml_call1(t_of_sexp,field_sexp_150$14);
                          fragments_137[1] = [0,fvalue_156]}
                      else
                       if(forced_major_collections_145[1])
                        duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                       else
                        {var
                          field_sexp_150$15=field_sexp_150(0),
                          fvalue_152=caml_call1(t_of_sexp,field_sexp_150$15);
                         forced_major_collections_145[1] = [0,fvalue_152]}
                     else
                      if(compactions_139[1])
                       duplicates_147[1] = [0,_aM6_,duplicates_147[1]];
                      else
                       {var
                         field_sexp_150$16=field_sexp_150(0),
                         fvalue_155=caml_call1(t_of_sexp,field_sexp_150$16);
                        compactions_139[1] = [0,fvalue_155]}
                    if(switch$2 && Sexplib0_Sexp_conv[26][1])
                     extra_148[1] = [0,_aM6_,extra_148[1]];
                    var param$0=tail_171;
                    continue}}}}
            return caml_call2
                    (Sexplib0_Sexp_conv_error[10],error_source_169,_aM2_)}
          return 0}}
      iter_170(field_sexps_112);
      if(duplicates_147[1])
       return caml_call3
               (Sexplib0_Sexp_conv_error[12],
                error_source_169,
                duplicates_147[1],
                sexp_111);
      if(extra_148[1])
       return caml_call3
               (Sexplib0_Sexp_conv_error[13],
                error_source_169,
                extra_148[1],
                sexp_111);
      var
       _aML_=minor_words_113[1],
       _aMM_=promoted_words_115[1],
       _aMN_=major_words_117[1],
       _aMO_=minor_collections_119[1],
       _aMP_=major_collections_121[1],
       _aMQ_=heap_words_123[1],
       _aMR_=heap_chunks_125[1],
       _aMS_=live_words_127[1],
       _aMT_=live_blocks_129[1],
       _aMU_=free_words_131[1],
       _aMV_=free_blocks_133[1],
       _aMW_=largest_free_135[1],
       _aMX_=fragments_137[1],
       _aMY_=compactions_139[1],
       _aMZ_=top_heap_words_141[1],
       _aM0_=stack_size_143[1],
       _aM1_=forced_major_collections_145[1];
      if
       (_aML_
        &&
        _aMM_
        &&
        _aMN_
        &&
        _aMO_
        &&
        _aMP_
        &&
        _aMQ_
        &&
        _aMR_
        &&
        _aMS_
        &&
        _aMT_
        &&
        _aMU_
        &&
        _aMV_
        &&
        _aMW_
        &&
        _aMX_
        &&
        _aMY_
        &&
        _aMZ_
        &&
        _aM0_
        &&
        _aM1_)
       {var
         forced_major_collections_146=_aM1_[1],
         stack_size_144=_aM0_[1],
         top_heap_words_142=_aMZ_[1],
         compactions_140=_aMY_[1],
         fragments_138=_aMX_[1],
         largest_free_136=_aMW_[1],
         free_blocks_134=_aMV_[1],
         free_words_132=_aMU_[1],
         live_blocks_130=_aMT_[1],
         live_words_128=_aMS_[1],
         heap_chunks_126=_aMR_[1],
         heap_words_124=_aMQ_[1],
         major_collections_122=_aMP_[1],
         minor_collections_120=_aMO_[1],
         major_words_118=_aMN_[1],
         promoted_words_116=_aMM_[1],
         minor_words_114=_aML_[1];
        return [0,
                minor_words_114,
                promoted_words_116,
                major_words_118,
                minor_collections_120,
                major_collections_122,
                heap_words_124,
                heap_chunks_126,
                live_words_128,
                live_blocks_130,
                free_words_132,
                free_blocks_134,
                largest_free_136,
                fragments_138,
                compactions_140,
                top_heap_words_142,
                stack_size_144,
                forced_major_collections_146]}
      return caml_call3
              (Sexplib0_Sexp_conv_error[15],
               error_source_169,
               sexp_111,
               [0,
                [0,0 === minor_words_113[1]?1:0,cst_minor_words$4],
                [0,
                 [0,0 === promoted_words_115[1]?1:0,cst_promoted_words$4],
                 [0,
                  [0,0 === major_words_117[1]?1:0,cst_major_words$4],
                  [0,
                   [0,
                    0 === minor_collections_119[1]?1:0,
                    cst_minor_collections$4],
                   [0,
                    [0,
                     0 === major_collections_121[1]?1:0,
                     cst_major_collections$4],
                    [0,
                     [0,0 === heap_words_123[1]?1:0,cst_heap_words$4],
                     [0,
                      [0,0 === heap_chunks_125[1]?1:0,cst_heap_chunks$4],
                      [0,
                       [0,0 === live_words_127[1]?1:0,cst_live_words$4],
                       [0,
                        [0,0 === live_blocks_129[1]?1:0,cst_live_blocks$4],
                        [0,
                         [0,0 === free_words_131[1]?1:0,cst_free_words$4],
                         [0,
                          [0,0 === free_blocks_133[1]?1:0,cst_free_blocks$4],
                          [0,
                           [0,0 === largest_free_135[1]?1:0,cst_largest_free$4],
                           [0,
                            [0,0 === fragments_137[1]?1:0,cst_fragments$4],
                            [0,
                             [0,0 === compactions_139[1]?1:0,cst_compactions$4],
                             [0,
                              [0,0 === top_heap_words_141[1]?1:0,cst_top_heap_words$4],
                              [0,
                               [0,0 === stack_size_143[1]?1:0,cst_stack_size$4],
                               [0,
                                [0,
                                 0 === forced_major_collections_145[1]?1:0,
                                 cst_forced_major_collections$1],
                                0]]]]]]]]]]]]]]]]])}
    function sexp_of_t$134(param)
     {var
       forced_major_collections_206=param[17],
       stack_size_204=param[16],
       top_heap_words_202=param[15],
       compactions_200=param[14],
       fragments_198=param[13],
       largest_free_196=param[12],
       free_blocks_194=param[11],
       free_words_192=param[10],
       live_blocks_190=param[9],
       live_words_188=param[8],
       heap_chunks_186=param[7],
       heap_words_184=param[6],
       major_collections_182=param[5],
       minor_collections_180=param[4],
       major_words_178=param[3],
       promoted_words_176=param[2],
       minor_words_174=param[1],
       arg_207=caml_call1(sexp_of_t$0,forced_major_collections_206),
       bnds_173=[0,[1,[0,_awy_,[0,arg_207,0]]],0],
       arg_205=caml_call1(sexp_of_t$0,stack_size_204),
       bnds_173$0=[0,[1,[0,_awz_,[0,arg_205,0]]],bnds_173],
       arg_203=caml_call1(sexp_of_t$0,top_heap_words_202),
       bnds_173$1=[0,[1,[0,_awA_,[0,arg_203,0]]],bnds_173$0],
       arg_201=caml_call1(sexp_of_t$0,compactions_200),
       bnds_173$2=[0,[1,[0,_awB_,[0,arg_201,0]]],bnds_173$1],
       arg_199=caml_call1(sexp_of_t$0,fragments_198),
       bnds_173$3=[0,[1,[0,_awC_,[0,arg_199,0]]],bnds_173$2],
       arg_197=caml_call1(sexp_of_t$0,largest_free_196),
       bnds_173$4=[0,[1,[0,_awD_,[0,arg_197,0]]],bnds_173$3],
       arg_195=caml_call1(sexp_of_t$0,free_blocks_194),
       bnds_173$5=[0,[1,[0,_awE_,[0,arg_195,0]]],bnds_173$4],
       arg_193=caml_call1(sexp_of_t$0,free_words_192),
       bnds_173$6=[0,[1,[0,_awF_,[0,arg_193,0]]],bnds_173$5],
       arg_191=caml_call1(sexp_of_t$0,live_blocks_190),
       bnds_173$7=[0,[1,[0,_awG_,[0,arg_191,0]]],bnds_173$6],
       arg_189=caml_call1(sexp_of_t$0,live_words_188),
       bnds_173$8=[0,[1,[0,_awH_,[0,arg_189,0]]],bnds_173$7],
       arg_187=caml_call1(sexp_of_t$0,heap_chunks_186),
       bnds_173$9=[0,[1,[0,_awI_,[0,arg_187,0]]],bnds_173$8],
       arg_185=caml_call1(sexp_of_t$0,heap_words_184),
       bnds_173$10=[0,[1,[0,_awJ_,[0,arg_185,0]]],bnds_173$9],
       arg_183=caml_call1(sexp_of_t$0,major_collections_182),
       bnds_173$11=[0,[1,[0,_awK_,[0,arg_183,0]]],bnds_173$10],
       arg_181=caml_call1(sexp_of_t$0,minor_collections_180),
       bnds_173$12=[0,[1,[0,_awL_,[0,arg_181,0]]],bnds_173$11],
       arg_179=caml_call1(_z_,major_words_178),
       bnds_173$13=[0,[1,[0,_awM_,[0,arg_179,0]]],bnds_173$12],
       arg_177=caml_call1(_z_,promoted_words_176),
       bnds_173$14=[0,[1,[0,_awN_,[0,arg_177,0]]],bnds_173$13],
       arg_175=caml_call1(_z_,minor_words_174),
       bnds_173$15=[0,[1,[0,_awO_,[0,arg_175,0]]],bnds_173$14];
      return [1,bnds_173$15]}
    var
     _awP_=
      caml_call1
       (Bin_prot_Shape[8],
        [0,
         [0,cst_minor_heap_size,_b7_],
         [0,
          [0,cst_major_heap_increment,_b7_],
          [0,
           [0,cst_space_overhead,_b7_],
           [0,
            [0,cst_verbose,_b7_],
            [0,
             [0,cst_max_overhead,_b7_],
             [0,
              [0,cst_stack_limit,_b7_],
              [0,
               [0,cst_allocation_policy,_b7_],
               [0,
                [0,cst_window_size,_b7_],
                [0,
                 [0,cst_custom_major_ratio,_b7_],
                 [0,
                  [0,cst_custom_minor_ratio,_b7_],
                  [0,[0,cst_custom_minor_max_size,_b7_],0]]]]]]]]]]]),
     _awQ_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$289),0,_awP_],0],
     _awR_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_gc_ml_116_6),
     group$151=caml_call2(Bin_prot_Shape[6],_awR_,_awQ_),
     _awS_=caml_call1(Bin_prot_Shape[2][1],cst_t$290),
     bin_shape_t$146=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$151,_awS_),0);
    function bin_size_t$95(param)
     {var
       v1=param[1],
       v2=param[2],
       v3=param[3],
       v4=param[4],
       v5=param[5],
       v6=param[6],
       v7=param[7],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       _aMA_=caml_call1(bin_size_t$3,v1),
       size=caml_call2(Bin_prot_Common[23],0,_aMA_),
       _aMB_=caml_call1(bin_size_t$3,v2),
       size$0=caml_call2(Bin_prot_Common[23],size,_aMB_),
       _aMC_=caml_call1(bin_size_t$3,v3),
       size$1=caml_call2(Bin_prot_Common[23],size$0,_aMC_),
       _aMD_=caml_call1(bin_size_t$3,v4),
       size$2=caml_call2(Bin_prot_Common[23],size$1,_aMD_),
       _aME_=caml_call1(bin_size_t$3,v5),
       size$3=caml_call2(Bin_prot_Common[23],size$2,_aME_),
       _aMF_=caml_call1(bin_size_t$3,v6),
       size$4=caml_call2(Bin_prot_Common[23],size$3,_aMF_),
       _aMG_=caml_call1(bin_size_t$3,v7),
       size$5=caml_call2(Bin_prot_Common[23],size$4,_aMG_),
       _aMH_=caml_call1(bin_size_t$3,v8),
       size$6=caml_call2(Bin_prot_Common[23],size$5,_aMH_),
       _aMI_=caml_call1(bin_size_t$3,v9),
       size$7=caml_call2(Bin_prot_Common[23],size$6,_aMI_),
       _aMJ_=caml_call1(bin_size_t$3,v10),
       size$8=caml_call2(Bin_prot_Common[23],size$7,_aMJ_),
       _aMK_=caml_call1(bin_size_t$3,v11);
      return caml_call2(Bin_prot_Common[23],size$8,_aMK_)}
    function bin_write_t$96(buf,pos,param)
     {var
       v1=param[1],
       v2=param[2],
       v3=param[3],
       v4=param[4],
       v5=param[5],
       v6=param[6],
       v7=param[7],
       v11=param[11],
       v10=param[10],
       v9=param[9],
       v8=param[8],
       pos$0=caml_call3(bin_write_t$3,buf,pos,v1),
       pos$1=caml_call3(bin_write_t$3,buf,pos$0,v2),
       pos$2=caml_call3(bin_write_t$3,buf,pos$1,v3),
       pos$3=caml_call3(bin_write_t$3,buf,pos$2,v4),
       pos$4=caml_call3(bin_write_t$3,buf,pos$3,v5),
       pos$5=caml_call3(bin_write_t$3,buf,pos$4,v6),
       pos$6=caml_call3(bin_write_t$3,buf,pos$5,v7),
       pos$7=caml_call3(bin_write_t$3,buf,pos$6,v8),
       pos$8=caml_call3(bin_write_t$3,buf,pos$7,v9),
       pos$9=caml_call3(bin_write_t$3,buf,pos$8,v10);
      return caml_call3(bin_write_t$3,buf,pos$9,v11)}
    var bin_writer_t$121=[0,bin_size_t$95,bin_write_t$96];
    function bin_read_t$189(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_gc_ml_Stable_Cont,pos_ref[1])}
    function bin_read_t$190(buf,pos_ref)
     {var
       v_minor_heap_size=caml_call2(bin_read_t$7,buf,pos_ref),
       v_major_heap_increment=caml_call2(bin_read_t$7,buf,pos_ref),
       v_space_overhead=caml_call2(bin_read_t$7,buf,pos_ref),
       v_verbose=caml_call2(bin_read_t$7,buf,pos_ref),
       v_max_overhead=caml_call2(bin_read_t$7,buf,pos_ref),
       v_stack_limit=caml_call2(bin_read_t$7,buf,pos_ref),
       v_allocation_policy=caml_call2(bin_read_t$7,buf,pos_ref),
       v_window_size=caml_call2(bin_read_t$7,buf,pos_ref),
       v_custom_major_ratio=caml_call2(bin_read_t$7,buf,pos_ref),
       v_custom_minor_ratio=caml_call2(bin_read_t$7,buf,pos_ref),
       v_custom_minor_max_size=caml_call2(bin_read_t$7,buf,pos_ref);
      return [0,
              v_minor_heap_size,
              v_major_heap_increment,
              v_space_overhead,
              v_verbose,
              v_max_overhead,
              v_stack_limit,
              v_allocation_policy,
              v_window_size,
              v_custom_major_ratio,
              v_custom_minor_ratio,
              v_custom_minor_max_size]}
    var
     bin_reader_t$121=[0,bin_read_t$190,bin_read_t$189],
     bin_t$121=[0,bin_shape_t$146,bin_writer_t$121,bin_reader_t$121];
    function compare$110(a_208,b_209)
     {if(caml_call2(Ppx_compare_lib[1],a_208,b_209))return 0;
      var n=caml_call2(compare,a_208[1],b_209[1]);
      if(0 === n)
       {var n$0=caml_call2(compare,a_208[2],b_209[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare,a_208[3],b_209[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare,a_208[4],b_209[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare,a_208[5],b_209[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare,a_208[6],b_209[6]);
                if(0 === n$4)
                 {var n$5=caml_call2(compare,a_208[7],b_209[7]);
                  if(0 === n$5)
                   {var n$6=caml_call2(compare,a_208[8],b_209[8]);
                    if(0 === n$6)
                     {var n$7=caml_call2(compare,a_208[9],b_209[9]);
                      if(0 === n$7)
                       {var n$8=caml_call2(compare,a_208[10],b_209[10]);
                        return 0 === n$8?caml_call2(compare,a_208[11],b_209[11]):n$8}
                      return n$7}
                    return n$6}
                  return n$5}
                return n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function equal$49(a_210,b_211)
     {if(caml_call2(Ppx_compare_lib[1],a_210,b_211))return 1;
      var _aMp_=caml_call2(_B_,a_210[1],b_211[1]);
      if(_aMp_)
       {var _aMq_=caml_call2(_B_,a_210[2],b_211[2]);
        if(_aMq_)
         {var _aMr_=caml_call2(_B_,a_210[3],b_211[3]);
          if(_aMr_)
           {var _aMs_=caml_call2(_B_,a_210[4],b_211[4]);
            if(_aMs_)
             {var _aMt_=caml_call2(_B_,a_210[5],b_211[5]);
              if(_aMt_)
               {var _aMu_=caml_call2(_B_,a_210[6],b_211[6]);
                if(_aMu_)
                 {var _aMv_=caml_call2(_B_,a_210[7],b_211[7]);
                  if(_aMv_)
                   {var _aMw_=caml_call2(_B_,a_210[8],b_211[8]);
                    if(_aMw_)
                     {var _aMx_=caml_call2(_B_,a_210[9],b_211[9]);
                      if(_aMx_)
                       {var _aMy_=caml_call2(_B_,a_210[10],b_211[10]);
                        if(_aMy_)return caml_call2(_B_,a_210[11],b_211[11]);
                        var _aMz_=_aMy_}
                      else
                       var _aMz_=_aMx_}
                    else
                     var _aMz_=_aMw_}
                  else
                   var _aMz_=_aMv_}
                else
                 var _aMz_=_aMu_}
              else
               var _aMz_=_aMt_}
            else
             var _aMz_=_aMs_}
          else
           var _aMz_=_aMr_}
        else
         var _aMz_=_aMq_}
      else
       var _aMz_=_aMp_;
      return _aMz_}
    function t_of_sexp$117(sexp_213)
     {if(0 === sexp_213[0])
       return caml_call2
               (Sexplib0_Sexp_conv_error[16],error_source_253,sexp_213);
      var
       field_sexps_214=sexp_213[1],
       minor_heap_size_215=[0,0],
       major_heap_increment_217=[0,0],
       space_overhead_219=[0,0],
       verbose_221=[0,0],
       max_overhead_223=[0,0],
       stack_limit_225=[0,0],
       allocation_policy_227=[0,0],
       window_size_229=[0,0],
       custom_major_ratio_231=[0,0],
       custom_minor_ratio_233=[0,0],
       custom_minor_max_size_235=[0,0],
       duplicates_237=[0,0],
       extra_238=[0,0],
       param=field_sexps_214;
      for(;;)
       {if(param)
         {var _aL__=param[1];
          if(1 === _aL__[0])
           {var _aL$_=_aL__[1];
            if(_aL$_)
             {var _aMa_=_aL$_[1];
              if(0 === _aMa_[0])
               {var _aMb_=_aL$_[2],_aMc_=_aMa_[1],switch$1=0;
                if(! _aMb_ || ! _aMb_[2])switch$1 = 1;
                if(switch$1)
                 {var
                   tail_255=param[2],
                   field_sexp_240$11=
                    function(_aMo_)
                     {function field_sexp_240(param)
                       {if(_aMo_)
                         {if(_aMo_[2])throw [0,Assert_failure,_awT_];
                          var x_256=_aMo_[1];
                          return x_256}
                        return caml_call2
                                (Sexplib0_Sexp_conv_error[10],error_source_253,sexp_213)}
                      return field_sexp_240},
                   field_sexp_240=field_sexp_240$11(_aMb_),
                   switch$0=caml_string_compare(_aMc_,cst_max_overhead$0),
                   switch$2=0;
                  if(0 <= switch$0)
                   if(0 < switch$0)
                    if(caml_string_notequal(_aMc_,cst_minor_heap_size$0))
                     if(caml_string_notequal(_aMc_,cst_space_overhead$0))
                      if(caml_string_notequal(_aMc_,cst_stack_limit$0))
                       if(caml_string_notequal(_aMc_,cst_verbose$0))
                        if(caml_string_notequal(_aMc_,cst_window_size$0))
                         switch$2 = 1;
                        else
                         if(window_size_229[1])
                          duplicates_237[1] = [0,_aMc_,duplicates_237[1]];
                         else
                          {var
                            field_sexp_240$0=field_sexp_240(0),
                            fvalue_245=caml_call1(t_of_sexp,field_sexp_240$0);
                           window_size_229[1] = [0,fvalue_245]}
                       else
                        if(verbose_221[1])
                         duplicates_237[1] = [0,_aMc_,duplicates_237[1]];
                        else
                         {var
                           field_sexp_240$1=field_sexp_240(0),
                           fvalue_249=caml_call1(t_of_sexp,field_sexp_240$1);
                          verbose_221[1] = [0,fvalue_249]}
                      else
                       if(stack_limit_225[1])
                        duplicates_237[1] = [0,_aMc_,duplicates_237[1]];
                       else
                        {var
                          field_sexp_240$2=field_sexp_240(0),
                          fvalue_247=caml_call1(t_of_sexp,field_sexp_240$2);
                         stack_limit_225[1] = [0,fvalue_247]}
                     else
                      if(space_overhead_219[1])
                       duplicates_237[1] = [0,_aMc_,duplicates_237[1]];
                      else
                       {var
                         field_sexp_240$3=field_sexp_240(0),
                         fvalue_250=caml_call1(t_of_sexp,field_sexp_240$3);
                        space_overhead_219[1] = [0,fvalue_250]}
                    else
                     if(minor_heap_size_215[1])
                      duplicates_237[1] = [0,_aMc_,duplicates_237[1]];
                     else
                      {var
                        field_sexp_240$4=field_sexp_240(0),
                        fvalue_252=caml_call1(t_of_sexp,field_sexp_240$4);
                       minor_heap_size_215[1] = [0,fvalue_252]}
                   else
                    if(max_overhead_223[1])
                     duplicates_237[1] = [0,_aMc_,duplicates_237[1]];
                    else
                     {var
                       field_sexp_240$5=field_sexp_240(0),
                       fvalue_248=caml_call1(t_of_sexp,field_sexp_240$5);
                      max_overhead_223[1] = [0,fvalue_248]}
                  else
                   if(caml_string_notequal(_aMc_,cst_allocation_policy$0))
                    if(caml_string_notequal(_aMc_,cst_custom_major_ratio$0))
                     if(caml_string_notequal(_aMc_,cst_custom_minor_max_size$0))
                      if(caml_string_notequal(_aMc_,cst_custom_minor_ratio$0))
                       if(caml_string_notequal(_aMc_,cst_major_heap_increment$0))
                        switch$2 = 1;
                       else
                        if(major_heap_increment_217[1])
                         duplicates_237[1] = [0,_aMc_,duplicates_237[1]];
                        else
                         {var
                           field_sexp_240$6=field_sexp_240(0),
                           fvalue_251=caml_call1(t_of_sexp,field_sexp_240$6);
                          major_heap_increment_217[1] = [0,fvalue_251]}
                      else
                       if(custom_minor_ratio_233[1])
                        duplicates_237[1] = [0,_aMc_,duplicates_237[1]];
                       else
                        {var
                          field_sexp_240$7=field_sexp_240(0),
                          fvalue_243=caml_call1(t_of_sexp,field_sexp_240$7);
                         custom_minor_ratio_233[1] = [0,fvalue_243]}
                     else
                      if(custom_minor_max_size_235[1])
                       duplicates_237[1] = [0,_aMc_,duplicates_237[1]];
                      else
                       {var
                         field_sexp_240$8=field_sexp_240(0),
                         fvalue_242=caml_call1(t_of_sexp,field_sexp_240$8);
                        custom_minor_max_size_235[1] = [0,fvalue_242]}
                    else
                     if(custom_major_ratio_231[1])
                      duplicates_237[1] = [0,_aMc_,duplicates_237[1]];
                     else
                      {var
                        field_sexp_240$9=field_sexp_240(0),
                        fvalue_244=caml_call1(t_of_sexp,field_sexp_240$9);
                       custom_major_ratio_231[1] = [0,fvalue_244]}
                   else
                    if(allocation_policy_227[1])
                     duplicates_237[1] = [0,_aMc_,duplicates_237[1]];
                    else
                     {var
                       field_sexp_240$10=field_sexp_240(0),
                       fvalue_246=caml_call1(t_of_sexp,field_sexp_240$10);
                      allocation_policy_227[1] = [0,fvalue_246]}
                  if(switch$2 && Sexplib0_Sexp_conv[26][1])
                   extra_238[1] = [0,_aMc_,extra_238[1]];
                  var param=tail_255;
                  continue}}}}
          caml_call2(Sexplib0_Sexp_conv_error[10],error_source_253,_aL__)}
        if(duplicates_237[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[12],
                  error_source_253,
                  duplicates_237[1],
                  sexp_213);
        if(extra_238[1])
         return caml_call3
                 (Sexplib0_Sexp_conv_error[13],
                  error_source_253,
                  extra_238[1],
                  sexp_213);
        var
         _aMd_=minor_heap_size_215[1],
         _aMe_=major_heap_increment_217[1],
         _aMf_=space_overhead_219[1],
         _aMg_=verbose_221[1],
         _aMh_=max_overhead_223[1],
         _aMi_=stack_limit_225[1],
         _aMj_=allocation_policy_227[1],
         _aMk_=window_size_229[1],
         _aMl_=custom_major_ratio_231[1],
         _aMm_=custom_minor_ratio_233[1],
         _aMn_=custom_minor_max_size_235[1];
        if
         (_aMd_
          &&
          _aMe_
          &&
          _aMf_
          &&
          _aMg_
          &&
          _aMh_
          &&
          _aMi_
          &&
          _aMj_
          &&
          _aMk_
          &&
          _aMl_
          &&
          _aMm_
          &&
          _aMn_)
         {var
           custom_minor_max_size_236=_aMn_[1],
           custom_minor_ratio_234=_aMm_[1],
           custom_major_ratio_232=_aMl_[1],
           window_size_230=_aMk_[1],
           allocation_policy_228=_aMj_[1],
           stack_limit_226=_aMi_[1],
           max_overhead_224=_aMh_[1],
           verbose_222=_aMg_[1],
           space_overhead_220=_aMf_[1],
           major_heap_increment_218=_aMe_[1],
           minor_heap_size_216=_aMd_[1];
          return [0,
                  minor_heap_size_216,
                  major_heap_increment_218,
                  space_overhead_220,
                  verbose_222,
                  max_overhead_224,
                  stack_limit_226,
                  allocation_policy_228,
                  window_size_230,
                  custom_major_ratio_232,
                  custom_minor_ratio_234,
                  custom_minor_max_size_236]}
        return caml_call3
                (Sexplib0_Sexp_conv_error[15],
                 error_source_253,
                 sexp_213,
                 [0,
                  [0,0 === minor_heap_size_215[1]?1:0,cst_minor_heap_size$1],
                  [0,
                   [0,
                    0 === major_heap_increment_217[1]?1:0,
                    cst_major_heap_increment$1],
                   [0,
                    [0,0 === space_overhead_219[1]?1:0,cst_space_overhead$1],
                    [0,
                     [0,0 === verbose_221[1]?1:0,cst_verbose$1],
                     [0,
                      [0,0 === max_overhead_223[1]?1:0,cst_max_overhead$1],
                      [0,
                       [0,0 === stack_limit_225[1]?1:0,cst_stack_limit$1],
                       [0,
                        [0,
                         0 === allocation_policy_227[1]?1:0,
                         cst_allocation_policy$1],
                        [0,
                         [0,0 === window_size_229[1]?1:0,cst_window_size$1],
                         [0,
                          [0,
                           0 === custom_major_ratio_231[1]?1:0,
                           cst_custom_major_ratio$1],
                          [0,
                           [0,
                            0 === custom_minor_ratio_233[1]?1:0,
                            cst_custom_minor_ratio$1],
                           [0,
                            [0,
                             0 === custom_minor_max_size_235[1]?1:0,
                             cst_custom_minor_max_size$1],
                            0]]]]]]]]]]])}}
    function sexp_of_t$135(param)
     {var
       minor_heap_size_258=param[1],
       major_heap_increment_260=param[2],
       space_overhead_262=param[3],
       verbose_264=param[4],
       max_overhead_266=param[5],
       stack_limit_268=param[6],
       allocation_policy_270=param[7],
       custom_minor_max_size_278=param[11],
       custom_minor_ratio_276=param[10],
       custom_major_ratio_274=param[9],
       window_size_272=param[8],
       arg_279=caml_call1(sexp_of_t$0,custom_minor_max_size_278),
       bnds_257=[0,[1,[0,_awU_,[0,arg_279,0]]],0],
       arg_277=caml_call1(sexp_of_t$0,custom_minor_ratio_276),
       bnds_257$0=[0,[1,[0,_awV_,[0,arg_277,0]]],bnds_257],
       arg_275=caml_call1(sexp_of_t$0,custom_major_ratio_274),
       bnds_257$1=[0,[1,[0,_awW_,[0,arg_275,0]]],bnds_257$0],
       arg_273=caml_call1(sexp_of_t$0,window_size_272),
       bnds_257$2=[0,[1,[0,_awX_,[0,arg_273,0]]],bnds_257$1],
       arg_271=caml_call1(sexp_of_t$0,allocation_policy_270),
       bnds_257$3=[0,[1,[0,_awY_,[0,arg_271,0]]],bnds_257$2],
       arg_269=caml_call1(sexp_of_t$0,stack_limit_268),
       bnds_257$4=[0,[1,[0,_awZ_,[0,arg_269,0]]],bnds_257$3],
       arg_267=caml_call1(sexp_of_t$0,max_overhead_266),
       bnds_257$5=[0,[1,[0,_aw0_,[0,arg_267,0]]],bnds_257$4],
       arg_265=caml_call1(sexp_of_t$0,verbose_264),
       bnds_257$6=[0,[1,[0,_aw1_,[0,arg_265,0]]],bnds_257$5],
       arg_263=caml_call1(sexp_of_t$0,space_overhead_262),
       bnds_257$7=[0,[1,[0,_aw2_,[0,arg_263,0]]],bnds_257$6],
       arg_261=caml_call1(sexp_of_t$0,major_heap_increment_260),
       bnds_257$8=[0,[1,[0,_aw3_,[0,arg_261,0]]],bnds_257$7],
       arg_259=caml_call1(sexp_of_t$0,minor_heap_size_258),
       bnds_257$9=[0,[1,[0,_aw4_,[0,arg_259,0]]],bnds_257$8];
      return [1,bnds_257$9]}
    var
     print_stat=include$165[1],
     allocated_bytes=include$165[2],
     create_alarm=include$165[6],
     delete_alarm=include$165[7];
    function compare$111(a_280,b_281)
     {if(caml_call2(Ppx_compare_lib[1],a_280,b_281))return 0;
      var n=caml_call2(_u_,a_280[1],b_281[1]);
      if(0 === n)
       {var n$0=caml_call2(_u_,a_280[2],b_281[2]);
        if(0 === n$0)
         {var n$1=caml_call2(_u_,a_280[3],b_281[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare,a_280[4],b_281[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare,a_280[5],b_281[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare,a_280[6],b_281[6]);
                if(0 === n$4)
                 {var n$5=caml_call2(compare,a_280[7],b_281[7]);
                  if(0 === n$5)
                   {var n$6=caml_call2(compare,a_280[8],b_281[8]);
                    if(0 === n$6)
                     {var n$7=caml_call2(compare,a_280[9],b_281[9]);
                      if(0 === n$7)
                       {var n$8=caml_call2(compare,a_280[10],b_281[10]);
                        if(0 === n$8)
                         {var n$9=caml_call2(compare,a_280[11],b_281[11]);
                          if(0 === n$9)
                           {var n$10=caml_call2(compare,a_280[12],b_281[12]);
                            if(0 === n$10)
                             {var n$11=caml_call2(compare,a_280[13],b_281[13]);
                              if(0 === n$11)
                               {var n$12=caml_call2(compare,a_280[14],b_281[14]);
                                if(0 === n$12)
                                 {var n$13=caml_call2(compare,a_280[15],b_281[15]);
                                  if(0 === n$13)
                                   {var n$14=caml_call2(compare,a_280[16],b_281[16]);
                                    return 0 === n$14
                                            ?caml_call2(compare,a_280[17],b_281[17])
                                            :n$14}
                                  return n$13}
                                return n$12}
                              return n$11}
                            return n$10}
                          return n$9}
                        return n$8}
                      return n$7}
                    return n$6}
                  return n$5}
                return n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function sexp_of_t$136(param)
     {var
       forced_major_collections_315=param[17],
       stack_size_313=param[16],
       top_heap_words_311=param[15],
       compactions_309=param[14],
       fragments_307=param[13],
       largest_free_305=param[12],
       free_blocks_303=param[11],
       free_words_301=param[10],
       live_blocks_299=param[9],
       live_words_297=param[8],
       heap_chunks_295=param[7],
       heap_words_293=param[6],
       major_collections_291=param[5],
       minor_collections_289=param[4],
       major_words_287=param[3],
       promoted_words_285=param[2],
       minor_words_283=param[1],
       arg_316=caml_call1(sexp_of_t$0,forced_major_collections_315),
       bnds_282=[0,[1,[0,_aw5_,[0,arg_316,0]]],0],
       arg_314=caml_call1(sexp_of_t$0,stack_size_313),
       bnds_282$0=[0,[1,[0,_aw6_,[0,arg_314,0]]],bnds_282],
       arg_312=caml_call1(sexp_of_t$0,top_heap_words_311),
       bnds_282$1=[0,[1,[0,_aw7_,[0,arg_312,0]]],bnds_282$0],
       arg_310=caml_call1(sexp_of_t$0,compactions_309),
       bnds_282$2=[0,[1,[0,_aw8_,[0,arg_310,0]]],bnds_282$1],
       arg_308=caml_call1(sexp_of_t$0,fragments_307),
       bnds_282$3=[0,[1,[0,_aw9_,[0,arg_308,0]]],bnds_282$2],
       arg_306=caml_call1(sexp_of_t$0,largest_free_305),
       bnds_282$4=[0,[1,[0,_aw__,[0,arg_306,0]]],bnds_282$3],
       arg_304=caml_call1(sexp_of_t$0,free_blocks_303),
       bnds_282$5=[0,[1,[0,_aw$_,[0,arg_304,0]]],bnds_282$4],
       arg_302=caml_call1(sexp_of_t$0,free_words_301),
       bnds_282$6=[0,[1,[0,_axa_,[0,arg_302,0]]],bnds_282$5],
       arg_300=caml_call1(sexp_of_t$0,live_blocks_299),
       bnds_282$7=[0,[1,[0,_axb_,[0,arg_300,0]]],bnds_282$6],
       arg_298=caml_call1(sexp_of_t$0,live_words_297),
       bnds_282$8=[0,[1,[0,_axc_,[0,arg_298,0]]],bnds_282$7],
       arg_296=caml_call1(sexp_of_t$0,heap_chunks_295),
       bnds_282$9=[0,[1,[0,_axd_,[0,arg_296,0]]],bnds_282$8],
       arg_294=caml_call1(sexp_of_t$0,heap_words_293),
       bnds_282$10=[0,[1,[0,_axe_,[0,arg_294,0]]],bnds_282$9],
       arg_292=caml_call1(sexp_of_t$0,major_collections_291),
       bnds_282$11=[0,[1,[0,_axf_,[0,arg_292,0]]],bnds_282$10],
       arg_290=caml_call1(sexp_of_t$0,minor_collections_289),
       bnds_282$12=[0,[1,[0,_axg_,[0,arg_290,0]]],bnds_282$11],
       arg_288=caml_call1(_z_,major_words_287),
       bnds_282$13=[0,[1,[0,_axh_,[0,arg_288,0]]],bnds_282$12],
       arg_286=caml_call1(_z_,promoted_words_285),
       bnds_282$14=[0,[1,[0,_axi_,[0,arg_286,0]]],bnds_282$13],
       arg_284=caml_call1(_z_,minor_words_283),
       bnds_282$15=[0,[1,[0,_axj_,[0,arg_284,0]]],bnds_282$14];
      return [1,bnds_282$15]}
    function forced_major_collections(r){return r[17]}
    function stack_size(r){return r[16]}
    function top_heap_words(r){return r[15]}
    function compactions(r){return r[14]}
    function fragments(r){return r[13]}
    function largest_free(r){return r[12]}
    function free_blocks(r){return r[11]}
    function free_words(r){return r[10]}
    function live_blocks(r){return r[9]}
    function live_words(r){return r[8]}
    function heap_chunks(r){return r[7]}
    function heap_words(r){return r[6]}
    function major_collections(r){return r[5]}
    function minor_collections(r){return r[4]}
    function major_words(r){return r[3]}
    function promoted_words(r){return r[2]}
    function minor_words(r){return r[1]}
    function _axk_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              v]}
    var
     _axl_=0,
     forced_major_collections$0=
      [0,
       function(param){return 0},
       cst_forced_major_collections$2,
       _axl_,
       forced_major_collections,
       _axk_];
    function _axm_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              v,
              r[17]]}
    var
     _axn_=0,
     stack_size$0=
      [0,function(param){return 0},cst_stack_size$5,_axn_,stack_size,_axm_];
    function _axo_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              v,
              r[16],
              r[17]]}
    var
     _axp_=0,
     top_heap_words$0=
      [0,
       function(param){return 0},
       cst_top_heap_words$5,
       _axp_,
       top_heap_words,
       _axo_];
    function _axq_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              v,
              r[15],
              r[16],
              r[17]]}
    var
     _axr_=0,
     compactions$0=
      [0,function(param){return 0},cst_compactions$5,_axr_,compactions,_axq_];
    function _axs_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              v,
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axt_=0,
     fragments$0=
      [0,function(param){return 0},cst_fragments$5,_axt_,fragments,_axs_];
    function _axu_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              v,
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axv_=0,
     largest_free$0=
      [0,
       function(param){return 0},
       cst_largest_free$5,
       _axv_,
       largest_free,
       _axu_];
    function _axw_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              v,
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axx_=0,
     free_blocks$0=
      [0,function(param){return 0},cst_free_blocks$5,_axx_,free_blocks,_axw_];
    function _axy_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              v,
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axz_=0,
     free_words$0=
      [0,function(param){return 0},cst_free_words$5,_axz_,free_words,_axy_];
    function _axA_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              v,
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axB_=0,
     live_blocks$0=
      [0,function(param){return 0},cst_live_blocks$5,_axB_,live_blocks,_axA_];
    function _axC_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              v,
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axD_=0,
     live_words$0=
      [0,function(param){return 0},cst_live_words$5,_axD_,live_words,_axC_];
    function _axE_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              v,
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axF_=0,
     heap_chunks$0=
      [0,function(param){return 0},cst_heap_chunks$5,_axF_,heap_chunks,_axE_];
    function _axG_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              r[5],
              v,
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axH_=0,
     heap_words$0=
      [0,function(param){return 0},cst_heap_words$5,_axH_,heap_words,_axG_];
    function _axI_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              r[4],
              v,
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axJ_=0,
     major_collections$0=
      [0,
       function(param){return 0},
       cst_major_collections$5,
       _axJ_,
       major_collections,
       _axI_];
    function _axK_(r,v)
     {return [0,
              r[1],
              r[2],
              r[3],
              v,
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axL_=0,
     minor_collections$0=
      [0,
       function(param){return 0},
       cst_minor_collections$5,
       _axL_,
       minor_collections,
       _axK_];
    function _axM_(r,v)
     {return [0,
              r[1],
              r[2],
              v,
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axN_=0,
     major_words$0=
      [0,function(param){return 0},cst_major_words$5,_axN_,major_words,_axM_];
    function _axO_(r,v)
     {return [0,
              r[1],
              v,
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axP_=0,
     promoted_words$0=
      [0,
       function(param){return 0},
       cst_promoted_words$5,
       _axP_,
       promoted_words,
       _axO_];
    function _axQ_(r,v)
     {return [0,
              v,
              r[2],
              r[3],
              r[4],
              r[5],
              r[6],
              r[7],
              r[8],
              r[9],
              r[10],
              r[11],
              r[12],
              r[13],
              r[14],
              r[15],
              r[16],
              r[17]]}
    var
     _axR_=0,
     minor_words$0=
      [0,function(param){return 0},cst_minor_words$5,_axR_,minor_words,_axQ_];
    function make_creator$5
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun,
      compile_acc)
     {var
       match=caml_call2(minor_words_fun,minor_words$0,compile_acc),
       compile_acc$0=match[2],
       minor_words_gen=match[1],
       match$0=caml_call2(promoted_words_fun,promoted_words$0,compile_acc$0),
       compile_acc$1=match$0[2],
       promoted_words_gen=match$0[1],
       match$1=caml_call2(major_words_fun,major_words$0,compile_acc$1),
       compile_acc$2=match$1[2],
       major_words_gen=match$1[1],
       match$2=
        caml_call2(minor_collections_fun,minor_collections$0,compile_acc$2),
       compile_acc$3=match$2[2],
       minor_collections_gen=match$2[1],
       match$3=
        caml_call2(major_collections_fun,major_collections$0,compile_acc$3),
       compile_acc$4=match$3[2],
       major_collections_gen=match$3[1],
       match$4=caml_call2(heap_words_fun,heap_words$0,compile_acc$4),
       compile_acc$5=match$4[2],
       heap_words_gen=match$4[1],
       match$5=caml_call2(heap_chunks_fun,heap_chunks$0,compile_acc$5),
       compile_acc$6=match$5[2],
       heap_chunks_gen=match$5[1],
       match$6=caml_call2(live_words_fun,live_words$0,compile_acc$6),
       compile_acc$7=match$6[2],
       live_words_gen=match$6[1],
       match$7=caml_call2(live_blocks_fun,live_blocks$0,compile_acc$7),
       compile_acc$8=match$7[2],
       live_blocks_gen=match$7[1],
       match$8=caml_call2(free_words_fun,free_words$0,compile_acc$8),
       compile_acc$9=match$8[2],
       free_words_gen=match$8[1],
       match$9=caml_call2(free_blocks_fun,free_blocks$0,compile_acc$9),
       compile_acc$10=match$9[2],
       free_blocks_gen=match$9[1],
       match$10=caml_call2(largest_free_fun,largest_free$0,compile_acc$10),
       compile_acc$11=match$10[2],
       largest_free_gen=match$10[1],
       match$11=caml_call2(fragments_fun,fragments$0,compile_acc$11),
       compile_acc$12=match$11[2],
       fragments_gen=match$11[1],
       match$12=caml_call2(compactions_fun,compactions$0,compile_acc$12),
       compile_acc$13=match$12[2],
       compactions_gen=match$12[1],
       match$13=caml_call2(top_heap_words_fun,top_heap_words$0,compile_acc$13),
       compile_acc$14=match$13[2],
       top_heap_words_gen=match$13[1],
       match$14=caml_call2(stack_size_fun,stack_size$0,compile_acc$14),
       compile_acc$15=match$14[2],
       stack_size_gen=match$14[1],
       match$15=
        caml_call2
         (forced_major_collections_fun,
          forced_major_collections$0,
          compile_acc$15),
       compile_acc$16=match$15[2],
       forced_major_collections_gen=match$15[1];
      return [0,
              function(acc)
               {var
                 minor_words=caml_call1(minor_words_gen,acc),
                 promoted_words=caml_call1(promoted_words_gen,acc),
                 major_words=caml_call1(major_words_gen,acc),
                 minor_collections=caml_call1(minor_collections_gen,acc),
                 major_collections=caml_call1(major_collections_gen,acc),
                 heap_words=caml_call1(heap_words_gen,acc),
                 heap_chunks=caml_call1(heap_chunks_gen,acc),
                 live_words=caml_call1(live_words_gen,acc),
                 live_blocks=caml_call1(live_blocks_gen,acc),
                 free_words=caml_call1(free_words_gen,acc),
                 free_blocks=caml_call1(free_blocks_gen,acc),
                 largest_free=caml_call1(largest_free_gen,acc),
                 fragments=caml_call1(fragments_gen,acc),
                 compactions=caml_call1(compactions_gen,acc),
                 top_heap_words=caml_call1(top_heap_words_gen,acc),
                 stack_size=caml_call1(stack_size_gen,acc),
                 forced_major_collections=
                  caml_call1(forced_major_collections_gen,acc);
                return [0,
                        minor_words,
                        promoted_words,
                        major_words,
                        minor_collections,
                        major_collections,
                        heap_words,
                        heap_chunks,
                        live_words,
                        live_blocks,
                        free_words,
                        free_blocks,
                        largest_free,
                        fragments,
                        compactions,
                        top_heap_words,
                        stack_size,
                        forced_major_collections]},
              compile_acc$16]}
    function create$42
     (minor_words,
      promoted_words,
      major_words,
      minor_collections,
      major_collections,
      heap_words,
      heap_chunks,
      live_words,
      live_blocks,
      free_words,
      free_blocks,
      largest_free,
      fragments,
      compactions,
      top_heap_words,
      stack_size,
      forced_major_collections)
     {return [0,
              minor_words,
              promoted_words,
              major_words,
              minor_collections,
              major_collections,
              heap_words,
              heap_chunks,
              live_words,
              live_blocks,
              free_words,
              free_blocks,
              largest_free,
              fragments,
              compactions,
              top_heap_words,
              stack_size,
              forced_major_collections]}
    function map$45
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aLU_=
        caml_call1(forced_major_collections_fun,forced_major_collections$0),
       _aLV_=caml_call1(stack_size_fun,stack_size$0),
       _aLW_=caml_call1(top_heap_words_fun,top_heap_words$0),
       _aLX_=caml_call1(compactions_fun,compactions$0),
       _aLY_=caml_call1(fragments_fun,fragments$0),
       _aLZ_=caml_call1(largest_free_fun,largest_free$0),
       _aL0_=caml_call1(free_blocks_fun,free_blocks$0),
       _aL1_=caml_call1(free_words_fun,free_words$0),
       _aL2_=caml_call1(live_blocks_fun,live_blocks$0),
       _aL3_=caml_call1(live_words_fun,live_words$0),
       _aL4_=caml_call1(heap_chunks_fun,heap_chunks$0),
       _aL5_=caml_call1(heap_words_fun,heap_words$0),
       _aL6_=caml_call1(major_collections_fun,major_collections$0),
       _aL7_=caml_call1(minor_collections_fun,minor_collections$0),
       _aL8_=caml_call1(major_words_fun,major_words$0),
       _aL9_=caml_call1(promoted_words_fun,promoted_words$0);
      return [0,
              caml_call1(minor_words_fun,minor_words$0),
              _aL9_,
              _aL8_,
              _aL7_,
              _aL6_,
              _aL5_,
              _aL4_,
              _aL3_,
              _aL2_,
              _aL1_,
              _aL0_,
              _aLZ_,
              _aLY_,
              _aLX_,
              _aLW_,
              _aLV_,
              _aLU_]}
    function iter$37
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {caml_call1(minor_words_fun,minor_words$0);
      caml_call1(promoted_words_fun,promoted_words$0);
      caml_call1(major_words_fun,major_words$0);
      caml_call1(minor_collections_fun,minor_collections$0);
      caml_call1(major_collections_fun,major_collections$0);
      caml_call1(heap_words_fun,heap_words$0);
      caml_call1(heap_chunks_fun,heap_chunks$0);
      caml_call1(live_words_fun,live_words$0);
      caml_call1(live_blocks_fun,live_blocks$0);
      caml_call1(free_words_fun,free_words$0);
      caml_call1(free_blocks_fun,free_blocks$0);
      caml_call1(largest_free_fun,largest_free$0);
      caml_call1(fragments_fun,fragments$0);
      caml_call1(compactions_fun,compactions$0);
      caml_call1(top_heap_words_fun,top_heap_words$0);
      caml_call1(stack_size_fun,stack_size$0);
      return caml_call1
              (forced_major_collections_fun,forced_major_collections$0)}
    function fold$31
     (init,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {return caml_call2
              (forced_major_collections_fun,
               caml_call2
                (stack_size_fun,
                 caml_call2
                  (top_heap_words_fun,
                   caml_call2
                    (compactions_fun,
                     caml_call2
                      (fragments_fun,
                       caml_call2
                        (largest_free_fun,
                         caml_call2
                          (free_blocks_fun,
                           caml_call2
                            (free_words_fun,
                             caml_call2
                              (live_blocks_fun,
                               caml_call2
                                (live_words_fun,
                                 caml_call2
                                  (heap_chunks_fun,
                                   caml_call2
                                    (heap_words_fun,
                                     caml_call2
                                      (major_collections_fun,
                                       caml_call2
                                        (minor_collections_fun,
                                         caml_call2
                                          (major_words_fun,
                                           caml_call2
                                            (promoted_words_fun,
                                             caml_call2(minor_words_fun,init,minor_words$0),
                                             promoted_words$0),
                                           major_words$0),
                                         minor_collections$0),
                                       major_collections$0),
                                     heap_words$0),
                                   heap_chunks$0),
                                 live_words$0),
                               live_blocks$0),
                             free_words$0),
                           free_blocks$0),
                         largest_free$0),
                       fragments$0),
                     compactions$0),
                   top_heap_words$0),
                 stack_size$0),
               forced_major_collections$0)}
    function map_poly$5(record)
     {var
       _aLE_=[0,caml_call1(record[1],forced_major_collections$0),0],
       _aLF_=[0,caml_call1(record[1],stack_size$0),_aLE_],
       _aLG_=[0,caml_call1(record[1],top_heap_words$0),_aLF_],
       _aLH_=[0,caml_call1(record[1],compactions$0),_aLG_],
       _aLI_=[0,caml_call1(record[1],fragments$0),_aLH_],
       _aLJ_=[0,caml_call1(record[1],largest_free$0),_aLI_],
       _aLK_=[0,caml_call1(record[1],free_blocks$0),_aLJ_],
       _aLL_=[0,caml_call1(record[1],free_words$0),_aLK_],
       _aLM_=[0,caml_call1(record[1],live_blocks$0),_aLL_],
       _aLN_=[0,caml_call1(record[1],live_words$0),_aLM_],
       _aLO_=[0,caml_call1(record[1],heap_chunks$0),_aLN_],
       _aLP_=[0,caml_call1(record[1],heap_words$0),_aLO_],
       _aLQ_=[0,caml_call1(record[1],major_collections$0),_aLP_],
       _aLR_=[0,caml_call1(record[1],minor_collections$0),_aLQ_],
       _aLS_=[0,caml_call1(record[1],major_words$0),_aLR_],
       _aLT_=[0,caml_call1(record[1],promoted_words$0),_aLS_];
      return [0,caml_call1(record[1],minor_words$0),_aLT_]}
    function for_all$28
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aLo_=caml_call1(minor_words_fun,minor_words$0),
       _aLp_=_aLo_?caml_call1(promoted_words_fun,promoted_words$0):_aLo_,
       _aLq_=_aLp_?caml_call1(major_words_fun,major_words$0):_aLp_,
       _aLr_=_aLq_?caml_call1(minor_collections_fun,minor_collections$0):_aLq_,
       _aLs_=_aLr_?caml_call1(major_collections_fun,major_collections$0):_aLr_,
       _aLt_=_aLs_?caml_call1(heap_words_fun,heap_words$0):_aLs_,
       _aLu_=_aLt_?caml_call1(heap_chunks_fun,heap_chunks$0):_aLt_,
       _aLv_=_aLu_?caml_call1(live_words_fun,live_words$0):_aLu_,
       _aLw_=_aLv_?caml_call1(live_blocks_fun,live_blocks$0):_aLv_,
       _aLx_=_aLw_?caml_call1(free_words_fun,free_words$0):_aLw_,
       _aLy_=_aLx_?caml_call1(free_blocks_fun,free_blocks$0):_aLx_,
       _aLz_=_aLy_?caml_call1(largest_free_fun,largest_free$0):_aLy_,
       _aLA_=_aLz_?caml_call1(fragments_fun,fragments$0):_aLz_,
       _aLB_=_aLA_?caml_call1(compactions_fun,compactions$0):_aLA_,
       _aLC_=_aLB_?caml_call1(top_heap_words_fun,top_heap_words$0):_aLB_,
       _aLD_=_aLC_?caml_call1(stack_size_fun,stack_size$0):_aLC_;
      return _aLD_
              ?caml_call1
                (forced_major_collections_fun,forced_major_collections$0)
              :_aLD_}
    function exists$28
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aLn_=caml_call1(minor_words_fun,minor_words$0),
       _aK__=_aLn_ || caml_call1(promoted_words_fun,promoted_words$0),
       _aK$_=_aK__ || caml_call1(major_words_fun,major_words$0),
       _aLa_=_aK$_ || caml_call1(minor_collections_fun,minor_collections$0),
       _aLb_=_aLa_ || caml_call1(major_collections_fun,major_collections$0),
       _aLc_=_aLb_ || caml_call1(heap_words_fun,heap_words$0),
       _aLd_=_aLc_ || caml_call1(heap_chunks_fun,heap_chunks$0),
       _aLe_=_aLd_ || caml_call1(live_words_fun,live_words$0),
       _aLf_=_aLe_ || caml_call1(live_blocks_fun,live_blocks$0),
       _aLg_=_aLf_ || caml_call1(free_words_fun,free_words$0),
       _aLh_=_aLg_ || caml_call1(free_blocks_fun,free_blocks$0),
       _aLi_=_aLh_ || caml_call1(largest_free_fun,largest_free$0),
       _aLj_=_aLi_ || caml_call1(fragments_fun,fragments$0),
       _aLk_=_aLj_ || caml_call1(compactions_fun,compactions$0),
       _aLl_=_aLk_ || caml_call1(top_heap_words_fun,top_heap_words$0),
       _aLm_=_aLl_ || caml_call1(stack_size_fun,stack_size$0);
      return _aLm_
              ?_aLm_
              :caml_call1
                (forced_major_collections_fun,forced_major_collections$0)}
    function to_list$27
     (minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aKU_=
        [0,
         caml_call1(forced_major_collections_fun,forced_major_collections$0),
         0],
       _aKV_=[0,caml_call1(stack_size_fun,stack_size$0),_aKU_],
       _aKW_=[0,caml_call1(top_heap_words_fun,top_heap_words$0),_aKV_],
       _aKX_=[0,caml_call1(compactions_fun,compactions$0),_aKW_],
       _aKY_=[0,caml_call1(fragments_fun,fragments$0),_aKX_],
       _aKZ_=[0,caml_call1(largest_free_fun,largest_free$0),_aKY_],
       _aK0_=[0,caml_call1(free_blocks_fun,free_blocks$0),_aKZ_],
       _aK1_=[0,caml_call1(free_words_fun,free_words$0),_aK0_],
       _aK2_=[0,caml_call1(live_blocks_fun,live_blocks$0),_aK1_],
       _aK3_=[0,caml_call1(live_words_fun,live_words$0),_aK2_],
       _aK4_=[0,caml_call1(heap_chunks_fun,heap_chunks$0),_aK3_],
       _aK5_=[0,caml_call1(heap_words_fun,heap_words$0),_aK4_],
       _aK6_=[0,caml_call1(major_collections_fun,major_collections$0),_aK5_],
       _aK7_=[0,caml_call1(minor_collections_fun,minor_collections$0),_aK6_],
       _aK8_=[0,caml_call1(major_words_fun,major_words$0),_aK7_],
       _aK9_=[0,caml_call1(promoted_words_fun,promoted_words$0),_aK8_];
      return [0,caml_call1(minor_words_fun,minor_words$0),_aK9_]}
    function iter$38
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {caml_call3(minor_words_fun,minor_words$0,record,record[1]);
      caml_call3(promoted_words_fun,promoted_words$0,record,record[2]);
      caml_call3(major_words_fun,major_words$0,record,record[3]);
      caml_call3(minor_collections_fun,minor_collections$0,record,record[4]);
      caml_call3(major_collections_fun,major_collections$0,record,record[5]);
      caml_call3(heap_words_fun,heap_words$0,record,record[6]);
      caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]);
      caml_call3(live_words_fun,live_words$0,record,record[8]);
      caml_call3(live_blocks_fun,live_blocks$0,record,record[9]);
      caml_call3(free_words_fun,free_words$0,record,record[10]);
      caml_call3(free_blocks_fun,free_blocks$0,record,record[11]);
      caml_call3(largest_free_fun,largest_free$0,record,record[12]);
      caml_call3(fragments_fun,fragments$0,record,record[13]);
      caml_call3(compactions_fun,compactions$0,record,record[14]);
      caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]);
      caml_call3(stack_size_fun,stack_size$0,record,record[16]);
      return caml_call3
              (forced_major_collections_fun,
               forced_major_collections$0,
               record,
               record[17])}
    function fold$32
     (record,
      init,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aKE_=record[17],
       _aKF_=record[16],
       _aKG_=record[15],
       _aKH_=record[14],
       _aKI_=record[13],
       _aKJ_=record[12],
       _aKK_=record[11],
       _aKL_=record[10],
       _aKM_=record[9],
       _aKN_=record[8],
       _aKO_=record[7],
       _aKP_=record[6],
       _aKQ_=record[5],
       _aKR_=record[4],
       _aKS_=record[3],
       _aKT_=record[2];
      return caml_call4
              (forced_major_collections_fun,
               caml_call4
                (stack_size_fun,
                 caml_call4
                  (top_heap_words_fun,
                   caml_call4
                    (compactions_fun,
                     caml_call4
                      (fragments_fun,
                       caml_call4
                        (largest_free_fun,
                         caml_call4
                          (free_blocks_fun,
                           caml_call4
                            (free_words_fun,
                             caml_call4
                              (live_blocks_fun,
                               caml_call4
                                (live_words_fun,
                                 caml_call4
                                  (heap_chunks_fun,
                                   caml_call4
                                    (heap_words_fun,
                                     caml_call4
                                      (major_collections_fun,
                                       caml_call4
                                        (minor_collections_fun,
                                         caml_call4
                                          (major_words_fun,
                                           caml_call4
                                            (promoted_words_fun,
                                             caml_call4
                                              (minor_words_fun,init,minor_words$0,record,record[1]),
                                             promoted_words$0,
                                             record,
                                             _aKT_),
                                           major_words$0,
                                           record,
                                           _aKS_),
                                         minor_collections$0,
                                         record,
                                         _aKR_),
                                       major_collections$0,
                                       record,
                                       _aKQ_),
                                     heap_words$0,
                                     record,
                                     _aKP_),
                                   heap_chunks$0,
                                   record,
                                   _aKO_),
                                 live_words$0,
                                 record,
                                 _aKN_),
                               live_blocks$0,
                               record,
                               _aKM_),
                             free_words$0,
                             record,
                             _aKL_),
                           free_blocks$0,
                           record,
                           _aKK_),
                         largest_free$0,
                         record,
                         _aKJ_),
                       fragments$0,
                       record,
                       _aKI_),
                     compactions$0,
                     record,
                     _aKH_),
                   top_heap_words$0,
                   record,
                   _aKG_),
                 stack_size$0,
                 record,
                 _aKF_),
               forced_major_collections$0,
               record,
               _aKE_)}
    function for_all$29
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aKo_=caml_call3(minor_words_fun,minor_words$0,record,record[1]),
       _aKp_=
        _aKo_
         ?caml_call3(promoted_words_fun,promoted_words$0,record,record[2])
         :_aKo_,
       _aKq_=
        _aKp_?caml_call3(major_words_fun,major_words$0,record,record[3]):_aKp_,
       _aKr_=
        _aKq_
         ?caml_call3
           (minor_collections_fun,minor_collections$0,record,record[4])
         :_aKq_,
       _aKs_=
        _aKr_
         ?caml_call3
           (major_collections_fun,major_collections$0,record,record[5])
         :_aKr_,
       _aKt_=
        _aKs_?caml_call3(heap_words_fun,heap_words$0,record,record[6]):_aKs_,
       _aKu_=
        _aKt_?caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]):_aKt_,
       _aKv_=
        _aKu_?caml_call3(live_words_fun,live_words$0,record,record[8]):_aKu_,
       _aKw_=
        _aKv_?caml_call3(live_blocks_fun,live_blocks$0,record,record[9]):_aKv_,
       _aKx_=
        _aKw_?caml_call3(free_words_fun,free_words$0,record,record[10]):_aKw_,
       _aKy_=
        _aKx_
         ?caml_call3(free_blocks_fun,free_blocks$0,record,record[11])
         :_aKx_,
       _aKz_=
        _aKy_
         ?caml_call3(largest_free_fun,largest_free$0,record,record[12])
         :_aKy_,
       _aKA_=
        _aKz_?caml_call3(fragments_fun,fragments$0,record,record[13]):_aKz_,
       _aKB_=
        _aKA_
         ?caml_call3(compactions_fun,compactions$0,record,record[14])
         :_aKA_,
       _aKC_=
        _aKB_
         ?caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15])
         :_aKB_,
       _aKD_=
        _aKC_?caml_call3(stack_size_fun,stack_size$0,record,record[16]):_aKC_;
      return _aKD_
              ?caml_call3
                (forced_major_collections_fun,
                 forced_major_collections$0,
                 record,
                 record[17])
              :_aKD_}
    function exists$29
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aKn_=caml_call3(minor_words_fun,minor_words$0,record,record[1]),
       _aJ__=
        _aKn_
        ||
        caml_call3(promoted_words_fun,promoted_words$0,record,record[2]),
       _aJ$_=
        _aJ__
        ||
        caml_call3(major_words_fun,major_words$0,record,record[3]),
       _aKa_=
        _aJ$_
        ||
        caml_call3(minor_collections_fun,minor_collections$0,record,record[4]),
       _aKb_=
        _aKa_
        ||
        caml_call3(major_collections_fun,major_collections$0,record,record[5]),
       _aKc_=_aKb_ || caml_call3(heap_words_fun,heap_words$0,record,record[6]),
       _aKd_=
        _aKc_
        ||
        caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),
       _aKe_=_aKd_ || caml_call3(live_words_fun,live_words$0,record,record[8]),
       _aKf_=
        _aKe_
        ||
        caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),
       _aKg_=
        _aKf_
        ||
        caml_call3(free_words_fun,free_words$0,record,record[10]),
       _aKh_=
        _aKg_
        ||
        caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),
       _aKi_=
        _aKh_
        ||
        caml_call3(largest_free_fun,largest_free$0,record,record[12]),
       _aKj_=_aKi_ || caml_call3(fragments_fun,fragments$0,record,record[13]),
       _aKk_=
        _aKj_
        ||
        caml_call3(compactions_fun,compactions$0,record,record[14]),
       _aKl_=
        _aKk_
        ||
        caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]),
       _aKm_=
        _aKl_
        ||
        caml_call3(stack_size_fun,stack_size$0,record,record[16]);
      return _aKm_
              ?_aKm_
              :caml_call3
                (forced_major_collections_fun,
                 forced_major_collections$0,
                 record,
                 record[17])}
    function to_list$28
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aJU_=
        [0,
         caml_call3
          (forced_major_collections_fun,
           forced_major_collections$0,
           record,
           record[17]),
         0],
       _aJV_=
        [0,caml_call3(stack_size_fun,stack_size$0,record,record[16]),_aJU_],
       _aJW_=
        [0,
         caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]),
         _aJV_],
       _aJX_=
        [0,caml_call3(compactions_fun,compactions$0,record,record[14]),_aJW_],
       _aJY_=[0,caml_call3(fragments_fun,fragments$0,record,record[13]),_aJX_],
       _aJZ_=
        [0,
         caml_call3(largest_free_fun,largest_free$0,record,record[12]),
         _aJY_],
       _aJ0_=
        [0,caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),_aJZ_],
       _aJ1_=
        [0,caml_call3(free_words_fun,free_words$0,record,record[10]),_aJ0_],
       _aJ2_=
        [0,caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),_aJ1_],
       _aJ3_=
        [0,caml_call3(live_words_fun,live_words$0,record,record[8]),_aJ2_],
       _aJ4_=
        [0,caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),_aJ3_],
       _aJ5_=
        [0,caml_call3(heap_words_fun,heap_words$0,record,record[6]),_aJ4_],
       _aJ6_=
        [0,
         caml_call3
          (major_collections_fun,major_collections$0,record,record[5]),
         _aJ5_],
       _aJ7_=
        [0,
         caml_call3
          (minor_collections_fun,minor_collections$0,record,record[4]),
         _aJ6_],
       _aJ8_=
        [0,caml_call3(major_words_fun,major_words$0,record,record[3]),_aJ7_],
       _aJ9_=
        [0,
         caml_call3(promoted_words_fun,promoted_words$0,record,record[2]),
         _aJ8_];
      return [0,
              caml_call3(minor_words_fun,minor_words$0,record,record[1]),
              _aJ9_]}
    function map$46
     (record,
      minor_words_fun,
      promoted_words_fun,
      major_words_fun,
      minor_collections_fun,
      major_collections_fun,
      heap_words_fun,
      heap_chunks_fun,
      live_words_fun,
      live_blocks_fun,
      free_words_fun,
      free_blocks_fun,
      largest_free_fun,
      fragments_fun,
      compactions_fun,
      top_heap_words_fun,
      stack_size_fun,
      forced_major_collections_fun)
     {var
       _aJE_=
        caml_call3
         (forced_major_collections_fun,
          forced_major_collections$0,
          record,
          record[17]),
       _aJF_=caml_call3(stack_size_fun,stack_size$0,record,record[16]),
       _aJG_=caml_call3(top_heap_words_fun,top_heap_words$0,record,record[15]),
       _aJH_=caml_call3(compactions_fun,compactions$0,record,record[14]),
       _aJI_=caml_call3(fragments_fun,fragments$0,record,record[13]),
       _aJJ_=caml_call3(largest_free_fun,largest_free$0,record,record[12]),
       _aJK_=caml_call3(free_blocks_fun,free_blocks$0,record,record[11]),
       _aJL_=caml_call3(free_words_fun,free_words$0,record,record[10]),
       _aJM_=caml_call3(live_blocks_fun,live_blocks$0,record,record[9]),
       _aJN_=caml_call3(live_words_fun,live_words$0,record,record[8]),
       _aJO_=caml_call3(heap_chunks_fun,heap_chunks$0,record,record[7]),
       _aJP_=caml_call3(heap_words_fun,heap_words$0,record,record[6]),
       _aJQ_=
        caml_call3(major_collections_fun,major_collections$0,record,record[5]),
       _aJR_=
        caml_call3(minor_collections_fun,minor_collections$0,record,record[4]),
       _aJS_=caml_call3(major_words_fun,major_words$0,record,record[3]),
       _aJT_=caml_call3(promoted_words_fun,promoted_words$0,record,record[2]);
      return [0,
              caml_call3(minor_words_fun,minor_words$0,record,record[1]),
              _aJT_,
              _aJS_,
              _aJR_,
              _aJQ_,
              _aJP_,
              _aJO_,
              _aJN_,
              _aJM_,
              _aJL_,
              _aJK_,
              _aJJ_,
              _aJI_,
              _aJH_,
              _aJG_,
              _aJF_,
              _aJE_]}
    function set_all_mutable_fields$5(record)
     {caml_call1(Base_Field[1][1],record);return 0}
    var
     Direct$5=
      [0,
       iter$38,
       fold$32,
       for_all$29,
       exists$29,
       to_list$28,
       map$46,
       set_all_mutable_fields$5],
     include$166=Make_plain$1([0,compare$111,sexp_of_t$136]),
     symbol$257=include$166[1],
     symbol$258=include$166[2],
     symbol$259=include$166[3],
     symbol$260=include$166[4],
     symbol$261=include$166[5],
     symbol$262=include$166[6],
     equal$50=include$166[7],
     compare$112=include$166[8],
     min$23=include$166[9],
     max$23=include$166[10],
     ascending$21=include$166[11],
     descending$21=include$166[12],
     between$21=include$166[13],
     clamp_exn$21=include$166[14],
     clamp$21=include$166[15],
     comparator$34=include$166[16],
     validate_lbound$21=include$166[17],
     validate_ubound$21=include$166[18],
     validate_bound$21=include$166[19],
     Replace_polymorphic_compare$17=include$166[20],
     Map$34=include$166[21],
     Set$34=include$166[22];
    function diff$11(after,before)
     {var
       _aJo_=after[17] - before[17] | 0,
       _aJp_=after[16] - before[16] | 0,
       _aJq_=after[15] - before[15] | 0,
       _aJr_=after[14] - before[14] | 0,
       _aJs_=after[13] - before[13] | 0,
       _aJt_=after[12] - before[12] | 0,
       _aJu_=after[11] - before[11] | 0,
       _aJv_=after[10] - before[10] | 0,
       _aJw_=after[9] - before[9] | 0,
       _aJx_=after[8] - before[8] | 0,
       _aJy_=after[7] - before[7] | 0,
       _aJz_=after[6] - before[6] | 0,
       _aJA_=after[5] - before[5] | 0,
       _aJB_=after[4] - before[4] | 0,
       _aJC_=caml_call2(_aU_,after[3],before[3]),
       _aJD_=caml_call2(_aU_,after[2],before[2]);
      return [0,
              caml_call2(_aU_,after[1],before[1]),
              _aJD_,
              _aJC_,
              _aJB_,
              _aJA_,
              _aJz_,
              _aJy_,
              _aJx_,
              _aJw_,
              _aJv_,
              _aJu_,
              _aJt_,
              _aJs_,
              _aJr_,
              _aJq_,
              _aJp_,
              _aJo_]}
    function compare$113(a_317,b_318)
     {if(caml_call2(Ppx_compare_lib[1],a_317,b_318))return 0;
      var n=caml_call2(compare,a_317[1],b_318[1]);
      if(0 === n)
       {var n$0=caml_call2(compare,a_317[2],b_318[2]);
        if(0 === n$0)
         {var n$1=caml_call2(compare,a_317[3],b_318[3]);
          if(0 === n$1)
           {var n$2=caml_call2(compare,a_317[4],b_318[4]);
            if(0 === n$2)
             {var n$3=caml_call2(compare,a_317[5],b_318[5]);
              if(0 === n$3)
               {var n$4=caml_call2(compare,a_317[6],b_318[6]);
                if(0 === n$4)
                 {var n$5=caml_call2(compare,a_317[7],b_318[7]);
                  if(0 === n$5)
                   {var n$6=caml_call2(compare,a_317[8],b_318[8]);
                    if(0 === n$6)
                     {var n$7=caml_call2(compare,a_317[9],b_318[9]);
                      if(0 === n$7)
                       {var n$8=caml_call2(compare,a_317[10],b_318[10]);
                        return 0 === n$8?caml_call2(compare,a_317[11],b_318[11]):n$8}
                      return n$7}
                    return n$6}
                  return n$5}
                return n$4}
              return n$3}
            return n$2}
          return n$1}
        return n$0}
      return n}
    function sexp_of_t$137(param)
     {var
       minor_heap_size_320=param[1],
       major_heap_increment_322=param[2],
       space_overhead_324=param[3],
       verbose_326=param[4],
       max_overhead_328=param[5],
       stack_limit_330=param[6],
       allocation_policy_332=param[7],
       custom_minor_max_size_340=param[11],
       custom_minor_ratio_338=param[10],
       custom_major_ratio_336=param[9],
       window_size_334=param[8],
       arg_341=caml_call1(sexp_of_t$0,custom_minor_max_size_340),
       bnds_319=[0,[1,[0,_axS_,[0,arg_341,0]]],0],
       arg_339=caml_call1(sexp_of_t$0,custom_minor_ratio_338),
       bnds_319$0=[0,[1,[0,_axT_,[0,arg_339,0]]],bnds_319],
       arg_337=caml_call1(sexp_of_t$0,custom_major_ratio_336),
       bnds_319$1=[0,[1,[0,_axU_,[0,arg_337,0]]],bnds_319$0],
       arg_335=caml_call1(sexp_of_t$0,window_size_334),
       bnds_319$2=[0,[1,[0,_axV_,[0,arg_335,0]]],bnds_319$1],
       arg_333=caml_call1(sexp_of_t$0,allocation_policy_332),
       bnds_319$3=[0,[1,[0,_axW_,[0,arg_333,0]]],bnds_319$2],
       arg_331=caml_call1(sexp_of_t$0,stack_limit_330),
       bnds_319$4=[0,[1,[0,_axX_,[0,arg_331,0]]],bnds_319$3],
       arg_329=caml_call1(sexp_of_t$0,max_overhead_328),
       bnds_319$5=[0,[1,[0,_axY_,[0,arg_329,0]]],bnds_319$4],
       arg_327=caml_call1(sexp_of_t$0,verbose_326),
       bnds_319$6=[0,[1,[0,_axZ_,[0,arg_327,0]]],bnds_319$5],
       arg_325=caml_call1(sexp_of_t$0,space_overhead_324),
       bnds_319$7=[0,[1,[0,_ax0_,[0,arg_325,0]]],bnds_319$6],
       arg_323=caml_call1(sexp_of_t$0,major_heap_increment_322),
       bnds_319$8=[0,[1,[0,_ax1_,[0,arg_323,0]]],bnds_319$7],
       arg_321=caml_call1(sexp_of_t$0,minor_heap_size_320),
       bnds_319$9=[0,[1,[0,_ax2_,[0,arg_321,0]]],bnds_319$8];
      return [1,bnds_319$9]}
    function custom_minor_max_size(r){return r[11]}
    function custom_minor_ratio(r){return r[10]}
    function custom_major_ratio(r){return r[9]}
    function window_size(r){return r[8]}
    function allocation_policy(r){return r[7]}
    function set_allocation_policy(r,v){r[7] = v;return 0}
    function stack_limit(r){return r[6]}
    function set_stack_limit(r,v){r[6] = v;return 0}
    function max_overhead(r){return r[5]}
    function set_max_overhead(r,v){r[5] = v;return 0}
    function verbose(r){return r[4]}
    function set_verbose(r,v){r[4] = v;return 0}
    function space_overhead(r){return r[3]}
    function set_space_overhead(r,v){r[3] = v;return 0}
    function major_heap_increment(r){return r[2]}
    function set_major_heap_increment(r,v){r[2] = v;return 0}
    function minor_heap_size(r){return r[1]}
    function set_minor_heap_size(r,v){r[1] = v;return 0}
    function _ax3_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],v]}
    var
     _ax4_=0,
     custom_minor_max_size$0=
      [0,
       function(param){return 0},
       cst_custom_minor_max_size$2,
       _ax4_,
       custom_minor_max_size,
       _ax3_];
    function _ax5_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],v,r[11]]}
    var
     _ax6_=0,
     custom_minor_ratio$0=
      [0,
       function(param){return 0},
       cst_custom_minor_ratio$2,
       _ax6_,
       custom_minor_ratio,
       _ax5_];
    function _ax7_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],r[8],v,r[10],r[11]]}
    var
     _ax8_=0,
     custom_major_ratio$0=
      [0,
       function(param){return 0},
       cst_custom_major_ratio$2,
       _ax8_,
       custom_major_ratio,
       _ax7_];
    function _ax9_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],r[7],v,r[9],r[10],r[11]]}
    var
     _ax__=0,
     window_size$0=
      [0,function(param){return 0},cst_window_size$2,_ax__,window_size,_ax9_];
    function _ax$_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],r[6],v,r[8],r[9],r[10],r[11]]}
    var
     _aya_=[0,set_allocation_policy],
     allocation_policy$0=
      [0,
       function(param){return 0},
       cst_allocation_policy$2,
       _aya_,
       allocation_policy,
       _ax$_];
    function _ayb_(r,v)
     {return [0,r[1],r[2],r[3],r[4],r[5],v,r[7],r[8],r[9],r[10],r[11]]}
    var
     _ayc_=[0,set_stack_limit],
     stack_limit$0=
      [0,function(param){return 0},cst_stack_limit$2,_ayc_,stack_limit,_ayb_];
    function _ayd_(r,v)
     {return [0,r[1],r[2],r[3],r[4],v,r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _aye_=[0,set_max_overhead],
     max_overhead$0=
      [0,
       function(param){return 0},
       cst_max_overhead$2,
       _aye_,
       max_overhead,
       _ayd_];
    function _ayf_(r,v)
     {return [0,r[1],r[2],r[3],v,r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _ayg_=[0,set_verbose],
     verbose$0=[0,function(param){return 0},cst_verbose$2,_ayg_,verbose,_ayf_];
    function _ayh_(r,v)
     {return [0,r[1],r[2],v,r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _ayi_=[0,set_space_overhead],
     space_overhead$0=
      [0,
       function(param){return 0},
       cst_space_overhead$2,
       _ayi_,
       space_overhead,
       _ayh_];
    function _ayj_(r,v)
     {return [0,r[1],v,r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _ayk_=[0,set_major_heap_increment],
     major_heap_increment$0=
      [0,
       function(param){return 0},
       cst_major_heap_increment$2,
       _ayk_,
       major_heap_increment,
       _ayj_];
    function _ayl_(r,v)
     {return [0,v,r[2],r[3],r[4],r[5],r[6],r[7],r[8],r[9],r[10],r[11]]}
    var
     _aym_=[0,set_minor_heap_size],
     minor_heap_size$0=
      [0,
       function(param){return 0},
       cst_minor_heap_size$2,
       _aym_,
       minor_heap_size,
       _ayl_];
    function make_creator$6
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun,
      compile_acc)
     {var
       match=caml_call2(minor_heap_size_fun,minor_heap_size$0,compile_acc),
       compile_acc$0=match[2],
       minor_heap_size_gen=match[1],
       match$0=
        caml_call2
         (major_heap_increment_fun,major_heap_increment$0,compile_acc$0),
       compile_acc$1=match$0[2],
       major_heap_increment_gen=match$0[1],
       match$1=caml_call2(space_overhead_fun,space_overhead$0,compile_acc$1),
       compile_acc$2=match$1[2],
       space_overhead_gen=match$1[1],
       match$2=caml_call2(verbose_fun,verbose$0,compile_acc$2),
       compile_acc$3=match$2[2],
       verbose_gen=match$2[1],
       match$3=caml_call2(max_overhead_fun,max_overhead$0,compile_acc$3),
       compile_acc$4=match$3[2],
       max_overhead_gen=match$3[1],
       match$4=caml_call2(stack_limit_fun,stack_limit$0,compile_acc$4),
       compile_acc$5=match$4[2],
       stack_limit_gen=match$4[1],
       match$5=
        caml_call2(allocation_policy_fun,allocation_policy$0,compile_acc$5),
       compile_acc$6=match$5[2],
       allocation_policy_gen=match$5[1],
       match$6=caml_call2(window_size_fun,window_size$0,compile_acc$6),
       compile_acc$7=match$6[2],
       window_size_gen=match$6[1],
       match$7=
        caml_call2(custom_major_ratio_fun,custom_major_ratio$0,compile_acc$7),
       compile_acc$8=match$7[2],
       custom_major_ratio_gen=match$7[1],
       match$8=
        caml_call2(custom_minor_ratio_fun,custom_minor_ratio$0,compile_acc$8),
       compile_acc$9=match$8[2],
       custom_minor_ratio_gen=match$8[1],
       match$9=
        caml_call2
         (custom_minor_max_size_fun,custom_minor_max_size$0,compile_acc$9),
       compile_acc$10=match$9[2],
       custom_minor_max_size_gen=match$9[1];
      return [0,
              function(acc)
               {var
                 minor_heap_size=caml_call1(minor_heap_size_gen,acc),
                 major_heap_increment=caml_call1(major_heap_increment_gen,acc),
                 space_overhead=caml_call1(space_overhead_gen,acc),
                 verbose=caml_call1(verbose_gen,acc),
                 max_overhead=caml_call1(max_overhead_gen,acc),
                 stack_limit=caml_call1(stack_limit_gen,acc),
                 allocation_policy=caml_call1(allocation_policy_gen,acc),
                 window_size=caml_call1(window_size_gen,acc),
                 custom_major_ratio=caml_call1(custom_major_ratio_gen,acc),
                 custom_minor_ratio=caml_call1(custom_minor_ratio_gen,acc),
                 custom_minor_max_size=
                  caml_call1(custom_minor_max_size_gen,acc);
                return [0,
                        minor_heap_size,
                        major_heap_increment,
                        space_overhead,
                        verbose,
                        max_overhead,
                        stack_limit,
                        allocation_policy,
                        window_size,
                        custom_major_ratio,
                        custom_minor_ratio,
                        custom_minor_max_size]},
              compile_acc$10]}
    function create$43
     (minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy,
      window_size,
      custom_major_ratio,
      custom_minor_ratio,
      custom_minor_max_size)
     {return [0,
              minor_heap_size,
              major_heap_increment,
              space_overhead,
              verbose,
              max_overhead,
              stack_limit,
              allocation_policy,
              window_size,
              custom_major_ratio,
              custom_minor_ratio,
              custom_minor_max_size]}
    function map$47
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aJe_=caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0),
       _aJf_=caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0),
       _aJg_=caml_call1(custom_major_ratio_fun,custom_major_ratio$0),
       _aJh_=caml_call1(window_size_fun,window_size$0),
       _aJi_=caml_call1(allocation_policy_fun,allocation_policy$0),
       _aJj_=caml_call1(stack_limit_fun,stack_limit$0),
       _aJk_=caml_call1(max_overhead_fun,max_overhead$0),
       _aJl_=caml_call1(verbose_fun,verbose$0),
       _aJm_=caml_call1(space_overhead_fun,space_overhead$0),
       _aJn_=caml_call1(major_heap_increment_fun,major_heap_increment$0);
      return [0,
              caml_call1(minor_heap_size_fun,minor_heap_size$0),
              _aJn_,
              _aJm_,
              _aJl_,
              _aJk_,
              _aJj_,
              _aJi_,
              _aJh_,
              _aJg_,
              _aJf_,
              _aJe_]}
    function iter$39
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {caml_call1(minor_heap_size_fun,minor_heap_size$0);
      caml_call1(major_heap_increment_fun,major_heap_increment$0);
      caml_call1(space_overhead_fun,space_overhead$0);
      caml_call1(verbose_fun,verbose$0);
      caml_call1(max_overhead_fun,max_overhead$0);
      caml_call1(stack_limit_fun,stack_limit$0);
      caml_call1(allocation_policy_fun,allocation_policy$0);
      caml_call1(window_size_fun,window_size$0);
      caml_call1(custom_major_ratio_fun,custom_major_ratio$0);
      caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0);
      return caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0)}
    function fold$33
     (init,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {return caml_call2
              (custom_minor_max_size_fun,
               caml_call2
                (custom_minor_ratio_fun,
                 caml_call2
                  (custom_major_ratio_fun,
                   caml_call2
                    (window_size_fun,
                     caml_call2
                      (allocation_policy_fun,
                       caml_call2
                        (stack_limit_fun,
                         caml_call2
                          (max_overhead_fun,
                           caml_call2
                            (verbose_fun,
                             caml_call2
                              (space_overhead_fun,
                               caml_call2
                                (major_heap_increment_fun,
                                 caml_call2(minor_heap_size_fun,init,minor_heap_size$0),
                                 major_heap_increment$0),
                               space_overhead$0),
                             verbose$0),
                           max_overhead$0),
                         stack_limit$0),
                       allocation_policy$0),
                     window_size$0),
                   custom_major_ratio$0),
                 custom_minor_ratio$0),
               custom_minor_max_size$0)}
    function map_poly$6(record)
     {var
       _aI6_=[0,caml_call1(record[1],custom_minor_max_size$0),0],
       _aI7_=[0,caml_call1(record[1],custom_minor_ratio$0),_aI6_],
       _aI8_=[0,caml_call1(record[1],custom_major_ratio$0),_aI7_],
       _aI9_=[0,caml_call1(record[1],window_size$0),_aI8_],
       _aI__=[0,caml_call1(record[1],allocation_policy$0),_aI9_],
       _aI$_=[0,caml_call1(record[1],stack_limit$0),_aI__],
       _aJa_=[0,caml_call1(record[1],max_overhead$0),_aI$_],
       _aJb_=[0,caml_call1(record[1],verbose$0),_aJa_],
       _aJc_=[0,caml_call1(record[1],space_overhead$0),_aJb_],
       _aJd_=[0,caml_call1(record[1],major_heap_increment$0),_aJc_];
      return [0,caml_call1(record[1],minor_heap_size$0),_aJd_]}
    function for_all$30
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aIW_=caml_call1(minor_heap_size_fun,minor_heap_size$0),
       _aIX_=
        _aIW_
         ?caml_call1(major_heap_increment_fun,major_heap_increment$0)
         :_aIW_,
       _aIY_=_aIX_?caml_call1(space_overhead_fun,space_overhead$0):_aIX_,
       _aIZ_=_aIY_?caml_call1(verbose_fun,verbose$0):_aIY_,
       _aI0_=_aIZ_?caml_call1(max_overhead_fun,max_overhead$0):_aIZ_,
       _aI1_=_aI0_?caml_call1(stack_limit_fun,stack_limit$0):_aI0_,
       _aI2_=_aI1_?caml_call1(allocation_policy_fun,allocation_policy$0):_aI1_,
       _aI3_=_aI2_?caml_call1(window_size_fun,window_size$0):_aI2_,
       _aI4_=
        _aI3_?caml_call1(custom_major_ratio_fun,custom_major_ratio$0):_aI3_,
       _aI5_=
        _aI4_?caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0):_aI4_;
      return _aI5_
              ?caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0)
              :_aI5_}
    function exists$30
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aIV_=caml_call1(minor_heap_size_fun,minor_heap_size$0),
       _aIM_=
        _aIV_
        ||
        caml_call1(major_heap_increment_fun,major_heap_increment$0),
       _aIN_=_aIM_ || caml_call1(space_overhead_fun,space_overhead$0),
       _aIO_=_aIN_ || caml_call1(verbose_fun,verbose$0),
       _aIP_=_aIO_ || caml_call1(max_overhead_fun,max_overhead$0),
       _aIQ_=_aIP_ || caml_call1(stack_limit_fun,stack_limit$0),
       _aIR_=_aIQ_ || caml_call1(allocation_policy_fun,allocation_policy$0),
       _aIS_=_aIR_ || caml_call1(window_size_fun,window_size$0),
       _aIT_=_aIS_ || caml_call1(custom_major_ratio_fun,custom_major_ratio$0),
       _aIU_=_aIT_ || caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0);
      return _aIU_
              ?_aIU_
              :caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0)}
    function to_list$29
     (minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aIC_=
        [0,caml_call1(custom_minor_max_size_fun,custom_minor_max_size$0),0],
       _aID_=[0,caml_call1(custom_minor_ratio_fun,custom_minor_ratio$0),_aIC_],
       _aIE_=[0,caml_call1(custom_major_ratio_fun,custom_major_ratio$0),_aID_],
       _aIF_=[0,caml_call1(window_size_fun,window_size$0),_aIE_],
       _aIG_=[0,caml_call1(allocation_policy_fun,allocation_policy$0),_aIF_],
       _aIH_=[0,caml_call1(stack_limit_fun,stack_limit$0),_aIG_],
       _aII_=[0,caml_call1(max_overhead_fun,max_overhead$0),_aIH_],
       _aIJ_=[0,caml_call1(verbose_fun,verbose$0),_aII_],
       _aIK_=[0,caml_call1(space_overhead_fun,space_overhead$0),_aIJ_],
       _aIL_=
        [0,caml_call1(major_heap_increment_fun,major_heap_increment$0),_aIK_];
      return [0,caml_call1(minor_heap_size_fun,minor_heap_size$0),_aIL_]}
    function iter$40
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]);
      caml_call3
       (major_heap_increment_fun,major_heap_increment$0,record,record[2]);
      caml_call3(space_overhead_fun,space_overhead$0,record,record[3]);
      caml_call3(verbose_fun,verbose$0,record,record[4]);
      caml_call3(max_overhead_fun,max_overhead$0,record,record[5]);
      caml_call3(stack_limit_fun,stack_limit$0,record,record[6]);
      caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]);
      caml_call3(window_size_fun,window_size$0,record,record[8]);
      caml_call3(custom_major_ratio_fun,custom_major_ratio$0,record,record[9]);
      caml_call3
       (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]);
      return caml_call3
              (custom_minor_max_size_fun,
               custom_minor_max_size$0,
               record,
               record[11])}
    function fold$34
     (record,
      init,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aIs_=record[11],
       _aIt_=record[10],
       _aIu_=record[9],
       _aIv_=record[8],
       _aIw_=record[7],
       _aIx_=record[6],
       _aIy_=record[5],
       _aIz_=record[4],
       _aIA_=record[3],
       _aIB_=record[2];
      return caml_call4
              (custom_minor_max_size_fun,
               caml_call4
                (custom_minor_ratio_fun,
                 caml_call4
                  (custom_major_ratio_fun,
                   caml_call4
                    (window_size_fun,
                     caml_call4
                      (allocation_policy_fun,
                       caml_call4
                        (stack_limit_fun,
                         caml_call4
                          (max_overhead_fun,
                           caml_call4
                            (verbose_fun,
                             caml_call4
                              (space_overhead_fun,
                               caml_call4
                                (major_heap_increment_fun,
                                 caml_call4
                                  (minor_heap_size_fun,
                                   init,
                                   minor_heap_size$0,
                                   record,
                                   record[1]),
                                 major_heap_increment$0,
                                 record,
                                 _aIB_),
                               space_overhead$0,
                               record,
                               _aIA_),
                             verbose$0,
                             record,
                             _aIz_),
                           max_overhead$0,
                           record,
                           _aIy_),
                         stack_limit$0,
                         record,
                         _aIx_),
                       allocation_policy$0,
                       record,
                       _aIw_),
                     window_size$0,
                     record,
                     _aIv_),
                   custom_major_ratio$0,
                   record,
                   _aIu_),
                 custom_minor_ratio$0,
                 record,
                 _aIt_),
               custom_minor_max_size$0,
               record,
               _aIs_)}
    function for_all$31
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aIi_=
        caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]),
       _aIj_=
        _aIi_
         ?caml_call3
           (major_heap_increment_fun,major_heap_increment$0,record,record[2])
         :_aIi_,
       _aIk_=
        _aIj_
         ?caml_call3(space_overhead_fun,space_overhead$0,record,record[3])
         :_aIj_,
       _aIl_=_aIk_?caml_call3(verbose_fun,verbose$0,record,record[4]):_aIk_,
       _aIm_=
        _aIl_
         ?caml_call3(max_overhead_fun,max_overhead$0,record,record[5])
         :_aIl_,
       _aIn_=
        _aIm_?caml_call3(stack_limit_fun,stack_limit$0,record,record[6]):_aIm_,
       _aIo_=
        _aIn_
         ?caml_call3
           (allocation_policy_fun,allocation_policy$0,record,record[7])
         :_aIn_,
       _aIp_=
        _aIo_?caml_call3(window_size_fun,window_size$0,record,record[8]):_aIo_,
       _aIq_=
        _aIp_
         ?caml_call3
           (custom_major_ratio_fun,custom_major_ratio$0,record,record[9])
         :_aIp_,
       _aIr_=
        _aIq_
         ?caml_call3
           (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10])
         :_aIq_;
      return _aIr_
              ?caml_call3
                (custom_minor_max_size_fun,
                 custom_minor_max_size$0,
                 record,
                 record[11])
              :_aIr_}
    function exists$31
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aIh_=
        caml_call3(minor_heap_size_fun,minor_heap_size$0,record,record[1]),
       _aH__=
        _aIh_
        ||
        caml_call3
         (major_heap_increment_fun,major_heap_increment$0,record,record[2]),
       _aH$_=
        _aH__
        ||
        caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
       _aIa_=_aH$_ || caml_call3(verbose_fun,verbose$0,record,record[4]),
       _aIb_=
        _aIa_
        ||
        caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),
       _aIc_=
        _aIb_
        ||
        caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),
       _aId_=
        _aIc_
        ||
        caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]),
       _aIe_=
        _aId_
        ||
        caml_call3(window_size_fun,window_size$0,record,record[8]),
       _aIf_=
        _aIe_
        ||
        caml_call3
         (custom_major_ratio_fun,custom_major_ratio$0,record,record[9]),
       _aIg_=
        _aIf_
        ||
        caml_call3
         (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]);
      return _aIg_
              ?_aIg_
              :caml_call3
                (custom_minor_max_size_fun,
                 custom_minor_max_size$0,
                 record,
                 record[11])}
    function to_list$30
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aH0_=
        [0,
         caml_call3
          (custom_minor_max_size_fun,
           custom_minor_max_size$0,
           record,
           record[11]),
         0],
       _aH1_=
        [0,
         caml_call3
          (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]),
         _aH0_],
       _aH2_=
        [0,
         caml_call3
          (custom_major_ratio_fun,custom_major_ratio$0,record,record[9]),
         _aH1_],
       _aH3_=
        [0,caml_call3(window_size_fun,window_size$0,record,record[8]),_aH2_],
       _aH4_=
        [0,
         caml_call3
          (allocation_policy_fun,allocation_policy$0,record,record[7]),
         _aH3_],
       _aH5_=
        [0,caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),_aH4_],
       _aH6_=
        [0,caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),_aH5_],
       _aH7_=[0,caml_call3(verbose_fun,verbose$0,record,record[4]),_aH6_],
       _aH8_=
        [0,
         caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
         _aH7_],
       _aH9_=
        [0,
         caml_call3
          (major_heap_increment_fun,major_heap_increment$0,record,record[2]),
         _aH8_];
      return [0,
              caml_call3
               (minor_heap_size_fun,minor_heap_size$0,record,record[1]),
              _aH9_]}
    function map$48
     (record,
      minor_heap_size_fun,
      major_heap_increment_fun,
      space_overhead_fun,
      verbose_fun,
      max_overhead_fun,
      stack_limit_fun,
      allocation_policy_fun,
      window_size_fun,
      custom_major_ratio_fun,
      custom_minor_ratio_fun,
      custom_minor_max_size_fun)
     {var
       _aHQ_=
        caml_call3
         (custom_minor_max_size_fun,custom_minor_max_size$0,record,record[11]),
       _aHR_=
        caml_call3
         (custom_minor_ratio_fun,custom_minor_ratio$0,record,record[10]),
       _aHS_=
        caml_call3
         (custom_major_ratio_fun,custom_major_ratio$0,record,record[9]),
       _aHT_=caml_call3(window_size_fun,window_size$0,record,record[8]),
       _aHU_=
        caml_call3(allocation_policy_fun,allocation_policy$0,record,record[7]),
       _aHV_=caml_call3(stack_limit_fun,stack_limit$0,record,record[6]),
       _aHW_=caml_call3(max_overhead_fun,max_overhead$0,record,record[5]),
       _aHX_=caml_call3(verbose_fun,verbose$0,record,record[4]),
       _aHY_=caml_call3(space_overhead_fun,space_overhead$0,record,record[3]),
       _aHZ_=
        caml_call3
         (major_heap_increment_fun,major_heap_increment$0,record,record[2]);
      return [0,
              caml_call3
               (minor_heap_size_fun,minor_heap_size$0,record,record[1]),
              _aHZ_,
              _aHY_,
              _aHX_,
              _aHW_,
              _aHV_,
              _aHU_,
              _aHT_,
              _aHS_,
              _aHR_,
              _aHQ_]}
    function set_all_mutable_fields$6
     (record,
      minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy)
     {var record$0=caml_call1(Base_Field[1][1],record);
      record$0[1] = minor_heap_size;
      record$0[2] = major_heap_increment;
      record$0[3] = space_overhead;
      record$0[4] = verbose;
      record$0[5] = max_overhead;
      record$0[6] = stack_limit;
      record$0[7] = allocation_policy;
      return 0}
    var
     Direct$6=
      [0,
       iter$40,
       fold$34,
       for_all$31,
       exists$31,
       to_list$30,
       map$48,
       set_all_mutable_fields$6],
     include$167=Make_plain$1([0,compare$113,sexp_of_t$137]),
     symbol$263=include$167[1],
     symbol$264=include$167[2],
     symbol$265=include$167[3],
     symbol$266=include$167[4],
     symbol$267=include$167[5],
     symbol$268=include$167[6],
     equal$51=include$167[7],
     compare$114=include$167[8],
     min$24=include$167[9],
     max$24=include$167[10],
     ascending$22=include$167[11],
     descending$22=include$167[12],
     between$22=include$167[13],
     clamp_exn$22=include$167[14],
     clamp$22=include$167[15],
     comparator$35=include$167[16],
     validate_lbound$22=include$167[17],
     validate_ubound$22=include$167[18],
     validate_bound$22=include$167[19],
     Replace_polymorphic_compare$18=include$167[20],
     Map$35=include$167[21],
     Set$35=include$167[22],
     compare$115=caml_int_compare;
    function equal$52(_aHP_,_aHO_){return _aHP_ === _aHO_?1:0}
    function hash_fold_t$48(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        default:return caml_call2(Base_Hash[3],hsv,2)}}
    function hash$63(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aHN_=hash_fold_t$48(hsv,x);
      return caml_call1(Base_Hash[9],_aHN_)}
    function sexp_of_t$138(param)
     {switch(param)
       {case 0:return _ayn_;case 1:return _ayo_;default:return _ayp_}}
    function to_int$9(param)
     {switch(param){case 0:return 0;case 1:return 1;default:return 2}}
    function tune
     (logger,
      minor_heap_size,
      major_heap_increment,
      space_overhead,
      verbose,
      max_overhead,
      stack_limit,
      allocation_policy,
      window_size,
      custom_major_ratio,
      custom_minor_ratio,
      custom_minor_max_size,
      param)
     {var old_control_params=runtime.caml_gc_get(0);
      function f(opt,to_string,field)
       {var old_value=caml_call2(Base_Field[3],field,old_control_params);
        if(opt)
         {var new_value=opt[1];
          caml_call2
           (_xK_,
            logger,
            function(f)
             {var
               _aHL_=caml_call1(to_string,new_value),
               _aHM_=caml_call1(to_string,old_value);
              return caml_call5
                      (_fz_,f,_ayq_,caml_call1(Base_Field[2],field),_aHM_,_aHL_)});
          return new_value}
        return old_value}
      var
       allocation_policy$0=caml_call2(_xy_,allocation_policy,to_int$9),
       _aHf_=Stdlib[33];
      function _aHg_(_aHK_){return f(custom_minor_max_size,_aHf_,_aHK_)}
      var _aHh_=Stdlib[33];
      function _aHi_(_aHJ_){return f(custom_minor_ratio,_aHh_,_aHJ_)}
      var _aHj_=Stdlib[33];
      function _aHk_(_aHI_){return f(custom_major_ratio,_aHj_,_aHI_)}
      var _aHl_=Stdlib[33];
      function _aHm_(_aHH_){return f(window_size,_aHl_,_aHH_)}
      var _aHn_=Stdlib[33];
      function _aHo_(_aHG_){return f(allocation_policy$0,_aHn_,_aHG_)}
      var _aHp_=Stdlib[33];
      function _aHq_(_aHF_){return f(stack_limit,_aHp_,_aHF_)}
      var _aHr_=Stdlib[33];
      function _aHs_(_aHE_){return f(max_overhead,_aHr_,_aHE_)}
      var _aHt_=Stdlib[33];
      function _aHu_(_aHD_){return f(verbose,_aHt_,_aHD_)}
      var _aHv_=Stdlib[33];
      function _aHw_(_aHC_){return f(space_overhead,_aHv_,_aHC_)}
      var _aHx_=Stdlib[33];
      function _aHy_(_aHB_){return f(major_heap_increment,_aHx_,_aHB_)}
      var
       _aHz_=Stdlib[33],
       new_control_params=
        map$47
         (function(_aHA_){return f(minor_heap_size,_aHz_,_aHA_)},
          _aHy_,
          _aHw_,
          _aHu_,
          _aHs_,
          _aHq_,
          _aHo_,
          _aHm_,
          _aHk_,
          _aHi_,
          _aHg_);
      return runtime.caml_gc_set(new_control_params)}
    function disable_compaction(logger,allocation_policy,param)
     {if(typeof allocation_policy === "number")
       var allocation_policy$0=0;
      else
       var policy=allocation_policy[2],allocation_policy$0=[0,policy];
      return tune(logger,0,0,0,0,_ayr_,0,allocation_policy$0,0,0,0,0,0)}
    var zero$8=runtime.caml_int_of_string(cst_0);
    function keep_alive(o)
     {for(;;){var _aHe_=0 !== zero$8?1:0;if(_aHe_)continue;return _aHe_}}
    function prepare_heap_to_count_minor_al(param)
     {runtime.caml_gc_minor(0);return 0}
    function measure_internal(on_result,f)
     {var
       minor_words_before=runtime.core_gc_minor_words(0),
       major_words_before=runtime.core_gc_major_words(0),
       x=caml_call1(f,0),
       minor_words_after=runtime.core_gc_minor_words(0),
       major_words_after=runtime.core_gc_major_words(0),
       major_words_allocated=major_words_after - major_words_before | 0,
       minor_words_allocated=minor_words_after - minor_words_before | 0;
      return caml_call3
              (on_result,major_words_allocated,minor_words_allocated,x)}
    function is_zero_alloc(f)
     {return measure_internal
              (function(major_words_allocated,minor_words_allocated,value)
                {var
                  _aHc_=0 === major_words_allocated?1:0,
                  _aHd_=_aHc_?0 === minor_words_allocated?1:0:_aHc_;
                 return _aHd_},
               f)}
    function sexp_of_t$139(param)
     {var
       minor_words_allocated_349=param[2],
       major_words_allocated_347=param[1],
       arg_350=caml_call1(sexp_of_t$0,minor_words_allocated_349),
       bnds_346=[0,[1,[0,_ays_,[0,arg_350,0]]],0],
       arg_348=caml_call1(sexp_of_t$0,major_words_allocated_347),
       bnds_346$0=[0,[1,[0,_ayt_,[0,arg_348,0]]],bnds_346];
      return [1,bnds_346$0]}
    function measure_allocation(f)
     {prepare_heap_to_count_minor_al(0);
      return measure_internal
              (function(major_words_allocated,minor_words_allocated,x)
                {return [0,x,[0,major_words_allocated,minor_words_allocated]]},
               f)}
    function sexp_of_t$140(param)
     {var
       backtrace_356=param[3],
       is_major_354=param[2],
       size_in_words_352=param[1],
       arg_357=caml_call1(_at_,backtrace_356),
       bnds_351=[0,[1,[0,_ayu_,[0,arg_357,0]]],0],
       arg_355=caml_call1(_l_,is_major_354),
       bnds_351$0=[0,[1,[0,_ayv_,[0,arg_355,0]]],bnds_351],
       arg_353=caml_call1(sexp_of_t$0,size_in_words_352),
       bnds_351$1=[0,[1,[0,_ayw_,[0,arg_353,0]]],bnds_351$0];
      return [1,bnds_351$1]}
    var Allocation_log=[0,sexp_of_t$140];
    function measure_and_log_allocation(f)
     {var log=[0,0],major_allocs=[0,0],minor_allocs=[0,0];
      function on_alloc(is_major,info)
       {if(is_major)
         major_allocs[1] = major_allocs[1] + info[1] | 0;
        else
         minor_allocs[1] = minor_allocs[1] + info[1] | 0;
        var
         backtrace=caml_call1(Stdlib_Printexc[14],info[4]),
         match=caml_call3(_BG_,0,backtrace,cst_measure_and_log_allocation);
        if(match)
         var
          p=match[1],
          _aHb_=caml_call3(_AY_,backtrace,0,p),
          backtrace$0=
           caml_call2(_B1_,[0,function(param){return 10 === param?0:1}],_aHb_);
        else
         var backtrace$0=backtrace;
        var info$0=[0,info[1],is_major,backtrace$0];
        log[1] = [0,info$0,log[1]];
        return 0}
      var
       _aG3_=include$165[8][1],
       _aG4_=_aG3_[5],
       _aG5_=_aG3_[4],
       _aG6_=_aG3_[3],
       _aG7_=1;
      function _aG8_(_aHa_){return on_alloc(_aG7_,_aHa_)}
      var
       _aG9_=0,
       tracker=
        [0,
         function(_aG$_){return on_alloc(_aG9_,_aG$_)},
         _aG8_,
         _aG6_,
         _aG5_,
         _aG4_];
      caml_call3(include$165[8][2],1.,0,tracker);
      try
       {var result=caml_call1(f,0)}
      catch(e)
       {e = caml_wrap_exception(e);
        runtime.core_gc_run_memprof_callbacks(0);
        caml_call1(include$165[8][3],0);
        throw e}
      runtime.core_gc_run_memprof_callbacks(0);
      caml_call1(include$165[8][3],0);
      var _aG__=caml_call1(parts,log[1]);
      return [0,result,[0,major_allocs[1],minor_allocs[1]],_aG__]}
    function add_finalizer(x,f)
     {try
       {var
         _aGZ_=
          function(x)
           {function _aG2_(param){return caml_call1(f,x)}
            return caml_call1(Base_Exn[15],_aG2_)},
         _aG0_=caml_call2(include$165[3],_aGZ_,x);
        return _aG0_}
      catch(_aG1_)
       {_aG1_ = caml_wrap_exception(_aG1_);
        if(_aG1_[1] === Stdlib[6])return 0;
        throw _aG1_}}
    function add_finalizer_exn(x,f)
     {try
       {var
         _aGV_=
          function(x)
           {function _aGY_(param){return caml_call1(f,x)}
            return caml_call1(Base_Exn[15],_aGY_)},
         _aGW_=caml_call2(include$165[3],_aGV_,x);
        return _aGW_}
      catch(_aGX_)
       {_aGX_ = caml_wrap_exception(_aGX_);
        if(_aGX_[1] === Stdlib[6]){create$41(x);return 0}
        throw _aGX_}}
    function add_finalizer_last(x,f)
     {try
       {var
         _aGS_=function(param){return caml_call1(Base_Exn[15],f)},
         _aGT_=caml_call2(include$165[4],_aGS_,x);
        return _aGT_}
      catch(_aGU_)
       {_aGU_ = caml_wrap_exception(_aGU_);
        if(_aGU_[1] === Stdlib[6])return 0;
        throw _aGU_}}
    function add_finalizer_last_exn(x,f)
     {try
       {var
         _aGP_=function(param){return caml_call1(Base_Exn[15],f)},
         _aGQ_=caml_call2(include$165[4],_aGP_,x);
        return _aGQ_}
      catch(_aGR_)
       {_aGR_ = caml_wrap_exception(_aGR_);
        if(_aGR_[1] === Stdlib[6]){create$41(x);return 0}
        throw _aGR_}}
    var finalize_release=include$165[5];
    function sexp_of_t$141(param){return caml_call1(_at_,cst_gc_alarm)}
    function create$44(f)
     {return caml_call1
              (create_alarm,
               function(param){return caml_call1(Base_Exn[15],f)})}
    var
     Alarm=[0,sexp_of_t$141,create$44,delete_alarm],
     Expert=
      [0,
       add_finalizer,
       add_finalizer_exn,
       add_finalizer_last,
       add_finalizer_last_exn,
       finalize_release,
       Alarm];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$472);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Gc$0);
    var
     Core_Gc=
      [0,
       [0,
        sexp_of_t$136,
        forced_major_collections,
        stack_size,
        top_heap_words,
        compactions,
        fragments,
        largest_free,
        free_blocks,
        free_words,
        live_blocks,
        live_words,
        heap_chunks,
        heap_words,
        major_collections,
        minor_collections,
        major_words,
        promoted_words,
        minor_words,
        [0,
         names$6,
         forced_major_collections$0,
         stack_size$0,
         top_heap_words$0,
         compactions$0,
         fragments$0,
         largest_free$0,
         free_blocks$0,
         free_words$0,
         live_blocks$0,
         live_words$0,
         heap_chunks$0,
         heap_words$0,
         major_collections$0,
         minor_collections$0,
         major_words$0,
         promoted_words$0,
         minor_words$0,
         fold$31,
         make_creator$5,
         create$42,
         map$45,
         iter$37,
         for_all$28,
         exists$28,
         to_list$27,
         map_poly$5,
         Direct$5],
        symbol$257,
        symbol$258,
        symbol$259,
        symbol$260,
        symbol$261,
        symbol$262,
        equal$50,
        compare$112,
        min$23,
        max$23,
        ascending$21,
        descending$21,
        between$21,
        clamp_exn$21,
        clamp$21,
        comparator$34,
        validate_lbound$21,
        validate_ubound$21,
        validate_bound$21,
        Replace_polymorphic_compare$17,
        Map$34,
        Set$34,
        diff$11],
       [0,
        sexp_of_t$137,
        custom_minor_max_size,
        custom_minor_ratio,
        custom_major_ratio,
        window_size,
        allocation_policy,
        set_allocation_policy,
        stack_limit,
        set_stack_limit,
        max_overhead,
        set_max_overhead,
        verbose,
        set_verbose,
        space_overhead,
        set_space_overhead,
        major_heap_increment,
        set_major_heap_increment,
        minor_heap_size,
        set_minor_heap_size,
        [0,
         names$7,
         custom_minor_max_size$0,
         custom_minor_ratio$0,
         custom_major_ratio$0,
         window_size$0,
         allocation_policy$0,
         stack_limit$0,
         max_overhead$0,
         verbose$0,
         space_overhead$0,
         major_heap_increment$0,
         minor_heap_size$0,
         fold$33,
         make_creator$6,
         create$43,
         map$47,
         iter$39,
         for_all$30,
         exists$30,
         to_list$29,
         map_poly$6,
         Direct$6],
        symbol$263,
        symbol$264,
        symbol$265,
        symbol$266,
        symbol$267,
        symbol$268,
        equal$51,
        compare$114,
        min$24,
        max$24,
        ascending$22,
        descending$22,
        between$22,
        clamp_exn$22,
        clamp$22,
        comparator$35,
        validate_lbound$22,
        validate_ubound$22,
        validate_bound$22,
        Replace_polymorphic_compare$18,
        Map$35,
        Set$35],
       print_stat,
       allocated_bytes,
       keep_alive,
       [0,compare$115,equal$52,hash_fold_t$48,hash$63,sexp_of_t$138],
       tune,
       disable_compaction,
       [0,
        [0,sexp_of_t$139],
        measure_allocation,
        Allocation_log,
        measure_and_log_allocation,
        is_zero_alloc,
        prepare_heap_to_count_minor_al],
       Expert,
       [0,
        [0,
         [0,
          bin_size_t$93,
          bin_write_t$94,
          bin_read_t$186,
          bin_read_t$185,
          bin_shape_t$144,
          bin_writer_t$119,
          bin_reader_t$119,
          bin_t$119,
          compare$108,
          equal$47,
          hash_fold_t$46,
          hash$61,
          t_of_sexp$115,
          sexp_of_t$133],
         [0,
          bin_size_t$94,
          bin_write_t$95,
          bin_read_t$188,
          bin_read_t$187,
          bin_shape_t$145,
          bin_writer_t$120,
          bin_reader_t$120,
          bin_t$120,
          compare$109,
          equal$48,
          hash_fold_t$47,
          hash$62,
          t_of_sexp$116,
          sexp_of_t$134]],
        [0,
         [0,
          bin_size_t$92,
          bin_write_t$93,
          bin_read_t$184,
          bin_read_t$183,
          bin_shape_t$143,
          bin_writer_t$118,
          bin_reader_t$118,
          bin_t$118,
          compare$107,
          equal$46,
          hash_fold_t$45,
          hash$60,
          t_of_sexp$114,
          sexp_of_t$132]],
        [0,
         [0,
          bin_size_t$95,
          bin_write_t$96,
          bin_read_t$190,
          bin_read_t$189,
          bin_shape_t$146,
          bin_writer_t$121,
          bin_reader_t$121,
          bin_t$121,
          compare$110,
          equal$49,
          t_of_sexp$117,
          sexp_of_t$135]]]];
    caml_register_global(5445,Core_Gc,"Core__Gc");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Make_stable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$473);
    caml_call1(Expect_test_collector[5][1],cst_core_src_make_stable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$474,cst$272);
    function V1$18(Stable_format,M)
     {var
       compare=M[1],
       to_binable=M[2],
       of_binable=M[3],
       _aGO_=
        caml_call1
         (caml_call1(Stable[1][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_binable,of_binable]),
       t_of_sexp=_aGO_[1],
       sexp_of_t=_aGO_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[1][1],
            [0,
             Stable_format[5],
             Stable_format[1],
             Stable_format[2],
             Stable_format[3],
             Stable_format[4]]),
          [0,to_binable,of_binable]),
       bin_size_t=include[1],
       bin_write_t=include[2],
       bin_read_t=include[3],
       bin_read_t$0=include[4],
       bin_shape_t=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8],
       include$0=caml_call1(_hd_[1][2],[0,compare,sexp_of_t]),
       comparator=include$0[1];
      return [0,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_shape_t,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              comparator]}
    var Of_stable_format=[0,V1$18];
    function V1$19(Stable_format,M)
     {var
       compare=M[1],
       map=M[2],
       to_stable_format=M[3],
       of_stable_format=M[4],
       _aGN_=
        caml_call1
         (caml_call1(Stable[2][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_stable_format,of_stable_format]),
       t_of_sexp=_aGN_[1],
       sexp_of_t=_aGN_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[2][1],
            [0,
             Stable_format[1],
             Stable_format[2],
             Stable_format[3],
             Stable_format[4],
             Stable_format[5]]),
          [0,to_stable_format,of_stable_format]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              map]}
    var Of_stable_format1=[0,V1$19];
    function V1$20(Stable_format,M)
     {var
       compare=M[1],
       map=M[2],
       to_stable_format=M[3],
       of_stable_format=M[4],
       _aGM_=
        caml_call1
         (caml_call1(Stable[3][1],[0,Stable_format[9],Stable_format[10]]),
          [0,to_stable_format,of_stable_format]),
       t_of_sexp=_aGM_[1],
       sexp_of_t=_aGM_[2],
       include=
        caml_call1
         (caml_call1
           (Stable$0[3][1],
            [0,
             Stable_format[1],
             Stable_format[2],
             Stable_format[3],
             Stable_format[4],
             Stable_format[5]]),
          [0,to_stable_format,of_stable_format]),
       bin_shape_t=include[1],
       bin_size_t=include[2],
       bin_write_t=include[3],
       bin_read_t=include[4],
       bin_read_t$0=include[5],
       bin_writer_t=include[6],
       bin_reader_t=include[7],
       bin_t=include[8];
      return [0,
              bin_shape_t,
              bin_size_t,
              bin_write_t,
              bin_read_t,
              bin_read_t$0,
              bin_writer_t,
              bin_reader_t,
              bin_t,
              compare,
              t_of_sexp,
              sexp_of_t,
              map]}
    var Of_stable_format2=[0,V1$20];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$475);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Make_stable$0);
    var
     Core_Make_stable=
      [0,Of_stable_format,Of_stable_format1,Of_stable_format2];
    caml_register_global(5446,Core_Make_stable,"Core__Make_stable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Queue);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$476);
    caml_call1(Expect_test_collector[5][1],cst_core_src_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$477,cst$273);
    var
     compare$116=include$168[1],
     t_of_sexp$118=include$168[2],
     sexp_of_t$142=include$168[3],
     t_sexp_grammar$39=include$168[4],
     mem$16=include$168[5],
     length$23=include$168[6],
     is_empty$18=include$168[7],
     iter$41=include$168[8],
     fold$35=include$168[9],
     fold_result$10=include$168[10],
     fold_until$14=include$168[11],
     exists$32=include$168[12],
     for_all$32=include$168[13],
     count$15=include$168[14],
     sum$11=include$168[15],
     find$18=include$168[16],
     find_map$10=include$168[17],
     to_list$31=include$168[18],
     to_array$11=include$168[19],
     min_elt$15=include$168[20],
     max_elt$15=include$168[21],
     foldi$2=include$168[22],
     iteri$7=include$168[23],
     existsi$5=include$168[24],
     for_alli$5=include$168[25],
     counti$5=include$168[26],
     findi$0=include$168[27],
     find_mapi$0=include$168[28],
     singleton$13=include$168[29],
     of_list$13=include$168[30],
     of_array$5=include$168[31],
     init$7=include$168[32],
     enqueue$1=include$168[33],
     enqueue_all=include$168[34],
     dequeue$1=include$168[35],
     dequeue_exn$1=include$168[36],
     peek$0=include$168[37],
     peek_exn$0=include$168[38],
     clear$3=include$168[39],
     copy$5=include$168[40],
     map$49=include$168[41],
     mapi$7=include$168[42],
     concat_map$0=include$168[43],
     concat_mapi$0=include$168[44],
     filter_map$12=include$168[45],
     filter_mapi$6=include$168[46],
     filter$13=include$168[47],
     filteri$6=include$168[48],
     filter_inplace$2=include$168[49],
     filteri_inplace$1=include$168[50],
     equal$53=include$168[51],
     invariant$19=include$168[52],
     create$45=include$168[53],
     last$1=include$168[54],
     last_exn=include$168[55],
     blit_transfer=include$168[56],
     get$6=include$168[57],
     set$13=include$168[58],
     capacity$0=include$168[59],
     set_capacity$0=include$168[60];
    function of_array$6(a)
     {var r=caml_call2(create$45,0,0),_aGH_=a.length - 1 - 1 | 0,_aGG_=0;
      if(! (_aGH_ < 0))
       {var i$0=_aGG_;
        for(;;)
         {caml_call2(enqueue$1,r,caml_check_bound(a,i$0)[1 + i$0]);
          var _aGL_=i$0 + 1 | 0;
          if(_aGH_ !== i$0){var i$0=_aGL_;continue}
          break}}
      var _aGJ_=a.length - 1 - 1 | 0,_aGI_=0;
      if(! (_aGJ_ < 0))
       {var i=_aGI_;
        for(;;)
         {caml_call1(dequeue_exn$1,r);
          caml_call2(enqueue$1,r,caml_check_bound(a,i)[1 + i]);
          var _aGK_=i + 1 | 0;
          if(_aGJ_ !== i){var i=_aGK_;continue}
          break}}
      return r}
    var
     For_test=[0,of_array$6],
     include$169=
      caml_call1
       (Base_for_tests_Test_binary_sea[4],[0,get$6,length$23,For_test]),
     _ayx_=include$169[1],
     _ayy_=include$169[2],
     _ayz_=caml_call1(Bin_prot_Shape[3][1],cst_a$96),
     _ayA_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_queue_ml_35_19),
     _ayB_=caml_call2(Bin_prot_Shape[15],_ayA_,_ayz_),
     _ayC_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$97),0],
     _ayD_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$15),_ayC_,_ayB_],0],
     _ayE_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_queue_ml_35_6),
     group$152=caml_call2(Bin_prot_Shape[6],_ayE_,_ayD_);
    function bin_shape_el$3(a)
     {var _aGF_=caml_call1(Bin_prot_Shape[2][1],cst_el$16);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$152,_aGF_),[0,a,0])}
    function bin_size_el$3(size_of_a){return size_of_a}
    function bin_write_el$3(write_a){return write_a}
    function bin_read_el$3(of_a){return of_a}
    var
     caller_identity$3=
      caml_call1(Bin_prot_Shape[5][1],cst_b4c84254_4992_11e6_9ba7_73);
    function init$8(len,next)
     {return caml_call2(init$7,len,function(param){return caml_call1(next,0)})}
    var
     include$170=
      caml_call1
       (Bin_prot_Utils[16],
        [0,
         caller_identity$3,
         module_name$16,
         length$23,
         iter$41,
         init$8,
         bin_size_el$3,
         bin_write_el$3,
         bin_read_el$3,
         bin_shape_el$3]),
     bin_shape_t$147=include$170[1],
     bin_size_t$96=include$170[2],
     bin_write_t$97=include$170[3],
     bin_read_t$191=include$170[4],
     bin_read_t$192=include$170[5],
     bin_writer_t$122=include$170[6],
     bin_reader_t$122=include$170[7],
     bin_t$122=include$170[8];
    function compare$117(cmp_a,a_001,b_002)
     {return caml_call3
              (compare$116,
               function(a_003,b_004){return caml_call2(cmp_a,a_003,b_004)},
               a_001,
               b_002)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$478);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Queue$0);
    var
     Core_Queue=
      [0,
       bin_shape_t$147,
       bin_size_t$96,
       bin_write_t$97,
       bin_read_t$191,
       bin_read_t$192,
       bin_writer_t$122,
       bin_reader_t$122,
       bin_t$122,
       compare$116,
       t_of_sexp$118,
       sexp_of_t$142,
       t_sexp_grammar$39,
       mem$16,
       length$23,
       is_empty$18,
       iter$41,
       fold$35,
       fold_result$10,
       fold_until$14,
       exists$32,
       for_all$32,
       count$15,
       sum$11,
       find$18,
       find_map$10,
       to_list$31,
       to_array$11,
       min_elt$15,
       max_elt$15,
       foldi$2,
       iteri$7,
       existsi$5,
       for_alli$5,
       counti$5,
       findi$0,
       find_mapi$0,
       singleton$13,
       of_list$13,
       of_array$5,
       init$7,
       enqueue$1,
       enqueue_all,
       dequeue$1,
       dequeue_exn$1,
       peek$0,
       peek_exn$0,
       clear$3,
       copy$5,
       map$49,
       mapi$7,
       concat_map$0,
       concat_mapi$0,
       filter_map$12,
       filter_mapi$6,
       filter$13,
       filteri$6,
       filter_inplace$2,
       filteri_inplace$1,
       equal$53,
       invariant$19,
       create$45,
       last$1,
       last_exn,
       blit_transfer,
       get$6,
       set$13,
       capacity$0,
       set_capacity$0,
       _ayx_,
       _ayy_,
       [0,
        [0,
         bin_shape_t$147,
         bin_size_t$96,
         bin_write_t$97,
         bin_read_t$191,
         bin_read_t$192,
         bin_writer_t$122,
         bin_reader_t$122,
         bin_t$122,
         compare$117,
         t_of_sexp$118,
         sexp_of_t$142,
         map$49]]];
    caml_register_global(5449,Core_Queue,"Core__Queue");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Stable);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$479);
    caml_call1(Expect_test_collector[5][1],cst_core_src_stable_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$480,cst$274);
    var
     Unix=[0],
     _ayF_=_hb_[2],
     _azy_=Ppx_compare_lib[6],
     _ayG_=_ayF_[1],
     _ayH_=_ayF_[2],
     _ayI_=_ayF_[3],
     _ayJ_=_ayF_[4],
     _ayK_=_ayF_[5],
     _ayL_=_ayF_[6],
     _ayM_=_ayF_[7],
     _ayN_=_ayF_[8],
     _ayO_=_ayF_[9],
     _ayP_=_ayF_[10],
     _ayQ_=_ayF_[11],
     _ayR_=_ayF_[12],
     _ayS_=_ayF_[13],
     _ayT_=_ayF_[14],
     _ayU_=_ayF_[15],
     _ayV_=_ayF_[16],
     _ayW_=_ayF_[17],
     _ayX_=_ayF_[18],
     _ayY_=_ayF_[19],
     _ayZ_=_ayF_[20],
     _ay0_=_ayF_[21],
     _ay1_=_ayF_[22],
     _ay2_=_ayF_[23],
     _ay3_=_ayF_[24],
     _ay4_=_ayF_[25],
     _ay5_=_ayF_[26],
     _ay6_=_ayF_[27],
     _ay7_=_ayF_[28],
     _ay8_=_ayF_[29],
     _ay9_=_ayF_[30],
     _ay__=_ayF_[31],
     _ay$_=_ayF_[32],
     _aza_=_ayF_[33],
     _azb_=_ayF_[34],
     _azc_=_ayF_[35],
     _azd_=_ayF_[36],
     _aze_=_ayF_[37],
     _azf_=_ayF_[38],
     _azg_=_ayF_[39],
     _azh_=_ayF_[40],
     _azi_=_ayF_[41],
     _azj_=_ayF_[42],
     _azk_=_ayF_[43],
     _azl_=_ayF_[44],
     _azm_=_ayF_[45],
     _azn_=_ayF_[46],
     _azo_=_ayF_[47],
     _azp_=_ayF_[48],
     _azq_=_ayF_[49],
     _azr_=_ayF_[50],
     _azs_=_ayF_[51],
     _azt_=_ayF_[52],
     _azu_=_ayF_[53],
     _azv_=_ayF_[54],
     _azw_=_ayF_[55],
     _azx_=_ayF_[56],
     _azz_=_azy_[1],
     _azA_=_azy_[2],
     _azB_=_azy_[3],
     _azC_=_azy_[4],
     _azD_=_azy_[5],
     _azE_=_azy_[6],
     _azF_=_azy_[7],
     _azG_=_azy_[8],
     _azH_=_azy_[9],
     _azI_=_azy_[10],
     _azJ_=_azy_[11],
     _azK_=_azy_[12],
     _azL_=_azy_[13],
     _azM_=_azy_[14],
     _azN_=_azy_[15],
     _azO_=_azy_[16],
     _azP_=_azy_[17],
     _azQ_=_azy_[18],
     _azR_=_azy_[19],
     _azS_=_azy_[20],
     _azT_=_azy_[21],
     _azU_=_azy_[22],
     _azV_=_azy_[23],
     _azW_=_azy_[24],
     _azX_=_azy_[25],
     _azY_=_azy_[26],
     _azZ_=include$1[1],
     _az0_=include$1[2];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$481);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Stable$0);
    var
     Core_Stable=
      [0,
       _Xs_,
       _Xt_,
       _Xu_,
       _Xv_,
       _Xw_,
       _Xx_,
       _Xy_,
       _Xz_,
       _XA_,
       _XB_,
       _XC_,
       _XD_,
       _XE_,
       _XF_,
       _XG_,
       _XH_,
       _XI_,
       _XJ_,
       _XK_,
       _XL_,
       _XM_,
       _XN_,
       _XO_,
       _XP_,
       _XQ_,
       _XR_,
       _XS_,
       _XT_,
       _XU_,
       _XV_,
       _XW_,
       _XX_,
       _XY_,
       _XZ_,
       _X0_,
       _X1_,
       _X2_,
       _X3_,
       _X4_,
       _X5_,
       _X6_,
       _X7_,
       _X8_,
       _X9_,
       _X__,
       _X$_,
       _Ya_,
       _Yb_,
       _Yc_,
       _Yd_,
       _Ye_,
       _Yf_,
       _Yg_,
       _Yh_,
       _Yi_,
       _Yj_,
       _Yk_,
       _Yl_,
       _Ym_,
       _Yn_,
       _Yo_,
       _Yp_,
       _Yq_,
       _Yr_,
       _Ys_,
       _Yt_,
       _Yu_,
       _Yv_,
       _Yw_,
       _Yx_,
       _Yy_,
       _Yz_,
       _YA_,
       _YB_,
       _YC_,
       _YD_,
       _YE_,
       _YF_,
       _YG_,
       _YH_,
       _YI_,
       _YJ_,
       _YK_,
       _YL_,
       _YM_,
       _YN_,
       _YO_,
       _YP_,
       _YQ_,
       _YR_,
       _YS_,
       _YT_,
       _YU_,
       _YV_,
       _YW_,
       _YX_,
       _YY_,
       _YZ_,
       _Y0_,
       _Y1_,
       _Y2_,
       _Y3_,
       _Y4_,
       _Y5_,
       _Y6_,
       _Y7_,
       _Y8_,
       _Y9_,
       _Y__,
       _Y$_,
       _Za_,
       _Zb_,
       _Zc_,
       _Zd_,
       _Ze_,
       _Zf_,
       _Zg_,
       _Zh_,
       _Zi_,
       _Zj_,
       _Zk_,
       _Zl_,
       _Zm_,
       _Zn_,
       _Zo_,
       _Zp_,
       _Zq_,
       _Zr_,
       _Zs_,
       _Zt_,
       _Zu_,
       _Zv_,
       _Zw_,
       _Zx_,
       _Zy_,
       _Zz_,
       _ZA_,
       _ZB_,
       _ZC_,
       _ZD_,
       _ZE_,
       _ZF_,
       _ZG_,
       _ZH_,
       _ZI_,
       _ZJ_,
       _ZK_,
       _ZL_,
       _ZM_,
       _ZN_,
       _ZO_,
       _ZP_,
       _ZQ_,
       _ZR_,
       _ZS_,
       _ZT_,
       _ZU_,
       _ZV_,
       _ZW_,
       _ZX_,
       _ZY_,
       _ZZ_,
       _Z0_,
       _Z1_,
       _Z2_,
       _Z3_,
       _Z4_,
       _Z5_,
       _Z6_,
       _Z7_,
       _Z8_,
       _Z9_,
       _Z__,
       _Z$_,
       __a_,
       __b_,
       __c_,
       __d_,
       __e_,
       __f_,
       __g_,
       __h_,
       __i_,
       __j_,
       __k_,
       __l_,
       __m_,
       __n_,
       __o_,
       __p_,
       __q_,
       __r_,
       __s_,
       __t_,
       __u_,
       __v_,
       __w_,
       __x_,
       __y_,
       __z_,
       __A_,
       __B_,
       __C_,
       __D_,
       __E_,
       __F_,
       __G_,
       __H_,
       __I_,
       __J_,
       __K_,
       __L_,
       __M_,
       __N_,
       __O_,
       __P_,
       __Q_,
       __R_,
       __S_,
       __T_,
       __U_,
       __V_,
       __W_,
       __X_,
       __Y_,
       __0_,
       __1_,
       __2_,
       __3_,
       __4_,
       __5_,
       __6_,
       hash_fold_t$37,
       __7_,
       __8_,
       __9_,
       ____,
       __$_,
       _$a_,
       _$b_,
       _$c_,
       _$d_,
       _$e_,
       _$f_,
       _$g_,
       _$h_,
       _$i_,
       _$j_,
       _$0_,
       _$Z_,
       _$Y_,
       _$X_,
       _$W_,
       _$V_,
       _$U_,
       _$T_,
       _$S_,
       _$R_,
       _$Q_,
       _$P_,
       _$O_,
       _$N_,
       _$M_,
       _$L_,
       _$K_,
       _$J_,
       _$I_,
       _$H_,
       _$G_,
       _$F_,
       _$E_,
       _$D_,
       _$C_,
       _$B_,
       _$A_,
       _$z_,
       _$y_,
       _$x_,
       _$w_,
       _$v_,
       _$u_,
       _$t_,
       _$s_,
       _$r_,
       _$q_,
       _$p_,
       _$o_,
       _$n_,
       _$m_,
       _$l_,
       _$k_,
       Unix,
       _ayG_,
       _ayH_,
       _ayI_,
       _ayJ_,
       _ayK_,
       _ayL_,
       _ayM_,
       _ayN_,
       _ayO_,
       _ayP_,
       _ayQ_,
       _ayR_,
       _ayS_,
       _ayT_,
       _ayU_,
       _ayV_,
       _ayW_,
       _ayX_,
       _ayY_,
       _ayZ_,
       _ay0_,
       _ay1_,
       _ay2_,
       _ay3_,
       _ay4_,
       _ay5_,
       _ay6_,
       _ay7_,
       _ay8_,
       _ay9_,
       _ay__,
       _ay$_,
       _aza_,
       _azb_,
       _azc_,
       _azd_,
       _aze_,
       _azf_,
       _azg_,
       _azh_,
       _azi_,
       _azj_,
       _azk_,
       _azl_,
       _azm_,
       _azn_,
       _azo_,
       _azp_,
       _azq_,
       _azr_,
       _azs_,
       _azt_,
       _azu_,
       _azv_,
       _azw_,
       _azx_,
       _azz_,
       _azA_,
       _azB_,
       _azC_,
       _azD_,
       _azE_,
       _azF_,
       _azG_,
       _azH_,
       _azI_,
       _azJ_,
       _azK_,
       _azL_,
       _azM_,
       _azN_,
       _azO_,
       _azP_,
       _azQ_,
       _azR_,
       _azS_,
       _azT_,
       _azU_,
       _azV_,
       _azW_,
       _azX_,
       _azY_,
       _azZ_,
       _az0_];
    caml_register_global(5450,Core_Stable,"Core__Stable");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Signal);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$482);
    caml_call1(Expect_test_collector[5][1],cst_core_src_signal_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$483,cst$275);
    var
     Hash_set$24=
      [0,
       Hash_set$5[1],
       Hash_set$5[2],
       Hash_set$5[3],
       Hash_set$5[4],
       Hash_set$5[5],
       Hash_set$5[6],
       Hash_set$5[7]],
     Table$24=
      [0,
       Table$5[1],
       Table$5[2],
       Table$5[3],
       Table$5[4],
       Table$5[5],
       Table$5[6],
       Table$5[7],
       Table$5[8],
       Table$5[9],
       Table$5[10],
       Table$5[11],
       Table$5[12],
       Table$5[13],
       Table$5[14],
       Table$5[15],
       Table$5[16],
       Table$5[17],
       Table$5[18],
       Table$5[19],
       Table$5[20],
       Table$5[21],
       Table$5[22],
       Table$5[23],
       Table$5[24],
       Table$5[25],
       Table$5[26],
       Table$5[27],
       Table$5[28],
       Table$5[29],
       Table$5[30],
       Table$5[31],
       Table$5[32],
       Table$5[33],
       Table$5[34],
       Table$5[35],
       Table$5[36],
       Table$5[37],
       Table$5[38],
       Table$5[39],
       Table$5[40],
       Table$5[41],
       Table$5[42],
       Table$5[43],
       Table$5[44],
       Table$5[45],
       Table$5[46],
       Table$5[47],
       Table$5[48],
       Table$5[49],
       Table$5[50],
       Table$5[51],
       Table$5[52],
       Table$5[53],
       Table$5[54],
       Table$5[55],
       Table$5[56],
       Table$5[57],
       Table$5[58],
       Table$5[59],
       Table$5[60],
       Table$5[61],
       Table$5[62],
       Table$5[63],
       Table$5[64],
       Table$5[65],
       Table$5[66],
       Table$5[67],
       Table$5[68],
       Table$5[69],
       Table$5[70],
       Table$5[71],
       Table$5[72],
       Table$5[73],
       Table$5[74],
       Table$5[75],
       Table$5[76],
       Table$5[77],
       Table$5[78],
       Table$5[79],
       Table$5[80],
       Table$5[81],
       Table$5[82],
       Table$5[83],
       Table$5[84]],
     _az1_=Set$6[1],
     Set$36=
      [0,
       [0,_az1_[1],_az1_[2],_az1_[11]],
       Set$6[2],
       Set$6[3],
       Set$6[4],
       Set$6[5],
       Set$6[6],
       Set$6[7],
       Set$6[8],
       Set$6[9],
       Set$6[10],
       Set$6[11],
       Set$6[12],
       Set$6[13],
       Set$6[14],
       Set$6[15],
       Set$6[16],
       Set$6[17],
       Set$6[18],
       Set$6[19],
       Set$6[20],
       Set$6[21],
       Set$6[22],
       Set$6[23],
       Set$6[24],
       Set$6[25],
       Set$6[26],
       Set$6[27],
       Set$6[28],
       Set$6[29],
       Set$6[30],
       Set$6[31],
       Set$6[32],
       Set$6[33],
       Set$6[34],
       Set$6[35],
       Set$6[36],
       Set$6[37],
       Set$6[38],
       Set$6[39],
       Set$6[40],
       Set$6[41],
       Set$6[42],
       Set$6[43],
       Set$6[44],
       Set$6[45],
       Set$6[46],
       Set$6[47],
       Set$6[48],
       Set$6[49],
       Set$6[50],
       Set$6[51],
       Set$6[52],
       Set$6[53],
       Set$6[54],
       Set$6[55],
       Set$6[56],
       Set$6[57],
       Set$6[58],
       Set$6[59],
       Set$6[60],
       Set$6[61],
       Set$6[62],
       Set$6[63],
       Set$6[64],
       Set$6[65],
       Set$6[66],
       Set$6[67],
       Set$6[68],
       Set$6[69],
       Set$6[70],
       Set$6[71],
       Set$6[72],
       Set$6[73],
       Set$6[74],
       Set$6[75]],
     _az2_=Map$6[1],
     Map$36=
      [0,
       [0,_az2_[9],_az2_[10],_az2_[11]],
       Map$6[2],
       Map$6[3],
       Map$6[4],
       Map$6[5],
       Map$6[6],
       Map$6[7],
       Map$6[8],
       Map$6[9],
       Map$6[10],
       Map$6[11],
       Map$6[12],
       Map$6[13],
       Map$6[14],
       Map$6[15],
       Map$6[16],
       Map$6[17],
       Map$6[18],
       Map$6[19],
       Map$6[20],
       Map$6[21],
       Map$6[22],
       Map$6[23],
       Map$6[24],
       Map$6[25],
       Map$6[26],
       Map$6[27],
       Map$6[28],
       Map$6[29],
       Map$6[30],
       Map$6[31],
       Map$6[32],
       Map$6[33],
       Map$6[34],
       Map$6[35],
       Map$6[36],
       Map$6[37],
       Map$6[38],
       Map$6[39],
       Map$6[40],
       Map$6[41],
       Map$6[42],
       Map$6[43],
       Map$6[44],
       Map$6[45],
       Map$6[46],
       Map$6[47],
       Map$6[48],
       Map$6[49],
       Map$6[50],
       Map$6[51],
       Map$6[52],
       Map$6[53],
       Map$6[54],
       Map$6[55],
       Map$6[56],
       Map$6[57],
       Map$6[58],
       Map$6[59],
       Map$6[60],
       Map$6[61],
       Map$6[62],
       Map$6[63],
       Map$6[64],
       Map$6[65],
       Map$6[66],
       Map$6[67],
       Map$6[68],
       Map$6[69],
       Map$6[70],
       Map$6[71],
       Map$6[72],
       Map$6[73],
       Map$6[74],
       Map$6[75],
       Map$6[76],
       Map$6[77],
       Map$6[78],
       Map$6[79],
       Map$6[80],
       Map$6[81],
       Map$6[82],
       Map$6[83],
       Map$6[84],
       Map$6[85],
       Map$6[86],
       Map$6[87],
       Map$6[88],
       Map$6[89],
       Map$6[90],
       Map$6[91],
       Map$6[92],
       Map$6[93],
       Map$6[94],
       Map$6[95],
       Map$6[96],
       Map$6[97],
       Map$6[98],
       Map$6[99],
       Map$6[100],
       Map$6[101],
       Map$6[102],
       Map$6[103],
       Map$6[104],
       Map$6[105],
       Map$6[106],
       Map$6[107]];
    function of_caml_int(t){return t}
    function to_caml_int(t){return t}
    function sys_behavior_of_sexp(sexp_004)
     {if(0 === sexp_004[0])
       {var atom_002=sexp_004[1];
        return caml_string_notequal(atom_002,cst_Continue)
                ?caml_string_notequal(atom_002,cst_Dump_core)
                  ?caml_string_notequal(atom_002,cst_Ignore)
                    ?caml_string_notequal(atom_002,cst_Stop)
                      ?caml_string_notequal(atom_002,cst_Terminate)
                        ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                        :530911809
                      :926227490
                    :-950194894
                  :497016682
                :192584839}
      var _aGD_=sexp_004[1];
      if(_aGD_)
       {var _aGE_=_aGD_[1];
        if(0 === _aGE_[0])
         {var atom_002$0=_aGE_[1];
          return caml_string_notequal(atom_002$0,cst_Continue$0)
                  ?caml_string_notequal(atom_002$0,cst_Dump_core$0)
                    ?caml_string_notequal(atom_002$0,cst_Ignore$0)
                      ?caml_string_notequal(atom_002$0,cst_Stop$0)
                        ?caml_string_notequal(atom_002$0,cst_Terminate$0)
                          ?caml_call1(Sexplib0_Sexp_conv_error[19],0)
                          :caml_call2
                            (Sexplib0_Sexp_conv_error[21],error_source_006,sexp_004)
                        :caml_call2
                          (Sexplib0_Sexp_conv_error[21],error_source_006,sexp_004)
                      :caml_call2
                        (Sexplib0_Sexp_conv_error[21],error_source_006,sexp_004)
                    :caml_call2
                      (Sexplib0_Sexp_conv_error[21],error_source_006,sexp_004)
                  :caml_call2
                    (Sexplib0_Sexp_conv_error[21],error_source_006,sexp_004)}
        return caml_call2
                (Sexplib0_Sexp_conv_error[24],error_source_006,sexp_004)}
      return caml_call2
              (Sexplib0_Sexp_conv_error[25],error_source_006,sexp_004)}
    function sys_behavior_of_sexp$0(sexp_007)
     {try
       {var _aGB_=sys_behavior_of_sexp(sexp_007);return _aGB_}
      catch(_aGC_)
       {_aGC_ = caml_wrap_exception(_aGC_);
        if(_aGC_ === Sexplib0_Sexp_conv_error[18])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[20],error_source_008,sexp_007);
        throw _aGC_}}
    function sexp_of_sys_behavior(param)
     {return 192584839 === param
              ?_az3_
              :530911809 <= param
                ?926227490 <= param?_az4_:_az5_
                :497016682 <= param?_az6_:_az7_}
    function equal$54(t$0,t){return t$0 === t?1:0}
    var
     abrt=Stdlib_Sys[16],
     alrm=Stdlib_Sys[17],
     bus=Stdlib_Sys[37],
     chld=Stdlib_Sys[29],
     cont=Stdlib_Sys[30],
     fpe=Stdlib_Sys[18],
     hup=Stdlib_Sys[19],
     ill=Stdlib_Sys[20],
     int$6=Stdlib_Sys[21],
     kill=Stdlib_Sys[22],
     pipe=Stdlib_Sys[23],
     poll=Stdlib_Sys[38],
     prof=Stdlib_Sys[36],
     quit=Stdlib_Sys[24],
     segv=Stdlib_Sys[25],
     stop=Stdlib_Sys[31],
     sys=Stdlib_Sys[39],
     term=Stdlib_Sys[26],
     trap=Stdlib_Sys[40],
     tstp=Stdlib_Sys[32],
     ttin=Stdlib_Sys[33],
     ttou=Stdlib_Sys[34],
     urg=Stdlib_Sys[41],
     usr1=Stdlib_Sys[27],
     usr2=Stdlib_Sys[28],
     vtalrm=Stdlib_Sys[35],
     xcpu=Stdlib_Sys[42],
     xfsz=Stdlib_Sys[43],
     Invalid_signal_mnemonic_or_num=
      [248,cst_Core_Signal_Invalid_signal,caml_fresh_oo_id(0)],
     zero$9=0;
    function _az8_(param)
     {if(param[1] === Invalid_signal_mnemonic_or_num)
       {var arg0_009=param[2],res0_010=caml_call1(_at_,arg0_009);
        return [1,[0,_az9_,[0,res0_010,0]]]}
      throw [0,Assert_failure,_az__]}
    caml_call4
     (Sexplib0_Sexp_conv[70][1],0,0,Invalid_signal_mnemonic_or_num,_az8_);
    var
     known=
      [0,
       [0,cst_sigabrt,abrt,497016682,1],
       [0,
        [0,cst_sigalrm,alrm,530911809,1],
        [0,
         [0,cst_sigbus,bus,497016682,2],
         [0,
          [0,cst_sigchld,chld,-950194894,1],
          [0,
           [0,cst_sigcont,cont,192584839,1],
           [0,
            [0,cst_sigfpe,fpe,497016682,1],
            [0,
             [0,cst_sighup,hup,530911809,1],
             [0,
              [0,cst_sigill,ill,497016682,1],
              [0,
               [0,cst_sigint,int$6,530911809,1],
               [0,
                [0,cst_sigkill,kill,530911809,1],
                [0,
                 [0,cst_sigpipe,pipe,530911809,1],
                 [0,
                  [0,cst_sigpoll,poll,530911809,2],
                  [0,
                   [0,cst_sigprof,prof,530911809,1],
                   [0,
                    [0,cst_sigquit,quit,497016682,1],
                    [0,
                     [0,cst_sigsegv,segv,497016682,1],
                     [0,
                      [0,cst_sigstop,stop,926227490,1],
                      [0,
                       [0,cst_sigsys,sys,497016682,2],
                       [0,
                        [0,cst_sigterm,term,530911809,1],
                        [0,
                         [0,cst_sigtrap,trap,497016682,2],
                         [0,
                          [0,cst_sigtstp,tstp,926227490,1],
                          [0,
                           [0,cst_sigttin,ttin,926227490,1],
                           [0,
                            [0,cst_sigttou,ttou,926227490,1],
                            [0,
                             [0,cst_sigurg,urg,-950194894,2],
                             [0,
                              [0,cst_sigusr1,usr1,530911809,1],
                              [0,
                               [0,cst_sigusr2,usr2,530911809,1],
                               [0,
                                [0,cst_sigvtalrm,vtalrm,530911809,1],
                                [0,
                                 [0,cst_sigxcpu,xcpu,497016682,2],
                                 [0,
                                  [0,cst_sigxfsz,xfsz,497016682,2],
                                  [0,[0,cst_sigzero,zero$9,-950194894,1],0]]]]]]]]]]]]]]]]]]]]]]]]]]]]],
     name_and_version_by_t=caml_call3(Table$5[4],0,_az$_,0),
     t_by_name=caml_call3(Table$1[4],0,_aAa_,0),
     behavior_by_t=caml_call3(Table$5[4],0,_aAb_,0);
    caml_call2
     (_pH_,
      known,
      function(param)
       {var
         stable_version=param[4],
         behavior=param[3],
         t=param[2],
         name=param[1];
        caml_call3
         (Core_Hashtbl[34],name_and_version_by_t,t,[0,name,stable_version]);
        caml_call3(Core_Hashtbl[34],t_by_name,name,t);
        return caml_call3(Core_Hashtbl[34],behavior_by_t,t,behavior)});
    function to_string_with_version(t,requested_version)
     {var match=caml_call2(Core_Hashtbl[53],name_and_version_by_t,t);
      if(match)
       {var match$0=match[1],needed_version=match$0[2],string=match$0[1];
        if(needed_version <= requested_version)return string}
      return caml_call2
              (_a0_,
               cst_unknown_signal,
               caml_call2(_a0_,caml_call1(to_string$6,t),cst$276))}
    function of_string$33(s)
     {var
       s$0=caml_call1(_Bu_,caml_call2(_B2_,0,s)),
       match=caml_call2(Core_Hashtbl[53],t_by_name,s$0);
      if(match){var sn=match[1];return sn}
      if(caml_call2(_BQ_,s$0,cst_unknown_signal$0))
       try
        {var _aGz_=caml_call1(of_string$5,slice$2(s$0,16,-1));return _aGz_}
       catch(_aGA_){throw [0,Invalid_signal_mnemonic_or_num,s$0]}
      throw [0,Invalid_signal_mnemonic_or_num,s$0]}
    function default_sys_behavior(t)
     {var match=caml_call2(Core_Hashtbl[53],behavior_by_t,t);
      if(match){var behavior=match[1];return behavior}
      var
       _aGy_=
        caml_call2
         (_a0_,cst_Signal_default_sys_behavio,caml_call1(to_string$6,t));
      throw [0,Stdlib[6],_aGy_]}
    var Expected_atom=[248,cst_Core_Signal_Expected_atom,caml_fresh_oo_id(0)];
    function _aAc_(param)
     {if(param[1] === Expected_atom)
       {var arg0_011=param[2],res0_012=caml_call1(sexp_of_t$35,arg0_011);
        return [1,[0,_aAd_,[0,res0_012,0]]]}
      throw [0,Assert_failure,_aAe_]}
    caml_call4(Sexplib0_Sexp_conv[70][1],0,0,Expected_atom,_aAc_);
    function sexp_of_t_with_version(t,version)
     {return [0,to_string_with_version(t,version)]}
    function to_string$41(s){return to_string_with_version(s,2)}
    function sexp_of_t$143(t){return sexp_of_t_with_version(t,1)}
    function t_of_sexp$119(s)
     {if(0 === s[0]){var s$0=s[1];return of_string$33(s$0)}
      throw [0,Expected_atom,s]}
    var
     can_send_to=-524171385,
     of_system_int=-524171385,
     send=-524171385,
     send_exn=-524171385,
     send_i=-524171385,
     sexp_of_pid_spec=-524171385,
     sigpending=-524171385,
     sigprocmask=-524171385,
     sigsuspend=-524171385,
     to_system_int=-524171385;
    function signal(t,behavior)
     {if(typeof behavior === "number")
       var _aGw_=-384499551 <= behavior?0:1;
      else
       var
        f$0=behavior[2],
        _aGw_=
         [0,
          function(t)
           {function _aGx_(param){return caml_call1(f$0,t)}
            return caml_call1(Base_Exn[15],_aGx_)}];
      var param=runtime.caml_install_signal_handler(t,_aGw_);
      if(typeof param === "number")return param?-950194894:-384499551;
      var f=param[1];
      return [0,-325978168,f]}
    function set$14(t,behavior){return 0}
    function handle(t,f){return 0}
    function handle_default(t){return 0}
    function ignore(t){return 0}
    var
     _aAf_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$291),0,bin_shape_t$57],0],
     _aAg_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_signal_ml_193_4),
     group$153=caml_call2(Bin_prot_Shape[6],_aAg_,_aAf_),
     _aAh_=caml_call1(Bin_prot_Shape[2][1],cst_t$292),
     bin_shape_t$148=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$153,_aAh_),0),
     bin_writer_t$123=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$123=[0,bin_read_t$100,bin_read_t$101],
     bin_t$123=[0,bin_shape_t$148,bin_writer_t$123,bin_reader_t$123];
    function sexp_of_t$144(t){return sexp_of_t_with_version(t,2)}
    var
     _aAi_=
      [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$293),0,bin_shape_t$57],0],
     _aAj_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_signal_ml_200_4),
     group$154=caml_call2(Bin_prot_Shape[6],_aAj_,_aAi_),
     _aAk_=caml_call1(Bin_prot_Shape[2][1],cst_t$294),
     bin_shape_t$149=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$154,_aAk_),0),
     bin_writer_t$124=[0,bin_size_t$49,bin_write_t$49],
     bin_reader_t$124=[0,bin_read_t$100,bin_read_t$101],
     bin_t$124=[0,bin_shape_t$149,bin_writer_t$124,bin_reader_t$124];
    function sexp_of_t$145(t){return sexp_of_t_with_version(t,1)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$484);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Signal$0);
    var
     Core_Signal=
      [0,
       bin_size_t$49,
       bin_write_t$49,
       bin_read_t$100,
       bin_read_t$101,
       bin_shape_t$57,
       bin_writer_t$50,
       bin_reader_t$50,
       bin_t$50,
       t_of_sexp$119,
       sexp_of_t$143,
       symbol$77,
       symbol$76,
       symbol$75,
       symbol$74,
       symbol$73,
       symbol$72,
       min$6,
       max$6,
       ascending$5,
       descending$5,
       between$5,
       clamp_exn$5,
       clamp$5,
       comparator$9,
       validate_lbound$4,
       validate_ubound$4,
       validate_bound$4,
       Replace_polymorphic_compare$3,
       Map$36,
       Set$36,
       compare$42,
       hash_fold_t$19,
       hash$16,
       hashable$5,
       Table$24,
       Hash_set$24,
       Hash_queue$4,
       of_string$33,
       equal$54,
       of_caml_int,
       to_caml_int,
       to_string$41,
       sexp_of_sys_behavior,
       sys_behavior_of_sexp$0,
       sys_behavior_of_sexp,
       default_sys_behavior,
       handle_default,
       ignore,
       abrt,
       alrm,
       bus,
       chld,
       cont,
       fpe,
       hup,
       ill,
       int$6,
       kill,
       pipe,
       poll,
       prof,
       quit,
       segv,
       sys,
       stop,
       term,
       trap,
       tstp,
       ttin,
       ttou,
       urg,
       usr1,
       usr2,
       vtalrm,
       xcpu,
       xfsz,
       zero$9,
       can_send_to,
       of_system_int,
       send,
       send_exn,
       send_i,
       sexp_of_pid_spec,
       sigpending,
       sigprocmask,
       sigsuspend,
       to_system_int,
       [0,signal,set$14,handle],
       [0,
        [0,
         bin_size_t$49,
         bin_write_t$49,
         bin_read_t$100,
         bin_read_t$101,
         bin_shape_t$148,
         bin_writer_t$123,
         bin_reader_t$123,
         bin_t$123,
         compare$42,
         t_of_sexp$119,
         sexp_of_t$144],
        [0,
         bin_size_t$49,
         bin_write_t$49,
         bin_read_t$100,
         bin_read_t$101,
         bin_shape_t$149,
         bin_writer_t$124,
         bin_reader_t$124,
         bin_t$124,
         compare$42,
         t_of_sexp$119,
         sexp_of_t$145]]];
    caml_register_global(5451,Core_Signal,"Core__Signal");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Sign_or_nan);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$485);
    caml_call1(Expect_test_collector[5][1],cst_core_src_sign_or_nan_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$486,cst$277);
    function t_of_sexp$120(sexp_004)
     {if(0 === sexp_004[0])
       {var _aGs_=sexp_004[1],switch$0=0;
        if(caml_string_notequal(_aGs_,cst_Nan))
         {var switch$1=0;
          if(caml_string_notequal(_aGs_,cst_Neg$2))
           {var switch$2=0;
            if(caml_string_notequal(_aGs_,cst_Pos$2))
             {var switch$3=0;
              if(caml_string_notequal(_aGs_,cst_Zero$6))
               if(caml_string_notequal(_aGs_,cst_nan$0))
                if(caml_string_notequal(_aGs_,cst_neg$1))
                 if(caml_string_notequal(_aGs_,cst_pos$1))
                  {if(caml_string_notequal(_aGs_,cst_zero$5))
                    {switch$0 = 1;switch$1 = 1;switch$2 = 1;switch$3 = 1}}
                 else
                  switch$3 = 1;
                else
                 {switch$2 = 1;switch$3 = 1}
               else
                {switch$1 = 1;switch$2 = 1;switch$3 = 1}
              if(! switch$3)return 1}
            if(! switch$2)return 2}
          if(! switch$1)return 0}
        if(! switch$0)return 3}
      else
       {var _aGt_=sexp_004[1];
        if(! _aGt_)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[7],error_source_003$2,sexp_004);
        var _aGu_=_aGt_[1];
        if(0 !== _aGu_[0])
         return caml_call2
                 (Sexplib0_Sexp_conv_error[6],error_source_003$2,sexp_004);
        var _aGv_=_aGu_[1],switch$4=0;
        if(caml_string_notequal(_aGv_,cst_Nan$0))
         {var switch$5=0;
          if(caml_string_notequal(_aGv_,cst_Neg$3))
           {var switch$6=0;
            if(caml_string_notequal(_aGv_,cst_Pos$3))
             {var switch$7=0;
              if(caml_string_notequal(_aGv_,cst_Zero$7))
               if(caml_string_notequal(_aGv_,cst_nan$1))
                if(caml_string_notequal(_aGv_,cst_neg$2))
                 if(caml_string_notequal(_aGv_,cst_pos$2))
                  {if(caml_string_notequal(_aGv_,cst_zero$6))
                    {switch$4 = 1;switch$5 = 1;switch$6 = 1;switch$7 = 1}}
                 else
                  switch$7 = 1;
                else
                 {switch$6 = 1;switch$7 = 1}
               else
                {switch$5 = 1;switch$6 = 1;switch$7 = 1}
              if(! switch$7)
               return caml_call2
                       (Sexplib0_Sexp_conv_error[3],error_source_003$2,sexp_004)}
            if(! switch$6)
             return caml_call2
                     (Sexplib0_Sexp_conv_error[3],error_source_003$2,sexp_004)}
          if(! switch$5)
           return caml_call2
                   (Sexplib0_Sexp_conv_error[3],error_source_003$2,sexp_004)}
        if(! switch$4)
         return caml_call2
                 (Sexplib0_Sexp_conv_error[3],error_source_003$2,sexp_004)}
      return caml_call2
              (Sexplib0_Sexp_conv_error[8],error_source_003$2,sexp_004)}
    function sexp_of_t$146(param)
     {switch(param)
       {case 0:return _aAl_;
        case 1:return _aAm_;
        case 2:return _aAn_;
        default:return _aAo_}}
    var
     _aAq_=caml_call1(Bin_prot_Shape[9],_aAp_),
     _aAr_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$295),0,_aAq_],0],
     _aAs_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_sign_or_nan_ml_6_),
     group$155=caml_call2(Bin_prot_Shape[6],_aAs_,_aAr_),
     _aAt_=caml_call1(Bin_prot_Shape[2][1],cst_t$296),
     bin_shape_t$150=
      caml_call1(caml_call2(Bin_prot_Shape[14],group$155,_aAt_),0);
    function bin_size_t$97(param){return 1}
    function bin_write_t$98(buf,pos,param)
     {switch(param)
       {case 0:return caml_call3(Bin_prot_Write[31],buf,pos,0);
        case 1:return caml_call3(Bin_prot_Write[31],buf,pos,1);
        case 2:return caml_call3(Bin_prot_Write[31],buf,pos,2);
        default:return caml_call3(Bin_prot_Write[31],buf,pos,3)}}
    var bin_writer_t$125=[0,bin_size_t$97,bin_write_t$98];
    function bin_read_t$193(buf,pos_ref,vint)
     {return caml_call2
              (Bin_prot_Common[19],cst_core_src_sign_or_nan_ml_St,pos_ref[1])}
    function bin_read_t$194(buf,pos_ref)
     {var match=caml_call2(Bin_prot_Read[30],buf,pos_ref);
      if(3 < match >>> 0)
       return caml_call2(Bin_prot_Common[18],_aAu_,pos_ref[1]);
      switch(match)
       {case 0:return 0;case 1:return 1;case 2:return 2;default:return 3}}
    var
     bin_reader_t$125=[0,bin_read_t$194,bin_read_t$193],
     bin_t$125=[0,bin_shape_t$150,bin_writer_t$125,bin_reader_t$125],
     compare$118=caml_int_compare;
    function hash_fold_t$49(hsv,arg)
     {switch(arg)
       {case 0:return caml_call2(Base_Hash[3],hsv,0);
        case 1:return caml_call2(Base_Hash[3],hsv,1);
        case 2:return caml_call2(Base_Hash[3],hsv,2);
        default:return caml_call2(Base_Hash[3],hsv,3)}}
    function hash$64(x)
     {var hsv=caml_call2(Base_Hash[11],0,0),_aGr_=hash_fold_t$49(hsv,x);
      return caml_call1(Base_Hash[9],_aGr_)}
    var
     Typename_of_t$31=caml_call1(Typerep_lib_Make_typename[1],[0,name$70]),
     typename_of_t$33=Typename_of_t$31[2],
     name_of_t$22=Typename_of_t$31[1],
     typerep_of_t$33=
      [9,
       [0,
        name_of_t$22,
        [0,
         [246,
          function(_aGq_)
           {var
             tag0=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Neg$4,_eO_,0,0,0,0,_es_,_aAv_]),
             tag1=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Zero$8,_eO_,0,0,1,1,_es_,_aAw_]),
             tag2=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Pos$4,_eO_,0,0,2,2,_es_,_aAx_]),
             tag3=
              caml_call1
               (Typerep_lib_Std[1][4][9],
                [0,cst_Nan$1,_eO_,0,0,3,3,_es_,_aAy_]),
             typename=caml_call1(Typerep_lib_Std[1][1][2],name_of_t$22),
             tags=[0,[0,tag0],[0,tag1],[0,tag2],[0,tag3]],
             polymorphic=0;
            function value(param)
             {switch(param)
               {case 0:return [0,tag0,_eV_];
                case 1:return [0,tag1,_eV_];
                case 2:return [0,tag2,_eV_];
                default:return [0,tag3,_eV_]}}
            return [8,
                    caml_call1
                     (Typerep_lib_Std[1][6][7],
                      [0,typename,tags,polymorphic,value])]}]]]],
     _aAz_=Base_Sign_or_nan[1],
     _aAA_=Base_Sign_or_nan[2],
     _aAB_=Base_Sign_or_nan[27],
     _aAC_=Base_Sign_or_nan[28],
     _aAD_=Base_Sign_or_nan[29],
     _aAE_=Base_Sign_or_nan[30],
     _aAF_=Base_Sign_or_nan[31],
     _aAG_=Base_Sign_or_nan[32],
     _aAH_=
      [0,
       bin_size_t$97,
       bin_write_t$98,
       bin_read_t$194,
       bin_read_t$193,
       bin_shape_t$150,
       bin_writer_t$125,
       bin_reader_t$125,
       bin_t$125],
     _aAI_=
      [0,
       Base_Sign_or_nan[3],
       Base_Sign_or_nan[4],
       Base_Sign_or_nan[5],
       Base_Sign_or_nan[6],
       Base_Sign_or_nan[7],
       Base_Sign_or_nan[8],
       Base_Sign_or_nan[9],
       Base_Sign_or_nan[10],
       Base_Sign_or_nan[11],
       Base_Sign_or_nan[12],
       Base_Sign_or_nan[13],
       Base_Sign_or_nan[14],
       Base_Sign_or_nan[15],
       Base_Sign_or_nan[16],
       Base_Sign_or_nan[17],
       Base_Sign_or_nan[18],
       Base_Sign_or_nan[19],
       Base_Sign_or_nan[20],
       Base_Sign_or_nan[21],
       Base_Sign_or_nan[22],
       Base_Sign_or_nan[23],
       Base_Sign_or_nan[24],
       Base_Sign_or_nan[25],
       Base_Sign_or_nan[26]],
     include$171=function(_aGp_){return _AS_(_aAI_,_aGp_)}(_aAH_),
     _aAJ_=include$171[1],
     _aAK_=include$171[2],
     _aAL_=include$171[3],
     _aAM_=include$171[4],
     _aAN_=include$171[5],
     _aAO_=include$171[6],
     _aAP_=include$171[7],
     _aAQ_=include$171[8],
     _aAR_=include$171[9],
     _aAS_=include$171[10],
     _aAT_=include$171[11],
     _aAU_=include$171[12],
     _aAV_=include$171[13],
     _aAW_=include$171[14],
     _aAX_=include$171[15],
     _aAY_=include$171[16],
     _aAZ_=include$171[17],
     _aA0_=include$171[18],
     _aA1_=include$171[19],
     _aA2_=include$171[20],
     _aA3_=include$171[21],
     _aA4_=include$171[22],
     _aA5_=include$171[23],
     _aA6_=include$171[24],
     _aA7_=include$171[25],
     _aA8_=include$171[26],
     _aA9_=include$171[27],
     _aA__=include$171[28],
     _aA$_=include$171[29],
     _aBa_=include$171[30],
     _aBb_=include$171[31],
     _aBc_=include$171[32],
     _aBd_=include$171[33],
     _aBe_=include$171[34],
     _aBf_=include$171[35],
     _aBg_=include$171[36],
     _aBh_=include$171[37],
     _aBi_=include$171[38],
     _aBj_=include$171[39],
     _aBk_=include$171[40],
     _aBl_=include$171[41];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$487);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Sign_or_nan$0);
    var
     Core_Sign_or_nan=
      [0,
       typerep_of_t$33,
       typename_of_t$33,
       _aAz_,
       _aAA_,
       _aAB_,
       _aAC_,
       _aAD_,
       _aAE_,
       _aAF_,
       _aAG_,
       _aAJ_,
       _aAK_,
       _aAL_,
       _aAM_,
       _aAN_,
       _aAO_,
       _aAP_,
       _aAQ_,
       _aAR_,
       _aAS_,
       _aAT_,
       _aAU_,
       _aAV_,
       _aAW_,
       _aAX_,
       _aAY_,
       _aAZ_,
       _aA0_,
       _aA1_,
       _aA2_,
       _aA3_,
       _aA4_,
       _aA5_,
       _aA6_,
       _aA7_,
       _aA8_,
       _aA9_,
       _aA__,
       _aA$_,
       _aBa_,
       _aBb_,
       _aBc_,
       _aBd_,
       _aBe_,
       _aBf_,
       _aBg_,
       _aBh_,
       _aBi_,
       _aBj_,
       _aBk_,
       _aBl_,
       [0,
        [0,
         bin_size_t$97,
         bin_write_t$98,
         bin_read_t$194,
         bin_read_t$193,
         bin_shape_t$150,
         bin_writer_t$125,
         bin_reader_t$125,
         bin_t$125,
         compare$118,
         hash_fold_t$49,
         hash$64,
         t_of_sexp$120,
         sexp_of_t$146]]];
    caml_register_global(5453,Core_Sign_or_nan,"Core__Sign_or_nan");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Queue_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$488);
    caml_call1(Expect_test_collector[5][1],cst_core_src_queue_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$489,cst$278);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$490);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Queue_intf$0);
    var Core_Queue_intf=[0];
    caml_register_global(5454,Core_Queue_intf,"Core__Queue_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Printexc);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$491);
    caml_call1(Expect_test_collector[5][1],cst_core_src_printexc_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$492,cst$279);
    function to_string$42(param){return 751446320}
    function print(param){return 751446320}
    function catch$0(param,_aGo_){return -352320217}
    var
     _aBm_=Stdlib_Printexc[5],
     _aBn_=Stdlib_Printexc[6],
     _aBo_=Stdlib_Printexc[7],
     _aBp_=Stdlib_Printexc[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$493);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Printexc$0);
    var Core_Printexc=[0,to_string$42,print,catch$0,_aBm_,_aBn_,_aBo_,_aBp_];
    caml_register_global(5455,Core_Printexc,"Core__Printexc");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Option_array);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$494);
    caml_call1(Expect_test_collector[5][1],cst_core_src_option_array_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$495,cst$280);
    var
     t_of_sexp$121=include$172[1],
     sexp_of_t$147=include$172[2],
     t_sexp_grammar$40=include$172[3],
     empty$13=include$172[4],
     create$46=include$172[5],
     length$24=include$172[6],
     is_empty$19=include$172[7],
     iter$42=include$172[8],
     fold$36=include$172[9],
     fold_result$11=include$172[10],
     fold_until$15=include$172[11],
     exists$33=include$172[12],
     for_all$33=include$172[13],
     count$16=include$172[14],
     sum$12=include$172[15],
     find$19=include$172[16],
     find_map$11=include$172[17],
     to_list$32=include$172[18],
     min_elt$16=include$172[19],
     max_elt$16=include$172[20],
     foldi$3=include$172[21],
     iteri$8=include$172[22],
     existsi$6=include$172[23],
     for_alli$6=include$172[24],
     counti$6=include$172[25],
     findi$1=include$172[26],
     find_mapi$1=include$172[27],
     init_some=include$172[28],
     init$9=include$172[29],
     of_array$7=include$172[30],
     of_array_some=include$172[31],
     to_array$12=include$172[32],
     get$7=include$172[33],
     get_some_exn=include$172[34],
     is_none$2=include$172[35],
     is_some$1=include$172[36],
     unsafe_get$0=include$172[37],
     unsafe_get_some_exn=include$172[38],
     unsafe_get_some_assuming_some=include$172[39],
     unsafe_is_some=include$172[40],
     set$15=include$172[41],
     set_some=include$172[42],
     set_none=include$172[43],
     swap$3=include$172[44],
     clear$4=include$172[45],
     map$50=include$172[46],
     map_some=include$172[47],
     unsafe_set$0=include$172[48],
     unsafe_set_some=include$172[49],
     unsafe_set_none=include$172[50],
     blit$4=include$172[51],
     blito$3=include$172[52],
     unsafe_blit$1=include$172[53],
     sub$7=include$172[54],
     subo$3=include$172[55],
     copy$6=include$172[56],
     _aBr_=caml_call1(Bin_prot_Shape[3][1],cst_a$98),
     _aBs_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_option_array_ml_7),
     _aBt_=
      caml_call1
       (_c$_,caml_call1(_cX_,caml_call2(Bin_prot_Shape[15],_aBs_,_aBr_))),
     _aBu_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$99),0],
     _aBv_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$297),_aBu_,_aBt_],0],
     _aBw_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_option_array_ml_7$0),
     group$156=caml_call2(Bin_prot_Shape[6],_aBw_,_aBv_),
     _aBq_=[0,to_array$12,of_array$7];
    function bin_shape_t$151(a)
     {var _aGn_=caml_call1(Bin_prot_Shape[2][1],cst_t$298);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$156,_aGn_),[0,a,0])}
    function bin_size_t$98(size_of_a,v)
     {return caml_call2(_bn_,caml_call1(_bj_,size_of_a),v)}
    function bin_write_t$99(write_a,buf,pos,v)
     {return caml_call3(caml_call1(_db_,caml_call1(_cZ_,write_a)),buf,pos,v)}
    function bin_read_t$195(of_a,buf,pos_ref,vint)
     {return caml_call3
              (caml_call1(_de_,caml_call1(_c1_,of_a)),buf,pos_ref,vint)}
    function bin_read_t$196(of_a,buf,pos_ref)
     {return caml_call2(caml_call1(_dd_,caml_call1(_c1_,of_a)),buf,pos_ref)}
    var
     include$173=
      caml_call1
       (caml_call1
         (_fq_,
          [0,
           bin_shape_t$151,
           bin_size_t$98,
           bin_write_t$99,
           bin_read_t$196,
           bin_read_t$195]),
        _aBq_),
     _aBx_=include$173[1],
     _aBy_=include$173[2],
     _aBz_=include$173[3],
     _aBA_=include$173[4],
     _aBB_=include$173[5],
     _aBC_=include$173[6],
     _aBD_=include$173[7],
     _aBE_=include$173[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$496);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Option_array$0);
    var
     Core_Option_array=
      [0,
       _aBx_,
       _aBy_,
       _aBz_,
       _aBA_,
       _aBB_,
       _aBC_,
       _aBD_,
       _aBE_,
       t_of_sexp$121,
       sexp_of_t$147,
       t_sexp_grammar$40,
       empty$13,
       create$46,
       length$24,
       is_empty$19,
       iter$42,
       fold$36,
       fold_result$11,
       fold_until$15,
       exists$33,
       for_all$33,
       count$16,
       sum$12,
       find$19,
       find_map$11,
       to_list$32,
       min_elt$16,
       max_elt$16,
       foldi$3,
       iteri$8,
       existsi$6,
       for_alli$6,
       counti$6,
       findi$1,
       find_mapi$1,
       init_some,
       init$9,
       of_array$7,
       of_array_some,
       to_array$12,
       get$7,
       get_some_exn,
       is_none$2,
       is_some$1,
       unsafe_get$0,
       unsafe_get_some_exn,
       unsafe_get_some_assuming_some,
       unsafe_is_some,
       set$15,
       set_some,
       set_none,
       swap$3,
       clear$4,
       map$50,
       map_some,
       unsafe_set$0,
       unsafe_set_some,
       unsafe_set_none,
       blit$4,
       blito$3,
       unsafe_blit$1,
       sub$7,
       subo$3,
       copy$6];
    caml_register_global(5457,Core_Option_array,"Core__Option_array");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Only_in_test);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$497);
    caml_call1(Expect_test_collector[5][1],cst_core_src_only_in_test_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$498,cst$281);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$499);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Only_in_test$0);
    var
     Core_Only_in_test=
      [0,
       _KY_,
       _KZ_,
       _K0_,
       _K1_,
       _K2_,
       _K3_,
       _K4_,
       _K5_,
       _K6_,
       _K7_,
       _K8_,
       _K$_,
       function(_aGl_)
        {var _aGm_=caml_obj_tag(_aGl_);
         return 250 === _aGm_
                 ?_aGl_[1]
                 :246 === _aGm_?caml_call1(CamlinternalLazy[2],_aGl_):_aGl_}];
    caml_register_global(5458,Core_Only_in_test,"Core__Only_in_test");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_No_polymorphic_compar);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$500);
    caml_call1(Expect_test_collector[5][1],cst_core_src_no_polymorphic_co);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$501,cst$282);
    function compare$119(param,_aGk_){return 723633086}
    function symbol$269(param,_aGj_){return 723633086}
    function symbol$270(param,_aGi_){return 723633086}
    function symbol$271(param,_aGh_){return 723633086}
    function symbol$272(param,_aGg_){return 723633086}
    function symbol$273(param,_aGf_){return 723633086}
    function symbol$274(param,_aGe_){return 723633086}
    function equal$55(param,_aGd_){return 723633086}
    function min$25(param,_aGc_){return 723633086}
    function max$25(param,_aGb_){return 723633086}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$502);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_No_polymorphic_compar$0);
    var
     Core_No_polymorphic_compare=
      [0,
       compare$119,
       symbol$269,
       symbol$270,
       symbol$271,
       symbol$272,
       symbol$273,
       symbol$274,
       equal$55,
       min$25,
       max$25];
    caml_register_global
     (5459,Core_No_polymorphic_compare,"Core__No_polymorphic_compare");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Memo);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$503);
    caml_call1(Expect_test_collector[5][1],cst_core_src_memo_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$504,cst$283);
    function return$6(param)
     {if(0 === param[0]){var v=param[1];return v}var e=param[1];throw e}
    function capture(f,x)
     {try
       {var _aGa_=[0,caml_call1(f,x)];return _aGa_}
      catch(e)
       {e = caml_wrap_exception(e);
        if(e === Stdlib_Sys[44])throw e;
        return [1,e]}}
    function unit$1(f)
     {var l=caml_call1(_K$_,f);
      return function(param)
       {var _aF$_=caml_obj_tag(l);
        return 250 === _aF$_
                ?l[1]
                :246 === _aF$_?caml_call1(CamlinternalLazy[2],l):l}}
    function general(hashable$1,cache_size_bound,f)
     {if(cache_size_bound)
       {var n=cache_size_bound[1];
        if(hashable$1)
         var sth$0=hashable$1[1],hashable$0=sth$0;
        else
         var hashable$0=Base_Hashable[2];
        if(caml_call2(_Np_,n,0))caml_call3(failwithf$0,_aBG_,n,0);
        var
         sexp_of_t$0=hashable$0[3],
         compare$0=hashable$0[2],
         hash$0=hashable$0[1],
         Cache=caml_call1(_AE_,[0,compare$0,sexp_of_t$0,hash$0]),
         cache$0=caml_call3(Cache[18],0,0,0);
        return function(arg)
         {var match=caml_call2(Cache[30],cache$0,arg);
          if(match)
           var result=match[1],result$0=result;
          else
           {var result$1=capture(f,arg);
            caml_call3(Cache[27],cache$0,arg,result$1);
            if(caml_call2(_Nr_,caml_call1(Cache[1],cache$0),n))
             caml_call1(Cache[44],cache$0);
            var result$0=result$1}
          return return$6(result$0)}}
      if(hashable$1)
       var sth=hashable$1[1],hashable=sth;
      else
       var hashable=Base_Hashable[2];
      var
       sexp_of_t=hashable[3],
       compare=hashable[2],
       hash=hashable[1],
       A=Make_plain_and_derive_hash_fol([0,compare,sexp_of_t,hash]),
       cache=caml_call3(A[5][4],0,_aBF_,0);
      function really_call_f(arg){return capture(f,arg)}
      return function(arg)
       {return return$6(caml_call3(Core_Hashtbl[52],cache,arg,really_call_f))}}
    function recursive(hashable,cache_size_bound,f_onestep)
     {var memoized=[];
      caml_update_dummy
       (memoized,
        [246,
         function(_aF__)
          {return general
                   ([0,hashable],
                    cache_size_bound,
                    caml_call1
                     (f_onestep,
                      function(x){return caml_call1(force(memoized),x)}))}]);
      return force(memoized)}
    function of_comparable(M)
     {return function(f)
       {var m=[0,M[21][4]];
        return function(x)
         {var match=caml_call2(find$3,m[1],x);
          if(match)
           var v=match[1],v$0=v;
          else
           {var v$1=capture(f,x);
            m[1] = caml_call3(set$2,m[1],x,v$1);
            var v$0=v$1}
          return return$6(v$0)}}}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$505);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Memo$0);
    var Core_Memo=[0,general,recursive,unit$1,of_comparable];
    caml_register_global(5460,Core_Memo,"Core__Memo");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Linked_queue);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$506);
    caml_call1(Expect_test_collector[5][1],cst_core_src_linked_queue_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$507,cst$284);
    var
     _aBL_=include$174[5],
     _aBN_=include$174[7],
     _aCa_=include$174[32],
     _aCs_=include$174[50],
     _aBH_=include$174[1],
     _aBI_=include$174[2],
     _aBJ_=include$174[3],
     _aBK_=include$174[4],
     _aBM_=include$174[6],
     _aBO_=include$174[8],
     _aBP_=include$174[9],
     _aBQ_=include$174[10],
     _aBR_=include$174[11],
     _aBS_=include$174[12],
     _aBT_=include$174[13],
     _aBU_=include$174[14],
     _aBV_=include$174[15],
     _aBW_=include$174[16],
     _aBX_=include$174[17],
     _aBY_=include$174[18],
     _aBZ_=include$174[19],
     _aB0_=include$174[20],
     _aB1_=include$174[21],
     _aB2_=include$174[22],
     _aB3_=include$174[23],
     _aB4_=include$174[24],
     _aB5_=include$174[25],
     _aB6_=include$174[26],
     _aB7_=include$174[27],
     _aB8_=include$174[28],
     _aB9_=include$174[29],
     _aB__=include$174[30],
     _aB$_=include$174[31],
     _aCb_=include$174[33],
     _aCc_=include$174[34],
     _aCd_=include$174[35],
     _aCe_=include$174[36],
     _aCf_=include$174[37],
     _aCg_=include$174[38],
     _aCh_=include$174[39],
     _aCi_=include$174[40],
     _aCj_=include$174[41],
     _aCk_=include$174[42],
     _aCl_=include$174[43],
     _aCm_=include$174[44],
     _aCn_=include$174[45],
     _aCo_=include$174[46],
     _aCp_=include$174[47],
     _aCq_=include$174[48],
     _aCr_=include$174[49],
     _aCt_=include$174[51],
     _aCu_=caml_call1(Bin_prot_Shape[3][1],cst_a$100),
     _aCv_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_linked_queue_ml_7),
     _aCw_=caml_call2(Bin_prot_Shape[15],_aCv_,_aCu_),
     _aCx_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$101),0],
     _aCy_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$17),_aCx_,_aCw_],0],
     _aCz_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_linked_queue_ml_7$0),
     group$157=caml_call2(Bin_prot_Shape[6],_aCz_,_aCy_);
    function bin_shape_el$4(a)
     {var _aF9_=caml_call1(Bin_prot_Shape[2][1],cst_el$18);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$157,_aF9_),[0,a,0])}
    function bin_size_el$4(size_of_a){return size_of_a}
    function bin_write_el$4(write_a){return write_a}
    function bin_read_el$4(of_a){return of_a}
    var
     caller_identity$4=
      caml_call1(Bin_prot_Shape[5][1],cst_800df9a0_4992_11e6_881d_ff);
    function init$10(len,next)
     {var t=caml_call1(_aCs_,0),_aF7_=1;
      if(! (len < 1))
       {var for$0=_aF7_;
        for(;;)
         {caml_call2(_aCa_,t,caml_call1(next,0));
          var _aF8_=for$0 + 1 | 0;
          if(len !== for$0){var for$0=_aF8_;continue}
          break}}
      return t}
    var
     include$175=
      caml_call1
       (Bin_prot_Utils[16],
        [0,
         caller_identity$4,
         module_name$17,
         _aBL_,
         _aBN_,
         init$10,
         bin_size_el$4,
         bin_write_el$4,
         bin_read_el$4,
         bin_shape_el$4]),
     _aCA_=include$175[1],
     _aCB_=include$175[2],
     _aCC_=include$175[3],
     _aCD_=include$175[4],
     _aCE_=include$175[5],
     _aCF_=include$175[6],
     _aCG_=include$175[7],
     _aCH_=include$175[8];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$508);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Linked_queue$0);
    var
     Core_Linked_queue=
      [0,
       _aCA_,
       _aCB_,
       _aCC_,
       _aCD_,
       _aCE_,
       _aCF_,
       _aCG_,
       _aCH_,
       _aBH_,
       _aBI_,
       _aBJ_,
       _aBK_,
       _aBL_,
       _aBM_,
       _aBN_,
       _aBO_,
       _aBP_,
       _aBQ_,
       _aBR_,
       _aBS_,
       _aBT_,
       _aBU_,
       _aBV_,
       _aBW_,
       _aBX_,
       _aBY_,
       _aBZ_,
       _aB0_,
       _aB1_,
       _aB2_,
       _aB3_,
       _aB4_,
       _aB5_,
       _aB6_,
       _aB7_,
       _aB8_,
       _aB9_,
       _aB__,
       _aB$_,
       _aCa_,
       _aCb_,
       _aCc_,
       _aCd_,
       _aCe_,
       _aCf_,
       _aCg_,
       _aCh_,
       _aCi_,
       _aCj_,
       _aCk_,
       _aCl_,
       _aCm_,
       _aCn_,
       _aCo_,
       _aCp_,
       _aCq_,
       _aCr_,
       _aCs_,
       _aCt_];
    caml_register_global(5462,Core_Linked_queue,"Core__Linked_queue");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Ephemeron);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$509);
    caml_call1(Expect_test_collector[5][1],cst_core_src_ephemeron_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$510,cst$285);
    var _aCI_=Stdlib_Ephemeron[1][1];
    function set_key(t,param)
     {if(param){var v=param[1];return caml_call2(Stdlib_Ephemeron[1][4],t,v)}
      return caml_call1(Stdlib_Ephemeron[1][5],t)}
    var _aCJ_=Stdlib_Ephemeron[1][2];
    function set_data(t,param)
     {if(param){var v=param[1];return caml_call2(Stdlib_Ephemeron[1][10],t,v)}
      return caml_call1(Stdlib_Ephemeron[1][11],t)}
    var _aCK_=Stdlib_Ephemeron[1][8];
    function is_key_some(t){return caml_call1(Stdlib_Ephemeron[1][6],t)}
    function is_key_none(t){return 1 - is_key_some(t)}
    function is_data_some(t){return caml_call1(Stdlib_Ephemeron[1][12],t)}
    function is_data_none(t){return 1 - is_data_some(t)}
    function sexp_of_t$148(sexp_of_a,sexp_of_b,t)
     {var
       arg1_002=caml_call1(_aCK_,t),
       arg0_001=caml_call1(_aCJ_,t),
       res0_003=caml_call2(sexp_of_option,sexp_of_a,arg0_001),
       res1_004=caml_call2(sexp_of_option,sexp_of_b,arg1_002);
      return [1,[0,res0_003,[0,res1_004,0]]]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$511);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Ephemeron$0);
    var
     Core_Ephemeron=
      [0,
       sexp_of_t$148,
       _aCI_,
       set_key,
       _aCJ_,
       set_data,
       _aCK_,
       is_key_some,
       is_key_none,
       is_data_some,
       is_data_none];
    caml_register_global(5464,Core_Ephemeron,"Core__Ephemeron");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Deriving_hash_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$512);
    caml_call1(Expect_test_collector[5][1],cst_core_src_deriving_hash_int);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$513,cst$286);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$514);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Deriving_hash_intf$0);
    var Core_Deriving_hash_intf=[0];
    caml_register_global
     (5465,Core_Deriving_hash_intf,"Core__Deriving_hash_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Deriving_hash);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$515);
    caml_call1(Expect_test_collector[5][1],cst_core_src_deriving_hash_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$516,cst$287);
    function Of_deriving_hash(_aF5_,_aF4_)
     {function hash_fold_t(state,t)
       {var _aF6_=caml_call1(_aF4_[1],t);
        return caml_call2(_aF5_[1],state,_aF6_)}
      var hash=caml_call1(Base_Hash[12],hash_fold_t);
      return [0,hash_fold_t,hash]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$517);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Deriving_hash$0);
    var Core_Deriving_hash=[0,Of_deriving_hash];
    caml_register_global(5466,Core_Deriving_hash,"Core__Deriving_hash");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Deque);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$518);
    caml_call1(Expect_test_collector[5][1],cst_core_src_deque_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$519,cst$288);
    function create$47(initial_length,never_shrink,param)
     {if(never_shrink)
       var b=never_shrink[1],never_shrink$0=b;
      else
       var never_shrink$0=caml_call1(_x0_,initial_length);
      var initial_length$0=caml_call2(_xD_,initial_length,7);
      if(caml_call2(_Ns_,initial_length$0,0))
       caml_call3(_Po_,_aCL_,initial_length$0,0);
      var arr_length=initial_length$0 + 1 | 0;
      return [0,
              caml_call1(create$46,arr_length),
              0,
              1,
              0,
              0,
              arr_length,
              never_shrink$0]}
    function length$25(t){return t[5]}
    function is_empty$20(t){return caml_call2(_Nq_,t[5],0)}
    function apparent_front_index_when_not_(t){return t[4]}
    function apparent_back_index_when_not_e(t)
     {return (t[4] + t[5] | 0) - 1 | 0}
    function actual_front_index_when_not_em(t)
     {return caml_call2(_Nq_,t[2],t[6] - 1 | 0)?0:t[2] + 1 | 0}
    function actual_back_index_when_not_emp(t)
     {return caml_call2(_Nq_,t[3],0)?t[6] - 1 | 0:t[3] - 1 | 0}
    function checked(t,f){return is_empty$20(t)?0:[0,caml_call1(f,t)]}
    function front_index(t){return checked(t,apparent_front_index_when_not_)}
    function back_index(t){return checked(t,apparent_back_index_when_not_e)}
    function foldi$4(t,dir,init,f)
     {if(is_empty$20(t))return init;
      var
       apparent_front=t[4],
       apparent_back=apparent_back_index_when_not_e(t),
       actual_front=actual_front_index_when_not_em(t),
       actual_back=actual_back_index_when_not_emp(t);
      function loop(acc,apparent_i,real_i,stop_pos,step)
       {var acc$0=acc,apparent_i$0=apparent_i,real_i$0=real_i;
        for(;;)
         {if(caml_call2(_Nq_,real_i$0,stop_pos))return [0,acc$0,apparent_i$0];
          var
           real_i$1=real_i$0 + step | 0,
           apparent_i$1=apparent_i$0 + step | 0,
           acc$1=
            caml_call3
             (f,apparent_i$0,acc$0,caml_call2(get_some_exn,t[1],real_i$0)),
           acc$0=acc$1,
           apparent_i$0=apparent_i$1,
           real_i$0=real_i$1;
          continue}}
      if(252818429 <= dir)
       {if(caml_call2(_Np_,actual_front,actual_back))
         {var
           match=loop(init,apparent_back,actual_back,actual_front - 1 | 0,-1),
           acc=match[1];
          return acc}
        var
         match$0=loop(init,apparent_back,actual_back,-1,-1),
         apparent_i=match$0[2],
         acc$0=match$0[1],
         match$1=loop(acc$0,apparent_i,t[6] - 1 | 0,actual_front - 1 | 0,-1),
         acc$1=match$1[1];
        return acc$1}
      if(caml_call2(_Np_,actual_front,actual_back))
       {var
         match$2=loop(init,apparent_front,actual_front,actual_back + 1 | 0,1),
         acc$2=match$2[1];
        return acc$2}
      var
       match$3=loop(init,apparent_front,actual_front,t[6],1),
       apparent_i$0=match$3[2],
       acc$3=match$3[1],
       match$4=loop(acc$3,apparent_i$0,0,actual_back + 1 | 0,1),
       acc$4=match$4[1];
      return acc$4}
    function fold$37(t,dir,init,f)
     {return foldi$4
              (t,dir,init,function(param,acc,v){return caml_call2(f,acc,v)})}
    function iteri$9(t,dir,f)
     {return foldi$4(t,dir,0,function(i,param,v){return caml_call2(f,i,v)})}
    function iter$43(t,dir,f)
     {return foldi$4(t,dir,0,function(param,_aF3_,v){return caml_call1(f,v)})}
    function fold$38(t,init,f){return fold$37(t,250975701,init,f)}
    function foldi$5(t,init,f){return foldi$4(t,250975701,init,f)}
    function iteri$10(t,f){return iteri$9(t,250975701,f)}
    function iteri_internal(t,f)
     {var _aF1_=1 - is_empty$20(t);
      if(_aF1_)
       {var
         actual_front=actual_front_index_when_not_em(t),
         actual_back=actual_back_index_when_not_emp(t),
         loop=
          function(real_i,stop_pos)
           {var real_i$0=real_i;
            for(;;)
             {var _aF2_=caml_call2(_Ns_,real_i$0,stop_pos);
              if(_aF2_)
               {caml_call2(f,t[1],real_i$0);
                var real_i$1=real_i$0 + 1 | 0,real_i$0=real_i$1;
                continue}
              return _aF2_}};
        return caml_call2(_Np_,actual_front,actual_back)
                ?loop(actual_front,actual_back + 1 | 0)
                :(loop(actual_front,t[6]),loop(0,actual_back + 1 | 0))}
      return _aF1_}
    function iter$44(t,f)
     {return iteri_internal
              (t,
               function(arr,i)
                {return caml_call1(f,caml_call2(get_some_exn,arr,i))})}
    function clear$5(t)
     {if(t[7])
       iteri_internal(t,unsafe_set_none);
      else
       t[1] = caml_call1(create$46,8);
      t[2] = 0;
      t[3] = 1;
      t[5] = 0;
      t[6] = caml_call1(length$24,t[1]);
      return 0}
    var
     iter$45=[0,-198771759,iter$44],
     length$26=[0,-198771759,length$25],
     C$2=caml_call1(include$7[16],[0,fold$38,iter$45,length$26]),
     _aCM_=C$2[10],
     _aCN_=C$2[11],
     _aCO_=C$2[8],
     _aCP_=C$2[1],
     _aCQ_=C$2[9],
     _aCR_=C$2[13],
     _aCS_=C$2[12],
     _aCT_=C$2[14],
     _aCU_=C$2[16],
     _aCV_=C$2[17],
     _aCW_=C$2[6],
     _aCX_=C$2[7];
    function blit$5(new_arr,t)
     {if(is_empty$20(t))throw [0,Assert_failure,_aCY_];
      var
       actual_front=actual_front_index_when_not_em(t),
       actual_back=actual_back_index_when_not_emp(t),
       old_arr=t[1];
      if(caml_call2(_Np_,actual_front,actual_back))
       caml_call5(blit$4,old_arr,actual_front,new_arr,0,t[5]);
      else
       {var break_pos=caml_call1(length$24,old_arr) - actual_front | 0;
        caml_call5(blit$4,old_arr,actual_front,new_arr,0,break_pos);
        caml_call5(blit$4,old_arr,0,new_arr,break_pos,actual_back + 1 | 0)}
      t[3] = t[5];
      t[1] = new_arr;
      t[6] = caml_call1(length$24,new_arr);
      t[2] = caml_call1(length$24,new_arr) - 1 | 0;
      if(caml_call2(_Nr_,t[2],t[3]))return 0;
      throw [0,Assert_failure,_aCZ_]}
    function maybe_shrink_underlying(t)
     {var _aFY_=1 - t[7];
      if(_aFY_)
       var
        _aFZ_=caml_call2(_Nr_,t[6],10),
        _aF0_=_aFZ_?caml_call2(_Nr_,t[6] / 3 | 0,t[5]):_aFZ_;
      else
       var _aF0_=_aFY_;
      if(_aF0_)
       {var new_arr=caml_call1(create$46,t[6] / 2 | 0);
        return blit$5(new_arr,t)}
      return _aF0_}
    function grow_underlying(t)
     {var new_arr=caml_call1(create$46,t[6] * 2 | 0);return blit$5(new_arr,t)}
    function enqueue_back(t,v)
     {if(caml_call2(_Nq_,t[2],t[3]))grow_underlying(t);
      caml_call3(set_some,t[1],t[3],v);
      var _aFX_=caml_call2(_Nq_,t[3],t[6] - 1 | 0)?0:t[3] + 1 | 0;
      t[3] = _aFX_;
      t[5] = t[5] + 1 | 0;
      return 0}
    function enqueue_front$0(t,v)
     {if(caml_call2(_Nq_,t[2],t[3]))grow_underlying(t);
      caml_call3(set_some,t[1],t[2],v);
      var _aFW_=caml_call2(_Nq_,t[2],0)?t[6] - 1 | 0:t[2] - 1 | 0;
      t[2] = _aFW_;
      t[4] = t[4] - 1 | 0;
      t[5] = t[5] + 1 | 0;
      return 0}
    function enqueue$2(t,back_or_front,v)
     {return 109975721 <= back_or_front?enqueue_front$0(t,v):enqueue_back(t,v)}
    function peek_front_nonempty(t)
     {var _aFV_=actual_front_index_when_not_em(t);
      return caml_call2(get_some_exn,t[1],_aFV_)}
    function peek_front_exn(t)
     {return is_empty$20(t)
              ?caml_call1(_Fb_,cst_Deque_peek_front_exn_passe)
              :peek_front_nonempty(t)}
    function peek_front(t){return is_empty$20(t)?0:[0,peek_front_nonempty(t)]}
    function peek_back_nonempty(t)
     {var _aFU_=actual_back_index_when_not_emp(t);
      return caml_call2(get_some_exn,t[1],_aFU_)}
    function peek_back_exn$0(t)
     {return is_empty$20(t)
              ?caml_call1(_Fb_,cst_Deque_peek_back_exn_passed)
              :peek_back_nonempty(t)}
    function peek_back$0(t){return is_empty$20(t)?0:[0,peek_back_nonempty(t)]}
    function peek$1(t,back_or_front)
     {return 109975721 <= back_or_front?peek_front(t):peek_back$0(t)}
    function dequeue_front_nonempty(t)
     {var
       i=actual_front_index_when_not_em(t),
       res=caml_call2(get_some_exn,t[1],i);
      caml_call2(set_none,t[1],i);
      t[2] = i;
      t[4] = t[4] + 1 | 0;
      t[5] = t[5] - 1 | 0;
      maybe_shrink_underlying(t);
      return res}
    function dequeue_front_exn(t)
     {return is_empty$20(t)
              ?caml_call1(_Fb_,cst_Deque_dequeue_front_exn_pa)
              :dequeue_front_nonempty(t)}
    function dequeue_front(t)
     {return is_empty$20(t)?0:[0,dequeue_front_nonempty(t)]}
    function dequeue_back_nonempty(t)
     {var
       i=actual_back_index_when_not_emp(t),
       res=caml_call2(get_some_exn,t[1],i);
      caml_call2(set_none,t[1],i);
      t[3] = i;
      t[5] = t[5] - 1 | 0;
      maybe_shrink_underlying(t);
      return res}
    function dequeue_back_exn$0(t)
     {return is_empty$20(t)
              ?caml_call1(_Fb_,cst_Deque_dequeue_back_exn_pas)
              :dequeue_back_nonempty(t)}
    function dequeue_back$0(t)
     {return is_empty$20(t)?0:[0,dequeue_back_nonempty(t)]}
    function dequeue_exn$2(t,back_or_front)
     {return 109975721 <= back_or_front
              ?dequeue_front_exn(t)
              :dequeue_back_exn$0(t)}
    function dequeue$2(t,back_or_front)
     {return 109975721 <= back_or_front?dequeue_front(t):dequeue_back$0(t)}
    function drop_gen(opt,dequeue,t)
     {if(opt)var sth=opt[1],n=sth;else var n=1;
      if(caml_call2(_Ns_,n,0))caml_call3(_Po_,_aC0_,n,0);
      var n$0=n;
      for(;;)
       {var _aFS_=caml_call2(_Nr_,n$0,0);
        if(_aFS_)
         {var match=caml_call1(dequeue,t);
          if(match){var n$1=n$0 - 1 | 0,n$0=n$1;continue}
          var _aFT_=0}
        else
         var _aFT_=_aFS_;
        return _aFT_}}
    function drop_front$0(n,t){return drop_gen(n,dequeue_front,t)}
    function drop_back$0(n,t){return drop_gen(n,dequeue_back$0,t)}
    function drop$0(n,t,back_or_front)
     {return 109975721 <= back_or_front?drop_front$0(n,t):drop_back$0(n,t)}
    function assert_not_empty(t,name)
     {var _aFR_=is_empty$20(t);
      return _aFR_?caml_call3(failwithf$0,_aC1_,name,0):_aFR_}
    function true_index_exn(t,i)
     {var
       i_from_zero=i - t[4] | 0,
       _aFP_=caml_call2(_Ns_,i_from_zero,0),
       _aFQ_=_aFP_ || caml_call2(_Np_,t[5],i_from_zero);
      if(_aFQ_)
       {assert_not_empty(t,cst_Deque_true_index_exn);
        var
         apparent_front=t[4],
         apparent_back=apparent_back_index_when_not_e(t);
        caml_call5(_Po_,_aC2_,i,apparent_front,apparent_back,0)}
      var true_i=(t[2] + 1 | 0) + i_from_zero | 0;
      return caml_call2(_No_,true_i,t[6])?true_i - t[6] | 0:true_i}
    function get$8(t,i)
     {var _aFO_=true_index_exn(t,i);
      return caml_call2(get_some_exn,t[1],_aFO_)}
    function get_opt(t,i)
     {try {var _aFM_=[0,get$8(t,i)];return _aFM_}catch(_aFN_){return 0}}
    function set_exn$0(t,i,v)
     {var _aFL_=true_index_exn(t,i);return caml_call3(set_some,t[1],_aFL_,v)}
    function to_array$13(t)
     {var match=peek_front(t);
      if(match)
       {var front=match[1],arr=caml_call2(create,t[5],front);
        fold$38
         (t,
          0,
          function(i,v){caml_check_bound(arr,i)[1 + i] = v;return i + 1 | 0});
        return arr}
      return [0]}
    function of_array$8(arr)
     {var t=create$47([0,arr.length - 1 + 1 | 0],0,0);
      caml_call2(iter,arr,function(v){return enqueue_back(t,v)});
      return t}
    var
     _aC3_=caml_call1(Bin_prot_Shape[3][1],cst_a$102),
     _aC4_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_deque_ml_448_17),
     _aC5_=caml_call2(Bin_prot_Shape[15],_aC4_,_aC3_),
     _aC6_=[0,caml_call1(Bin_prot_Shape[3][1],cst_a$103),0],
     _aC7_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_el$19),_aC6_,_aC5_],0],
     _aC8_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_deque_ml_448_4),
     group$158=caml_call2(Bin_prot_Shape[6],_aC8_,_aC7_);
    function bin_shape_el$5(a)
     {var _aFK_=caml_call1(Bin_prot_Shape[2][1],cst_el$20);
      return caml_call1
              (caml_call2(Bin_prot_Shape[14],group$158,_aFK_),[0,a,0])}
    function bin_size_el$5(size_of_a){return size_of_a}
    function bin_write_el$5(write_a){return write_a}
    function bin_read_el$5(of_a){return of_a}
    var
     caller_identity$5=
      caml_call1(Bin_prot_Shape[5][1],cst_34c1e9ca_4992_11e6_a686_8b);
    function iter$46(t,f){return iter$44(t,f)}
    function init$11(len,next)
     {var t=create$47([0,len],0,0),_aFI_=len - 1 | 0,_aFH_=0;
      if(! (_aFI_ < 0))
       {var i=_aFH_;
        for(;;)
         {var x=caml_call1(next,0);
          enqueue_back(t,x);
          var _aFJ_=i + 1 | 0;
          if(_aFI_ !== i){var i=_aFJ_;continue}
          break}}
      return t}
    var
     include$176=
      caml_call1
       (Bin_prot_Utils[16],
        [0,
         caller_identity$5,
         module_name$18,
         length$25,
         iter$46,
         init$11,
         bin_size_el$5,
         bin_write_el$5,
         bin_read_el$5,
         bin_shape_el$5]),
     bin_shape_t$152=include$176[1],
     bin_size_t$99=include$176[2],
     bin_write_t$100=include$176[3],
     bin_read_t$197=include$176[4],
     bin_read_t$198=include$176[5],
     bin_writer_t$126=include$176[6],
     bin_reader_t$126=include$176[7],
     bin_t$126=include$176[8];
    function t_of_sexp$122(f,sexp)
     {return of_array$8(caml_call2(array_of_sexp,f,sexp))}
    function sexp_of_t$149(f,t)
     {return caml_call2(sexp_of_array,f,to_array$13(t))}
    function t_sexp_grammar$41(elt_grammar)
     {var _aFG_=caml_call1(_k8_,elt_grammar);
      return caml_call1(Sexplib_Sexp_grammar[1],_aFG_)}
    function back_index_exn(t)
     {assert_not_empty(t,cst_Deque_back_index_exn);
      return apparent_back_index_when_not_e(t)}
    function front_index_exn(t)
     {assert_not_empty(t,cst_Deque_front_index_exn);return t[4]}
    function get$9(t,i){return get$8(t,front_index_exn(t) + i | 0)}
    var
     For_test$0=[0,of_array$8],
     Binary_searchable=
      caml_call1
       (Base_for_tests_Test_binary_sea[4],[0,get$9,length$25,For_test$0]);
    function binary_search$8(pos,len,t,compare,how,v)
     {if(pos)var pos$0=pos[1],pos$1=[0,pos$0 - t[4] | 0];else var pos$1=0;
      var match=caml_call6(Binary_searchable[1],pos$1,len,t,compare,how,v);
      if(match)
       {var untranslated_i=match[1];return [0,t[4] + untranslated_i | 0]}
      return 0}
    function binary_search_segmented$8(pos,len,t,segment_of,how)
     {if(pos)var pos$0=pos[1],pos$1=[0,pos$0 - t[4] | 0];else var pos$1=0;
      var match=caml_call5(Binary_searchable[2],pos$1,len,t,segment_of,how);
      if(match)
       {var untranslated_i=match[1];return [0,t[4] + untranslated_i | 0]}
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$520);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Deque$0);
    var
     Core_Deque=
      [0,
       bin_shape_t$152,
       bin_size_t$99,
       bin_write_t$100,
       bin_read_t$197,
       bin_read_t$198,
       bin_writer_t$126,
       bin_reader_t$126,
       bin_t$126,
       t_of_sexp$122,
       sexp_of_t$149,
       t_sexp_grammar$41,
       binary_search$8,
       binary_search_segmented$8,
       _aCP_,
       length$25,
       is_empty$20,
       iter$44,
       fold$38,
       _aCW_,
       _aCX_,
       _aCO_,
       _aCQ_,
       _aCM_,
       _aCN_,
       _aCS_,
       _aCR_,
       _aCT_,
       to_array$13,
       _aCU_,
       _aCV_,
       create$47,
       of_array$8,
       front_index,
       front_index_exn,
       back_index,
       back_index_exn,
       get_opt,
       get$8,
       peek$1,
       peek_front,
       peek_front_exn,
       peek_back$0,
       peek_back_exn$0,
       set_exn$0,
       iter$43,
       iteri$10,
       iteri$9,
       fold$37,
       foldi$5,
       foldi$4,
       enqueue$2,
       enqueue_front$0,
       enqueue_back,
       clear$5,
       drop$0,
       drop_front$0,
       drop_back$0,
       dequeue$2,
       dequeue_exn$2,
       dequeue_front,
       dequeue_front_exn,
       dequeue_back$0,
       dequeue_back_exn$0];
    caml_register_global(5467,Core_Deque,"Core__Deque");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Debug);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$521);
    caml_call1(Expect_test_collector[5][1],cst_core_src_debug_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$522,cst$289);
    function eprint(message){return caml_call2(_fC_,_aC9_,message)}
    function eprint_s(sexp){return eprint(caml_call2(to_string_hum,0,sexp))}
    function eprints(arg0_001,arg1_002,sexp_of_a)
     {var
       res0_003=caml_call1(_at_,arg0_001),
       res1_004=caml_call1(sexp_of_a,arg1_002);
      return eprint_s([1,[0,res0_003,[0,res1_004,0]]])}
    function eprintf(format){return caml_call2(_fz_,eprint,format)}
    function Make$14(symbol)
     {var check_invariant=[0,1],show_messages=[0,1];
      function debug
       (invariant,module_name,name,ts,arg,sexp_of_arg,sexp_of_result,f)
       {if(show_messages[1])
         eprints
          (caml_call2
            (include$41[54],_aC__,[0,module_name,[0,cst$290,[0,name,0]]]),
           arg,
           sexp_of_arg);
        if(check_invariant[1])
         try
          {caml_call2(include$25[9],ts,invariant)}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           failwiths
            (0,
             _aC$_,
             cst_invariant_pre_condition_fa,
             [0,name,exn],
             function(param)
              {var
                arg1_006=param[2],
                arg0_005=param[1],
                res0_007=caml_call1(_at_,arg0_005),
                res1_008=caml_call1(sexp_of_t,arg1_006);
               return [1,[0,res0_007,[0,res1_008,0]]]})}
        var result_or_exn=caml_call1(_h9_,f);
        if(check_invariant[1])
         try
          {caml_call2(include$25[9],ts,invariant)}
         catch(exn)
          {exn = caml_wrap_exception(exn);
           failwiths
            (0,
             _aDa_,
             cst_invariant_post_condition_f,
             [0,name,exn],
             function(param)
              {var
                arg1_010=param[2],
                arg0_009=param[1],
                res0_011=caml_call1(_at_,arg0_009),
                res1_012=caml_call1(sexp_of_t,arg1_010);
               return [1,[0,res0_011,[0,res1_012,0]]]})}
        if(show_messages[1])
         {var
           _aFF_=
            function(x_013)
             {return caml_call3(_hy_,sexp_of_result,sexp_of_t,x_013)};
          eprints
           (caml_call2
             (include$41[54],_aDc_,[0,module_name,[0,cst$291,[0,name,_aDb_]]]),
            result_or_exn,
            _aFF_)}
        return caml_call1(_hU_,result_or_exn)}
      return [0,check_invariant,show_messages,debug]}
    var should_print_backtrace=[0,0];
    function am_internal(here,message)
     {caml_call2(_fC_,_aDd_,caml_call1(_my_,here));
      if(should_print_backtrace[1])
       {var _aFE_=caml_call2(Base_Backtrace[2],0,0);
        caml_call2
         (_fC_,
          _aDe_,
          caml_call2(to_string_hum,0,caml_call1(Base_Backtrace[1],_aFE_)))}
      if(message){var message$0=message[1];caml_call2(_fC_,_aDf_,message$0)}
      return caml_call1(_fC_,_aDg_)}
    function am(here){return am_internal(here,0)}
    function amf(here,fmt)
     {return caml_call2
              (_fz_,function(string){return am_internal(here,[0,string])},fmt)}
    function ams(here,arg0_014,arg1_015,sexp_of_a)
     {var
       res0_016=caml_call1(_at_,arg0_014),
       res1_017=caml_call1(sexp_of_a,arg1_015);
      return am_internal
              (here,
               [0,caml_call2(to_string_hum,0,[1,[0,res0_016,[0,res1_017,0]]])])}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$523);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Debug$0);
    var
     Core_Debug=
      [0,
       eprint,
       eprints,
       eprint_s,
       eprintf,
       Make$14,
       am,
       ams,
       amf,
       should_print_backtrace];
    caml_register_global(5469,Core_Debug,"Core__Debug");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Core_sys);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$524);
    caml_call1(Expect_test_collector[5][1],cst_core_src_core_sys_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$525,cst$292);
    var
     _aDh_=include$15[1],
     _aDi_=include$15[2],
     _aDj_=include$15[3],
     _aDk_=include$15[4],
     _aDl_=include$15[5],
     _aDm_=include$15[6],
     _aDn_=include$15[7],
     _aDo_=include$15[8],
     _aDp_=include$15[9],
     _aDq_=include$15[10],
     _aDr_=include$15[11],
     _aDs_=include$15[12],
     _aDt_=include$15[13],
     _aDu_=include$15[14],
     _aDv_=include$15[15],
     _aDw_=include$15[16],
     _aDx_=include$15[17],
     _aDy_=include$15[18],
     _aDz_=include$15[19],
     _aDA_=include$15[20];
    function unix_quote(x)
     {if
       (!
        caml_call1(_A1_,x)
        &&
        caml_call2
         (_A7_,
          x,
          function(param)
           {var switch$0=0;
            if(62 <= param)
             {var _aFD_=param - 91 | 0;
              if(5 < _aFD_ >>> 0)
               {if(! (58 < _aFD_ + 27 >>> 0))switch$0 = 1}
              else
               if(4 === _aFD_)switch$0 = 1}
            else
             if(43 <= param)
              {if(1 < param - 59 >>> 0)switch$0 = 1}
             else
              if(37 === param)switch$0 = 1;
            return switch$0?1:0}))
       {var _aFB_=caml_string_compare(x,cst_function$0),switch$0=0;
        if(0 <= _aFB_)
         {if
           (0
            <
            _aFB_
            &&
            caml_string_notequal(x,cst_if$1)
            &&
            caml_string_notequal(x,cst_in)
            &&
            caml_string_notequal(x,cst_nocorrect)
            &&
            caml_string_notequal(x,cst_repeat)
            &&
            caml_string_notequal(x,cst_select)
            &&
            caml_string_notequal(x,cst_then)
            &&
            caml_string_notequal(x,cst_time)
            &&
            caml_string_notequal(x,cst_until)
            &&
            caml_string_notequal(x,cst_while))
           switch$0 = 1}
        else
         {var _aFC_=caml_string_compare(x,cst_else);
          if(0 <= _aFC_)
           {if
             (0
              <
              _aFC_
              &&
              caml_string_notequal(x,cst_esac)
              &&
              caml_string_notequal(x,cst_fi)
              &&
              caml_string_notequal(x,cst_for)
              &&
              caml_string_notequal(x,cst_foreach))
             switch$0 = 1}
          else
           if
            (caml_string_notequal(x,cst_case)
             &&
             caml_string_notequal(x,cst_coproc)
             &&
             caml_string_notequal(x,cst_do)
             &&
             caml_string_notequal(x,cst_done)
             &&
             caml_string_notequal(x,cst_elif))
            switch$0 = 1}
        return switch$0?x:caml_call1(_agw_,x)}
      return caml_call1(_agw_,x)}
    var quote=caml_string_notequal(Stdlib_Sys[4],cst_Unix)?_agw_:unix_quote;
    function concat_quoted(split_command)
     {return caml_call2(_Bq_,_aDB_,caml_call2(_qF_,split_command,quote))}
    var Break=Stdlib_Sys[44],Private$5=[0,unix_quote];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$526);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Core_sys$0);
    var
     Core_Core_sys=
      [0,
       _aDh_,
       _aDi_,
       _aDj_,
       _aDk_,
       _aDl_,
       _aDm_,
       _aDn_,
       _aDo_,
       _aDp_,
       _aDq_,
       _aDr_,
       _aDs_,
       _aDt_,
       _aDu_,
       _aDv_,
       _aDw_,
       _aDx_,
       _aDy_,
       _aDz_,
       _aDA_,
       quote,
       concat_quoted,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       204889266,
       Break,
       Private$5];
    caml_register_global(5470,Core_Core_sys,"Core__Core_sys");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Bag_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$527);
    caml_call1(Expect_test_collector[5][1],cst_core_src_bag_intf_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$528,cst$293);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$529);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Bag_intf$0);
    var Core_Bag_intf=[0];
    caml_register_global(5471,Core_Bag_intf,"Core__Bag_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Bag);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$530);
    caml_call1(Expect_test_collector[5][1],cst_core_src_bag_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$531,cst$294);
    function add_unit(t,v){add$9(t,v);return 0}
    function elts(t)
     {return fold_elt(t,0,function(acc,elt){return [0,elt,acc]})}
    function until_empty$0(t,f)
     {function loop(param)
       {function _aFA_(v){caml_call1(f,v);return loop(0)}
        return caml_call2(_xK_,remove_one(t),_aFA_)}
      return loop(0)}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$532);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Bag$0);
    var
     Core_Bag=
      [0,
       [0,Elt[2],Elt[4],Elt[1]],
       t_of_sexp$26,
       sexp_of_t$33,
       _yy_,
       length$12,
       is_empty$11,
       iter$16,
       _yw_,
       _yC_,
       _yD_,
       _yt_,
       _yx_,
       _yr_,
       _ys_,
       _yu_,
       _yv_,
       to_list$7,
       _yz_,
       _yA_,
       _yB_,
       invariant$3,
       create$13,
       add$9,
       add_unit,
       mem_elt,
       remove$9,
       choose$4,
       remove_one,
       clear$1,
       filter_inplace$1,
       iter_elt,
       find_elt,
       until_empty$0,
       transfer,
       of_list$7,
       elts,
       unchecked_iter];
    caml_register_global(5472,Core_Bag,"Core__Bag");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Bigbuffer_internal);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$533);
    caml_call1(Expect_test_collector[5][1],cst_core_src_bigbuffer_interna);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$534,cst$295);
    function sexp_of_t$150(param)
     {var
       bstr_002=param[1],
       pos_004=param[2],
       len_006=param[3],
       init_008=param[4],
       arg_009=caml_call1(_QW_,init_008),
       bnds_001=[0,[1,[0,_aDC_,[0,arg_009,0]]],0],
       arg_007=caml_call1(sexp_of_t$0,len_006),
       bnds_001$0=[0,[1,[0,_aDD_,[0,arg_007,0]]],bnds_001],
       arg_005=caml_call1(sexp_of_t$0,pos_004),
       bnds_001$1=[0,[1,[0,_aDE_,[0,arg_005,0]]],bnds_001$0],
       arg_003=caml_call1(_QW_,bstr_002),
       bnds_001$2=[0,[1,[0,_aDF_,[0,arg_003,0]]],bnds_001$1];
      return [1,bnds_001$2]}
    function resize(buf,more)
     {var
       min_len=buf[3] + more | 0,
       new_len=min_len + min_len | 0,
       new_buf=arg(0,new_len);
      caml_call6(bigstring_bigstring,buf[1],0,[0,buf[2]],new_buf,0,0);
      buf[1] = new_buf;
      buf[3] = new_len;
      return 0}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$535);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Bigbuffer_internal$0);
    var include$177=[0,sexp_of_t$150,resize];
    caml_register_global(5473,include$177,"Core__Bigbuffer_internal");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Bigbuffer);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$536);
    caml_call1(Expect_test_collector[5][1],cst_core_src_bigbuffer_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$537,cst$296);
    function internal(t){return t}
    function length$27(t){return t[2]}
    function create$48(n)
     {var n$0=caml_call2(_aR_,1,n),bstr=arg(0,n$0);return [0,bstr,0,n$0,bstr]}
    function contents(buf){return caml_call3(_Q7_,0,[0,buf[2]],buf[1])}
    function contents_bytes(buf){return caml_call3(_Q8_,0,[0,buf[2]],buf[1])}
    function big_contents(buf){return caml_call3(_Re_,0,[0,buf[2]],buf[1])}
    function volatile_contents(buf){return buf[1]}
    function add_char(buf,c)
     {var pos=buf[2];
      if(buf[3] <= pos)resize(buf,1);
      caml_ba_set_1(buf[1],pos,c);
      buf[2] = pos + 1 | 0;
      return 0}
    function create$49(len){return caml_call1(_Dw_,len)}
    function unsafe_blit$2(src,src_pos,dst,dst_pos,len)
     {return caml_call5(_Ri_[3],src[1],src_pos,dst,dst_pos,len)}
    var _aDG_=[0,create$49,caml_ml_bytes_length,_DD_,_DE_,unsafe_blit$2];
    function create$50(len)
     {var t=create$48(len),_aFy_=1;
      if(! (len < 1))
       {var for$0=_aFy_;
        for(;;)
         {add_char(t,97);
          var _aFz_=for$0 + 1 | 0;
          if(len !== for$0){var for$0=_aFz_;continue}
          break}}
      return t}
    function set$16(t,i,c){return caml_ba_set_1(t[1],i,c)}
    function get$10(t,i){return caml_ba_get_1(t[1],i)}
    var _aDH_=[0,create$50,length$27,get$10,set$16];
    function of_bool$1(b){return b?97:98}
    var
     include$178=
      caml_call1
       (caml_call1
         (caml_call1(Base_for_tests_Test_blit[6],[0,equal_char,of_bool$1]),
          _aDH_),
        _aDG_),
     blit$6=include$178[1],
     blito$4=include$178[2],
     unsafe_blit$3=include$178[3],
     sub$8=include$178[4],
     subo$4=include$178[5],
     To_string=caml_call1(caml_call1(Base_Blit[3],[0]),include$178);
    function nth$7(buf,pos)
     {if(0 <= pos && ! (buf[2] <= pos))return caml_ba_get_1(buf[1],pos);
      return caml_call1(_a4_,cst_Bigbuffer_nth)}
    function clear$6(buf){buf[2] = 0;return 0}
    function reset(buf)
     {buf[2] = 0;buf[1] = buf[4];buf[3] = caml_call1(_Ra_,buf[1]);return 0}
    function add_substring(buf,src,src_pos,len)
     {var _aFv_=src_pos < 0?1:0;
      if(_aFv_)
       var _aFw_=_aFv_;
      else
       var
        _aFx_=len < 0?1:0,
        _aFw_=_aFx_ || ((caml_ml_string_length(src) - len | 0) < src_pos?1:0);
      if(_aFw_)caml_call1(_a4_,cst_Bigbuffer_add_substring);
      var new_pos=buf[2] + len | 0;
      if(buf[3] < new_pos)resize(buf,len);
      caml_call5(_Rh_[1],src,src_pos,buf[1],buf[2],len);
      buf[2] = new_pos;
      return 0}
    function add_subbytes(buf,src,src_pos,len)
     {var _aFs_=src_pos < 0?1:0;
      if(_aFs_)
       var _aFt_=_aFs_;
      else
       var
        _aFu_=len < 0?1:0,
        _aFt_=_aFu_ || ((caml_ml_bytes_length(src) - len | 0) < src_pos?1:0);
      if(_aFt_)caml_call1(_a4_,cst_Bigbuffer_add_subbytes);
      var new_pos=buf[2] + len | 0;
      if(buf[3] < new_pos)resize(buf,len);
      caml_call5(_Rj_[1],src,src_pos,buf[1],buf[2],len);
      buf[2] = new_pos;
      return 0}
    function add_bigstring(buf,src)
     {var len=caml_call1(_Ra_,src),new_pos=buf[2] + len | 0;
      if(buf[3] < new_pos)resize(buf,len);
      caml_call6(bigstring_bigstring,src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_string(buf,src)
     {var len=caml_ml_string_length(src),new_pos=buf[2] + len | 0;
      if(buf[3] < new_pos)resize(buf,len);
      caml_call6(_Rh_[2],src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_bytes(buf,src)
     {var len=caml_ml_bytes_length(src),new_pos=buf[2] + len | 0;
      if(buf[3] < new_pos)resize(buf,len);
      caml_call6(_Rj_[2],src,0,[0,len],buf[1],[0,buf[2]],0);
      buf[2] = new_pos;
      return 0}
    function add_buffer(buf_dst,buf_src)
     {var len=buf_src[2],dst_pos=buf_dst[2],new_pos=dst_pos + len | 0;
      if(buf_dst[3] < new_pos)resize(buf_dst,len);
      caml_call6
       (bigstring_bigstring,buf_src[1],0,[0,len],buf_dst[1],[0,dst_pos],0);
      buf_dst[2] = new_pos;
      return 0}
    function add_bin_prot(t,writer,x)
     {try
       {var pos=caml_call3(writer[2],t[1],t[2],x),new_pos=pos}
      catch(_aFr_)
       {var size=caml_call1(writer[1],x);
        if(t[3] < (t[2] + size | 0))resize(t,size);
        var new_pos=caml_call3(writer[2],t[1],t[2],x)}
      t[2] = new_pos;
      return 0}
    function add_substitute(buf,f,s)
     {var lim$1=caml_ml_string_length(s),previous=32,i$6=0;
      for(;;)
       {var _aFq_=i$6 < lim$1?1:0;
        if(_aFq_)
         {var current=caml_string_get(s,i$6);
          if(36 === current)
           {if(caml_call2(equal_char,previous,92))
             {add_char(buf,current);
              var i$7=i$6 + 1 | 0,previous=current,i$6=i$7;
              continue}
            var
             start$0=i$6 + 1 | 0,
             opening=caml_string_get(s,start$0),
             switch$0=0;
            if(40 !== opening && 123 !== opening)
             {var i$5=start$0 + 1 | 0,lim$0=caml_ml_string_length(s),i$3=i$5;
              for(;;)
               {if(lim$0 <= i$3)
                 var stop=lim$0;
                else
                 {var match=caml_string_get(s,i$3),switch$1=0;
                  if(95 <= match)
                   {if(123 <= match)
                     {if(192 <= match)
                       switch(match - 192 | 0)
                        {case 0:
                         case 1:
                         case 2:
                         case 7:
                         case 8:
                         case 9:
                         case 10:
                         case 11:
                         case 14:
                         case 15:
                         case 20:
                         case 25:
                         case 27:
                         case 28:
                         case 32:
                         case 33:
                         case 34:
                         case 39:
                         case 40:
                         case 41:
                         case 42:
                         case 43:
                         case 46:
                         case 47:
                         case 52:
                         case 57:
                         case 59:
                         case 60:switch$1 = 1;break
                         }}
                    else
                     if(96 !== match)switch$1 = 1}
                  else
                   if(58 <= match)
                    {if(! (25 < match - 65 >>> 0))switch$1 = 1}
                   else
                    if(48 <= match)switch$1 = 1;
                  if(switch$1){var i$4=i$3 + 1 | 0,i$3=i$4;continue}
                  var stop=i$3}
                var
                 match$0=
                  [0,caml_call3(_AY_,s,start$0,stop - start$0 | 0),stop];
                switch$0 = 1;
                break}}
            if(! switch$0)
             {var start=start$0 + 1 | 0,k$2=0;
              if(40 === opening)
               var _aFp_=41;
              else
               {if(123 !== opening)throw [0,Assert_failure,_aDI_];
                var _aFp_=125}
              var lim=caml_ml_string_length(s),k=k$2,i=start;
              for(;;)
               {if(lim <= i)
                 {var
                   _aFl_=[0,caml_call1(Sexplib0_Sexp_conv[7],s),0],
                   _aFm_=
                    [0,[1,[0,_aDJ_,[0,caml_call1(sexp_of_t$0,start),0]]],_aFl_],
                   _aFn_=[0,[1,[0,_aDK_,[0,caml_call1(_s_,_aFp_),0]]],_aFm_],
                   _aFo_=[0,[1,[0,_aDL_,[0,caml_call1(_s_,opening),0]]],_aFn_];
                  throw [0,
                         _e__,
                         [1,
                          [0,
                           caml_call1
                            (Sexplib0_Sexp_conv[7],cst_Bigbuffer_add_substitute_c),
                           _aFo_]]]}
                if(caml_call2(equal_char,caml_string_get(s,i),opening))
                 {var i$0=i + 1 | 0,k$0=k + 1 | 0,k=k$0,i=i$0;continue}
                if(! caml_call2(equal_char,caml_string_get(s,i),_aFp_))
                 {var i$2=i + 1 | 0,i=i$2;continue}
                if(0 !== k)
                 {var i$1=i + 1 | 0,k$1=k - 1 | 0,k=k$1,i=i$1;continue}
                var
                 match$0=
                  [0,
                   caml_call3(_AY_,s,start,(i - start$0 | 0) - 1 | 0),
                   i + 1 | 0];
                break}}
            var next_i=match$0[2],ident=match$0[1];
            add_string(buf,caml_call1(f,ident));
            var previous=32,i$6=next_i;
            continue}
          if(caml_call2(equal_char,previous,92))
           {add_char(buf,92);
            add_char(buf,current);
            var i$8=i$6 + 1 | 0,previous=current,i$6=i$8;
            continue}
          if(92 === current)
           {var i$9=i$6 + 1 | 0,previous=current,i$6=i$9;continue}
          add_char(buf,current);
          var i$10=i$6 + 1 | 0,previous=current,i$6=i$10;
          continue}
        return _aFq_}}
    function formatter_of_buffer(buf)
     {function _aFi_(_aFk_){return 0}
      function _aFj_(s,pos,len){return add_substring(buf,s,pos,len)}
      return caml_call2(Stdlib_Format[115],_aFj_,_aFi_)}
    function bprintf(buf)
     {var _aFf_=formatter_of_buffer(buf);
      function _aFg_(_aFh_){return 0}
      return caml_call2(Stdlib_Format[136],_aFg_,_aFf_)}
    var Format=[0,formatter_of_buffer,bprintf];
    function bprintf$0(buf)
     {return caml_call1(_fz_,function(_aFe_){return add_string(buf,_aFe_)})}
    var Printf=[0,bprintf$0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$538);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Bigbuffer$0);
    var
     Core_Bigbuffer=
      [0,
       sexp_of_t$150,
       create$48,
       contents,
       contents_bytes,
       blit$6,
       blito$4,
       unsafe_blit$3,
       sub$8,
       subo$4,
       To_string,
       nth$7,
       length$27,
       clear$6,
       reset,
       add_char,
       add_string,
       add_substring,
       add_bytes,
       add_subbytes,
       add_buffer,
       big_contents,
       volatile_contents,
       add_bigstring,
       add_bin_prot,
       add_substitute,
       Format,
       Printf,
       internal];
    caml_register_global(5476,Core_Bigbuffer,"Core__Bigbuffer");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Bigsubstring);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$539);
    caml_call1(Expect_test_collector[5][1],cst_core_src_bigsubstring_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$540,cst$297);
    var _aDM_=0;
    function create$51(_aFd_){return arg(_aDM_,_aFd_)}
    var
     get$11=caml_ba_get_1,
     blit$7=_afh_[8],
     blit_to_string$0=_afh_[5],
     blit_to_bytes$0=_afh_[5],
     blit_to_bigstring$0=_afh_[8],
     blit_from_string$0=_afh_[6],
     blit_from_bigstring$0=_afh_[8],
     include$179=
      F
       ([0,
         quickcheck_generator$14,
         quickcheck_observer$13,
         quickcheck_shrinker$13,
         create$51,
         _Ra_,
         blit$7,
         blit_to_bytes$0,
         blit_to_bigstring$0,
         blit_from_string$0,
         blit_from_bigstring$0,
         blit_to_string$0,
         get$11]),
     _aDN_=include$179[1],
     _aDO_=include$179[2],
     _aDP_=include$179[3],
     _aDQ_=include$179[4],
     _aDR_=include$179[5],
     _aDS_=include$179[6],
     _aDT_=include$179[7],
     _aDU_=include$179[8],
     _aDV_=include$179[9],
     _aDW_=include$179[10],
     _aDX_=include$179[11],
     _aDY_=include$179[12],
     _aDZ_=include$179[13],
     _aD0_=include$179[14],
     _aD1_=include$179[15],
     _aD2_=include$179[16],
     _aD3_=include$179[17],
     _aD4_=include$179[18],
     _aD5_=include$179[19],
     _aD6_=include$179[20],
     _aD7_=include$179[21],
     _aD8_=include$179[22],
     _aD9_=include$179[23],
     _aD__=include$179[24],
     _aD$_=include$179[25],
     _aEa_=include$179[26],
     _aEb_=include$179[27],
     _aEc_=include$179[28],
     _aEd_=include$179[29],
     _aEe_=include$179[30],
     _aEf_=include$179[31],
     _aEg_=include$179[32],
     _aEh_=include$179[33],
     _aEi_=include$179[34],
     _aEj_=include$179[35],
     _aEk_=include$179[36],
     _aEl_=include$179[37],
     _aEm_=include$179[38],
     _aEn_=include$179[39],
     _aEo_=include$179[40],
     _aEp_=include$179[41],
     _aEq_=include$179[42],
     _aEr_=include$179[43],
     _aEs_=include$179[44],
     _aEt_=include$179[45],
     _aEu_=include$179[46],
     _aEv_=include$179[47],
     _aEw_=include$179[48];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$541);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Bigsubstring$0);
    var
     Core_Bigsubstring=
      [0,
       _aDN_,
       _aDO_,
       _aDP_,
       _aDQ_,
       _aDR_,
       _aDS_,
       _aDT_,
       _aDU_,
       _aDV_,
       _aDW_,
       _aDX_,
       _aDY_,
       _aDZ_,
       _aD0_,
       _aD1_,
       _aD2_,
       _aD3_,
       _aD4_,
       _aD5_,
       _aD6_,
       _aD7_,
       _aD8_,
       _aD9_,
       _aD__,
       _aD$_,
       _aEa_,
       _aEb_,
       _aEc_,
       _aEd_,
       _aEe_,
       _aEf_,
       _aEg_,
       _aEh_,
       _aEi_,
       _aEj_,
       _aEk_,
       _aEl_,
       _aEm_,
       _aEn_,
       _aEo_,
       _aEp_,
       _aEq_,
       _aEr_,
       _aEs_,
       _aEt_,
       _aEu_,
       _aEv_,
       _aEw_];
    caml_register_global(5477,Core_Bigsubstring,"Core__Bigsubstring");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Bounded_index_intf);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$542);
    caml_call1(Expect_test_collector[5][1],cst_core_src_bounded_index_int);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$543,cst$298);
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$544);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Bounded_index_intf$0);
    var Core_Bounded_index_intf=[0];
    caml_register_global
     (5478,Core_Bounded_index_intf,"Core__Bounded_index_intf");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core_Bounded_index);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$545);
    caml_call1(Expect_test_collector[5][1],cst_core_src_bounded_index_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$546,cst$299);
    function Make$15(M)
     {var
       _aER_=M[1],
       _aEJ_=
        caml_call1
         (Bin_prot_Shape[8],
          [0,
           [0,cst_index,_YI_],
           [0,[0,cst_min_index,_YI_],[0,[0,cst_max_index,_YI_],0]]]),
       _aEK_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$299),0,_aEJ_],0],
       _aEL_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_bounded_index_ml_),
       group=caml_call2(Bin_prot_Shape[6],_aEL_,_aEK_),
       _aEM_=caml_call1(Bin_prot_Shape[2][1],cst_t$300),
       bin_shape_t=caml_call1(caml_call2(Bin_prot_Shape[14],group,_aEM_),0);
      function bin_size_t(param)
       {var
         v3=param[3],
         v2=param[2],
         v1=param[1],
         _aFa_=caml_call1(_Xx_,v1),
         size=caml_call2(Bin_prot_Common[23],0,_aFa_),
         _aFb_=caml_call1(_Xx_,v2),
         size$0=caml_call2(Bin_prot_Common[23],size,_aFb_),
         _aFc_=caml_call1(_Xx_,v3);
        return caml_call2(Bin_prot_Common[23],size$0,_aFc_)}
      function bin_write_t(buf,pos,param)
       {var
         v3=param[3],
         v2=param[2],
         v1=param[1],
         pos$0=caml_call3(_YK_,buf,pos,v1),
         pos$1=caml_call3(_YK_,buf,pos$0,v2);
        return caml_call3(_YK_,buf,pos$1,v3)}
      var bin_writer_t=[0,bin_size_t,bin_write_t];
      function bin_read_t(buf,pos_ref,vint)
       {return caml_call2
                (Bin_prot_Common[19],
                 cst_core_src_bounded_index_ml_$0,
                 pos_ref[1])}
      function bin_read_t$0(buf,pos_ref)
       {var
         v_index=caml_call2(_YM_,buf,pos_ref),
         v_min_index=caml_call2(_YM_,buf,pos_ref),
         v_max_index=caml_call2(_YM_,buf,pos_ref);
        return [0,v_index,v_min_index,v_max_index]}
      var
       bin_reader_t=[0,bin_read_t$0,bin_read_t],
       bin_t=[0,bin_shape_t,bin_writer_t,bin_reader_t];
      function compare$0(a_001,b_002)
       {if(caml_call2(Ppx_compare_lib[1],a_001,b_002))return 0;
        var n=caml_call2(compare,a_001[1],b_002[1]);
        if(0 === n)
         {var n$0=caml_call2(compare,a_001[2],b_002[2]);
          return 0 === n$0?caml_call2(compare,a_001[3],b_002[3]):n$0}
        return n}
      function hash_fold_t(hsv,arg)
       {var
         hsv$0=caml_call2(__4_,hsv,arg[1]),
         hsv$1=caml_call2(__4_,hsv$0,arg[2]);
        return caml_call2(__4_,hsv$1,arg[3])}
      function hash(x)
       {var hsv=caml_call2(Base_Hash[11],0,0),_aE$_=hash_fold_t(hsv,x);
        return caml_call1(Base_Hash[9],_aE$_)}
      function create(index,min,max)
       {if(! (index < min) && ! (max < index))return [0,index,min,max];
        var
         _aE8_=[0,[1,[0,_aEx_,[0,caml_call1(_$N_,max),0]]],0],
         _aE9_=[0,[1,[0,_aEy_,[0,caml_call1(_$N_,min),0]]],_aE8_],
         _aE__=[0,[1,[0,_aEz_,[0,caml_call1(_$N_,index),0]]],_aE9_];
        return caml_call1
                (_nX_,
                 [1,
                  [0,
                   caml_call1(Sexplib0_Sexp_conv[7],cst_index_out_of_bounds$0),
                   _aE__]])}
      function t_of_sexp(sexp_016)
       {if(1 === sexp_016[0])
         {var _aE2_=sexp_016[1];
          if(_aE2_)
           {var _aE3_=_aE2_[2];
            if(_aE3_)
             {var _aE4_=_aE3_[2];
              if(_aE4_)
               {var _aE5_=_aE4_[2];
                if(_aE5_)
                 {var _aE6_=_aE5_[2];
                  if(_aE6_)
                   {var _aE7_=_aE6_[2];
                    if(_aE7_ && ! _aE7_[2])
                     {var
                       arg5_009=_aE7_[1],
                       arg4_008=_aE6_[1],
                       arg3_007=_aE5_[1],
                       arg2_006=_aE4_[1],
                       arg1_005=_aE3_[1],
                       arg0_004=_aE2_[1],
                       res0_010=caml_call1(_$r_,arg0_004),
                       res1_011=caml_call1(_$M_,arg1_005),
                       res2_012=caml_call1(_$r_,arg2_006),
                       res3_013=caml_call1(_$M_,arg3_007),
                       res4_014=caml_call1(_$r_,arg4_008),
                       res5_015=caml_call1(_$M_,arg5_009);
                      return [0,
                              res0_010,
                              res1_011,
                              res2_012,
                              res3_013,
                              res4_014,
                              res5_015]}}}}}}}
        return caml_call3
                (Sexplib0_Sexp_conv_error[2],error_source_017$0,6,sexp_016)}
      function sexp_of_t(param)
       {var
         arg5_023=param[6],
         arg4_022=param[5],
         arg3_021=param[4],
         arg2_020=param[3],
         arg1_019=param[2],
         arg0_018=param[1],
         res0_024=caml_call1(_$s_,arg0_018),
         res1_025=caml_call1(_$N_,arg1_019),
         res2_026=caml_call1(_$s_,arg2_020),
         res3_027=caml_call1(_$N_,arg3_021),
         res4_028=caml_call1(_$s_,arg4_022),
         res5_029=caml_call1(_$N_,arg5_023);
        return [1,
                [0,
                 res0_024,
                 [0,
                  res1_025,
                  [0,res2_026,[0,res3_027,[0,res4_028,[0,res5_029,0]]]]]]]}
      var For_sexpable=[0,t_of_sexp,sexp_of_t];
      function to_sexpable(t){return [0,_aER_,t[1],cst_of,t[2],cst_to,t[3]]}
      function of_sexpable(param)
       {var
         max=param[6],
         to=param[5],
         min=param[4],
         of=param[3],
         index=param[2],
         label=param[1];
        if
         (caml_call2(equal$21,label,_aER_)
          &&
          caml_call2(equal$21,of,cst_of$0)
          &&
          caml_call2(equal$21,to,cst_to$0))
         return create(index,min,max);
        var
         _aE1_=
          [0,[1,[0,_aEA_,[0,caml_call1(Sexplib0_Sexp_conv[7],_aER_),0]]],0];
        return caml_call1
                (_nX_,
                 [1,
                  [0,
                   caml_call1(Sexplib0_Sexp_conv[7],cst_invalid_sexp_for_index),
                   _aE1_]])}
      var
       include=
        caml_call1
         (caml_call1(Stable[1][1],For_sexpable),[0,to_sexpable,of_sexpable]),
       t_of_sexp$0=include[1],
       sexp_of_t$0=include[2],
       include$0=caml_call1(_hd_[1][2],[0,compare$0,sexp_of_t$0]),
       _aEN_=include$0[1],
       _aEO_=
        [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$301),0,bin_shape_t],0],
       _aEP_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_bounded_index_ml_$1),
       group$0=caml_call2(Bin_prot_Shape[6],_aEP_,_aEO_),
       _aEQ_=caml_call1(Bin_prot_Shape[2][1],cst_t$302),
       bin_shape_t$0=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$0,_aEQ_),0),
       bin_writer_t$0=[0,bin_size_t,bin_write_t],
       bin_reader_t$0=[0,bin_read_t$0,bin_read_t],
       bin_t$0=[0,bin_shape_t$0,bin_writer_t$0,bin_reader_t$0],
       include$1=
        caml_call1
         (Stable$2[1][1],
          [0,
           bin_size_t,
           bin_write_t,
           bin_read_t$0,
           bin_read_t,
           bin_shape_t$0,
           bin_writer_t$0,
           bin_reader_t$0,
           bin_t$0,
           compare$0,
           t_of_sexp$0,
           sexp_of_t$0,
           _aEN_]),
       Map=include$1[1],
       Set=include$1[2],
       V1=
        [0,
         bin_shape_t,
         bin_size_t,
         bin_write_t,
         bin_writer_t,
         bin_read_t,
         bin_read_t$0,
         bin_reader_t,
         bin_t,
         compare$0,
         hash_fold_t,
         hash,
         create,
         For_sexpable,
         t_of_sexp$0,
         sexp_of_t$0,
         _aEN_,
         Map,
         Set],
       Stable$0=[0,V1],
       _aES_=Stable$0[1][1],
       _aET_=[0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$303),0,_aES_],0],
       _aEU_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_bounded_index_ml_$2),
       group$1=caml_call2(Bin_prot_Shape[6],_aEU_,_aET_),
       _aEV_=caml_call1(Bin_prot_Shape[2][1],cst_t$304),
       bin_shape_t$1=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$1,_aEV_),0),
       bin_size_t$0=Stable$0[1][2],
       bin_write_t$0=Stable$0[1][3],
       bin_read_t$1=Stable$0[1][5],
       bin_read_t$2=Stable$0[1][6],
       compare$1=Stable$0[1][9],
       hash_fold_t$0=Stable$0[1][10],
       func=Stable$0[1][11],
       t_of_sexp$1=Stable$0[1][14],
       sexp_of_t$1=Stable$0[1][15],
       create$0=Stable$0[1][12];
      function create_all(min,max)
       {return caml_call1
                (_iO_,
                 caml_call2
                  (_i$_,
                   min,
                   function(index)
                    {if
                      (!
                       caml_call2(_Ns_,index,min)
                       &&
                       !
                       caml_call2(_Nr_,index,max))
                      return [0,
                              [0,caml_call3(create$0,index,min,max),index + 1 | 0]];
                     return 0}))}
      function index(t){return t[1]}
      function max_index(t){return t[3]}
      function min_index(t){return t[2]}
      var
       include$2=caml_call1(_e$_,[0,t_of_sexp$1,sexp_of_t$1]),
       _aEW_=include$2[1],
       _aEX_=include$2[2],
       _aEY_=
        [0,[0,caml_call1(Bin_prot_Shape[2][1],cst_t$305),0,bin_shape_t$1],0],
       _aEZ_=caml_call1(Bin_prot_Shape[4][1],cst_core_src_bounded_index_ml_$3),
       group$2=caml_call2(Bin_prot_Shape[6],_aEZ_,_aEY_),
       _aE0_=caml_call1(Bin_prot_Shape[2][1],cst_t$306),
       bin_shape_t$2=
        caml_call1(caml_call2(Bin_prot_Shape[14],group$2,_aE0_),0),
       bin_writer_t$1=[0,bin_size_t$0,bin_write_t$0],
       bin_reader_t$1=[0,bin_read_t$2,bin_read_t$1],
       bin_t$1=[0,bin_shape_t$2,bin_writer_t$1,bin_reader_t$1];
      function hash$0(x){return caml_call1(func,x)}
      var
       comparator=Stable$0[1][16],
       module_name=M[2],
       include$3=
        _AU_
         ([0,
           bin_size_t$0,
           bin_write_t$0,
           bin_read_t$2,
           bin_read_t$1,
           bin_shape_t$2,
           bin_writer_t$1,
           bin_reader_t$1,
           bin_t$1,
           compare$1,
           hash_fold_t$0,
           hash$0,
           t_of_sexp$1,
           sexp_of_t$1,
           comparator,
           _aEW_,
           _aEX_,
           module_name]),
       bin_size_t$1=include$3[1],
       bin_write_t$1=include$3[2],
       bin_read_t$3=include$3[3],
       bin_read_t$4=include$3[4],
       bin_shape_t$3=include$3[5],
       bin_writer_t$2=include$3[6],
       bin_reader_t$2=include$3[7],
       bin_t$2=include$3[8],
       t_of_sexp$2=include$3[9],
       sexp_of_t$2=include$3[10],
       of_string=include$3[11],
       to_string=include$3[12],
       pp=include$3[13],
       symbol=include$3[14],
       symbol$0=include$3[15],
       symbol$1=include$3[16],
       symbol$2=include$3[17],
       symbol$3=include$3[18],
       symbol$4=include$3[19],
       equal=include$3[20],
       compare$2=include$3[21],
       min=include$3[22],
       max=include$3[23],
       ascending=include$3[24],
       descending=include$3[25],
       between=include$3[26],
       clamp_exn=include$3[27],
       clamp=include$3[28],
       validate_lbound=include$3[29],
       validate_ubound=include$3[30],
       validate_bound=include$3[31],
       Replace_polymorphic_compare=include$3[32],
       comparator$0=include$3[33],
       Map$0=include$3[34],
       Set$0=include$3[35],
       hash_fold_t$1=include$3[36],
       hash$1=include$3[37],
       hashable=include$3[38],
       Table=include$3[39],
       Hash_set=include$3[40],
       Hash_queue=include$3[41];
      return [0,
              Stable$0,
              create$0,
              create_all,
              index,
              max_index,
              min_index,
              bin_size_t$1,
              bin_write_t$1,
              bin_read_t$3,
              bin_read_t$4,
              bin_shape_t$3,
              bin_writer_t$2,
              bin_reader_t$2,
              bin_t$2,
              t_of_sexp$2,
              sexp_of_t$2,
              of_string,
              to_string,
              pp,
              symbol,
              symbol$0,
              symbol$1,
              symbol$2,
              symbol$3,
              symbol$4,
              equal,
              compare$2,
              min,
              max,
              ascending,
              descending,
              between,
              clamp_exn,
              clamp,
              validate_lbound,
              validate_ubound,
              validate_bound,
              Replace_polymorphic_compare,
              comparator$0,
              Map$0,
              Set$0,
              hash_fold_t$1,
              hash$1,
              hashable,
              Table,
              Hash_set,
              Hash_queue]}
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$547);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core_Bounded_index$0);
    var
     Core_Bounded_index=
      [0,
       function(_aEG_)
        {var _aEH_=Make$15(_aEG_),_aEI_=_aEH_[1][1];
         return [0,
                 _aEH_[7],
                 _aEH_[8],
                 _aEH_[9],
                 _aEH_[10],
                 _aEH_[11],
                 _aEH_[12],
                 _aEH_[13],
                 _aEH_[14],
                 _aEH_[15],
                 _aEH_[16],
                 _aEH_[17],
                 _aEH_[18],
                 _aEH_[19],
                 _aEH_[20],
                 _aEH_[21],
                 _aEH_[22],
                 _aEH_[23],
                 _aEH_[24],
                 _aEH_[25],
                 _aEH_[26],
                 _aEH_[27],
                 _aEH_[28],
                 _aEH_[29],
                 _aEH_[30],
                 _aEH_[31],
                 _aEH_[32],
                 _aEH_[33],
                 _aEH_[34],
                 _aEH_[35],
                 _aEH_[36],
                 _aEH_[37],
                 _aEH_[38],
                 _aEH_[39],
                 _aEH_[40],
                 _aEH_[41],
                 _aEH_[42],
                 _aEH_[43],
                 _aEH_[44],
                 _aEH_[45],
                 _aEH_[46],
                 _aEH_[47],
                 _aEH_[2],
                 _aEH_[3],
                 _aEH_[4],
                 _aEH_[6],
                 _aEH_[5],
                 [0,
                  [0,
                   _aEI_[2],
                   _aEI_[3],
                   _aEI_[6],
                   _aEI_[5],
                   _aEI_[1],
                   _aEI_[4],
                   _aEI_[7],
                   _aEI_[8],
                   _aEI_[9],
                   _aEI_[14],
                   _aEI_[15],
                   _aEI_[16],
                   _aEI_[17],
                   _aEI_[18]]]]}];
    caml_register_global(5479,Core_Bounded_index,"Core__Bounded_index");
    caml_call1(Ppx_module_timer_runtime[4],cst_Core);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][1],cst_core$548);
    caml_call1(Expect_test_collector[5][1],cst_core_src_core_ml);
    caml_call2(Ppx_inline_test_lib_Runtime[2],cst_core$549,cst$300);
    var
     invalid_arg=include$0[1],
     failwith=include$0[2],
     Exit=include$0[3],
     Match_failure=include$0[4],
     Assert_failure$0=include$0[5],
     Invalid_argument=include$0[6],
     Failure=include$0[7],
     Not_found$0=include$0[8],
     Out_of_memory=include$0[9],
     Stack_overflow=include$0[10],
     Sys_error=include$0[11],
     End_of_file=include$0[12],
     Division_by_zero=include$0[13],
     Sys_blocked_io=include$0[14],
     Undefined_recursive_module=include$0[15],
     min$26=include$0[16],
     max$26=include$0[17],
     abs$7=include$0[18],
     max_int=include$0[19],
     min_int=include$0[20],
     lnot$4=include$0[21],
     infinity=include$0[22],
     neg_infinity=include$0[23],
     nan=include$0[24],
     max_float=include$0[25],
     min_float=include$0[26],
     epsilon_float=include$0[27],
     symbol$275=include$0[28],
     char_of_int=include$0[29],
     string_of_bool=include$0[30],
     bool_of_string_opt=include$0[31],
     bool_of_string=include$0[32],
     string_of_int=include$0[33],
     int_of_string_opt=include$0[34],
     string_of_float=include$0[35],
     float_of_string_opt=include$0[36],
     symbol$276=include$0[37],
     stdin=include$0[38],
     stdout=include$0[39],
     stderr=include$0[40],
     print_char=include$0[41],
     print_string=include$0[42],
     print_bytes=include$0[43],
     print_int=include$0[44],
     print_float=include$0[45],
     print_endline=include$0[46],
     print_newline=include$0[47],
     prerr_char=include$0[48],
     prerr_string=include$0[49],
     prerr_bytes=include$0[50],
     prerr_int=include$0[51],
     prerr_float=include$0[52],
     prerr_endline=include$0[53],
     prerr_newline=include$0[54],
     read_line=include$0[55],
     read_int_opt=include$0[56],
     read_int=include$0[57],
     read_float_opt=include$0[58],
     read_float=include$0[59],
     open_out=include$0[60],
     open_out_bin=include$0[61],
     open_out_gen=include$0[62],
     flush=include$0[63],
     flush_all=include$0[64],
     output_char=include$0[65],
     output_string=include$0[66],
     output_bytes=include$0[67],
     output$1=include$0[68],
     output_substring=include$0[69],
     output_byte=include$0[70],
     output_binary_int=include$0[71],
     output_value=include$0[72],
     seek_out=include$0[73],
     pos_out=include$0[74],
     out_channel_length=include$0[75],
     close_out=include$0[76],
     close_out_noerr=include$0[77],
     set_binary_mode_out=include$0[78],
     open_in=include$0[79],
     open_in_bin=include$0[80],
     open_in_gen=include$0[81],
     input_char=include$0[82],
     input_line=include$0[83],
     input$0=include$0[84],
     really_input=include$0[85],
     really_input_string=include$0[86],
     input_byte=include$0[87],
     input_binary_int=include$0[88],
     input_value=include$0[89],
     seek_in=include$0[90],
     pos_in=include$0[91],
     in_channel_length=include$0[92],
     close_in=include$0[93],
     close_in_noerr=include$0[94],
     set_binary_mode_in=include$0[95],
     LargeFile=include$0[96],
     string_of_format=include$0[97],
     symbol$277=include$0[98],
     exit$0=include$0[99],
     at_exit=include$0[100],
     valid_float_lexem=include$0[101],
     unsafe_really_input=include$0[102],
     do_at_exit=include$0[103],
     Condition=[0],
     Mutex=[0],
     Thread=[0],
     Unix$0=[0],
     UnixLabels=[0],
     Caml=
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure$0,
       Invalid_argument,
       Failure,
       Not_found$0,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min$26,
       max$26,
       abs$7,
       max_int,
       min_int,
       lnot$4,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       symbol$275,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       symbol$276,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       flush,
       flush_all,
       output_char,
       output_string,
       output_bytes,
       output$1,
       output_substring,
       output_byte,
       output_binary_int,
       output_value,
       seek_out,
       pos_out,
       out_channel_length,
       close_out,
       close_out_noerr,
       set_binary_mode_out,
       open_in,
       open_in_bin,
       open_in_gen,
       input_char,
       input_line,
       input$0,
       really_input,
       really_input_string,
       input_byte,
       input_binary_int,
       input_value,
       seek_in,
       pos_in,
       in_channel_length,
       close_in,
       close_in_noerr,
       set_binary_mode_in,
       LargeFile,
       string_of_format,
       symbol$277,
       exit$0,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       Condition,
       Mutex,
       Thread,
       Unix$0,
       UnixLabels],
     Mutex$0=[0],
     Thread$0=[0],
     Unix$1=[0],
     _aEB_=include$1[1],
     _aEC_=include$1[2],
     _aED_=Base_Exn[17],
     _aEE_=_ab9_[81];
    caml_call1(Base_Exn[19],0);
    var Core_private=[0];
    caml_call1(Ppx_inline_test_lib_Runtime[3],cst_core$550);
    caml_call1(Expect_test_collector[5][2],0);
    caml_call1(Ppx_bench_lib_Benchmark_accumu[1][2],0);
    caml_call1(Ppx_module_timer_runtime[5],cst_Core$0);
    var
     Core$0=
      [0,
       Caml,
       Mutex$0,
       Thread$0,
       Unix$1,
       _Fa_,
       _Fb_,
       _Fc_,
       _Ff_,
       _Fg_,
       _Fh_,
       _Fi_,
       _Fj_,
       _Fk_,
       _Fl_,
       _Fm_,
       _Fn_,
       _Fo_,
       _Fp_,
       _Fq_,
       _Fr_,
       _Fs_,
       _Ft_,
       _Fu_,
       _Fw_,
       _Fx_,
       _Fy_,
       _Fz_,
       _FA_,
       _FB_,
       _FC_,
       _FD_,
       _FE_,
       _FF_,
       _FG_,
       _FH_,
       _FI_,
       _FJ_,
       _FK_,
       _FL_,
       _FM_,
       _FN_,
       _FO_,
       _FP_,
       _FQ_,
       _FR_,
       _FS_,
       _FT_,
       _FU_,
       _FV_,
       _FW_,
       _FX_,
       _FY_,
       _FZ_,
       _F0_,
       _F1_,
       _F2_,
       _F3_,
       _F4_,
       _F5_,
       _F6_,
       _F7_,
       _F8_,
       _F9_,
       _F__,
       _F$_,
       _Ga_,
       _Gb_,
       _Gc_,
       _Gd_,
       _Ge_,
       _Gf_,
       _Gg_,
       _Gh_,
       _Gi_,
       _Gj_,
       _Gk_,
       _Gl_,
       _Gm_,
       _Gn_,
       _Go_,
       _Gp_,
       _Gq_,
       _Gr_,
       _Gs_,
       _Gt_,
       _Gu_,
       _Gv_,
       _No_,
       _Np_,
       _Nq_,
       _Nr_,
       _Ns_,
       _Nt_,
       _Nu_,
       _Nv_,
       _Nw_,
       _Nx_,
       _Ny_,
       _Nz_,
       _NA_,
       _NB_,
       _NC_,
       _ND_,
       _NE_,
       _NF_,
       _NG_,
       _NH_,
       _NI_,
       _NJ_,
       _NK_,
       _NL_,
       _NM_,
       _NN_,
       _NO_,
       _NP_,
       _NQ_,
       quickcheck_observer$12,
       _NR_,
       _NS_,
       _NT_,
       _NU_,
       _NV_,
       _NW_,
       _NX_,
       _NY_,
       _NZ_,
       quickcheck_shrinker$12,
       _N0_,
       _N1_,
       _N2_,
       _N3_,
       _N4_,
       _N5_,
       _N6_,
       _N7_,
       _N8_,
       _N9_,
       _N__,
       _N$_,
       _Oa_,
       _Ob_,
       _Oc_,
       symbol,
       _Od_,
       _Oe_,
       _Of_,
       _Og_,
       _Oh_,
       _Oi_,
       _Oj_,
       _Ok_,
       _Ol_,
       _Om_,
       _On_,
       _Oo_,
       _Op_,
       _Oq_,
       sexp_of_never_returns,
       _LC_,
       _Or_,
       _Os_,
       _Ot_,
       _Ou_,
       _Ov_,
       _Ow_,
       _Ox_,
       _Oy_,
       _Oz_,
       _OA_,
       _OB_,
       _OC_,
       _OD_,
       _OE_,
       _OF_,
       _OG_,
       _OH_,
       _OI_,
       _OJ_,
       _OK_,
       _OL_,
       _OM_,
       _ON_,
       _OO_,
       _OP_,
       _OQ_,
       _OR_,
       _OS_,
       _OT_,
       _OU_,
       _OV_,
       _OW_,
       _OX_,
       _OY_,
       _OZ_,
       _O0_,
       _O1_,
       _O2_,
       _O3_,
       _O4_,
       _O5_,
       _O6_,
       _O7_,
       _O8_,
       _O9_,
       _O__,
       _O$_,
       _Pa_,
       _Pb_,
       _Pc_,
       _Pd_,
       _Pe_,
       _Pf_,
       _Pg_,
       _Ph_,
       _Pi_,
       _Pj_,
       _Pk_,
       Bug,
       C_malloc_exn,
       Finally,
       fst3,
       snd3,
       trd3,
       uw,
       symbol$69,
       symbol$70,
       symbol$71,
       symbol$133,
       _fy_,
       _ip_,
       _fC_,
       _oB_,
       _oC_,
       failwithf$0,
       failwithp,
       failwiths,
       force,
       _fD_,
       ident,
       _Po_,
       _fw_,
       _xZ_,
       _x0_,
       _fz_,
       _oy_,
       _Pp_,
       phys_same,
       _Pq_,
       _Pr_,
       _fF_,
       _Ps_,
       _Pt_,
       _nX_,
       _HX_,
       _Pu_,
       _Pv_,
       _fx_,
       _Pw_,
       _Px_,
       _Py_,
       _Pz_,
       _PA_,
       _PB_,
       _PC_,
       _PD_,
       _PE_,
       _PF_,
       _PG_,
       _PH_,
       _PI_,
       _PJ_,
       _PK_,
       _PL_,
       _PM_,
       _PN_,
       _PO_,
       _PP_,
       bin_shape_array,
       bin_size_array,
       bin_write_array,
       bin_writer_array,
       bin_read_array$0,
       bin_read_array,
       bin_reader_array,
       bin_array,
       compare_array,
       equal_array,
       sexp_of_array,
       array_of_sexp,
       array_sexp_grammar,
       typerep_of_array,
       typename_of_array,
       bin_shape_bool,
       bin_size_bool,
       bin_write_bool,
       bin_writer_bool,
       bin_read_bool,
       bin_read_bool$0,
       bin_reader_bool,
       bin_bool,
       compare_bool,
       equal_bool,
       hash_fold_bool,
       hash_bool,
       sexp_of_bool,
       bool_of_sexp,
       bool_sexp_grammar,
       typerep_of_bool,
       typename_of_bool,
       bin_shape_char,
       bin_size_char,
       bin_write_char,
       bin_writer_char,
       bin_read_char,
       bin_read_char$0,
       bin_reader_char,
       bin_char,
       compare_char,
       equal_char,
       hash_fold_char,
       hash_char,
       sexp_of_char,
       char_of_sexp,
       char_sexp_grammar,
       typerep_of_char,
       typename_of_char,
       bin_shape_float,
       bin_size_t$4,
       bin_write_t$4,
       bin_writer_float,
       bin_read_t$9,
       bin_read_t$10,
       bin_reader_float,
       bin_float,
       compare$40,
       equal$23,
       hash_fold_t$18,
       hash_float,
       sexp_of_t$44,
       float_of_sexp,
       t_sexp_grammar$11,
       typerep_of_float,
       typename_of_float,
       bin_shape_int,
       bin_size_t$49,
       bin_write_t$49,
       bin_writer_int,
       bin_read_t$100,
       bin_read_t$101,
       bin_reader_int,
       bin_int,
       compare$42,
       equal$24,
       hash_fold_t$19,
       hash_int,
       sexp_of_int,
       int_of_sexp,
       int_sexp_grammar,
       typerep_of_int,
       typename_of_int,
       bin_shape_int32,
       bin_size_int32,
       bin_write_int32,
       bin_writer_int32,
       bin_read_int32,
       bin_read_int32$0,
       bin_reader_int32,
       bin_int32,
       compare_int32,
       equal_int32,
       hash_fold_int32,
       hash_int32,
       sexp_of_int32,
       int32_of_sexp,
       int32_sexp_grammar,
       typerep_of_int32,
       typename_of_int32,
       bin_shape_int64,
       bin_size_int64,
       bin_write_int64,
       bin_writer_int64,
       bin_read_int64,
       bin_read_int64$0,
       bin_reader_int64,
       bin_int64,
       compare_int64,
       equal_int64,
       hash_fold_int64,
       hash_int64,
       sexp_of_int64,
       int64_of_sexp,
       int64_sexp_grammar,
       typerep_of_int64,
       typename_of_int64,
       bin_shape_lazy_t,
       bin_size_lazy_t,
       bin_write_lazy_t,
       bin_writer_lazy_t,
       bin_read_lazy_t$0,
       bin_read_lazy_t,
       bin_reader_lazy_t,
       bin_lazy_t,
       compare_lazy_t,
       hash_fold_lazy_t,
       sexp_of_lazy_t,
       lazy_t_of_sexp,
       lazy_t_sexp_grammar,
       typerep_of_lazy_t,
       typename_of_lazy_t,
       bin_shape_list,
       bin_size_list,
       bin_write_list,
       bin_writer_list,
       bin_read_list$0,
       bin_read_list,
       bin_reader_list,
       bin_list,
       compare_list,
       equal_list,
       hash_fold_list,
       sexp_of_list,
       list_of_sexp,
       list_sexp_grammar,
       typerep_of_list,
       typename_of_list,
       bin_shape_nativeint,
       bin_size_nativeint,
       bin_write_nativeint,
       bin_writer_nativeint,
       bin_read_nativeint,
       bin_read_nativeint$0,
       bin_reader_nativeint,
       bin_nativeint,
       compare_nativeint,
       equal_nativeint,
       hash_fold_nativeint,
       hash_nativeint,
       sexp_of_nativeint,
       nativeint_of_sexp,
       nativeint_sexp_grammar,
       typerep_of_nativeint,
       typename_of_nativeint,
       bin_shape_option,
       bin_size_option,
       bin_write_option,
       bin_writer_option,
       bin_read_option$0,
       bin_read_option,
       bin_reader_option,
       bin_option,
       compare_option,
       equal_option,
       hash_fold_option,
       sexp_of_option,
       option_of_sexp,
       option_sexp_grammar,
       typerep_of_option,
       typename_of_option,
       bin_shape_string,
       bin_size_t$47,
       bin_write_t$47,
       bin_writer_string,
       bin_read_t$96,
       bin_read_t$97,
       bin_reader_string,
       bin_string,
       compare$37,
       equal$21,
       hash_fold_t$15,
       hash_string,
       sexp_of_t$41,
       t_of_sexp$34,
       t_sexp_grammar$8,
       typerep_of_string,
       typename_of_string,
       bin_shape_bytes,
       bin_size_bytes,
       bin_write_bytes,
       bin_writer_bytes,
       bin_read_bytes,
       bin_read_bytes$0,
       bin_reader_bytes,
       bin_bytes,
       compare_bytes,
       equal_bytes,
       sexp_of_bytes,
       bytes_of_sexp,
       bytes_sexp_grammar,
       typerep_of_bytes,
       typename_of_bytes,
       bin_shape_ref,
       bin_size_ref,
       bin_write_ref,
       bin_writer_ref,
       bin_read_ref$0,
       bin_read_ref,
       bin_reader_ref,
       bin_ref,
       compare_ref,
       equal_ref,
       sexp_of_ref,
       ref_of_sexp,
       ref_sexp_grammar,
       typerep_of_ref,
       typename_of_ref,
       bin_shape_unit,
       bin_size_unit,
       bin_write_unit,
       bin_writer_unit,
       bin_read_unit,
       bin_read_unit$0,
       bin_reader_unit,
       bin_unit,
       compare_unit,
       equal_unit,
       hash_fold_unit,
       hash_unit,
       sexp_of_unit,
       unit_of_sexp,
       unit_sexp_grammar,
       typerep_of_unit,
       typename_of_unit,
       bin_shape_float_array,
       bin_size_float_array,
       bin_write_float_array,
       bin_writer_float_array,
       bin_read_float_array$0,
       bin_read_float_array,
       bin_reader_float_array,
       bin_float_array,
       compare_float_array,
       sexp_of_float_array,
       float_array_of_sexp,
       float_array_sexp_grammar,
       typerep_of_float_array,
       typename_of_float_array,
       sexp_of_exn,
       _aEB_,
       _aEC_,
       _e8_,
       am_running_test,
       _aED_,
       _aEE_,
       symbol$234,
       Core_private];
    caml_register_global(5480,Core$0,"Core");
    return}
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
