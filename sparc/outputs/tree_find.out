[(GlobalBinding
    (DBind
       { dtyp_name = { name = "tree" };
         bind_dty =
         [{ id = { name = "Leaf" }; typ = Int };
           { id = { name = "Node" };
             typ =
             (Prod
                [Int;
                  (TParen
                     (Prod [(Typ { name = "tree" }); (Typ { name = "tree" })]))
                  ])
             }
           ]
         }));
  (GlobalBinding
     (FBind
        { func_name = { name = "find" };
          func_args =
          (PPair { p1 = (PVar { name = "t" }); p2 = (PVar { name = "x" }) });
          func_body =
          (Case
             { sum = (EVar { name = "t" });
               branches =
               [{ matchp =
                  (PCon
                     { pconstructor = { name = "Leaf" };
                       pattern = (Some (PVar { name = "y" })) });
                  exp =
                  (Infix
                     { op = Equals; e1 = (EVar { name = "x" });
                       e2 = (EVar { name = "y" }) })
                  };
                 { matchp =
                   (PCon
                      { pconstructor = { name = "Node" };
                        pattern =
                        (Some (PPair
                                 { p1 = (PVar { name = "y" });
                                   p2 =
                                   (PParen
                                      (PPair
                                         { p1 = (PVar { name = "left" });
                                           p2 = (PVar { name = "right" }) }))
                                   }))
                        });
                   exp =
                   (If
                      { guard =
                        (Infix
                           { op = Equals; e1 = (EVar { name = "x" });
                             e2 = (EVar { name = "y" }) });
                        then_branch = (Value (Lit (Bool true)));
                        else_branch =
                        (If
                           { guard =
                             (Infix
                                { op = Less; e1 = (EVar { name = "x" });
                                  e2 = (EVar { name = "y" }) });
                             then_branch =
                             (App
                                { func = (EVar { name = "find" });
                                  arg =
                                  (EParen
                                     (Sequential
                                        { first = (EVar { name = "left" });
                                          second = (EVar { name = "x" }) }))
                                  });
                             else_branch =
                             (App
                                { func = (EVar { name = "find" });
                                  arg =
                                  (EParen
                                     (Sequential
                                        { first = (EVar { name = "right" });
                                          second = (EVar { name = "x" }) }))
                                  })
                             })
                        })
                   }
                 ]
               })
          }))
  ]
