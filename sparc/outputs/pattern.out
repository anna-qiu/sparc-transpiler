[(Value (VParen (VVar { name = "x" })));
  (Value
     (VParen
        (VPair
           { v1 = (VVar { name = "y" }); v2 = (VParen (VVar { name = "x" }))
             })));
  (Value
     (VParen
        (VPair
           { v1 =
             (VParen
                (VPair
                   { v1 = (VVar { name = "x" }); v2 = (VVar { name = "y" }) }));
             v2 = (VParen (VVar { name = "z" })) })));
  (Value
     (VCon
        { vconstructor = { name = "cons" };
          value =
          (Some (VPair { v1 = (Lit (Num 10.)); v2 = (Lit (Num 20.)) })) }));
  (Value
     (Lambda
        { params = (PVar { name = "x" });
          body =
          (EParen
             (Infix
                { op = Plus; e1 = (Value (VVar { name = "x" }));
                  e2 = (Value (Lit (Num 10.))) }))
          }));
  (Value
     (Lambda
        { params =
          (PParen
             (PPair
                { p1 = (PVar { name = "a" });
                  p2 =
                  (PCon
                     { pconstructor = { name = "cons" };
                       pattern =
                       (Some (PPair
                                { p1 = (PVar { name = "x" });
                                  p2 = (PVar { name = "y" }) }))
                       })
                  }));
          body =
          (EParen
             (Infix
                { op = Plus;
                  e1 =
                  (Infix
                     { op = Times; e1 = (Value (VVar { name = "a" }));
                       e2 = (Value (VVar { name = "x" })) });
                  e2 =
                  (Infix
                     { op = Times; e1 = (Value (VVar { name = "a" }));
                       e2 = (Value (VVar { name = "y" })) })
                  }))
          }))
  ]
(x)
(y, (x))
((x, y), (z))
cons (10, 20)
fn x => (x + 10)
fn (a, cons (x, y)) => (a * x + a * y)
