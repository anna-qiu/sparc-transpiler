[(GlobalBinding
    (PBind
       { bind_pattern = (PVar { name = "a" });
         bind_exp = (Value (Lit (Num -12.))) }));
  (GlobalBinding
     (PBind
        { bind_pattern =
          (PCon
             { pconstructor = { name = "cons" };
               pattern =
               (Some (PPair
                        { p1 = (PVar { name = "x" });
                          p2 = (PVar { name = "y" }) }))
               });
          bind_exp =
          (Value
             (VParen (VPair { v1 = (Lit (Num 10.)); v2 = (Lit (Num 20.)) })))
          }));
  (GlobalBinding
     (DBind
        { dtyp_name = { name = "list" };
          bind_dty =
          [{ id = { name = "cons" };
             typ =
             (Some (TParen
                      (Prod [(Typ { name = "a" }); (Typ { name = "b" })])))
             };
            { id = { name = "nils" }; typ = (Some TUnit) };
            { id = { name = "single" }; typ = (Some Nat) }]
          }));
  (GlobalBinding
     (TBind
        { typ_name = { name = "tree" }; bind_typ = (Typ { name = "list" }) }));
  (GlobalBinding
     (FBind
        { func_name = { name = "sum" };
          func_args =
          (PPair { p1 = (PVar { name = "x" }); p2 = (PVar { name = "y" }) });
          func_body =
          (Infix
             { op = Plus; e1 = (Value (VVar { name = "x" }));
               e2 = (Value (VVar { name = "y" })) })
          }))
  ]
val a = ~12
val cons (x, y) = (10, 20)
type list = cons of (a * b) | nils of unit | single of int
type tree = list
fun sum (x, y) = x + y
